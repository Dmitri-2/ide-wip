"use strict";
var___95__prelude = do_import("StandardPrelude", gracecode_StandardPrelude);
function gracecode_ast() {
  setModuleName("ast");
  this.definitionModule = "ast";
  this.definitionLine = 0;
  var var_prelude = var___95__prelude;
  this.outer = var_prelude;
  var reader_ast_outer0 = function() {
    return this.outer;
  };
  this.methods["outer"] = reader_ast_outer0;
  setLineNumber(3);    // compilenode import
  // Import of util as util
  if (typeof gracecode_util == 'undefined')
    throw new GraceExceptionPacket(EnvironmentExceptionObject, 
      new GraceString('could not find module util'));
  var var_util = do_import("util", gracecode_util);
  var func1 = function(argcv) {    // method util
    var returnTarget = invocationCount;
    invocationCount++;
    var curarg = 1;
    setModuleName("ast");
    // util is a simple accessor - elide try ... catch
    return var_util;
  };
  func1.paramCounts = [0];
  this.methods["util"] = func1;
  func1.definitionLine = 3;
  func1.definitionModule = "ast";
  func1.debug = "import";
  func1.confidential = true;
  setModuleName("ast");
  setLineNumber(4);    // compilenode import
  // Import of identifierKinds as k
  if (typeof gracecode_identifierKinds == 'undefined')
    throw new GraceExceptionPacket(EnvironmentExceptionObject, 
      new GraceString('could not find module identifierKinds'));
  var var_k = do_import("identifierKinds", gracecode_identifierKinds);
  var func2 = function(argcv) {    // method k
    var returnTarget = invocationCount;
    invocationCount++;
    var curarg = 1;
    setModuleName("ast");
    // k is a simple accessor - elide try ... catch
    return var_k;
  };
  func2.paramCounts = [0];
  this.methods["k"] = func2;
  func2.definitionLine = 4;
  func2.definitionModule = "ast";
  func2.debug = "import";
  func2.confidential = true;
  setModuleName("ast");
  setLineNumber(19);    // compilenode method
  var func3 = function(argcv) {    // method listMap(_,_)ancestors(_)
    var returnTarget = invocationCount;
    invocationCount++;
    var curarg = 1;
    var var_l = arguments[curarg];
    curarg++;
    var var_b = arguments[curarg];
    curarg++;
    var var_as = arguments[curarg];
    curarg++;
    setModuleName("ast");
    setLineNumber(20);    // compilenode array
    var array4 = new PrimitiveGraceList([]);
    var var_newList = array4;
    setLineNumber(21);    // compilenode block
    var block6 = new GraceBlock(this, 21, 1);
    setLineNumber(1);    // compilenode identifier
    block6.real = function(var_nd) {
      setLineNumber(21);    // compilenode identifier
      // call case 6: other requests
      var call9 = callmethodChecked(var_nd, "map(1)ancestors(1)", [1, 1], var_b, var_as);
      // call case 6: other requests
      var call10 = callmethodChecked(var_newList, "addLast(1)", [1], call9);
      return call10;
    };
    // call case 6: other requests
    var call11 = callmethodChecked(var_l, "do(1)", [1], block6);
    setLineNumber(22);    // compilenode identifier
    return var_newList;
  };
  func3.confidential = true;
  func3.paramCounts = [2, 1];
  this.methods["listMap(2)ancestors(1)"] = func3;
  func3.definitionLine = 19;
  func3.definitionModule = "ast";
  setLineNumber(24);    // compilenode method
  var func12 = function(argcv) {    // method maybeMap(_,_)ancestors(_)
    var returnTarget = invocationCount;
    invocationCount++;
    var curarg = 1;
    var var_n = arguments[curarg];
    curarg++;
    var var_b = arguments[curarg];
    curarg++;
    var var_as = arguments[curarg];
    curarg++;
    setModuleName("ast");
    var if13 = GraceDone;
    setLineNumber(25);    // compilenode identifier
    var opresult16 = callmethodChecked(GraceFalse, "\u2260(1)", [1], var_n);
    if (Grace_isTrue(opresult16)) {
      setLineNumber(26);    // compilenode identifier
      // call case 6: other requests
      var call18 = callmethodChecked(var_n, "map(1)ancestors(1)", [1, 1], var_b, var_as);
      if13 = call18;
    } else {
      setLineNumber(28);    // compilenode identifier
      if13 = var_n;
    }
    return if13;
  };
  func12.confidential = true;
  func12.paramCounts = [2, 1];
  this.methods["maybeMap(2)ancestors(1)"] = func12;
  func12.definitionLine = 24;
  func12.definitionModule = "ast";
  setLineNumber(31);    // compilenode method
  var func19 = function(argcv) {    // method maybeListMap(_,_)ancestors(_)
    var returnTarget = invocationCount;
    invocationCount++;
    var curarg = 1;
    var var_n = arguments[curarg];
    curarg++;
    var var_b = arguments[curarg];
    curarg++;
    var var_as = arguments[curarg];
    curarg++;
    setModuleName("ast");
    var if20 = GraceDone;
    setLineNumber(32);    // compilenode identifier
    var opresult23 = callmethodChecked(GraceFalse, "\u2260(1)", [1], var_n);
    if (Grace_isTrue(opresult23)) {
      setLineNumber(33);    // compilenode identifier
      // call case 4: self request
      onSelf = true;
      var call25 = callmethodChecked(this, "listMap(2)ancestors(1)", [2, 1], var_n, var_b, var_as);
      if20 = call25;
    } else {
      setLineNumber(35);    // compilenode identifier
      if20 = var_n;
    }
    return if20;
  };
  func19.confidential = true;
  func19.paramCounts = [2, 1];
  this.methods["maybeListMap(2)ancestors(1)"] = func19;
  func19.definitionLine = 31;
  func19.definitionModule = "ast";
  setLineNumber(87);    // compilenode method
  var func26 = function(argcv) {    // method baseNode
    var returnTarget = invocationCount;
    invocationCount++;
    var curarg = 1;
    setModuleName("ast");
    var obj27 = Grace_allocObject(GraceObject, "baseNode");
    obj27.definitionModule = "ast";
    obj27.definitionLine = 87;
    obj27.outer = this;
    var reader_ast_outer28 = function() {
      return this.outer;
    };
    obj27.methods["outer"] = reader_ast_outer28;
    var obj_init_27 = function() {
      var origSuperDepth = superDepth;
      superDepth = obj27;
      var func29 = function(argcv) {    // method setLine(_)col(_)
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        var var_l = arguments[curarg];
        curarg++;
        var var_c = arguments[curarg];
        curarg++;
        setModuleName("ast");
        setLineNumber(96);    // compilenode identifier
        // call case 4: self request
        onSelf = true;
        var call31 = callmethodChecked(this, "line:=(1)", [1], var_l);
        setLineNumber(97);    // compilenode identifier
        // call case 4: self request
        onSelf = true;
        var call33 = callmethodChecked(this, "linePos:=(1)", [1], var_c);
        setLineNumber(98);    // compilenode identifier
        return this;
      };
      func29.paramCounts = [1, 1];
      obj27.methods["setLine(1)col(1)"] = func29;
      func29.definitionLine = 95;
      func29.definitionModule = "ast";
      var func34 = function(argcv) {    // method setPositionFrom(_)
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        var var_token = arguments[curarg];
        curarg++;
        setModuleName("ast");
        setLineNumber(101);    // compilenode member
        // call case 6: other requests
        var call37 = callmethodChecked(var_token, "line", []);
        // call case 4: self request
        onSelf = true;
        var call38 = callmethodChecked(this, "line:=(1)", [1], call37);
        setLineNumber(102);    // compilenode member
        // call case 6: other requests
        var call41 = callmethodChecked(var_token, "linePos", []);
        // call case 4: self request
        onSelf = true;
        var call42 = callmethodChecked(this, "linePos:=(1)", [1], call41);
        setLineNumber(103);    // compilenode identifier
        return this;
      };
      func34.paramCounts = [1];
      obj27.methods["setPositionFrom(1)"] = func34;
      func34.definitionLine = 100;
      func34.definitionModule = "ast";
      var func43 = function(argcv) {    // method kind
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        setLineNumber(105);    // compilenode member
        // call case 5: prelude request
        var call45 = callmethodChecked(var_prelude, "abstract", []);
        return call45;
      };
      func43.paramCounts = [0];
      obj27.methods["kind"] = func43;
      func43.definitionLine = 105;
      func43.definitionModule = "ast";
      var func46 = function(argcv) {    // method ==(_)
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        var var_other = arguments[curarg];
        curarg++;
        setModuleName("ast");
        setLineNumber(106);    // compilenode identifier
        // call case 4: self request
        onSelf = true;
        var call48 = callmethodChecked(this, "isMe(1)", [1], var_other);
        return call48;
      };
      func46.paramCounts = [1];
      obj27.methods["==(1)"] = func46;
      func46.definitionLine = 106;
      func46.definitionModule = "ast";
      var func49 = function(argcv) {    // method isAppliedOccurenceOfIdentifier
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        // isAppliedOccurenceOfIdentifier is a simple accessor - elide try ... catch
        setLineNumber(107);    // compilenode identifier
        return GraceFalse;
      };
      func49.paramCounts = [0];
      obj27.methods["isAppliedOccurenceOfIdentifier"] = func49;
      func49.definitionLine = 107;
      func49.definitionModule = "ast";
      var func50 = function(argcv) {    // method isMatchingBlock
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        // isMatchingBlock is a simple accessor - elide try ... catch
        setLineNumber(108);    // compilenode identifier
        return GraceFalse;
      };
      func50.paramCounts = [0];
      obj27.methods["isMatchingBlock"] = func50;
      func50.definitionLine = 108;
      func50.definitionModule = "ast";
      var func51 = function(argcv) {    // method isFieldDec
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        // isFieldDec is a simple accessor - elide try ... catch
        setLineNumber(109);    // compilenode identifier
        return GraceFalse;
      };
      func51.paramCounts = [0];
      obj27.methods["isFieldDec"] = func51;
      func51.definitionLine = 109;
      func51.definitionModule = "ast";
      var func52 = function(argcv) {    // method isInherits
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        // isInherits is a simple accessor - elide try ... catch
        setLineNumber(110);    // compilenode identifier
        return GraceFalse;
      };
      func52.paramCounts = [0];
      obj27.methods["isInherits"] = func52;
      func52.definitionLine = 110;
      func52.definitionModule = "ast";
      var func53 = function(argcv) {    // method isLegalInTrait
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        // isLegalInTrait is a simple accessor - elide try ... catch
        setLineNumber(111);    // compilenode identifier
        return GraceFalse;
      };
      func53.paramCounts = [0];
      obj27.methods["isLegalInTrait"] = func53;
      func53.definitionLine = 111;
      func53.definitionModule = "ast";
      var func54 = function(argcv) {    // method isMember
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        // isMember is a simple accessor - elide try ... catch
        setLineNumber(112);    // compilenode identifier
        return GraceFalse;
      };
      func54.paramCounts = [0];
      obj27.methods["isMember"] = func54;
      func54.definitionLine = 112;
      func54.definitionModule = "ast";
      var func55 = function(argcv) {    // method isMethod
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        // isMethod is a simple accessor - elide try ... catch
        setLineNumber(113);    // compilenode identifier
        return GraceFalse;
      };
      func55.paramCounts = [0];
      obj27.methods["isMethod"] = func55;
      func55.definitionLine = 113;
      func55.definitionModule = "ast";
      var func56 = function(argcv) {    // method isExecutable
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        // isExecutable is a simple accessor - elide try ... catch
        setLineNumber(114);    // compilenode identifier
        return GraceTrue;
      };
      func56.paramCounts = [0];
      obj27.methods["isExecutable"] = func56;
      func56.definitionLine = 114;
      func56.definitionModule = "ast";
      var func57 = function(argcv) {    // method isCall
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        // isCall is a simple accessor - elide try ... catch
        setLineNumber(115);    // compilenode identifier
        return GraceFalse;
      };
      func57.paramCounts = [0];
      obj27.methods["isCall"] = func57;
      func57.definitionLine = 115;
      func57.definitionModule = "ast";
      var func58 = function(argcv) {    // method isComment
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        // isComment is a simple accessor - elide try ... catch
        setLineNumber(116);    // compilenode identifier
        return GraceFalse;
      };
      func58.paramCounts = [0];
      obj27.methods["isComment"] = func58;
      func58.definitionLine = 116;
      func58.definitionModule = "ast";
      var func59 = function(argcv) {    // method isClass
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        // isClass is a simple accessor - elide try ... catch
        setLineNumber(117);    // compilenode identifier
        return GraceFalse;
      };
      func59.paramCounts = [0];
      obj27.methods["isClass"] = func59;
      func59.definitionLine = 117;
      func59.definitionModule = "ast";
      var func60 = function(argcv) {    // method inClass
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        // inClass is a simple accessor - elide try ... catch
        setLineNumber(118);    // compilenode identifier
        return GraceFalse;
      };
      func60.paramCounts = [0];
      obj27.methods["inClass"] = func60;
      func60.definitionLine = 118;
      func60.definitionModule = "ast";
      var func61 = function(argcv) {    // method isTrait
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        // isTrait is a simple accessor - elide try ... catch
        setLineNumber(119);    // compilenode identifier
        return GraceFalse;
      };
      func61.paramCounts = [0];
      obj27.methods["isTrait"] = func61;
      func61.definitionLine = 119;
      func61.definitionModule = "ast";
      var func62 = function(argcv) {    // method inTrait
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        // inTrait is a simple accessor - elide try ... catch
        setLineNumber(120);    // compilenode identifier
        return GraceFalse;
      };
      func62.paramCounts = [0];
      obj27.methods["inTrait"] = func62;
      func62.definitionLine = 120;
      func62.definitionModule = "ast";
      var func63 = function(argcv) {    // method isBind
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        // isBind is a simple accessor - elide try ... catch
        setLineNumber(121);    // compilenode identifier
        return GraceFalse;
      };
      func63.paramCounts = [0];
      obj27.methods["isBind"] = func63;
      func63.definitionLine = 121;
      func63.definitionModule = "ast";
      var func64 = function(argcv) {    // method isSelf
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        // isSelf is a simple accessor - elide try ... catch
        setLineNumber(122);    // compilenode identifier
        return GraceFalse;
      };
      func64.paramCounts = [0];
      obj27.methods["isSelf"] = func64;
      func64.definitionLine = 122;
      func64.definitionModule = "ast";
      var func65 = function(argcv) {    // method isSuper
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        // isSuper is a simple accessor - elide try ... catch
        setLineNumber(123);    // compilenode identifier
        return GraceFalse;
      };
      func65.paramCounts = [0];
      obj27.methods["isSuper"] = func65;
      func65.definitionLine = 123;
      func65.definitionModule = "ast";
      var func66 = function(argcv) {    // method isPrelude
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        // isPrelude is a simple accessor - elide try ... catch
        setLineNumber(124);    // compilenode identifier
        return GraceFalse;
      };
      func66.paramCounts = [0];
      obj27.methods["isPrelude"] = func66;
      func66.definitionLine = 124;
      func66.definitionModule = "ast";
      var func67 = function(argcv) {    // method isOuter
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        // isOuter is a simple accessor - elide try ... catch
        setLineNumber(125);    // compilenode identifier
        return GraceFalse;
      };
      func67.paramCounts = [0];
      obj27.methods["isOuter"] = func67;
      func67.definitionLine = 125;
      func67.definitionModule = "ast";
      var func68 = function(argcv) {    // method isBlock
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        // isBlock is a simple accessor - elide try ... catch
        setLineNumber(126);    // compilenode identifier
        return GraceFalse;
      };
      func68.paramCounts = [0];
      obj27.methods["isBlock"] = func68;
      func68.definitionLine = 126;
      func68.definitionModule = "ast";
      var func69 = function(argcv) {    // method isObject
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        // isObject is a simple accessor - elide try ... catch
        setLineNumber(127);    // compilenode identifier
        return GraceFalse;
      };
      func69.paramCounts = [0];
      obj27.methods["isObject"] = func69;
      func69.definitionLine = 127;
      func69.definitionModule = "ast";
      var func70 = function(argcv) {    // method isIdentifier
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        // isIdentifier is a simple accessor - elide try ... catch
        setLineNumber(128);    // compilenode identifier
        return GraceFalse;
      };
      func70.paramCounts = [0];
      obj27.methods["isIdentifier"] = func70;
      func70.definitionLine = 128;
      func70.definitionModule = "ast";
      var func71 = function(argcv) {    // method isDialect
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        // isDialect is a simple accessor - elide try ... catch
        setLineNumber(129);    // compilenode identifier
        return GraceFalse;
      };
      func71.paramCounts = [0];
      obj27.methods["isDialect"] = func71;
      func71.definitionLine = 129;
      func71.definitionModule = "ast";
      var func72 = function(argcv) {    // method isImport
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        // isImport is a simple accessor - elide try ... catch
        setLineNumber(130);    // compilenode identifier
        return GraceFalse;
      };
      func72.paramCounts = [0];
      obj27.methods["isImport"] = func72;
      func72.definitionLine = 130;
      func72.definitionModule = "ast";
      var func73 = function(argcv) {    // method isTypeDec
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        // isTypeDec is a simple accessor - elide try ... catch
        setLineNumber(131);    // compilenode identifier
        return GraceFalse;
      };
      func73.paramCounts = [0];
      obj27.methods["isTypeDec"] = func73;
      func73.definitionLine = 131;
      func73.definitionModule = "ast";
      var func74 = function(argcv) {    // method isExternal
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        // isExternal is a simple accessor - elide try ... catch
        setLineNumber(132);    // compilenode identifier
        return GraceFalse;
      };
      func74.paramCounts = [0];
      obj27.methods["isExternal"] = func74;
      func74.definitionLine = 132;
      func74.definitionModule = "ast";
      var func75 = function(argcv) {    // method canInherit
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        // canInherit is a simple accessor - elide try ... catch
        setLineNumber(133);    // compilenode identifier
        return GraceFalse;
      };
      func75.paramCounts = [0];
      obj27.methods["canInherit"] = func75;
      func75.definitionLine = 133;
      func75.definitionModule = "ast";
      var func76 = function(argcv) {    // method returnsObject
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        // returnsObject is a simple accessor - elide try ... catch
        setLineNumber(134);    // compilenode identifier
        return GraceFalse;
      };
      func76.paramCounts = [0];
      obj27.methods["returnsObject"] = func76;
      func76.definitionLine = 134;
      func76.definitionModule = "ast";
      var func77 = function(argcv) {    // method isImplicit
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        // isImplicit is a simple accessor - elide try ... catch
        setLineNumber(135);    // compilenode identifier
        return GraceFalse;
      };
      func77.paramCounts = [0];
      obj27.methods["isImplicit"] = func77;
      func77.definitionLine = 135;
      func77.definitionModule = "ast";
      var func78 = function(argcv) {    // method usesAsType(_)
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        var var_aNode = arguments[curarg];
        curarg++;
        setModuleName("ast");
        // usesAsType(_) is a simple accessor - elide try ... catch
        setLineNumber(136);    // compilenode identifier
        return GraceFalse;
      };
      func78.paramCounts = [1];
      obj27.methods["usesAsType(1)"] = func78;
      func78.definitionLine = 136;
      func78.definitionModule = "ast";
      var func79 = function(argcv) {    // method hash
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        setLineNumber(137);    // compilenode member
        // call case 6: other requests
        // call case 4: self request
        onSelf = true;
        var call82 = callmethodChecked(this, "linePos", []);
        var call83 = callmethodChecked(call82, "hash", []);
        // call case 6: other requests
        // call case 4: self request
        onSelf = true;
        var call87 = callmethodChecked(this, "line", []);
        var call88 = callmethodChecked(call87, "hash", []);
        var prod90 = callmethodChecked(call88, "*(1)", [1], call83);
        return prod90;
      };
      func79.paramCounts = [0];
      obj27.methods["hash"] = func79;
      func79.definitionLine = 137;
      func79.definitionModule = "ast";
      var func91 = function(argcv) {    // method asString
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        setLineNumber(138);    // compilenode string
        var string92 = new GraceString("");
        // call case 4: self request
        onSelf = true;
        var call95 = callmethodChecked(this, "nameString", []);
        var string97 = new GraceString(" ");
        // call case 4: self request
        onSelf = true;
        var call100 = callmethodChecked(this, "kind", []);
        var string102 = new GraceString("");
        var opresult104 = callmethodChecked(string102, "++(1)", [1], call100);
        var opresult106 = callmethodChecked(opresult104, "++(1)", [1], string97);
        var opresult108 = callmethodChecked(opresult106, "++(1)", [1], call95);
        var opresult110 = callmethodChecked(opresult108, "++(1)", [1], string92);
        return opresult110;
      };
      func91.paramCounts = [0];
      obj27.methods["asString"] = func91;
      func91.definitionLine = 138;
      func91.definitionModule = "ast";
      var func111 = function(argcv) {    // method nameString
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        setLineNumber(139);    // compilenode string
        var string112 = new GraceString("?");
        return string112;
      };
      func111.paramCounts = [0];
      obj27.methods["nameString"] = func111;
      func111.definitionLine = 139;
      func111.definitionModule = "ast";
      var func113 = function(argcv) {    // method isWritable
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        // isWritable is a simple accessor - elide try ... catch
        setLineNumber(140);    // compilenode identifier
        return GraceTrue;
      };
      func113.paramCounts = [0];
      obj27.methods["isWritable"] = func113;
      func113.definitionLine = 140;
      func113.definitionModule = "ast";
      var func114 = function(argcv) {    // method isReadable
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        // isReadable is a simple accessor - elide try ... catch
        setLineNumber(141);    // compilenode identifier
        return GraceTrue;
      };
      func114.paramCounts = [0];
      obj27.methods["isReadable"] = func114;
      func114.definitionLine = 141;
      func114.definitionModule = "ast";
      var func115 = function(argcv) {    // method isPublic
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        // isPublic is a simple accessor - elide try ... catch
        setLineNumber(142);    // compilenode identifier
        return GraceTrue;
      };
      func115.paramCounts = [0];
      obj27.methods["isPublic"] = func115;
      func115.definitionLine = 142;
      func115.definitionModule = "ast";
      var func116 = function(argcv) {    // method isConfidential
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        setLineNumber(143);    // compilenode member
        // call case 6: other requests
        // call case 4: self request
        onSelf = true;
        var call119 = callmethodChecked(this, "isPublic", []);
        var call120 = callmethodChecked(call119, "not", []);
        return call120;
      };
      func116.paramCounts = [0];
      obj27.methods["isConfidential"] = func116;
      func116.definitionLine = 143;
      func116.definitionModule = "ast";
      var func121 = function(argcv) {    // method decType
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        var if122 = GraceDone;
        setLineNumber(145);    // compilenode member
        // call case 4: self request
        onSelf = true;
        var call124 = callmethodChecked(this, "dtype", []);
        var opresult127 = callmethodChecked(GraceFalse, "==(1)", [1], call124);
        if (Grace_isTrue(opresult127)) {
          setLineNumber(146);    // compilenode identifier
          return var_unknownType;
        }
        setLineNumber(148);    // compilenode member
        // call case 4: self request
        onSelf = true;
        var call129 = callmethodChecked(this, "dtype", []);
        return call129;
      };
      func121.paramCounts = [0];
      obj27.methods["decType"] = func121;
      func121.definitionLine = 144;
      func121.definitionModule = "ast";
      var func130 = function(argcv) {    // method isSimple
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        // isSimple is a simple accessor - elide try ... catch
        setLineNumber(150);    // compilenode identifier
        return GraceTrue;
      };
      func130.paramCounts = [0];
      obj27.methods["isSimple"] = func130;
      func130.definitionLine = 150;
      func130.definitionModule = "ast";
      var func131 = function(argcv) {    // method isDelimited
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        // isDelimited is a simple accessor - elide try ... catch
        setLineNumber(151);    // compilenode identifier
        return GraceFalse;
      };
      func131.paramCounts = [0];
      obj27.methods["isDelimited"] = func131;
      func131.definitionLine = 151;
      func131.definitionModule = "ast";
      var func132 = function(argcv) {    // method description
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        setLineNumber(152);    // compilenode member
        // call case 4: self request
        onSelf = true;
        var call134 = callmethodChecked(this, "kind", []);
        return call134;
      };
      func132.paramCounts = [0];
      obj27.methods["description"] = func132;
      func132.definitionLine = 152;
      func132.definitionModule = "ast";
      var func135 = function(argcv) {    // method accept(_)
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        var var_visitor = arguments[curarg];
        curarg++;
        setModuleName("ast");
        setLineNumber(154);    // compilenode member
        // call case 6: other requests
        var call138 = callmethodChecked(var_ancestorChain, "empty", []);
        // call case 4: self request
        onSelf = true;
        var call139 = callmethodChecked(this, "accept(1)from(1)", [1, 1], var_visitor, call138);
        return call139;
      };
      func135.paramCounts = [1];
      obj27.methods["accept(1)"] = func135;
      func135.definitionLine = 153;
      func135.definitionModule = "ast";
      var func140 = function(argcv) {    // method scope
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        setLineNumber(156);    // compilenode member
        // call case 4: self request
        onSelf = true;
        var call142 = callmethodChecked(this, "symbolTable", []);
        return call142;
      };
      func140.paramCounts = [0];
      obj27.methods["scope"] = func140;
      func140.definitionLine = 156;
      func140.definitionModule = "ast";
      var func143 = function(argcv) {    // method scope:=(_)
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        var var_st = arguments[curarg];
        curarg++;
        setModuleName("ast");
        setLineNumber(162);    // compilenode identifier
        // call case 4: self request
        onSelf = true;
        var call145 = callmethodChecked(this, "symbolTable:=(1)", [1], var_st);
        return call145;
      };
      func143.paramCounts = [1];
      obj27.methods["scope:=(1)"] = func143;
      func143.definitionLine = 158;
      func143.definitionModule = "ast";
      var func146 = function(argcv) {    // method shallowCopyFieldsFrom(_)
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        var var_other = arguments[curarg];
        curarg++;
        setModuleName("ast");
        setLineNumber(166);    // compilenode member
        // call case 6: other requests
        var call149 = callmethodChecked(var_other, "register", []);
        // call case 4: self request
        onSelf = true;
        var call150 = callmethodChecked(this, "register:=(1)", [1], call149);
        setLineNumber(167);    // compilenode member
        // call case 6: other requests
        var call153 = callmethodChecked(var_other, "line", []);
        // call case 4: self request
        onSelf = true;
        var call154 = callmethodChecked(this, "line:=(1)", [1], call153);
        setLineNumber(168);    // compilenode member
        // call case 6: other requests
        var call157 = callmethodChecked(var_other, "linePos", []);
        // call case 4: self request
        onSelf = true;
        var call158 = callmethodChecked(this, "linePos:=(1)", [1], call157);
        setLineNumber(169);    // compilenode member
        // call case 6: other requests
        var call161 = callmethodChecked(var_other, "scope", []);
        // call case 4: self request
        onSelf = true;
        var call162 = callmethodChecked(this, "scope:=(1)", [1], call161);
        setLineNumber(170);    // compilenode identifier
        return this;
      };
      func146.paramCounts = [1];
      obj27.methods["shallowCopyFieldsFrom(1)"] = func146;
      func146.definitionLine = 165;
      func146.definitionModule = "ast";
      var func163 = function(argcv) {    // method pretty(_)
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        var var_depth = arguments[curarg];
        curarg++;
        setModuleName("ast");
        setLineNumber(173);    // compilenode string
        var string164 = new GraceString("");
        var var_spc = string164;
        setLineNumber(174);    // compilenode num
        var opresult168 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
        var block169 = new GraceBlock(this, 174, 1);
        setLineNumber(1);    // compilenode identifier
        block169.real = function(var_i) {
          setLineNumber(175);    // compilenode string
          var string170 = new GraceString("  ");
          var opresult173 = callmethodChecked(var_spc, "++(1)", [1], string170);
          var_spc = opresult173;
          return GraceDone;
        };
        // call case 5: prelude request
        var call174 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult168, block169);
        var if175 = GraceDone;
        setLineNumber(177);    // compilenode block
        var block176 = new GraceBlock(this, 177, 0);
        block176.real = function() {
          var string177 = new GraceString("symbols");
          // call case 6: other requests
          var call180 = callmethodChecked(var_util, "target", []);
          var opresult182 = callmethodChecked(call180, "==(1)", [1], string177);
          return opresult182;
        };
        // call case 6: other requests
        // call case 4: self request
        onSelf = true;
        var call187 = callmethodChecked(this, "scope", []);
        var call188 = callmethodChecked(call187, "node", []);
        var opresult190 = callmethodChecked(call188, "==(1)", [1], this);
        var opresult192 = callmethodChecked(opresult190, "&&(1)", [1], block176);
        if (Grace_isTrue(opresult192)) {
          setLineNumber(178);    // compilenode string
          var string193 = new GraceString("");
          // call case 6: other requests
          // call case 4: self request
          onSelf = true;
          var call197 = callmethodChecked(this, "scope", []);
          var call198 = callmethodChecked(call197, "elementScopesAsString", []);
          var string200 = new GraceString("");
          // call case 4: self request
          onSelf = true;
          var call203 = callmethodChecked(this, "scope", []);
          var string205 = new GraceString("): ");
          // call case 6: other requests
          // call case 4: self request
          onSelf = true;
          var call209 = callmethodChecked(this, "scope", []);
          var call210 = callmethodChecked(call209, "variety", []);
          var string212 = new GraceString("Symbols(");
          var string215 = new GraceString("\n");
          // call case 4: self request
          onSelf = true;
          var call218 = callmethodChecked(this, "description", []);
          var string220 = new GraceString(" ");
          // call case 4: self request
          onSelf = true;
          var call223 = callmethodChecked(this, "linePos", []);
          var string225 = new GraceString(":");
          // call case 4: self request
          onSelf = true;
          var call228 = callmethodChecked(this, "line", []);
          var string230 = new GraceString("");
          var opresult232 = callmethodChecked(string230, "++(1)", [1], call228);
          var opresult234 = callmethodChecked(opresult232, "++(1)", [1], string225);
          var opresult236 = callmethodChecked(opresult234, "++(1)", [1], call223);
          var opresult238 = callmethodChecked(opresult236, "++(1)", [1], string220);
          var opresult240 = callmethodChecked(opresult238, "++(1)", [1], call218);
          var opresult242 = callmethodChecked(opresult240, "++(1)", [1], string215);
          var opresult244 = callmethodChecked(opresult242, "++(1)", [1], var_spc);
          var opresult246 = callmethodChecked(opresult244, "++(1)", [1], string212);
          var opresult248 = callmethodChecked(opresult246, "++(1)", [1], call210);
          var opresult250 = callmethodChecked(opresult248, "++(1)", [1], string205);
          var opresult252 = callmethodChecked(opresult250, "++(1)", [1], call203);
          var opresult254 = callmethodChecked(opresult252, "++(1)", [1], string200);
          var opresult256 = callmethodChecked(opresult254, "++(1)", [1], call198);
          var opresult258 = callmethodChecked(opresult256, "++(1)", [1], string193);
          if175 = opresult258;
        } else {
          var if259 = GraceDone;
          setLineNumber(179);    // compilenode string
          var string260 = new GraceString("fake");
          // call case 6: other requests
          // call case 4: self request
          onSelf = true;
          var call264 = callmethodChecked(this, "scope", []);
          var call265 = callmethodChecked(call264, "variety", []);
          var opresult267 = callmethodChecked(call265, "==(1)", [1], string260);
          if (Grace_isTrue(opresult267)) {
            setLineNumber(180);    // compilenode string
            var string268 = new GraceString("");
            // call case 4: self request
            onSelf = true;
            var call271 = callmethodChecked(this, "description", []);
            var string273 = new GraceString(" ");
            // call case 4: self request
            onSelf = true;
            var call276 = callmethodChecked(this, "linePos", []);
            var string278 = new GraceString(":");
            // call case 4: self request
            onSelf = true;
            var call281 = callmethodChecked(this, "line", []);
            var string283 = new GraceString("");
            var opresult285 = callmethodChecked(string283, "++(1)", [1], call281);
            var opresult287 = callmethodChecked(opresult285, "++(1)", [1], string278);
            var opresult289 = callmethodChecked(opresult287, "++(1)", [1], call276);
            var opresult291 = callmethodChecked(opresult289, "++(1)", [1], string273);
            var opresult293 = callmethodChecked(opresult291, "++(1)", [1], call271);
            var opresult295 = callmethodChecked(opresult293, "++(1)", [1], string268);
            if259 = opresult295;
          } else {
            setLineNumber(182);    // compilenode string
            var string296 = new GraceString("");
            // call case 6: other requests
            // call case 4: self request
            onSelf = true;
            var call300 = callmethodChecked(this, "scope", []);
            var call301 = callmethodChecked(call300, "asDebugString", []);
            var string303 = new GraceString(" ");
            // call case 4: self request
            onSelf = true;
            var call306 = callmethodChecked(this, "description", []);
            var string308 = new GraceString(" ");
            // call case 4: self request
            onSelf = true;
            var call311 = callmethodChecked(this, "linePos", []);
            var string313 = new GraceString(":");
            // call case 4: self request
            onSelf = true;
            var call316 = callmethodChecked(this, "line", []);
            var string318 = new GraceString("");
            var opresult320 = callmethodChecked(string318, "++(1)", [1], call316);
            var opresult322 = callmethodChecked(opresult320, "++(1)", [1], string313);
            var opresult324 = callmethodChecked(opresult322, "++(1)", [1], call311);
            var opresult326 = callmethodChecked(opresult324, "++(1)", [1], string308);
            var opresult328 = callmethodChecked(opresult326, "++(1)", [1], call306);
            var opresult330 = callmethodChecked(opresult328, "++(1)", [1], string303);
            var opresult332 = callmethodChecked(opresult330, "++(1)", [1], call301);
            var opresult334 = callmethodChecked(opresult332, "++(1)", [1], string296);
            if259 = opresult334;
          }
          if175 = if259;
        }
        return if175;
      };
      func163.paramCounts = [1];
      obj27.methods["pretty(1)"] = func163;
      func163.definitionLine = 172;
      func163.definitionModule = "ast";
      var func335 = function(argcv) {    // method deepCopy
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        setLineNumber(186);    // compilenode block
        var block337 = new GraceBlock(this, 186, 1);
        setLineNumber(1);    // compilenode identifier
        block337.real = function(var_each) {
          setLineNumber(186);    // compilenode identifier
          return var_each;
        };
        // call case 6: other requests
        var call339 = callmethodChecked(var_ancestorChain, "empty", []);
        // call case 4: self request
        onSelf = true;
        var call340 = callmethodChecked(this, "map(1)ancestors(1)", [1, 1], block337, call339);
        return call340;
      };
      func335.paramCounts = [0];
      obj27.methods["deepCopy"] = func335;
      func335.definitionLine = 185;
      func335.definitionModule = "ast";
      var func341 = function(argcv) {    // method enclosingObject
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        setLineNumber(189);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        // call case 4: self request
        onSelf = true;
        var call345 = callmethodChecked(this, "scope", []);
        var call346 = callmethodChecked(call345, "enclosingObjectScope", []);
        var call347 = callmethodChecked(call346, "node", []);
        var var_obj = call347;
        setLineNumber(190);    // compilenode identifier
        return var_obj;
      };
      func341.paramCounts = [0];
      obj27.methods["enclosingObject"] = func341;
      func341.definitionLine = 188;
      func341.definitionModule = "ast";
      var func348 = function(argcv) {    // method addComment(_)
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        var var_cmtNode = arguments[curarg];
        curarg++;
        setModuleName("ast");
        var if349 = GraceDone;
        setLineNumber(193);    // compilenode member
        // call case 4: self request
        onSelf = true;
        var call351 = callmethodChecked(this, "comments", []);
        var opresult354 = callmethodChecked(GraceFalse, "==(1)", [1], call351);
        if (Grace_isTrue(opresult354)) {
          setLineNumber(194);    // compilenode identifier
          // call case 4: self request
          onSelf = true;
          var call356 = callmethodChecked(this, "comments:=(1)", [1], var_cmtNode);
          if349 = call356;
        } else {
          setLineNumber(196);    // compilenode identifier
          // call case 6: other requests
          // call case 4: self request
          onSelf = true;
          var call359 = callmethodChecked(this, "comments", []);
          var call360 = callmethodChecked(call359, "extendCommentUsing(1)", [1], var_cmtNode);
          if349 = call360;
        }
        return if349;
      };
      func348.paramCounts = [1];
      obj27.methods["addComment(1)"] = func348;
      func348.definitionLine = 192;
      func348.definitionModule = "ast";
      var func361 = function(argcv) {    // method addComments(_)
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        var var_cmtNodeList = arguments[curarg];
        curarg++;
        setModuleName("ast");
        setLineNumber(200);    // compilenode block
        var block363 = new GraceBlock(this, 200, 1);
        setLineNumber(1);    // compilenode identifier
        block363.real = function(var_each) {
          setLineNumber(200);    // compilenode identifier
          // call case 4: self request
          onSelf = true;
          var call365 = callmethodChecked(this, "addComment(1)", [1], var_each);
          return call365;
        };
        // call case 6: other requests
        var call366 = callmethodChecked(var_cmtNodeList, "do(1)", [1], block363);
        return call366;
      };
      func361.paramCounts = [1];
      obj27.methods["addComments(1)"] = func361;
      func361.definitionLine = 199;
      func361.definitionModule = "ast";
      var func367 = function(argcv) {    // method statementName
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        setLineNumber(202);    // compilenode member
        // call case 4: self request
        onSelf = true;
        var call369 = callmethodChecked(this, "kind", []);
        return call369;
      };
      func367.paramCounts = [0];
      obj27.methods["statementName"] = func367;
      func367.definitionLine = 202;
      func367.definitionModule = "ast";
      setLineNumber(89);    // compilenode string
      var string370 = new GraceString("");
      obj27.data["register"] = string370;
      var reader_ast_register371 = function() {
        return this.data["register"];
      };
      obj27.methods["register"] = reader_ast_register371;
      obj27.data["register"] = string370;
      var writer_ast_register371 = function(argcv, o) {
        this.data["register"] = o;
        return GraceDone;
      };
      obj27.methods["register:=(1)"] = writer_ast_register371;
      obj27.mutable = true;
      setLineNumber(90);    // compilenode member
      // call case 6: other requests
      var call373 = callmethodChecked(var_util, "linenum", []);
      obj27.data["line"] = call373;
      var reader_ast_line374 = function() {
        return this.data["line"];
      };
      obj27.methods["line"] = reader_ast_line374;
      obj27.data["line"] = call373;
      var writer_ast_line374 = function(argcv, o) {
        this.data["line"] = o;
        return GraceDone;
      };
      obj27.methods["line:=(1)"] = writer_ast_line374;
      obj27.mutable = true;
      setLineNumber(91);    // compilenode member
      // call case 6: other requests
      var call376 = callmethodChecked(var_util, "linepos", []);
      obj27.data["linePos"] = call376;
      var reader_ast_linePos377 = function() {
        return this.data["linePos"];
      };
      obj27.methods["linePos"] = reader_ast_linePos377;
      obj27.data["linePos"] = call376;
      var writer_ast_linePos377 = function(argcv, o) {
        this.data["linePos"] = o;
        return GraceDone;
      };
      obj27.methods["linePos:=(1)"] = writer_ast_linePos377;
      obj27.mutable = true;
      setLineNumber(92);    // compilenode identifier
      obj27.data["symbolTable"] = var_fakeSymbolTable;
      var reader_ast_symbolTable378 = function() {
        return this.data["symbolTable"];
      };
      obj27.methods["symbolTable"] = reader_ast_symbolTable378;
      obj27.data["symbolTable"] = var_fakeSymbolTable;
      var writer_ast_symbolTable378 = function(argcv, o) {
        this.data["symbolTable"] = o;
        return GraceDone;
      };
      obj27.methods["symbolTable:=(1)"] = writer_ast_symbolTable378;
      reader_ast_symbolTable378.confidential = true;
      writer_ast_symbolTable378.confidential = true;
      obj27.mutable = true;
      setLineNumber(93);    // compilenode identifier
      obj27.data["comments"] = GraceFalse;
      var reader_ast_comments379 = function() {
        return this.data["comments"];
      };
      obj27.methods["comments"] = reader_ast_comments379;
      obj27.data["comments"] = GraceFalse;
      var writer_ast_comments379 = function(argcv, o) {
        this.data["comments"] = o;
        return GraceDone;
      };
      obj27.methods["comments:=(1)"] = writer_ast_comments379;
      obj27.mutable = true;
      superDepth = origSuperDepth;
    };
    obj_init_27.apply(obj27, []);
    return obj27;
  };
  func26.paramCounts = [0];
  this.methods["baseNode"] = func26;
  func26.definitionLine = 87;
  func26.definitionModule = "ast";
    var func380 = function(argcv) {    // method baseNode$object(_)
      var curarg = 1;
      var inheritingObject = arguments[curarg++];
      // Start argument processing
      curarg = 1;
      // End argument processing
      setModuleName("ast");
      var returnTarget = invocationCount;
      invocationCount++;
      var obj381 = Grace_allocObject(GraceObject, "baseNode");
      obj381.definitionModule = "ast";
      obj381.definitionLine = 87;
      var inho381 = inheritingObject;
      while (inho381.superobj) inho381 = inho381.superobj;
      inho381.superobj = obj381;
      obj381.data = inheritingObject.data;
      if (inheritingObject.hasOwnProperty('_value'))
        obj381._value = inheritingObject._value;
      obj381.outer = this;
      var reader_ast_outer382 = function() {
        return this.outer;
      };
      obj381.methods["outer"] = reader_ast_outer382;
      var obj_init_381 = function() {
        var origSuperDepth = superDepth;
        superDepth = obj381;
        var func383 = function(argcv) {    // method setLine(_)col(_)
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          var var_l = arguments[curarg];
          curarg++;
          var var_c = arguments[curarg];
          curarg++;
          setModuleName("ast");
          setLineNumber(96);    // compilenode identifier
          // call case 4: self request
          onSelf = true;
          var call385 = callmethodChecked(this, "line:=(1)", [1], var_l);
          setLineNumber(97);    // compilenode identifier
          // call case 4: self request
          onSelf = true;
          var call387 = callmethodChecked(this, "linePos:=(1)", [1], var_c);
          setLineNumber(98);    // compilenode identifier
          return this;
        };
        func383.paramCounts = [1, 1];
        obj381.methods["setLine(1)col(1)"] = func383;
        func383.definitionLine = 95;
        func383.definitionModule = "ast";
        var func388 = function(argcv) {    // method setPositionFrom(_)
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          var var_token = arguments[curarg];
          curarg++;
          setModuleName("ast");
          setLineNumber(101);    // compilenode member
          // call case 6: other requests
          var call391 = callmethodChecked(var_token, "line", []);
          // call case 4: self request
          onSelf = true;
          var call392 = callmethodChecked(this, "line:=(1)", [1], call391);
          setLineNumber(102);    // compilenode member
          // call case 6: other requests
          var call395 = callmethodChecked(var_token, "linePos", []);
          // call case 4: self request
          onSelf = true;
          var call396 = callmethodChecked(this, "linePos:=(1)", [1], call395);
          setLineNumber(103);    // compilenode identifier
          return this;
        };
        func388.paramCounts = [1];
        obj381.methods["setPositionFrom(1)"] = func388;
        func388.definitionLine = 100;
        func388.definitionModule = "ast";
        var func397 = function(argcv) {    // method kind
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          setLineNumber(105);    // compilenode member
          // call case 5: prelude request
          var call399 = callmethodChecked(var_prelude, "abstract", []);
          return call399;
        };
        func397.paramCounts = [0];
        obj381.methods["kind"] = func397;
        func397.definitionLine = 105;
        func397.definitionModule = "ast";
        var func400 = function(argcv) {    // method ==(_)
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          var var_other = arguments[curarg];
          curarg++;
          setModuleName("ast");
          setLineNumber(106);    // compilenode identifier
          // call case 4: self request
          onSelf = true;
          var call402 = callmethodChecked(this, "isMe(1)", [1], var_other);
          return call402;
        };
        func400.paramCounts = [1];
        obj381.methods["==(1)"] = func400;
        func400.definitionLine = 106;
        func400.definitionModule = "ast";
        var func403 = function(argcv) {    // method isAppliedOccurenceOfIdentifier
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          // isAppliedOccurenceOfIdentifier is a simple accessor - elide try ... catch
          setLineNumber(107);    // compilenode identifier
          return GraceFalse;
        };
        func403.paramCounts = [0];
        obj381.methods["isAppliedOccurenceOfIdentifier"] = func403;
        func403.definitionLine = 107;
        func403.definitionModule = "ast";
        var func404 = function(argcv) {    // method isMatchingBlock
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          // isMatchingBlock is a simple accessor - elide try ... catch
          setLineNumber(108);    // compilenode identifier
          return GraceFalse;
        };
        func404.paramCounts = [0];
        obj381.methods["isMatchingBlock"] = func404;
        func404.definitionLine = 108;
        func404.definitionModule = "ast";
        var func405 = function(argcv) {    // method isFieldDec
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          // isFieldDec is a simple accessor - elide try ... catch
          setLineNumber(109);    // compilenode identifier
          return GraceFalse;
        };
        func405.paramCounts = [0];
        obj381.methods["isFieldDec"] = func405;
        func405.definitionLine = 109;
        func405.definitionModule = "ast";
        var func406 = function(argcv) {    // method isInherits
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          // isInherits is a simple accessor - elide try ... catch
          setLineNumber(110);    // compilenode identifier
          return GraceFalse;
        };
        func406.paramCounts = [0];
        obj381.methods["isInherits"] = func406;
        func406.definitionLine = 110;
        func406.definitionModule = "ast";
        var func407 = function(argcv) {    // method isLegalInTrait
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          // isLegalInTrait is a simple accessor - elide try ... catch
          setLineNumber(111);    // compilenode identifier
          return GraceFalse;
        };
        func407.paramCounts = [0];
        obj381.methods["isLegalInTrait"] = func407;
        func407.definitionLine = 111;
        func407.definitionModule = "ast";
        var func408 = function(argcv) {    // method isMember
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          // isMember is a simple accessor - elide try ... catch
          setLineNumber(112);    // compilenode identifier
          return GraceFalse;
        };
        func408.paramCounts = [0];
        obj381.methods["isMember"] = func408;
        func408.definitionLine = 112;
        func408.definitionModule = "ast";
        var func409 = function(argcv) {    // method isMethod
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          // isMethod is a simple accessor - elide try ... catch
          setLineNumber(113);    // compilenode identifier
          return GraceFalse;
        };
        func409.paramCounts = [0];
        obj381.methods["isMethod"] = func409;
        func409.definitionLine = 113;
        func409.definitionModule = "ast";
        var func410 = function(argcv) {    // method isExecutable
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          // isExecutable is a simple accessor - elide try ... catch
          setLineNumber(114);    // compilenode identifier
          return GraceTrue;
        };
        func410.paramCounts = [0];
        obj381.methods["isExecutable"] = func410;
        func410.definitionLine = 114;
        func410.definitionModule = "ast";
        var func411 = function(argcv) {    // method isCall
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          // isCall is a simple accessor - elide try ... catch
          setLineNumber(115);    // compilenode identifier
          return GraceFalse;
        };
        func411.paramCounts = [0];
        obj381.methods["isCall"] = func411;
        func411.definitionLine = 115;
        func411.definitionModule = "ast";
        var func412 = function(argcv) {    // method isComment
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          // isComment is a simple accessor - elide try ... catch
          setLineNumber(116);    // compilenode identifier
          return GraceFalse;
        };
        func412.paramCounts = [0];
        obj381.methods["isComment"] = func412;
        func412.definitionLine = 116;
        func412.definitionModule = "ast";
        var func413 = function(argcv) {    // method isClass
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          // isClass is a simple accessor - elide try ... catch
          setLineNumber(117);    // compilenode identifier
          return GraceFalse;
        };
        func413.paramCounts = [0];
        obj381.methods["isClass"] = func413;
        func413.definitionLine = 117;
        func413.definitionModule = "ast";
        var func414 = function(argcv) {    // method inClass
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          // inClass is a simple accessor - elide try ... catch
          setLineNumber(118);    // compilenode identifier
          return GraceFalse;
        };
        func414.paramCounts = [0];
        obj381.methods["inClass"] = func414;
        func414.definitionLine = 118;
        func414.definitionModule = "ast";
        var func415 = function(argcv) {    // method isTrait
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          // isTrait is a simple accessor - elide try ... catch
          setLineNumber(119);    // compilenode identifier
          return GraceFalse;
        };
        func415.paramCounts = [0];
        obj381.methods["isTrait"] = func415;
        func415.definitionLine = 119;
        func415.definitionModule = "ast";
        var func416 = function(argcv) {    // method inTrait
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          // inTrait is a simple accessor - elide try ... catch
          setLineNumber(120);    // compilenode identifier
          return GraceFalse;
        };
        func416.paramCounts = [0];
        obj381.methods["inTrait"] = func416;
        func416.definitionLine = 120;
        func416.definitionModule = "ast";
        var func417 = function(argcv) {    // method isBind
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          // isBind is a simple accessor - elide try ... catch
          setLineNumber(121);    // compilenode identifier
          return GraceFalse;
        };
        func417.paramCounts = [0];
        obj381.methods["isBind"] = func417;
        func417.definitionLine = 121;
        func417.definitionModule = "ast";
        var func418 = function(argcv) {    // method isSelf
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          // isSelf is a simple accessor - elide try ... catch
          setLineNumber(122);    // compilenode identifier
          return GraceFalse;
        };
        func418.paramCounts = [0];
        obj381.methods["isSelf"] = func418;
        func418.definitionLine = 122;
        func418.definitionModule = "ast";
        var func419 = function(argcv) {    // method isSuper
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          // isSuper is a simple accessor - elide try ... catch
          setLineNumber(123);    // compilenode identifier
          return GraceFalse;
        };
        func419.paramCounts = [0];
        obj381.methods["isSuper"] = func419;
        func419.definitionLine = 123;
        func419.definitionModule = "ast";
        var func420 = function(argcv) {    // method isPrelude
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          // isPrelude is a simple accessor - elide try ... catch
          setLineNumber(124);    // compilenode identifier
          return GraceFalse;
        };
        func420.paramCounts = [0];
        obj381.methods["isPrelude"] = func420;
        func420.definitionLine = 124;
        func420.definitionModule = "ast";
        var func421 = function(argcv) {    // method isOuter
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          // isOuter is a simple accessor - elide try ... catch
          setLineNumber(125);    // compilenode identifier
          return GraceFalse;
        };
        func421.paramCounts = [0];
        obj381.methods["isOuter"] = func421;
        func421.definitionLine = 125;
        func421.definitionModule = "ast";
        var func422 = function(argcv) {    // method isBlock
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          // isBlock is a simple accessor - elide try ... catch
          setLineNumber(126);    // compilenode identifier
          return GraceFalse;
        };
        func422.paramCounts = [0];
        obj381.methods["isBlock"] = func422;
        func422.definitionLine = 126;
        func422.definitionModule = "ast";
        var func423 = function(argcv) {    // method isObject
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          // isObject is a simple accessor - elide try ... catch
          setLineNumber(127);    // compilenode identifier
          return GraceFalse;
        };
        func423.paramCounts = [0];
        obj381.methods["isObject"] = func423;
        func423.definitionLine = 127;
        func423.definitionModule = "ast";
        var func424 = function(argcv) {    // method isIdentifier
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          // isIdentifier is a simple accessor - elide try ... catch
          setLineNumber(128);    // compilenode identifier
          return GraceFalse;
        };
        func424.paramCounts = [0];
        obj381.methods["isIdentifier"] = func424;
        func424.definitionLine = 128;
        func424.definitionModule = "ast";
        var func425 = function(argcv) {    // method isDialect
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          // isDialect is a simple accessor - elide try ... catch
          setLineNumber(129);    // compilenode identifier
          return GraceFalse;
        };
        func425.paramCounts = [0];
        obj381.methods["isDialect"] = func425;
        func425.definitionLine = 129;
        func425.definitionModule = "ast";
        var func426 = function(argcv) {    // method isImport
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          // isImport is a simple accessor - elide try ... catch
          setLineNumber(130);    // compilenode identifier
          return GraceFalse;
        };
        func426.paramCounts = [0];
        obj381.methods["isImport"] = func426;
        func426.definitionLine = 130;
        func426.definitionModule = "ast";
        var func427 = function(argcv) {    // method isTypeDec
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          // isTypeDec is a simple accessor - elide try ... catch
          setLineNumber(131);    // compilenode identifier
          return GraceFalse;
        };
        func427.paramCounts = [0];
        obj381.methods["isTypeDec"] = func427;
        func427.definitionLine = 131;
        func427.definitionModule = "ast";
        var func428 = function(argcv) {    // method isExternal
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          // isExternal is a simple accessor - elide try ... catch
          setLineNumber(132);    // compilenode identifier
          return GraceFalse;
        };
        func428.paramCounts = [0];
        obj381.methods["isExternal"] = func428;
        func428.definitionLine = 132;
        func428.definitionModule = "ast";
        var func429 = function(argcv) {    // method canInherit
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          // canInherit is a simple accessor - elide try ... catch
          setLineNumber(133);    // compilenode identifier
          return GraceFalse;
        };
        func429.paramCounts = [0];
        obj381.methods["canInherit"] = func429;
        func429.definitionLine = 133;
        func429.definitionModule = "ast";
        var func430 = function(argcv) {    // method returnsObject
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          // returnsObject is a simple accessor - elide try ... catch
          setLineNumber(134);    // compilenode identifier
          return GraceFalse;
        };
        func430.paramCounts = [0];
        obj381.methods["returnsObject"] = func430;
        func430.definitionLine = 134;
        func430.definitionModule = "ast";
        var func431 = function(argcv) {    // method isImplicit
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          // isImplicit is a simple accessor - elide try ... catch
          setLineNumber(135);    // compilenode identifier
          return GraceFalse;
        };
        func431.paramCounts = [0];
        obj381.methods["isImplicit"] = func431;
        func431.definitionLine = 135;
        func431.definitionModule = "ast";
        var func432 = function(argcv) {    // method usesAsType(_)
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          var var_aNode = arguments[curarg];
          curarg++;
          setModuleName("ast");
          // usesAsType(_) is a simple accessor - elide try ... catch
          setLineNumber(136);    // compilenode identifier
          return GraceFalse;
        };
        func432.paramCounts = [1];
        obj381.methods["usesAsType(1)"] = func432;
        func432.definitionLine = 136;
        func432.definitionModule = "ast";
        var func433 = function(argcv) {    // method hash
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          setLineNumber(137);    // compilenode member
          // call case 6: other requests
          // call case 4: self request
          onSelf = true;
          var call436 = callmethodChecked(this, "linePos", []);
          var call437 = callmethodChecked(call436, "hash", []);
          // call case 6: other requests
          // call case 4: self request
          onSelf = true;
          var call441 = callmethodChecked(this, "line", []);
          var call442 = callmethodChecked(call441, "hash", []);
          var prod444 = callmethodChecked(call442, "*(1)", [1], call437);
          return prod444;
        };
        func433.paramCounts = [0];
        obj381.methods["hash"] = func433;
        func433.definitionLine = 137;
        func433.definitionModule = "ast";
        var func445 = function(argcv) {    // method asString
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          setLineNumber(138);    // compilenode string
          var string446 = new GraceString("");
          // call case 4: self request
          onSelf = true;
          var call449 = callmethodChecked(this, "nameString", []);
          var string451 = new GraceString(" ");
          // call case 4: self request
          onSelf = true;
          var call454 = callmethodChecked(this, "kind", []);
          var string456 = new GraceString("");
          var opresult458 = callmethodChecked(string456, "++(1)", [1], call454);
          var opresult460 = callmethodChecked(opresult458, "++(1)", [1], string451);
          var opresult462 = callmethodChecked(opresult460, "++(1)", [1], call449);
          var opresult464 = callmethodChecked(opresult462, "++(1)", [1], string446);
          return opresult464;
        };
        func445.paramCounts = [0];
        obj381.methods["asString"] = func445;
        func445.definitionLine = 138;
        func445.definitionModule = "ast";
        var func465 = function(argcv) {    // method nameString
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          setLineNumber(139);    // compilenode string
          var string466 = new GraceString("?");
          return string466;
        };
        func465.paramCounts = [0];
        obj381.methods["nameString"] = func465;
        func465.definitionLine = 139;
        func465.definitionModule = "ast";
        var func467 = function(argcv) {    // method isWritable
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          // isWritable is a simple accessor - elide try ... catch
          setLineNumber(140);    // compilenode identifier
          return GraceTrue;
        };
        func467.paramCounts = [0];
        obj381.methods["isWritable"] = func467;
        func467.definitionLine = 140;
        func467.definitionModule = "ast";
        var func468 = function(argcv) {    // method isReadable
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          // isReadable is a simple accessor - elide try ... catch
          setLineNumber(141);    // compilenode identifier
          return GraceTrue;
        };
        func468.paramCounts = [0];
        obj381.methods["isReadable"] = func468;
        func468.definitionLine = 141;
        func468.definitionModule = "ast";
        var func469 = function(argcv) {    // method isPublic
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          // isPublic is a simple accessor - elide try ... catch
          setLineNumber(142);    // compilenode identifier
          return GraceTrue;
        };
        func469.paramCounts = [0];
        obj381.methods["isPublic"] = func469;
        func469.definitionLine = 142;
        func469.definitionModule = "ast";
        var func470 = function(argcv) {    // method isConfidential
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          setLineNumber(143);    // compilenode member
          // call case 6: other requests
          // call case 4: self request
          onSelf = true;
          var call473 = callmethodChecked(this, "isPublic", []);
          var call474 = callmethodChecked(call473, "not", []);
          return call474;
        };
        func470.paramCounts = [0];
        obj381.methods["isConfidential"] = func470;
        func470.definitionLine = 143;
        func470.definitionModule = "ast";
        var func475 = function(argcv) {    // method decType
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          var if476 = GraceDone;
          setLineNumber(145);    // compilenode member
          // call case 4: self request
          onSelf = true;
          var call478 = callmethodChecked(this, "dtype", []);
          var opresult481 = callmethodChecked(GraceFalse, "==(1)", [1], call478);
          if (Grace_isTrue(opresult481)) {
            setLineNumber(146);    // compilenode identifier
            return var_unknownType;
          }
          setLineNumber(148);    // compilenode member
          // call case 4: self request
          onSelf = true;
          var call483 = callmethodChecked(this, "dtype", []);
          return call483;
        };
        func475.paramCounts = [0];
        obj381.methods["decType"] = func475;
        func475.definitionLine = 144;
        func475.definitionModule = "ast";
        var func484 = function(argcv) {    // method isSimple
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          // isSimple is a simple accessor - elide try ... catch
          setLineNumber(150);    // compilenode identifier
          return GraceTrue;
        };
        func484.paramCounts = [0];
        obj381.methods["isSimple"] = func484;
        func484.definitionLine = 150;
        func484.definitionModule = "ast";
        var func485 = function(argcv) {    // method isDelimited
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          // isDelimited is a simple accessor - elide try ... catch
          setLineNumber(151);    // compilenode identifier
          return GraceFalse;
        };
        func485.paramCounts = [0];
        obj381.methods["isDelimited"] = func485;
        func485.definitionLine = 151;
        func485.definitionModule = "ast";
        var func486 = function(argcv) {    // method description
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          setLineNumber(152);    // compilenode member
          // call case 4: self request
          onSelf = true;
          var call488 = callmethodChecked(this, "kind", []);
          return call488;
        };
        func486.paramCounts = [0];
        obj381.methods["description"] = func486;
        func486.definitionLine = 152;
        func486.definitionModule = "ast";
        var func489 = function(argcv) {    // method accept(_)
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          var var_visitor = arguments[curarg];
          curarg++;
          setModuleName("ast");
          setLineNumber(154);    // compilenode member
          // call case 6: other requests
          var call492 = callmethodChecked(var_ancestorChain, "empty", []);
          // call case 4: self request
          onSelf = true;
          var call493 = callmethodChecked(this, "accept(1)from(1)", [1, 1], var_visitor, call492);
          return call493;
        };
        func489.paramCounts = [1];
        obj381.methods["accept(1)"] = func489;
        func489.definitionLine = 153;
        func489.definitionModule = "ast";
        var func494 = function(argcv) {    // method scope
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          setLineNumber(156);    // compilenode member
          // call case 4: self request
          onSelf = true;
          var call496 = callmethodChecked(this, "symbolTable", []);
          return call496;
        };
        func494.paramCounts = [0];
        obj381.methods["scope"] = func494;
        func494.definitionLine = 156;
        func494.definitionModule = "ast";
        var func497 = function(argcv) {    // method scope:=(_)
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          var var_st = arguments[curarg];
          curarg++;
          setModuleName("ast");
          setLineNumber(162);    // compilenode identifier
          // call case 4: self request
          onSelf = true;
          var call499 = callmethodChecked(this, "symbolTable:=(1)", [1], var_st);
          return call499;
        };
        func497.paramCounts = [1];
        obj381.methods["scope:=(1)"] = func497;
        func497.definitionLine = 158;
        func497.definitionModule = "ast";
        var func500 = function(argcv) {    // method shallowCopyFieldsFrom(_)
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          var var_other = arguments[curarg];
          curarg++;
          setModuleName("ast");
          setLineNumber(166);    // compilenode member
          // call case 6: other requests
          var call503 = callmethodChecked(var_other, "register", []);
          // call case 4: self request
          onSelf = true;
          var call504 = callmethodChecked(this, "register:=(1)", [1], call503);
          setLineNumber(167);    // compilenode member
          // call case 6: other requests
          var call507 = callmethodChecked(var_other, "line", []);
          // call case 4: self request
          onSelf = true;
          var call508 = callmethodChecked(this, "line:=(1)", [1], call507);
          setLineNumber(168);    // compilenode member
          // call case 6: other requests
          var call511 = callmethodChecked(var_other, "linePos", []);
          // call case 4: self request
          onSelf = true;
          var call512 = callmethodChecked(this, "linePos:=(1)", [1], call511);
          setLineNumber(169);    // compilenode member
          // call case 6: other requests
          var call515 = callmethodChecked(var_other, "scope", []);
          // call case 4: self request
          onSelf = true;
          var call516 = callmethodChecked(this, "scope:=(1)", [1], call515);
          setLineNumber(170);    // compilenode identifier
          return this;
        };
        func500.paramCounts = [1];
        obj381.methods["shallowCopyFieldsFrom(1)"] = func500;
        func500.definitionLine = 165;
        func500.definitionModule = "ast";
        var func517 = function(argcv) {    // method pretty(_)
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          var var_depth = arguments[curarg];
          curarg++;
          setModuleName("ast");
          setLineNumber(173);    // compilenode string
          var string518 = new GraceString("");
          var var_spc = string518;
          setLineNumber(174);    // compilenode num
          var opresult522 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
          var block523 = new GraceBlock(this, 174, 1);
          setLineNumber(1);    // compilenode identifier
          block523.real = function(var_i) {
            setLineNumber(175);    // compilenode string
            var string524 = new GraceString("  ");
            var opresult527 = callmethodChecked(var_spc, "++(1)", [1], string524);
            var_spc = opresult527;
            return GraceDone;
          };
          // call case 5: prelude request
          var call528 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult522, block523);
          var if529 = GraceDone;
          setLineNumber(177);    // compilenode block
          var block530 = new GraceBlock(this, 177, 0);
          block530.real = function() {
            var string531 = new GraceString("symbols");
            // call case 6: other requests
            var call534 = callmethodChecked(var_util, "target", []);
            var opresult536 = callmethodChecked(call534, "==(1)", [1], string531);
            return opresult536;
          };
          // call case 6: other requests
          // call case 4: self request
          onSelf = true;
          var call541 = callmethodChecked(this, "scope", []);
          var call542 = callmethodChecked(call541, "node", []);
          var opresult544 = callmethodChecked(call542, "==(1)", [1], this);
          var opresult546 = callmethodChecked(opresult544, "&&(1)", [1], block530);
          if (Grace_isTrue(opresult546)) {
            setLineNumber(178);    // compilenode string
            var string547 = new GraceString("");
            // call case 6: other requests
            // call case 4: self request
            onSelf = true;
            var call551 = callmethodChecked(this, "scope", []);
            var call552 = callmethodChecked(call551, "elementScopesAsString", []);
            var string554 = new GraceString("");
            // call case 4: self request
            onSelf = true;
            var call557 = callmethodChecked(this, "scope", []);
            var string559 = new GraceString("): ");
            // call case 6: other requests
            // call case 4: self request
            onSelf = true;
            var call563 = callmethodChecked(this, "scope", []);
            var call564 = callmethodChecked(call563, "variety", []);
            var string566 = new GraceString("Symbols(");
            var string569 = new GraceString("\n");
            // call case 4: self request
            onSelf = true;
            var call572 = callmethodChecked(this, "description", []);
            var string574 = new GraceString(" ");
            // call case 4: self request
            onSelf = true;
            var call577 = callmethodChecked(this, "linePos", []);
            var string579 = new GraceString(":");
            // call case 4: self request
            onSelf = true;
            var call582 = callmethodChecked(this, "line", []);
            var string584 = new GraceString("");
            var opresult586 = callmethodChecked(string584, "++(1)", [1], call582);
            var opresult588 = callmethodChecked(opresult586, "++(1)", [1], string579);
            var opresult590 = callmethodChecked(opresult588, "++(1)", [1], call577);
            var opresult592 = callmethodChecked(opresult590, "++(1)", [1], string574);
            var opresult594 = callmethodChecked(opresult592, "++(1)", [1], call572);
            var opresult596 = callmethodChecked(opresult594, "++(1)", [1], string569);
            var opresult598 = callmethodChecked(opresult596, "++(1)", [1], var_spc);
            var opresult600 = callmethodChecked(opresult598, "++(1)", [1], string566);
            var opresult602 = callmethodChecked(opresult600, "++(1)", [1], call564);
            var opresult604 = callmethodChecked(opresult602, "++(1)", [1], string559);
            var opresult606 = callmethodChecked(opresult604, "++(1)", [1], call557);
            var opresult608 = callmethodChecked(opresult606, "++(1)", [1], string554);
            var opresult610 = callmethodChecked(opresult608, "++(1)", [1], call552);
            var opresult612 = callmethodChecked(opresult610, "++(1)", [1], string547);
            if529 = opresult612;
          } else {
            var if613 = GraceDone;
            setLineNumber(179);    // compilenode string
            var string614 = new GraceString("fake");
            // call case 6: other requests
            // call case 4: self request
            onSelf = true;
            var call618 = callmethodChecked(this, "scope", []);
            var call619 = callmethodChecked(call618, "variety", []);
            var opresult621 = callmethodChecked(call619, "==(1)", [1], string614);
            if (Grace_isTrue(opresult621)) {
              setLineNumber(180);    // compilenode string
              var string622 = new GraceString("");
              // call case 4: self request
              onSelf = true;
              var call625 = callmethodChecked(this, "description", []);
              var string627 = new GraceString(" ");
              // call case 4: self request
              onSelf = true;
              var call630 = callmethodChecked(this, "linePos", []);
              var string632 = new GraceString(":");
              // call case 4: self request
              onSelf = true;
              var call635 = callmethodChecked(this, "line", []);
              var string637 = new GraceString("");
              var opresult639 = callmethodChecked(string637, "++(1)", [1], call635);
              var opresult641 = callmethodChecked(opresult639, "++(1)", [1], string632);
              var opresult643 = callmethodChecked(opresult641, "++(1)", [1], call630);
              var opresult645 = callmethodChecked(opresult643, "++(1)", [1], string627);
              var opresult647 = callmethodChecked(opresult645, "++(1)", [1], call625);
              var opresult649 = callmethodChecked(opresult647, "++(1)", [1], string622);
              if613 = opresult649;
            } else {
              setLineNumber(182);    // compilenode string
              var string650 = new GraceString("");
              // call case 6: other requests
              // call case 4: self request
              onSelf = true;
              var call654 = callmethodChecked(this, "scope", []);
              var call655 = callmethodChecked(call654, "asDebugString", []);
              var string657 = new GraceString(" ");
              // call case 4: self request
              onSelf = true;
              var call660 = callmethodChecked(this, "description", []);
              var string662 = new GraceString(" ");
              // call case 4: self request
              onSelf = true;
              var call665 = callmethodChecked(this, "linePos", []);
              var string667 = new GraceString(":");
              // call case 4: self request
              onSelf = true;
              var call670 = callmethodChecked(this, "line", []);
              var string672 = new GraceString("");
              var opresult674 = callmethodChecked(string672, "++(1)", [1], call670);
              var opresult676 = callmethodChecked(opresult674, "++(1)", [1], string667);
              var opresult678 = callmethodChecked(opresult676, "++(1)", [1], call665);
              var opresult680 = callmethodChecked(opresult678, "++(1)", [1], string662);
              var opresult682 = callmethodChecked(opresult680, "++(1)", [1], call660);
              var opresult684 = callmethodChecked(opresult682, "++(1)", [1], string657);
              var opresult686 = callmethodChecked(opresult684, "++(1)", [1], call655);
              var opresult688 = callmethodChecked(opresult686, "++(1)", [1], string650);
              if613 = opresult688;
            }
            if529 = if613;
          }
          return if529;
        };
        func517.paramCounts = [1];
        obj381.methods["pretty(1)"] = func517;
        func517.definitionLine = 172;
        func517.definitionModule = "ast";
        var func689 = function(argcv) {    // method deepCopy
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          setLineNumber(186);    // compilenode block
          var block691 = new GraceBlock(this, 186, 1);
          setLineNumber(1);    // compilenode identifier
          block691.real = function(var_each) {
            setLineNumber(186);    // compilenode identifier
            return var_each;
          };
          // call case 6: other requests
          var call693 = callmethodChecked(var_ancestorChain, "empty", []);
          // call case 4: self request
          onSelf = true;
          var call694 = callmethodChecked(this, "map(1)ancestors(1)", [1, 1], block691, call693);
          return call694;
        };
        func689.paramCounts = [0];
        obj381.methods["deepCopy"] = func689;
        func689.definitionLine = 185;
        func689.definitionModule = "ast";
        var func695 = function(argcv) {    // method enclosingObject
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          setLineNumber(189);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          // call case 4: self request
          onSelf = true;
          var call699 = callmethodChecked(this, "scope", []);
          var call700 = callmethodChecked(call699, "enclosingObjectScope", []);
          var call701 = callmethodChecked(call700, "node", []);
          var var_obj = call701;
          setLineNumber(190);    // compilenode identifier
          return var_obj;
        };
        func695.paramCounts = [0];
        obj381.methods["enclosingObject"] = func695;
        func695.definitionLine = 188;
        func695.definitionModule = "ast";
        var func702 = function(argcv) {    // method addComment(_)
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          var var_cmtNode = arguments[curarg];
          curarg++;
          setModuleName("ast");
          var if703 = GraceDone;
          setLineNumber(193);    // compilenode member
          // call case 4: self request
          onSelf = true;
          var call705 = callmethodChecked(this, "comments", []);
          var opresult708 = callmethodChecked(GraceFalse, "==(1)", [1], call705);
          if (Grace_isTrue(opresult708)) {
            setLineNumber(194);    // compilenode identifier
            // call case 4: self request
            onSelf = true;
            var call710 = callmethodChecked(this, "comments:=(1)", [1], var_cmtNode);
            if703 = call710;
          } else {
            setLineNumber(196);    // compilenode identifier
            // call case 6: other requests
            // call case 4: self request
            onSelf = true;
            var call713 = callmethodChecked(this, "comments", []);
            var call714 = callmethodChecked(call713, "extendCommentUsing(1)", [1], var_cmtNode);
            if703 = call714;
          }
          return if703;
        };
        func702.paramCounts = [1];
        obj381.methods["addComment(1)"] = func702;
        func702.definitionLine = 192;
        func702.definitionModule = "ast";
        var func715 = function(argcv) {    // method addComments(_)
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          var var_cmtNodeList = arguments[curarg];
          curarg++;
          setModuleName("ast");
          setLineNumber(200);    // compilenode block
          var block717 = new GraceBlock(this, 200, 1);
          setLineNumber(1);    // compilenode identifier
          block717.real = function(var_each) {
            setLineNumber(200);    // compilenode identifier
            // call case 4: self request
            onSelf = true;
            var call719 = callmethodChecked(this, "addComment(1)", [1], var_each);
            return call719;
          };
          // call case 6: other requests
          var call720 = callmethodChecked(var_cmtNodeList, "do(1)", [1], block717);
          return call720;
        };
        func715.paramCounts = [1];
        obj381.methods["addComments(1)"] = func715;
        func715.definitionLine = 199;
        func715.definitionModule = "ast";
        var func721 = function(argcv) {    // method statementName
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          setLineNumber(202);    // compilenode member
          // call case 4: self request
          onSelf = true;
          var call723 = callmethodChecked(this, "kind", []);
          return call723;
        };
        func721.paramCounts = [0];
        obj381.methods["statementName"] = func721;
        func721.definitionLine = 202;
        func721.definitionModule = "ast";
        setLineNumber(89);    // compilenode string
        var string724 = new GraceString("");
        obj381.data["register"] = string724;
        var reader_ast_register725 = function() {
          return this.data["register"];
        };
        obj381.methods["register"] = reader_ast_register725;
        obj381.data["register"] = string724;
        var writer_ast_register725 = function(argcv, o) {
          this.data["register"] = o;
          return GraceDone;
        };
        obj381.methods["register:=(1)"] = writer_ast_register725;
        obj381.mutable = true;
        setLineNumber(90);    // compilenode member
        // call case 6: other requests
        var call727 = callmethodChecked(var_util, "linenum", []);
        obj381.data["line"] = call727;
        var reader_ast_line728 = function() {
          return this.data["line"];
        };
        obj381.methods["line"] = reader_ast_line728;
        obj381.data["line"] = call727;
        var writer_ast_line728 = function(argcv, o) {
          this.data["line"] = o;
          return GraceDone;
        };
        obj381.methods["line:=(1)"] = writer_ast_line728;
        obj381.mutable = true;
        setLineNumber(91);    // compilenode member
        // call case 6: other requests
        var call730 = callmethodChecked(var_util, "linepos", []);
        obj381.data["linePos"] = call730;
        var reader_ast_linePos731 = function() {
          return this.data["linePos"];
        };
        obj381.methods["linePos"] = reader_ast_linePos731;
        obj381.data["linePos"] = call730;
        var writer_ast_linePos731 = function(argcv, o) {
          this.data["linePos"] = o;
          return GraceDone;
        };
        obj381.methods["linePos:=(1)"] = writer_ast_linePos731;
        obj381.mutable = true;
        setLineNumber(92);    // compilenode identifier
        obj381.data["symbolTable"] = var_fakeSymbolTable;
        var reader_ast_symbolTable732 = function() {
          return this.data["symbolTable"];
        };
        obj381.methods["symbolTable"] = reader_ast_symbolTable732;
        obj381.data["symbolTable"] = var_fakeSymbolTable;
        var writer_ast_symbolTable732 = function(argcv, o) {
          this.data["symbolTable"] = o;
          return GraceDone;
        };
        obj381.methods["symbolTable:=(1)"] = writer_ast_symbolTable732;
        reader_ast_symbolTable732.confidential = true;
        writer_ast_symbolTable732.confidential = true;
        obj381.mutable = true;
        setLineNumber(93);    // compilenode identifier
        obj381.data["comments"] = GraceFalse;
        var reader_ast_comments733 = function() {
          return this.data["comments"];
        };
        obj381.methods["comments"] = reader_ast_comments733;
        obj381.data["comments"] = GraceFalse;
        var writer_ast_comments733 = function(argcv, o) {
          this.data["comments"] = o;
          return GraceDone;
        };
        obj381.methods["comments:=(1)"] = writer_ast_comments733;
        obj381.mutable = true;
        superDepth = origSuperDepth;
      };
      obj_init_381.apply(inheritingObject, []);
      return obj381;
      };
      this.methods["baseNode$object(1)"] = func380;
    setLineNumber(2503);    // compilenode method
    var func734 = function(argcv) {    // method aliasNew(_)old(_)
      var returnTarget = invocationCount;
      invocationCount++;
      var curarg = 1;
      var var_n = arguments[curarg];
      curarg++;
      var var_o = arguments[curarg];
      curarg++;
      setModuleName("ast");
      var obj735 = Grace_allocObject(GraceObject, "aliasNew(_)old(_)");
      obj735.definitionModule = "ast";
      obj735.definitionLine = 2503;
      obj735.outer = this;
      var reader_ast_outer736 = function() {
        return this.outer;
      };
      obj735.methods["outer"] = reader_ast_outer736;
      var obj_init_735 = function() {
        var origSuperDepth = superDepth;
        superDepth = obj735;
        var func737 = function(argcv) {    // method newName
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          // newName is a simple accessor - elide try ... catch
          setLineNumber(2504);    // compilenode identifier
          return var_n;
        };
        func737.paramCounts = [0];
        obj735.methods["newName"] = func737;
        func737.definitionLine = 2504;
        func737.definitionModule = "ast";
        var func738 = function(argcv) {    // method oldName
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          // oldName is a simple accessor - elide try ... catch
          setLineNumber(2505);    // compilenode identifier
          return var_o;
        };
        func738.paramCounts = [0];
        obj735.methods["oldName"] = func738;
        func738.definitionLine = 2505;
        func738.definitionModule = "ast";
        var func739 = function(argcv) {    // method asString
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          setLineNumber(2506);    // compilenode string
          var string740 = new GraceString("");
          // call case 6: other requests
          var call743 = callmethodChecked(var_o, "nameString", []);
          var string745 = new GraceString(" = ");
          // call case 6: other requests
          var call748 = callmethodChecked(var_n, "nameString", []);
          var string750 = new GraceString("alias ");
          var opresult752 = callmethodChecked(string750, "++(1)", [1], call748);
          var opresult754 = callmethodChecked(opresult752, "++(1)", [1], string745);
          var opresult756 = callmethodChecked(opresult754, "++(1)", [1], call743);
          var opresult758 = callmethodChecked(opresult756, "++(1)", [1], string740);
          return opresult758;
        };
        func739.paramCounts = [0];
        obj735.methods["asString"] = func739;
        func739.definitionLine = 2506;
        func739.definitionModule = "ast";
        var func759 = function(argcv) {    // method pretty(_)
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          var var_depth = arguments[curarg];
          curarg++;
          setModuleName("ast");
          setLineNumber(2508);    // compilenode string
          var string760 = new GraceString("");
          var var_spc = string760;
          setLineNumber(2509);    // compilenode num
          var opresult764 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
          var block765 = new GraceBlock(this, 2509, 1);
          setLineNumber(1);    // compilenode identifier
          block765.real = function(var_i) {
            setLineNumber(2510);    // compilenode string
            var string766 = new GraceString("  ");
            var opresult769 = callmethodChecked(var_spc, "++(1)", [1], string766);
            var_spc = opresult769;
            return GraceDone;
          };
          // call case 5: prelude request
          var call770 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult764, block765);
          setLineNumber(2512);    // compilenode string
          var string771 = new GraceString("");
          // call case 6: other requests
          var call774 = callmethodChecked(var_o, "pretty(1)", [1], var_depth);
          var string776 = new GraceString(" = ");
          // call case 6: other requests
          var call779 = callmethodChecked(var_n, "pretty(1)", [1], var_depth);
          var string781 = new GraceString("  alias ");
          var string784 = new GraceString("");
          var opresult786 = callmethodChecked(string784, "++(1)", [1], var_spc);
          var opresult788 = callmethodChecked(opresult786, "++(1)", [1], string781);
          var opresult790 = callmethodChecked(opresult788, "++(1)", [1], call779);
          var opresult792 = callmethodChecked(opresult790, "++(1)", [1], string776);
          var opresult794 = callmethodChecked(opresult792, "++(1)", [1], call774);
          var opresult796 = callmethodChecked(opresult794, "++(1)", [1], string771);
          return opresult796;
        };
        func759.paramCounts = [1];
        obj735.methods["pretty(1)"] = func759;
        func759.definitionLine = 2507;
        func759.definitionModule = "ast";
        var func797 = function(argcv) {    // method hash
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          setLineNumber(2514);    // compilenode member
          // call case 6: other requests
          var call799 = callmethodChecked(var_o, "hash", []);
          // call case 6: other requests
          var call803 = callmethodChecked(var_n, "hash", []);
          var prod805 = callmethodChecked(call803, "*(1)", [1], new GraceNum(1171));
          var opresult807 = callmethodChecked(prod805, "+(1)", [1], call799);
          return opresult807;
        };
        func797.paramCounts = [0];
        obj735.methods["hash"] = func797;
        func797.definitionLine = 2514;
        func797.definitionModule = "ast";
        var func808 = function(argcv) {    // method isExecutable
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          setModuleName("ast");
          // isExecutable is a simple accessor - elide try ... catch
          setLineNumber(2515);    // compilenode identifier
          return GraceFalse;
        };
        func808.paramCounts = [0];
        obj735.methods["isExecutable"] = func808;
        func808.definitionLine = 2515;
        func808.definitionModule = "ast";
        var func809 = function(argcv) {    // method ==(_)
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          var var_other = arguments[curarg];
          curarg++;
          setModuleName("ast");
          setLineNumber(2517);    // compilenode identifier
          var cases810 = [];
          setLineNumber(2518);    // compilenode block
          var block811 = new GraceBlock(this, 2518, 1);
          setLineNumber(0);    // compilenode string
          var string814 = new GraceString("that");
          // call case 6: other requests
          // call case 5: prelude request
          var call816 = callmethodChecked(var_prelude, "VariablePattern", []);
          var call817 = callmethodChecked(call816, "new(1)", [1], string814);
          setLineNumber(2518);    // compilenode identifier
          // call case 6: other requests
          setLineNumber(0);    // compilenode member
          // call case 5: prelude request
          var call819 = callmethodChecked(var_prelude, "AndPattern", []);
          var call820 = callmethodChecked(call819, "new(2)", [2], call817, var_AliasPair);
          block811.pattern = call820;
          setLineNumber(2518);    // compilenode identifier
          block811.paramTypes = [var_AliasPair];
          block811.real = function(var_that) {
            // call case 6: other requests
            var call822 = callmethodChecked(var_that, "oldName", []);
            var opresult825 = callmethodChecked(var_o, "==(1)", [1], call822);
            // call case 6: other requests
            var call828 = callmethodChecked(var_that, "newName", []);
            var opresult831 = callmethodChecked(var_n, "==(1)", [1], call828);
            var opresult833 = callmethodChecked(opresult831, "&&(1)", [1], opresult825);
            return opresult833;
          };
          cases810.push(block811);
          setLineNumber(2519);    // compilenode block
          var block834 = new GraceBlock(this, 2519, 1);
          setLineNumber(1);    // compilenode identifier
          block834.real = function(var___95____95__2) {
            setLineNumber(2519);    // compilenode identifier
            return GraceFalse;
          };
          cases810.push(block834);
          setLineNumber(2517);    // compilematchcase
          var matchres810 = matchCase(var_other,cases810,false);
          setModuleName("ast");
          return matchres810;
        };
        func809.paramCounts = [1];
        obj735.methods["==(1)"] = func809;
        func809.definitionLine = 2516;
        func809.definitionModule = "ast";
        superDepth = origSuperDepth;
      };
      obj_init_735.apply(obj735, []);
      return obj735;
    };
    func734.paramCounts = [1, 1];
    this.methods["aliasNew(1)old(1)"] = func734;
    func734.definitionLine = 2503;
    func734.definitionModule = "ast";
      var func835 = function(argcv) {    // method aliasNew(_)old(_)$object(_)
        var curarg = 1;
        var var_n = arguments[curarg];
        curarg++;
        var var_o = arguments[curarg];
        curarg++;
        var inheritingObject = arguments[curarg++];
        // Start argument processing
        curarg = 1;
        curarg++;
        curarg++;
        // End argument processing
        setModuleName("ast");
        var returnTarget = invocationCount;
        invocationCount++;
        var obj836 = Grace_allocObject(GraceObject, "aliasNew(1)old(1)");
        obj836.definitionModule = "ast";
        obj836.definitionLine = 2503;
        var inho836 = inheritingObject;
        while (inho836.superobj) inho836 = inho836.superobj;
        inho836.superobj = obj836;
        obj836.data = inheritingObject.data;
        if (inheritingObject.hasOwnProperty('_value'))
          obj836._value = inheritingObject._value;
        obj836.outer = this;
        var reader_ast_outer837 = function() {
          return this.outer;
        };
        obj836.methods["outer"] = reader_ast_outer837;
        var obj_init_836 = function() {
          var origSuperDepth = superDepth;
          superDepth = obj836;
          var func838 = function(argcv) {    // method newName
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            setModuleName("ast");
            // newName is a simple accessor - elide try ... catch
            setLineNumber(2504);    // compilenode identifier
            return var_n;
          };
          func838.paramCounts = [0];
          obj836.methods["newName"] = func838;
          func838.definitionLine = 2504;
          func838.definitionModule = "ast";
          var func839 = function(argcv) {    // method oldName
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            setModuleName("ast");
            // oldName is a simple accessor - elide try ... catch
            setLineNumber(2505);    // compilenode identifier
            return var_o;
          };
          func839.paramCounts = [0];
          obj836.methods["oldName"] = func839;
          func839.definitionLine = 2505;
          func839.definitionModule = "ast";
          var func840 = function(argcv) {    // method asString
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            setModuleName("ast");
            setLineNumber(2506);    // compilenode string
            var string841 = new GraceString("");
            // call case 6: other requests
            var call844 = callmethodChecked(var_o, "nameString", []);
            var string846 = new GraceString(" = ");
            // call case 6: other requests
            var call849 = callmethodChecked(var_n, "nameString", []);
            var string851 = new GraceString("alias ");
            var opresult853 = callmethodChecked(string851, "++(1)", [1], call849);
            var opresult855 = callmethodChecked(opresult853, "++(1)", [1], string846);
            var opresult857 = callmethodChecked(opresult855, "++(1)", [1], call844);
            var opresult859 = callmethodChecked(opresult857, "++(1)", [1], string841);
            return opresult859;
          };
          func840.paramCounts = [0];
          obj836.methods["asString"] = func840;
          func840.definitionLine = 2506;
          func840.definitionModule = "ast";
          var func860 = function(argcv) {    // method pretty(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_depth = arguments[curarg];
            curarg++;
            setModuleName("ast");
            setLineNumber(2508);    // compilenode string
            var string861 = new GraceString("");
            var var_spc = string861;
            setLineNumber(2509);    // compilenode num
            var opresult865 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
            var block866 = new GraceBlock(this, 2509, 1);
            setLineNumber(1);    // compilenode identifier
            block866.real = function(var_i) {
              setLineNumber(2510);    // compilenode string
              var string867 = new GraceString("  ");
              var opresult870 = callmethodChecked(var_spc, "++(1)", [1], string867);
              var_spc = opresult870;
              return GraceDone;
            };
            // call case 5: prelude request
            var call871 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult865, block866);
            setLineNumber(2512);    // compilenode string
            var string872 = new GraceString("");
            // call case 6: other requests
            var call875 = callmethodChecked(var_o, "pretty(1)", [1], var_depth);
            var string877 = new GraceString(" = ");
            // call case 6: other requests
            var call880 = callmethodChecked(var_n, "pretty(1)", [1], var_depth);
            var string882 = new GraceString("  alias ");
            var string885 = new GraceString("");
            var opresult887 = callmethodChecked(string885, "++(1)", [1], var_spc);
            var opresult889 = callmethodChecked(opresult887, "++(1)", [1], string882);
            var opresult891 = callmethodChecked(opresult889, "++(1)", [1], call880);
            var opresult893 = callmethodChecked(opresult891, "++(1)", [1], string877);
            var opresult895 = callmethodChecked(opresult893, "++(1)", [1], call875);
            var opresult897 = callmethodChecked(opresult895, "++(1)", [1], string872);
            return opresult897;
          };
          func860.paramCounts = [1];
          obj836.methods["pretty(1)"] = func860;
          func860.definitionLine = 2507;
          func860.definitionModule = "ast";
          var func898 = function(argcv) {    // method hash
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            setModuleName("ast");
            setLineNumber(2514);    // compilenode member
            // call case 6: other requests
            var call900 = callmethodChecked(var_o, "hash", []);
            // call case 6: other requests
            var call904 = callmethodChecked(var_n, "hash", []);
            var prod906 = callmethodChecked(call904, "*(1)", [1], new GraceNum(1171));
            var opresult908 = callmethodChecked(prod906, "+(1)", [1], call900);
            return opresult908;
          };
          func898.paramCounts = [0];
          obj836.methods["hash"] = func898;
          func898.definitionLine = 2514;
          func898.definitionModule = "ast";
          var func909 = function(argcv) {    // method isExecutable
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            setModuleName("ast");
            // isExecutable is a simple accessor - elide try ... catch
            setLineNumber(2515);    // compilenode identifier
            return GraceFalse;
          };
          func909.paramCounts = [0];
          obj836.methods["isExecutable"] = func909;
          func909.definitionLine = 2515;
          func909.definitionModule = "ast";
          var func910 = function(argcv) {    // method ==(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_other = arguments[curarg];
            curarg++;
            setModuleName("ast");
            setLineNumber(2517);    // compilenode identifier
            var cases911 = [];
            setLineNumber(2518);    // compilenode block
            var block912 = new GraceBlock(this, 2518, 1);
            setLineNumber(0);    // compilenode string
            var string915 = new GraceString("that");
            // call case 6: other requests
            // call case 5: prelude request
            var call917 = callmethodChecked(var_prelude, "VariablePattern", []);
            var call918 = callmethodChecked(call917, "new(1)", [1], string915);
            setLineNumber(2518);    // compilenode identifier
            // call case 6: other requests
            setLineNumber(0);    // compilenode member
            // call case 5: prelude request
            var call920 = callmethodChecked(var_prelude, "AndPattern", []);
            var call921 = callmethodChecked(call920, "new(2)", [2], call918, var_AliasPair);
            block912.pattern = call921;
            setLineNumber(2518);    // compilenode identifier
            block912.paramTypes = [var_AliasPair];
            block912.real = function(var_that) {
              // call case 6: other requests
              var call923 = callmethodChecked(var_that, "oldName", []);
              var opresult926 = callmethodChecked(var_o, "==(1)", [1], call923);
              // call case 6: other requests
              var call929 = callmethodChecked(var_that, "newName", []);
              var opresult932 = callmethodChecked(var_n, "==(1)", [1], call929);
              var opresult934 = callmethodChecked(opresult932, "&&(1)", [1], opresult926);
              return opresult934;
            };
            cases911.push(block912);
            setLineNumber(2519);    // compilenode block
            var block935 = new GraceBlock(this, 2519, 1);
            setLineNumber(1);    // compilenode identifier
            block935.real = function(var___95____95__2) {
              setLineNumber(2519);    // compilenode identifier
              return GraceFalse;
            };
            cases911.push(block935);
            setLineNumber(2517);    // compilematchcase
            var matchres911 = matchCase(var_other,cases911,false);
            setModuleName("ast");
            return matchres911;
          };
          func910.paramCounts = [1];
          obj836.methods["==(1)"] = func910;
          func910.definitionLine = 2516;
          func910.definitionModule = "ast";
          superDepth = origSuperDepth;
        };
        obj_init_836.apply(inheritingObject, []);
        return obj836;
        };
        this.methods["aliasNew(1)old(1)$object(1)"] = func835;
      setLineNumber(2777);    // compilenode method
      var func936 = function(argcv) {    // method wrap(_)to(_)prefix(_)
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        var var_str = arguments[curarg];
        curarg++;
        var var_l = arguments[curarg];
        curarg++;
        var var_margin = arguments[curarg];
        curarg++;
        // Start argument checking
        curarg = 1;
        curarg++;
        if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
            throw new GraceExceptionPacket(TypeErrorObject,
                new GraceString("argument 1 in to (arg list 2), which corresponds to parameter l, does not have " + 
                    callmethod(var_Number, "asString", [0])._value + "."));
        curarg++;
        curarg++;
        // End argument checking
        setModuleName("ast");
        setLineNumber(2778);    // compilenode member
        // call case 6: other requests
        var call938 = callmethodChecked(var_margin, "size", []);
        var var_ind = call938;
        setLineNumber(2779);    // compilenode identifier
        var opresult942 = callmethodChecked(var_ind, "+(1)", [1], new GraceNum(4));
        // call case 5: prelude request
        var call943 = callmethodChecked(var_prelude, "max(2)", [2], opresult942, var_l);
        var var_len = call943;
        var if944 = GraceDone;
        setLineNumber(2780);    // compilenode member
        // call case 6: other requests
        var call947 = callmethodChecked(var_str, "size", []);
        var opresult950 = callmethodChecked(var_ind, "+(1)", [1], call947);
        var opresult952 = callmethodChecked(opresult950, "\u2264(1)", [1], var_len);
        if (Grace_isTrue(opresult952)) {
          setLineNumber(2781);    // compilenode string
          var string955 = new GraceString("\n");
          var opresult957 = callmethodChecked(string955, "++(1)", [1], var_margin);
          var opresult959 = callmethodChecked(opresult957, "++(1)", [1], var_str);
          return opresult959;
        }
        setLineNumber(2783);    // compilenode vardec
        var var_currBreak;
        setLineNumber(2784);    // compilenode vardec
        var var_trimmedLine;
        setLineNumber(2786);    // compilenode block
        var block961 = new GraceBlock(this, 2786, 0);
        block961.real = function() {
          setLineNumber(2787);    // compilenode string
          var string963 = new GraceString(" ");
          var diff966 = callmethodChecked(var_len, "-(1)", [1], var_ind);
          setLineNumber(2788);    // compilenode block
          var block967 = new GraceBlock(this, 2788, 0);
          block967.real = function() {
            var diff970 = callmethodChecked(var_len, "-(1)", [1], var_ind);
            return diff970;
          };
          // call case 6: other requests
          setLineNumber(2787);    // compilenode identifier
          var call971 = callmethodChecked(var_str, "lastIndexOf(1)startingAt(1)ifAbsent(1)", [1, 1, 1], string963, diff966, block967);
          var_currBreak = call971;
          setLineNumber(2789);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          var call974 = callmethodChecked(var_str, "substringFrom(1)to(1)", [1, 1], new GraceNum(1), var_currBreak);
          var call975 = callmethodChecked(call974, "trim", []);
          var_trimmedLine = call975;
          return GraceDone;
        };
        var cases960 = [];
        setLineNumber(2790);    // compilenode block
        var block976 = new GraceBlock(this, 2790, 1);
        setLineNumber(0);    // compilenode string
        var string979 = new GraceString("ex");
        // call case 6: other requests
        // call case 5: prelude request
        var call981 = callmethodChecked(var_prelude, "VariablePattern", []);
        var call982 = callmethodChecked(call981, "new(1)", [1], string979);
        setLineNumber(2790);    // compilenode member
        // call case 5: prelude request
        var call984 = callmethodChecked(var_prelude, "NoSuchMethod", []);
        // call case 6: other requests
        setLineNumber(0);    // compilenode member
        // call case 5: prelude request
        var call986 = callmethodChecked(var_prelude, "AndPattern", []);
        var call987 = callmethodChecked(call986, "new(2)", [2], call982, call984);
        block976.pattern = call987;
        setLineNumber(2790);    // compilenode member
        // call case 5: prelude request
        var call989 = callmethodChecked(var_prelude, "NoSuchMethod", []);
        block976.paramTypes = [call989];
        block976.real = function(var_ex) {
          setLineNumber(2791);    // compilenode identifier
          var diff993 = callmethodChecked(var_len, "-(1)", [1], var_ind);
          // call case 6: other requests
          var call995 = callmethodChecked(var_str, "size", []);
          // call case 5: prelude request
          var call996 = callmethodChecked(var_prelude, "min(2)", [2], diff993, call995);
          var_currBreak = call996;
          setLineNumber(2792);    // compilenode block
          var block998 = new GraceBlock(this, 2792, 1);
          setLineNumber(1);    // compilenode identifier
          block998.real = function(var_ix) {
            var if999 = GraceDone;
            setLineNumber(2793);    // compilenode string
            var string1000 = new GraceString(" ");
            // call case 6: other requests
            var call1003 = callmethodChecked(var_str, "at(1)", [1], var_ix);
            var opresult1005 = callmethodChecked(call1003, "==(1)", [1], string1000);
            if (Grace_isTrue(opresult1005)) {
              var_currBreak = var_ix;
              if999 = GraceDone;
            }
            return if999;
          };
          // call case 6: other requests
          setLineNumber(2792);    // compilenode num
          var opresult1008 = callmethodChecked(new GraceNum(1), "..(1)", [1], var_currBreak);
          var call1009 = callmethodChecked(opresult1008, "do(1)", [1], block998);
          setLineNumber(2795);    // compilenode identifier
          var var_end = var_currBreak;
          setLineNumber(2796);    // compilenode block
          var block1011 = new GraceBlock(this, 2796, 0);
          block1011.real = function() {
            var block1012 = new GraceBlock(this, 2796, 0);
            block1012.real = function() {
              var string1013 = new GraceString(" ");
              // call case 6: other requests
              var call1016 = callmethodChecked(var_str, "at(1)", [1], var_end);
              var opresult1018 = callmethodChecked(call1016, "==(1)", [1], string1013);
              return opresult1018;
            };
            var opresult1022 = callmethodChecked(var_end, "\u2265(1)", [1], new GraceNum(1));
            var opresult1024 = callmethodChecked(opresult1022, "&&(1)", [1], block1012);
            return opresult1024;
          };
          var block1025 = new GraceBlock(this, 2796, 0);
          block1025.real = function() {
            setLineNumber(2797);    // compilenode identifier
            var diff1028 = callmethodChecked(var_end, "-(1)", [1], new GraceNum(1));
            var_end = diff1028;
            return GraceDone;
          };
          // call case 5: prelude request
          var call1029 = callmethodChecked(var_prelude, "while(1)do(1)", [1, 1], block1011, block1025);
          setLineNumber(2799);    // compilenode num
          var var_start = new GraceNum(1);
          setLineNumber(2800);    // compilenode block
          var block1031 = new GraceBlock(this, 2800, 0);
          block1031.real = function() {
            var block1032 = new GraceBlock(this, 2800, 0);
            block1032.real = function() {
              var string1033 = new GraceString(" ");
              // call case 6: other requests
              var call1036 = callmethodChecked(var_str, "at(1)", [1], var_start);
              var opresult1038 = callmethodChecked(call1036, "==(1)", [1], string1033);
              return opresult1038;
            };
            // call case 6: other requests
            var call1041 = callmethodChecked(var_str, "size", []);
            var opresult1044 = callmethodChecked(var_start, "\u2264(1)", [1], call1041);
            var opresult1046 = callmethodChecked(opresult1044, "&&(1)", [1], block1032);
            return opresult1046;
          };
          var block1047 = new GraceBlock(this, 2800, 0);
          block1047.real = function() {
            setLineNumber(2801);    // compilenode identifier
            var opresult1050 = callmethodChecked(var_start, "+(1)", [1], new GraceNum(1));
            var_start = opresult1050;
            return GraceDone;
          };
          // call case 5: prelude request
          var call1051 = callmethodChecked(var_prelude, "while(1)do(1)", [1, 1], block1031, block1047);
          setLineNumber(2803);    // compilenode identifier
          // call case 6: other requests
          var call1053 = callmethodChecked(var_str, "substringFrom(1)to(1)", [1, 1], var_start, var_end);
          var_trimmedLine = call1053;
          return GraceDone;
        };
        cases960.push(block976);
        setLineNumber(2786);    // compiletrycatch
        var catchres960 = tryCatch(block961,cases960,false);
        setModuleName("ast");
        setLineNumber(2806);    // compilenode identifier
        var opresult1058 = callmethodChecked(var_currBreak, "+(1)", [1], new GraceNum(1));
        // call case 6: other requests
        var call1060 = callmethodChecked(var_str, "size", []);
        // call case 6: other requests
        var call1061 = callmethodChecked(var_str, "substringFrom(1)to(1)", [1, 1], opresult1058, call1060);
        setLineNumber(2807);    // compilenode identifier
        // call case 4: self request
        onSelf = true;
        var call1062 = callmethodChecked(this, "wrap(1)to(1)prefix(1)", [1, 1, 1], call1061, var_l, var_margin);
        setLineNumber(2805);    // compilenode string
        var string1066 = new GraceString("\n");
        var opresult1068 = callmethodChecked(string1066, "++(1)", [1], var_margin);
        var opresult1070 = callmethodChecked(opresult1068, "++(1)", [1], var_trimmedLine);
        var opresult1072 = callmethodChecked(opresult1070, "++(1)", [1], call1062);
        return opresult1072;
      };
      func936.paramTypes = [];
      func936.paramTypes.push([]);
      func936.paramTypes.push([type_Number, "l"]);
      func936.paramTypes.push([]);
      func936.paramCounts = [1, 1, 1];
      this.methods["wrap(1)to(1)prefix(1)"] = func936;
      func936.definitionLine = 2777;
      func936.definitionModule = "ast";
      setLineNumber(2844);    // compilenode method
      var func1073 = function(argcv) {    // method baseVisitor
        var returnTarget = invocationCount;
        invocationCount++;
        var curarg = 1;
        setModuleName("ast");
        var obj1074 = Grace_allocObject(GraceObject, "baseVisitor");
        obj1074.definitionModule = "ast";
        obj1074.definitionLine = 2844;
        obj1074.outer = this;
        var reader_ast_outer1075 = function() {
          return this.outer;
        };
        obj1074.methods["outer"] = reader_ast_outer1075;
        var obj_init_1074 = function() {
          var origSuperDepth = superDepth;
          superDepth = obj1074;
          var func1076 = function(argcv) {    // method visitIf(_)up(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            var var_as = arguments[curarg];
            curarg++;
            setModuleName("ast");
            setLineNumber(2845);    // compilenode identifier
            // call case 4: self request
            onSelf = true;
            var call1078 = callmethodChecked(this, "visitIf(1)", [1], var_o);
            return call1078;
          };
          func1076.paramCounts = [1, 1];
          obj1074.methods["visitIf(1)up(1)"] = func1076;
          func1076.definitionLine = 2845;
          func1076.definitionModule = "ast";
          var func1079 = function(argcv) {    // method visitBlock(_)up(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            var var_as = arguments[curarg];
            curarg++;
            setModuleName("ast");
            setLineNumber(2846);    // compilenode identifier
            // call case 4: self request
            onSelf = true;
            var call1081 = callmethodChecked(this, "visitBlock(1)", [1], var_o);
            return call1081;
          };
          func1079.paramCounts = [1, 1];
          obj1074.methods["visitBlock(1)up(1)"] = func1079;
          func1079.definitionLine = 2846;
          func1079.definitionModule = "ast";
          var func1082 = function(argcv) {    // method visitMatchCase(_)up(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            var var_as = arguments[curarg];
            curarg++;
            setModuleName("ast");
            setLineNumber(2847);    // compilenode identifier
            // call case 4: self request
            onSelf = true;
            var call1084 = callmethodChecked(this, "visitMatchCase(1)", [1], var_o);
            return call1084;
          };
          func1082.paramCounts = [1, 1];
          obj1074.methods["visitMatchCase(1)up(1)"] = func1082;
          func1082.definitionLine = 2847;
          func1082.definitionModule = "ast";
          var func1085 = function(argcv) {    // method visitTryCatch(_)up(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            var var_as = arguments[curarg];
            curarg++;
            setModuleName("ast");
            setLineNumber(2848);    // compilenode identifier
            // call case 4: self request
            onSelf = true;
            var call1087 = callmethodChecked(this, "visitTryCatch(1)", [1], var_o);
            return call1087;
          };
          func1085.paramCounts = [1, 1];
          obj1074.methods["visitTryCatch(1)up(1)"] = func1085;
          func1085.definitionLine = 2848;
          func1085.definitionModule = "ast";
          var func1088 = function(argcv) {    // method visitMethodType(_)up(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            var var_as = arguments[curarg];
            curarg++;
            setModuleName("ast");
            setLineNumber(2849);    // compilenode identifier
            // call case 4: self request
            onSelf = true;
            var call1090 = callmethodChecked(this, "visitMethodType(1)", [1], var_o);
            return call1090;
          };
          func1088.paramCounts = [1, 1];
          obj1074.methods["visitMethodType(1)up(1)"] = func1088;
          func1088.definitionLine = 2849;
          func1088.definitionModule = "ast";
          var func1091 = function(argcv) {    // method visitSignaturePart(_)up(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            var var_as = arguments[curarg];
            curarg++;
            setModuleName("ast");
            setLineNumber(2850);    // compilenode identifier
            // call case 4: self request
            onSelf = true;
            var call1093 = callmethodChecked(this, "visitSignaturePart(1)", [1], var_o);
            return call1093;
          };
          func1091.paramCounts = [1, 1];
          obj1074.methods["visitSignaturePart(1)up(1)"] = func1091;
          func1091.definitionLine = 2850;
          func1091.definitionModule = "ast";
          var func1094 = function(argcv) {    // method visitTypeDec(_)up(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            var var_as = arguments[curarg];
            curarg++;
            setModuleName("ast");
            setLineNumber(2851);    // compilenode identifier
            // call case 4: self request
            onSelf = true;
            var call1096 = callmethodChecked(this, "visitTypeDec(1)", [1], var_o);
            return call1096;
          };
          func1094.paramCounts = [1, 1];
          obj1074.methods["visitTypeDec(1)up(1)"] = func1094;
          func1094.definitionLine = 2851;
          func1094.definitionModule = "ast";
          var func1097 = function(argcv) {    // method visitTypeLiteral(_)up(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            var var_as = arguments[curarg];
            curarg++;
            setModuleName("ast");
            setLineNumber(2852);    // compilenode identifier
            // call case 4: self request
            onSelf = true;
            var call1099 = callmethodChecked(this, "visitTypeLiteral(1)", [1], var_o);
            return call1099;
          };
          func1097.paramCounts = [1, 1];
          obj1074.methods["visitTypeLiteral(1)up(1)"] = func1097;
          func1097.definitionLine = 2852;
          func1097.definitionModule = "ast";
          var func1100 = function(argcv) {    // method visitTypeParameters(_)up(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            var var_as = arguments[curarg];
            curarg++;
            setModuleName("ast");
            setLineNumber(2853);    // compilenode identifier
            // call case 4: self request
            onSelf = true;
            var call1102 = callmethodChecked(this, "visitTypeParameters(1)", [1], var_o);
            return call1102;
          };
          func1100.paramCounts = [1, 1];
          obj1074.methods["visitTypeParameters(1)up(1)"] = func1100;
          func1100.definitionLine = 2853;
          func1100.definitionModule = "ast";
          var func1103 = function(argcv) {    // method visitMethod(_)up(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            var var_as = arguments[curarg];
            curarg++;
            setModuleName("ast");
            setLineNumber(2854);    // compilenode identifier
            // call case 4: self request
            onSelf = true;
            var call1105 = callmethodChecked(this, "visitMethod(1)", [1], var_o);
            return call1105;
          };
          func1103.paramCounts = [1, 1];
          obj1074.methods["visitMethod(1)up(1)"] = func1103;
          func1103.definitionLine = 2854;
          func1103.definitionModule = "ast";
          var func1106 = function(argcv) {    // method visitCall(_)up(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            var var_as = arguments[curarg];
            curarg++;
            setModuleName("ast");
            setLineNumber(2855);    // compilenode identifier
            // call case 4: self request
            onSelf = true;
            var call1108 = callmethodChecked(this, "visitCall(1)", [1], var_o);
            return call1108;
          };
          func1106.paramCounts = [1, 1];
          obj1074.methods["visitCall(1)up(1)"] = func1106;
          func1106.definitionLine = 2855;
          func1106.definitionModule = "ast";
          var func1109 = function(argcv) {    // method visitObject(_)up(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            var var_as = arguments[curarg];
            curarg++;
            setModuleName("ast");
            setLineNumber(2856);    // compilenode identifier
            // call case 4: self request
            onSelf = true;
            var call1111 = callmethodChecked(this, "visitObject(1)", [1], var_o);
            return call1111;
          };
          func1109.paramCounts = [1, 1];
          obj1074.methods["visitObject(1)up(1)"] = func1109;
          func1109.definitionLine = 2856;
          func1109.definitionModule = "ast";
          var func1112 = function(argcv) {    // method visitModule(_)up(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            var var_as = arguments[curarg];
            curarg++;
            setModuleName("ast");
            setLineNumber(2857);    // compilenode identifier
            // call case 4: self request
            onSelf = true;
            var call1114 = callmethodChecked(this, "visitObject(1)", [1], var_o);
            return call1114;
          };
          func1112.paramCounts = [1, 1];
          obj1074.methods["visitModule(1)up(1)"] = func1112;
          func1112.definitionLine = 2857;
          func1112.definitionModule = "ast";
          var func1115 = function(argcv) {    // method visitArray(_)up(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            var var_as = arguments[curarg];
            curarg++;
            setModuleName("ast");
            setLineNumber(2858);    // compilenode identifier
            // call case 4: self request
            onSelf = true;
            var call1117 = callmethodChecked(this, "visitArray(1)", [1], var_o);
            return call1117;
          };
          func1115.paramCounts = [1, 1];
          obj1074.methods["visitArray(1)up(1)"] = func1115;
          func1115.definitionLine = 2858;
          func1115.definitionModule = "ast";
          var func1118 = function(argcv) {    // method visitMember(_)up(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            var var_as = arguments[curarg];
            curarg++;
            setModuleName("ast");
            setLineNumber(2859);    // compilenode identifier
            // call case 4: self request
            onSelf = true;
            var call1120 = callmethodChecked(this, "visitMember(1)", [1], var_o);
            return call1120;
          };
          func1118.paramCounts = [1, 1];
          obj1074.methods["visitMember(1)up(1)"] = func1118;
          func1118.definitionLine = 2859;
          func1118.definitionModule = "ast";
          var func1121 = function(argcv) {    // method visitGeneric(_)up(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            var var_as = arguments[curarg];
            curarg++;
            setModuleName("ast");
            setLineNumber(2860);    // compilenode identifier
            // call case 4: self request
            onSelf = true;
            var call1123 = callmethodChecked(this, "visitGeneric(1)", [1], var_o);
            return call1123;
          };
          func1121.paramCounts = [1, 1];
          obj1074.methods["visitGeneric(1)up(1)"] = func1121;
          func1121.definitionLine = 2860;
          func1121.definitionModule = "ast";
          var func1124 = function(argcv) {    // method visitIdentifier(_)up(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            var var_as = arguments[curarg];
            curarg++;
            setModuleName("ast");
            setLineNumber(2861);    // compilenode identifier
            // call case 4: self request
            onSelf = true;
            var call1126 = callmethodChecked(this, "visitIdentifier(1)", [1], var_o);
            return call1126;
          };
          func1124.paramCounts = [1, 1];
          obj1074.methods["visitIdentifier(1)up(1)"] = func1124;
          func1124.definitionLine = 2861;
          func1124.definitionModule = "ast";
          var func1127 = function(argcv) {    // method visitString(_)up(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            var var_as = arguments[curarg];
            curarg++;
            setModuleName("ast");
            setLineNumber(2862);    // compilenode identifier
            // call case 4: self request
            onSelf = true;
            var call1129 = callmethodChecked(this, "visitString(1)", [1], var_o);
            return call1129;
          };
          func1127.paramCounts = [1, 1];
          obj1074.methods["visitString(1)up(1)"] = func1127;
          func1127.definitionLine = 2862;
          func1127.definitionModule = "ast";
          var func1130 = function(argcv) {    // method visitNum(_)up(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            var var_as = arguments[curarg];
            curarg++;
            setModuleName("ast");
            setLineNumber(2863);    // compilenode identifier
            // call case 4: self request
            onSelf = true;
            var call1132 = callmethodChecked(this, "visitNum(1)", [1], var_o);
            return call1132;
          };
          func1130.paramCounts = [1, 1];
          obj1074.methods["visitNum(1)up(1)"] = func1130;
          func1130.definitionLine = 2863;
          func1130.definitionModule = "ast";
          var func1133 = function(argcv) {    // method visitOp(_)up(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            var var_as = arguments[curarg];
            curarg++;
            setModuleName("ast");
            setLineNumber(2864);    // compilenode identifier
            // call case 4: self request
            onSelf = true;
            var call1135 = callmethodChecked(this, "visitOp(1)", [1], var_o);
            return call1135;
          };
          func1133.paramCounts = [1, 1];
          obj1074.methods["visitOp(1)up(1)"] = func1133;
          func1133.definitionLine = 2864;
          func1133.definitionModule = "ast";
          var func1136 = function(argcv) {    // method visitBind(_)up(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            var var_as = arguments[curarg];
            curarg++;
            setModuleName("ast");
            setLineNumber(2865);    // compilenode identifier
            // call case 4: self request
            onSelf = true;
            var call1138 = callmethodChecked(this, "visitBind(1)", [1], var_o);
            return call1138;
          };
          func1136.paramCounts = [1, 1];
          obj1074.methods["visitBind(1)up(1)"] = func1136;
          func1136.definitionLine = 2865;
          func1136.definitionModule = "ast";
          var func1139 = function(argcv) {    // method visitDefDec(_)up(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            var var_as = arguments[curarg];
            curarg++;
            setModuleName("ast");
            setLineNumber(2866);    // compilenode identifier
            // call case 4: self request
            onSelf = true;
            var call1141 = callmethodChecked(this, "visitDefDec(1)", [1], var_o);
            return call1141;
          };
          func1139.paramCounts = [1, 1];
          obj1074.methods["visitDefDec(1)up(1)"] = func1139;
          func1139.definitionLine = 2866;
          func1139.definitionModule = "ast";
          var func1142 = function(argcv) {    // method visitVarDec(_)up(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            var var_as = arguments[curarg];
            curarg++;
            setModuleName("ast");
            setLineNumber(2867);    // compilenode identifier
            // call case 4: self request
            onSelf = true;
            var call1144 = callmethodChecked(this, "visitVarDec(1)", [1], var_o);
            return call1144;
          };
          func1142.paramCounts = [1, 1];
          obj1074.methods["visitVarDec(1)up(1)"] = func1142;
          func1142.definitionLine = 2867;
          func1142.definitionModule = "ast";
          var func1145 = function(argcv) {    // method visitImport(_)up(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            var var_as = arguments[curarg];
            curarg++;
            setModuleName("ast");
            setLineNumber(2868);    // compilenode identifier
            // call case 4: self request
            onSelf = true;
            var call1147 = callmethodChecked(this, "visitImport(1)", [1], var_o);
            return call1147;
          };
          func1145.paramCounts = [1, 1];
          obj1074.methods["visitImport(1)up(1)"] = func1145;
          func1145.definitionLine = 2868;
          func1145.definitionModule = "ast";
          var func1148 = function(argcv) {    // method visitReturn(_)up(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            var var_as = arguments[curarg];
            curarg++;
            setModuleName("ast");
            setLineNumber(2869);    // compilenode identifier
            // call case 4: self request
            onSelf = true;
            var call1150 = callmethodChecked(this, "visitReturn(1)", [1], var_o);
            return call1150;
          };
          func1148.paramCounts = [1, 1];
          obj1074.methods["visitReturn(1)up(1)"] = func1148;
          func1148.definitionLine = 2869;
          func1148.definitionModule = "ast";
          var func1151 = function(argcv) {    // method visitInherits(_)up(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            var var_as = arguments[curarg];
            curarg++;
            setModuleName("ast");
            setLineNumber(2870);    // compilenode identifier
            // call case 4: self request
            onSelf = true;
            var call1153 = callmethodChecked(this, "visitInherits(1)", [1], var_o);
            return call1153;
          };
          func1151.paramCounts = [1, 1];
          obj1074.methods["visitInherits(1)up(1)"] = func1151;
          func1151.definitionLine = 2870;
          func1151.definitionModule = "ast";
          var func1154 = function(argcv) {    // method visitDialect(_)up(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            var var_as = arguments[curarg];
            curarg++;
            setModuleName("ast");
            setLineNumber(2871);    // compilenode identifier
            // call case 4: self request
            onSelf = true;
            var call1156 = callmethodChecked(this, "visitDialect(1)", [1], var_o);
            return call1156;
          };
          func1154.paramCounts = [1, 1];
          obj1074.methods["visitDialect(1)up(1)"] = func1154;
          func1154.definitionLine = 2871;
          func1154.definitionModule = "ast";
          var func1157 = function(argcv) {    // method visitBlank(_)up(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            var var_as = arguments[curarg];
            curarg++;
            setModuleName("ast");
            setLineNumber(2872);    // compilenode identifier
            // call case 4: self request
            onSelf = true;
            var call1159 = callmethodChecked(this, "visitBlank(1)", [1], var_o);
            return call1159;
          };
          func1157.paramCounts = [1, 1];
          obj1074.methods["visitBlank(1)up(1)"] = func1157;
          func1157.definitionLine = 2872;
          func1157.definitionModule = "ast";
          var func1160 = function(argcv) {    // method visitComment(_)up(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            var var_as = arguments[curarg];
            curarg++;
            setModuleName("ast");
            setLineNumber(2873);    // compilenode identifier
            // call case 4: self request
            onSelf = true;
            var call1162 = callmethodChecked(this, "visitComment(1)", [1], var_o);
            return call1162;
          };
          func1160.paramCounts = [1, 1];
          obj1074.methods["visitComment(1)up(1)"] = func1160;
          func1160.definitionLine = 2873;
          func1160.definitionModule = "ast";
          var func1163 = function(argcv) {    // method visitImplicit(_)up(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            var var_as = arguments[curarg];
            curarg++;
            setModuleName("ast");
            setLineNumber(2874);    // compilenode identifier
            // call case 4: self request
            onSelf = true;
            var call1165 = callmethodChecked(this, "visitImplicit(1)", [1], var_o);
            return call1165;
          };
          func1163.paramCounts = [1, 1];
          obj1074.methods["visitImplicit(1)up(1)"] = func1163;
          func1163.definitionLine = 2874;
          func1163.definitionModule = "ast";
          var func1166 = function(argcv) {    // method visitIf(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            setModuleName("ast");
            // visitIf(_) is a simple accessor - elide try ... catch
            setLineNumber(2876);    // compilenode identifier
            return GraceTrue;
          };
          func1166.paramCounts = [1];
          obj1074.methods["visitIf(1)"] = func1166;
          func1166.definitionLine = 2876;
          func1166.definitionModule = "ast";
          var func1167 = function(argcv) {    // method visitBlock(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            setModuleName("ast");
            // visitBlock(_) is a simple accessor - elide try ... catch
            setLineNumber(2877);    // compilenode identifier
            return GraceTrue;
          };
          func1167.paramCounts = [1];
          obj1074.methods["visitBlock(1)"] = func1167;
          func1167.definitionLine = 2877;
          func1167.definitionModule = "ast";
          var func1168 = function(argcv) {    // method visitMatchCase(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            setModuleName("ast");
            // visitMatchCase(_) is a simple accessor - elide try ... catch
            setLineNumber(2878);    // compilenode identifier
            return GraceTrue;
          };
          func1168.paramCounts = [1];
          obj1074.methods["visitMatchCase(1)"] = func1168;
          func1168.definitionLine = 2878;
          func1168.definitionModule = "ast";
          var func1169 = function(argcv) {    // method visitTryCatch(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            setModuleName("ast");
            // visitTryCatch(_) is a simple accessor - elide try ... catch
            setLineNumber(2879);    // compilenode identifier
            return GraceTrue;
          };
          func1169.paramCounts = [1];
          obj1074.methods["visitTryCatch(1)"] = func1169;
          func1169.definitionLine = 2879;
          func1169.definitionModule = "ast";
          var func1170 = function(argcv) {    // method visitMethodType(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            setModuleName("ast");
            // visitMethodType(_) is a simple accessor - elide try ... catch
            setLineNumber(2880);    // compilenode identifier
            return GraceTrue;
          };
          func1170.paramCounts = [1];
          obj1074.methods["visitMethodType(1)"] = func1170;
          func1170.definitionLine = 2880;
          func1170.definitionModule = "ast";
          var func1171 = function(argcv) {    // method visitSignaturePart(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            setModuleName("ast");
            // visitSignaturePart(_) is a simple accessor - elide try ... catch
            setLineNumber(2881);    // compilenode identifier
            return GraceTrue;
          };
          func1171.paramCounts = [1];
          obj1074.methods["visitSignaturePart(1)"] = func1171;
          func1171.definitionLine = 2881;
          func1171.definitionModule = "ast";
          var func1172 = function(argcv) {    // method visitTypeDec(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            setModuleName("ast");
            // visitTypeDec(_) is a simple accessor - elide try ... catch
            setLineNumber(2882);    // compilenode identifier
            return GraceTrue;
          };
          func1172.paramCounts = [1];
          obj1074.methods["visitTypeDec(1)"] = func1172;
          func1172.definitionLine = 2882;
          func1172.definitionModule = "ast";
          var func1173 = function(argcv) {    // method visitTypeLiteral(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            setModuleName("ast");
            // visitTypeLiteral(_) is a simple accessor - elide try ... catch
            setLineNumber(2883);    // compilenode identifier
            return GraceTrue;
          };
          func1173.paramCounts = [1];
          obj1074.methods["visitTypeLiteral(1)"] = func1173;
          func1173.definitionLine = 2883;
          func1173.definitionModule = "ast";
          var func1174 = function(argcv) {    // method visitTypeParameters(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            setModuleName("ast");
            // visitTypeParameters(_) is a simple accessor - elide try ... catch
            setLineNumber(2884);    // compilenode identifier
            return GraceTrue;
          };
          func1174.paramCounts = [1];
          obj1074.methods["visitTypeParameters(1)"] = func1174;
          func1174.definitionLine = 2884;
          func1174.definitionModule = "ast";
          var func1175 = function(argcv) {    // method visitMethod(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            setModuleName("ast");
            // visitMethod(_) is a simple accessor - elide try ... catch
            setLineNumber(2885);    // compilenode identifier
            return GraceTrue;
          };
          func1175.paramCounts = [1];
          obj1074.methods["visitMethod(1)"] = func1175;
          func1175.definitionLine = 2885;
          func1175.definitionModule = "ast";
          var func1176 = function(argcv) {    // method visitCall(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            setModuleName("ast");
            // visitCall(_) is a simple accessor - elide try ... catch
            setLineNumber(2886);    // compilenode identifier
            return GraceTrue;
          };
          func1176.paramCounts = [1];
          obj1074.methods["visitCall(1)"] = func1176;
          func1176.definitionLine = 2886;
          func1176.definitionModule = "ast";
          var func1177 = function(argcv) {    // method visitObject(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            setModuleName("ast");
            // visitObject(_) is a simple accessor - elide try ... catch
            setLineNumber(2887);    // compilenode identifier
            return GraceTrue;
          };
          func1177.paramCounts = [1];
          obj1074.methods["visitObject(1)"] = func1177;
          func1177.definitionLine = 2887;
          func1177.definitionModule = "ast";
          var func1178 = function(argcv) {    // method visitModule(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            setModuleName("ast");
            // visitModule(_) is a simple accessor - elide try ... catch
            setLineNumber(2888);    // compilenode identifier
            return GraceTrue;
          };
          func1178.paramCounts = [1];
          obj1074.methods["visitModule(1)"] = func1178;
          func1178.definitionLine = 2888;
          func1178.definitionModule = "ast";
          var func1179 = function(argcv) {    // method visitArray(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            setModuleName("ast");
            // visitArray(_) is a simple accessor - elide try ... catch
            setLineNumber(2889);    // compilenode identifier
            return GraceTrue;
          };
          func1179.paramCounts = [1];
          obj1074.methods["visitArray(1)"] = func1179;
          func1179.definitionLine = 2889;
          func1179.definitionModule = "ast";
          var func1180 = function(argcv) {    // method visitMember(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            setModuleName("ast");
            // visitMember(_) is a simple accessor - elide try ... catch
            setLineNumber(2890);    // compilenode identifier
            return GraceTrue;
          };
          func1180.paramCounts = [1];
          obj1074.methods["visitMember(1)"] = func1180;
          func1180.definitionLine = 2890;
          func1180.definitionModule = "ast";
          var func1181 = function(argcv) {    // method visitGeneric(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            setModuleName("ast");
            // visitGeneric(_) is a simple accessor - elide try ... catch
            setLineNumber(2891);    // compilenode identifier
            return GraceTrue;
          };
          func1181.paramCounts = [1];
          obj1074.methods["visitGeneric(1)"] = func1181;
          func1181.definitionLine = 2891;
          func1181.definitionModule = "ast";
          var func1182 = function(argcv) {    // method visitIdentifier(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            setModuleName("ast");
            // visitIdentifier(_) is a simple accessor - elide try ... catch
            setLineNumber(2892);    // compilenode identifier
            return GraceTrue;
          };
          func1182.paramCounts = [1];
          obj1074.methods["visitIdentifier(1)"] = func1182;
          func1182.definitionLine = 2892;
          func1182.definitionModule = "ast";
          var func1183 = function(argcv) {    // method visitString(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            setModuleName("ast");
            // visitString(_) is a simple accessor - elide try ... catch
            setLineNumber(2893);    // compilenode identifier
            return GraceTrue;
          };
          func1183.paramCounts = [1];
          obj1074.methods["visitString(1)"] = func1183;
          func1183.definitionLine = 2893;
          func1183.definitionModule = "ast";
          var func1184 = function(argcv) {    // method visitNum(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            setModuleName("ast");
            // visitNum(_) is a simple accessor - elide try ... catch
            setLineNumber(2894);    // compilenode identifier
            return GraceTrue;
          };
          func1184.paramCounts = [1];
          obj1074.methods["visitNum(1)"] = func1184;
          func1184.definitionLine = 2894;
          func1184.definitionModule = "ast";
          var func1185 = function(argcv) {    // method visitOp(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            setModuleName("ast");
            // visitOp(_) is a simple accessor - elide try ... catch
            setLineNumber(2895);    // compilenode identifier
            return GraceTrue;
          };
          func1185.paramCounts = [1];
          obj1074.methods["visitOp(1)"] = func1185;
          func1185.definitionLine = 2895;
          func1185.definitionModule = "ast";
          var func1186 = function(argcv) {    // method visitBind(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            setModuleName("ast");
            // visitBind(_) is a simple accessor - elide try ... catch
            setLineNumber(2896);    // compilenode identifier
            return GraceTrue;
          };
          func1186.paramCounts = [1];
          obj1074.methods["visitBind(1)"] = func1186;
          func1186.definitionLine = 2896;
          func1186.definitionModule = "ast";
          var func1187 = function(argcv) {    // method visitDefDec(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            setModuleName("ast");
            // visitDefDec(_) is a simple accessor - elide try ... catch
            setLineNumber(2897);    // compilenode identifier
            return GraceTrue;
          };
          func1187.paramCounts = [1];
          obj1074.methods["visitDefDec(1)"] = func1187;
          func1187.definitionLine = 2897;
          func1187.definitionModule = "ast";
          var func1188 = function(argcv) {    // method visitVarDec(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            setModuleName("ast");
            // visitVarDec(_) is a simple accessor - elide try ... catch
            setLineNumber(2898);    // compilenode identifier
            return GraceTrue;
          };
          func1188.paramCounts = [1];
          obj1074.methods["visitVarDec(1)"] = func1188;
          func1188.definitionLine = 2898;
          func1188.definitionModule = "ast";
          var func1189 = function(argcv) {    // method visitImport(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            setModuleName("ast");
            // visitImport(_) is a simple accessor - elide try ... catch
            setLineNumber(2899);    // compilenode identifier
            return GraceTrue;
          };
          func1189.paramCounts = [1];
          obj1074.methods["visitImport(1)"] = func1189;
          func1189.definitionLine = 2899;
          func1189.definitionModule = "ast";
          var func1190 = function(argcv) {    // method visitReturn(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            setModuleName("ast");
            // visitReturn(_) is a simple accessor - elide try ... catch
            setLineNumber(2900);    // compilenode identifier
            return GraceTrue;
          };
          func1190.paramCounts = [1];
          obj1074.methods["visitReturn(1)"] = func1190;
          func1190.definitionLine = 2900;
          func1190.definitionModule = "ast";
          var func1191 = function(argcv) {    // method visitInherits(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            setModuleName("ast");
            // visitInherits(_) is a simple accessor - elide try ... catch
            setLineNumber(2901);    // compilenode identifier
            return GraceTrue;
          };
          func1191.paramCounts = [1];
          obj1074.methods["visitInherits(1)"] = func1191;
          func1191.definitionLine = 2901;
          func1191.definitionModule = "ast";
          var func1192 = function(argcv) {    // method visitDialect(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            setModuleName("ast");
            // visitDialect(_) is a simple accessor - elide try ... catch
            setLineNumber(2902);    // compilenode identifier
            return GraceTrue;
          };
          func1192.paramCounts = [1];
          obj1074.methods["visitDialect(1)"] = func1192;
          func1192.definitionLine = 2902;
          func1192.definitionModule = "ast";
          var func1193 = function(argcv) {    // method visitBlank(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            setModuleName("ast");
            // visitBlank(_) is a simple accessor - elide try ... catch
            setLineNumber(2903);    // compilenode identifier
            return GraceTrue;
          };
          func1193.paramCounts = [1];
          obj1074.methods["visitBlank(1)"] = func1193;
          func1193.definitionLine = 2903;
          func1193.definitionModule = "ast";
          var func1194 = function(argcv) {    // method visitComment(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            setModuleName("ast");
            // visitComment(_) is a simple accessor - elide try ... catch
            setLineNumber(2904);    // compilenode identifier
            return GraceTrue;
          };
          func1194.paramCounts = [1];
          obj1074.methods["visitComment(1)"] = func1194;
          func1194.definitionLine = 2904;
          func1194.definitionModule = "ast";
          var func1195 = function(argcv) {    // method visitImplicit(_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_o = arguments[curarg];
            curarg++;
            setModuleName("ast");
            // visitImplicit(_) is a simple accessor - elide try ... catch
            setLineNumber(2905);    // compilenode identifier
            return GraceTrue;
          };
          func1195.paramCounts = [1];
          obj1074.methods["visitImplicit(1)"] = func1195;
          func1195.definitionLine = 2905;
          func1195.definitionModule = "ast";
          var func1196 = function(argcv) {    // method asString
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            setModuleName("ast");
            setLineNumber(2907);    // compilenode string
            var string1197 = new GraceString("an AST visitor");
            return string1197;
          };
          func1196.paramCounts = [0];
          obj1074.methods["asString"] = func1196;
          func1196.definitionLine = 2907;
          func1196.definitionModule = "ast";
          superDepth = origSuperDepth;
        };
        obj_init_1074.apply(obj1074, []);
        setLineNumber(2844);    // return value
        if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)", [1], obj1074)))
            throw new GraceExceptionPacket(TypeErrorObject,
                new GraceString("result of method baseVisitor does not have " + 
                    callmethod(var_ASTVisitor, "asString", [0])._value + "."));
        return obj1074;
      };
      func1073.paramCounts = [0];
      this.methods["baseVisitor"] = func1073;
      func1073.definitionLine = 2844;
      func1073.definitionModule = "ast";
        var func1198 = function(argcv) {    // method baseVisitor$object(_)
          var curarg = 1;
          var inheritingObject = arguments[curarg++];
          // Start argument processing
          curarg = 1;
          // End argument processing
          setModuleName("ast");
          var returnTarget = invocationCount;
          invocationCount++;
          var obj1199 = Grace_allocObject(GraceObject, "baseVisitor");
          obj1199.definitionModule = "ast";
          obj1199.definitionLine = 2844;
          var inho1199 = inheritingObject;
          while (inho1199.superobj) inho1199 = inho1199.superobj;
          inho1199.superobj = obj1199;
          obj1199.data = inheritingObject.data;
          if (inheritingObject.hasOwnProperty('_value'))
            obj1199._value = inheritingObject._value;
          obj1199.outer = this;
          var reader_ast_outer1200 = function() {
            return this.outer;
          };
          obj1199.methods["outer"] = reader_ast_outer1200;
          var obj_init_1199 = function() {
            var origSuperDepth = superDepth;
            superDepth = obj1199;
            var func1201 = function(argcv) {    // method visitIf(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2845);    // compilenode identifier
              // call case 4: self request
              onSelf = true;
              var call1203 = callmethodChecked(this, "visitIf(1)", [1], var_o);
              return call1203;
            };
            func1201.paramCounts = [1, 1];
            obj1199.methods["visitIf(1)up(1)"] = func1201;
            func1201.definitionLine = 2845;
            func1201.definitionModule = "ast";
            var func1204 = function(argcv) {    // method visitBlock(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2846);    // compilenode identifier
              // call case 4: self request
              onSelf = true;
              var call1206 = callmethodChecked(this, "visitBlock(1)", [1], var_o);
              return call1206;
            };
            func1204.paramCounts = [1, 1];
            obj1199.methods["visitBlock(1)up(1)"] = func1204;
            func1204.definitionLine = 2846;
            func1204.definitionModule = "ast";
            var func1207 = function(argcv) {    // method visitMatchCase(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2847);    // compilenode identifier
              // call case 4: self request
              onSelf = true;
              var call1209 = callmethodChecked(this, "visitMatchCase(1)", [1], var_o);
              return call1209;
            };
            func1207.paramCounts = [1, 1];
            obj1199.methods["visitMatchCase(1)up(1)"] = func1207;
            func1207.definitionLine = 2847;
            func1207.definitionModule = "ast";
            var func1210 = function(argcv) {    // method visitTryCatch(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2848);    // compilenode identifier
              // call case 4: self request
              onSelf = true;
              var call1212 = callmethodChecked(this, "visitTryCatch(1)", [1], var_o);
              return call1212;
            };
            func1210.paramCounts = [1, 1];
            obj1199.methods["visitTryCatch(1)up(1)"] = func1210;
            func1210.definitionLine = 2848;
            func1210.definitionModule = "ast";
            var func1213 = function(argcv) {    // method visitMethodType(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2849);    // compilenode identifier
              // call case 4: self request
              onSelf = true;
              var call1215 = callmethodChecked(this, "visitMethodType(1)", [1], var_o);
              return call1215;
            };
            func1213.paramCounts = [1, 1];
            obj1199.methods["visitMethodType(1)up(1)"] = func1213;
            func1213.definitionLine = 2849;
            func1213.definitionModule = "ast";
            var func1216 = function(argcv) {    // method visitSignaturePart(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2850);    // compilenode identifier
              // call case 4: self request
              onSelf = true;
              var call1218 = callmethodChecked(this, "visitSignaturePart(1)", [1], var_o);
              return call1218;
            };
            func1216.paramCounts = [1, 1];
            obj1199.methods["visitSignaturePart(1)up(1)"] = func1216;
            func1216.definitionLine = 2850;
            func1216.definitionModule = "ast";
            var func1219 = function(argcv) {    // method visitTypeDec(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2851);    // compilenode identifier
              // call case 4: self request
              onSelf = true;
              var call1221 = callmethodChecked(this, "visitTypeDec(1)", [1], var_o);
              return call1221;
            };
            func1219.paramCounts = [1, 1];
            obj1199.methods["visitTypeDec(1)up(1)"] = func1219;
            func1219.definitionLine = 2851;
            func1219.definitionModule = "ast";
            var func1222 = function(argcv) {    // method visitTypeLiteral(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2852);    // compilenode identifier
              // call case 4: self request
              onSelf = true;
              var call1224 = callmethodChecked(this, "visitTypeLiteral(1)", [1], var_o);
              return call1224;
            };
            func1222.paramCounts = [1, 1];
            obj1199.methods["visitTypeLiteral(1)up(1)"] = func1222;
            func1222.definitionLine = 2852;
            func1222.definitionModule = "ast";
            var func1225 = function(argcv) {    // method visitTypeParameters(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2853);    // compilenode identifier
              // call case 4: self request
              onSelf = true;
              var call1227 = callmethodChecked(this, "visitTypeParameters(1)", [1], var_o);
              return call1227;
            };
            func1225.paramCounts = [1, 1];
            obj1199.methods["visitTypeParameters(1)up(1)"] = func1225;
            func1225.definitionLine = 2853;
            func1225.definitionModule = "ast";
            var func1228 = function(argcv) {    // method visitMethod(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2854);    // compilenode identifier
              // call case 4: self request
              onSelf = true;
              var call1230 = callmethodChecked(this, "visitMethod(1)", [1], var_o);
              return call1230;
            };
            func1228.paramCounts = [1, 1];
            obj1199.methods["visitMethod(1)up(1)"] = func1228;
            func1228.definitionLine = 2854;
            func1228.definitionModule = "ast";
            var func1231 = function(argcv) {    // method visitCall(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2855);    // compilenode identifier
              // call case 4: self request
              onSelf = true;
              var call1233 = callmethodChecked(this, "visitCall(1)", [1], var_o);
              return call1233;
            };
            func1231.paramCounts = [1, 1];
            obj1199.methods["visitCall(1)up(1)"] = func1231;
            func1231.definitionLine = 2855;
            func1231.definitionModule = "ast";
            var func1234 = function(argcv) {    // method visitObject(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2856);    // compilenode identifier
              // call case 4: self request
              onSelf = true;
              var call1236 = callmethodChecked(this, "visitObject(1)", [1], var_o);
              return call1236;
            };
            func1234.paramCounts = [1, 1];
            obj1199.methods["visitObject(1)up(1)"] = func1234;
            func1234.definitionLine = 2856;
            func1234.definitionModule = "ast";
            var func1237 = function(argcv) {    // method visitModule(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2857);    // compilenode identifier
              // call case 4: self request
              onSelf = true;
              var call1239 = callmethodChecked(this, "visitObject(1)", [1], var_o);
              return call1239;
            };
            func1237.paramCounts = [1, 1];
            obj1199.methods["visitModule(1)up(1)"] = func1237;
            func1237.definitionLine = 2857;
            func1237.definitionModule = "ast";
            var func1240 = function(argcv) {    // method visitArray(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2858);    // compilenode identifier
              // call case 4: self request
              onSelf = true;
              var call1242 = callmethodChecked(this, "visitArray(1)", [1], var_o);
              return call1242;
            };
            func1240.paramCounts = [1, 1];
            obj1199.methods["visitArray(1)up(1)"] = func1240;
            func1240.definitionLine = 2858;
            func1240.definitionModule = "ast";
            var func1243 = function(argcv) {    // method visitMember(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2859);    // compilenode identifier
              // call case 4: self request
              onSelf = true;
              var call1245 = callmethodChecked(this, "visitMember(1)", [1], var_o);
              return call1245;
            };
            func1243.paramCounts = [1, 1];
            obj1199.methods["visitMember(1)up(1)"] = func1243;
            func1243.definitionLine = 2859;
            func1243.definitionModule = "ast";
            var func1246 = function(argcv) {    // method visitGeneric(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2860);    // compilenode identifier
              // call case 4: self request
              onSelf = true;
              var call1248 = callmethodChecked(this, "visitGeneric(1)", [1], var_o);
              return call1248;
            };
            func1246.paramCounts = [1, 1];
            obj1199.methods["visitGeneric(1)up(1)"] = func1246;
            func1246.definitionLine = 2860;
            func1246.definitionModule = "ast";
            var func1249 = function(argcv) {    // method visitIdentifier(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2861);    // compilenode identifier
              // call case 4: self request
              onSelf = true;
              var call1251 = callmethodChecked(this, "visitIdentifier(1)", [1], var_o);
              return call1251;
            };
            func1249.paramCounts = [1, 1];
            obj1199.methods["visitIdentifier(1)up(1)"] = func1249;
            func1249.definitionLine = 2861;
            func1249.definitionModule = "ast";
            var func1252 = function(argcv) {    // method visitString(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2862);    // compilenode identifier
              // call case 4: self request
              onSelf = true;
              var call1254 = callmethodChecked(this, "visitString(1)", [1], var_o);
              return call1254;
            };
            func1252.paramCounts = [1, 1];
            obj1199.methods["visitString(1)up(1)"] = func1252;
            func1252.definitionLine = 2862;
            func1252.definitionModule = "ast";
            var func1255 = function(argcv) {    // method visitNum(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2863);    // compilenode identifier
              // call case 4: self request
              onSelf = true;
              var call1257 = callmethodChecked(this, "visitNum(1)", [1], var_o);
              return call1257;
            };
            func1255.paramCounts = [1, 1];
            obj1199.methods["visitNum(1)up(1)"] = func1255;
            func1255.definitionLine = 2863;
            func1255.definitionModule = "ast";
            var func1258 = function(argcv) {    // method visitOp(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2864);    // compilenode identifier
              // call case 4: self request
              onSelf = true;
              var call1260 = callmethodChecked(this, "visitOp(1)", [1], var_o);
              return call1260;
            };
            func1258.paramCounts = [1, 1];
            obj1199.methods["visitOp(1)up(1)"] = func1258;
            func1258.definitionLine = 2864;
            func1258.definitionModule = "ast";
            var func1261 = function(argcv) {    // method visitBind(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2865);    // compilenode identifier
              // call case 4: self request
              onSelf = true;
              var call1263 = callmethodChecked(this, "visitBind(1)", [1], var_o);
              return call1263;
            };
            func1261.paramCounts = [1, 1];
            obj1199.methods["visitBind(1)up(1)"] = func1261;
            func1261.definitionLine = 2865;
            func1261.definitionModule = "ast";
            var func1264 = function(argcv) {    // method visitDefDec(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2866);    // compilenode identifier
              // call case 4: self request
              onSelf = true;
              var call1266 = callmethodChecked(this, "visitDefDec(1)", [1], var_o);
              return call1266;
            };
            func1264.paramCounts = [1, 1];
            obj1199.methods["visitDefDec(1)up(1)"] = func1264;
            func1264.definitionLine = 2866;
            func1264.definitionModule = "ast";
            var func1267 = function(argcv) {    // method visitVarDec(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2867);    // compilenode identifier
              // call case 4: self request
              onSelf = true;
              var call1269 = callmethodChecked(this, "visitVarDec(1)", [1], var_o);
              return call1269;
            };
            func1267.paramCounts = [1, 1];
            obj1199.methods["visitVarDec(1)up(1)"] = func1267;
            func1267.definitionLine = 2867;
            func1267.definitionModule = "ast";
            var func1270 = function(argcv) {    // method visitImport(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2868);    // compilenode identifier
              // call case 4: self request
              onSelf = true;
              var call1272 = callmethodChecked(this, "visitImport(1)", [1], var_o);
              return call1272;
            };
            func1270.paramCounts = [1, 1];
            obj1199.methods["visitImport(1)up(1)"] = func1270;
            func1270.definitionLine = 2868;
            func1270.definitionModule = "ast";
            var func1273 = function(argcv) {    // method visitReturn(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2869);    // compilenode identifier
              // call case 4: self request
              onSelf = true;
              var call1275 = callmethodChecked(this, "visitReturn(1)", [1], var_o);
              return call1275;
            };
            func1273.paramCounts = [1, 1];
            obj1199.methods["visitReturn(1)up(1)"] = func1273;
            func1273.definitionLine = 2869;
            func1273.definitionModule = "ast";
            var func1276 = function(argcv) {    // method visitInherits(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2870);    // compilenode identifier
              // call case 4: self request
              onSelf = true;
              var call1278 = callmethodChecked(this, "visitInherits(1)", [1], var_o);
              return call1278;
            };
            func1276.paramCounts = [1, 1];
            obj1199.methods["visitInherits(1)up(1)"] = func1276;
            func1276.definitionLine = 2870;
            func1276.definitionModule = "ast";
            var func1279 = function(argcv) {    // method visitDialect(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2871);    // compilenode identifier
              // call case 4: self request
              onSelf = true;
              var call1281 = callmethodChecked(this, "visitDialect(1)", [1], var_o);
              return call1281;
            };
            func1279.paramCounts = [1, 1];
            obj1199.methods["visitDialect(1)up(1)"] = func1279;
            func1279.definitionLine = 2871;
            func1279.definitionModule = "ast";
            var func1282 = function(argcv) {    // method visitBlank(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2872);    // compilenode identifier
              // call case 4: self request
              onSelf = true;
              var call1284 = callmethodChecked(this, "visitBlank(1)", [1], var_o);
              return call1284;
            };
            func1282.paramCounts = [1, 1];
            obj1199.methods["visitBlank(1)up(1)"] = func1282;
            func1282.definitionLine = 2872;
            func1282.definitionModule = "ast";
            var func1285 = function(argcv) {    // method visitComment(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2873);    // compilenode identifier
              // call case 4: self request
              onSelf = true;
              var call1287 = callmethodChecked(this, "visitComment(1)", [1], var_o);
              return call1287;
            };
            func1285.paramCounts = [1, 1];
            obj1199.methods["visitComment(1)up(1)"] = func1285;
            func1285.definitionLine = 2873;
            func1285.definitionModule = "ast";
            var func1288 = function(argcv) {    // method visitImplicit(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2874);    // compilenode identifier
              // call case 4: self request
              onSelf = true;
              var call1290 = callmethodChecked(this, "visitImplicit(1)", [1], var_o);
              return call1290;
            };
            func1288.paramCounts = [1, 1];
            obj1199.methods["visitImplicit(1)up(1)"] = func1288;
            func1288.definitionLine = 2874;
            func1288.definitionModule = "ast";
            var func1291 = function(argcv) {    // method visitIf(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              setModuleName("ast");
              // visitIf(_) is a simple accessor - elide try ... catch
              setLineNumber(2876);    // compilenode identifier
              return GraceTrue;
            };
            func1291.paramCounts = [1];
            obj1199.methods["visitIf(1)"] = func1291;
            func1291.definitionLine = 2876;
            func1291.definitionModule = "ast";
            var func1292 = function(argcv) {    // method visitBlock(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              setModuleName("ast");
              // visitBlock(_) is a simple accessor - elide try ... catch
              setLineNumber(2877);    // compilenode identifier
              return GraceTrue;
            };
            func1292.paramCounts = [1];
            obj1199.methods["visitBlock(1)"] = func1292;
            func1292.definitionLine = 2877;
            func1292.definitionModule = "ast";
            var func1293 = function(argcv) {    // method visitMatchCase(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              setModuleName("ast");
              // visitMatchCase(_) is a simple accessor - elide try ... catch
              setLineNumber(2878);    // compilenode identifier
              return GraceTrue;
            };
            func1293.paramCounts = [1];
            obj1199.methods["visitMatchCase(1)"] = func1293;
            func1293.definitionLine = 2878;
            func1293.definitionModule = "ast";
            var func1294 = function(argcv) {    // method visitTryCatch(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              setModuleName("ast");
              // visitTryCatch(_) is a simple accessor - elide try ... catch
              setLineNumber(2879);    // compilenode identifier
              return GraceTrue;
            };
            func1294.paramCounts = [1];
            obj1199.methods["visitTryCatch(1)"] = func1294;
            func1294.definitionLine = 2879;
            func1294.definitionModule = "ast";
            var func1295 = function(argcv) {    // method visitMethodType(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              setModuleName("ast");
              // visitMethodType(_) is a simple accessor - elide try ... catch
              setLineNumber(2880);    // compilenode identifier
              return GraceTrue;
            };
            func1295.paramCounts = [1];
            obj1199.methods["visitMethodType(1)"] = func1295;
            func1295.definitionLine = 2880;
            func1295.definitionModule = "ast";
            var func1296 = function(argcv) {    // method visitSignaturePart(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              setModuleName("ast");
              // visitSignaturePart(_) is a simple accessor - elide try ... catch
              setLineNumber(2881);    // compilenode identifier
              return GraceTrue;
            };
            func1296.paramCounts = [1];
            obj1199.methods["visitSignaturePart(1)"] = func1296;
            func1296.definitionLine = 2881;
            func1296.definitionModule = "ast";
            var func1297 = function(argcv) {    // method visitTypeDec(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              setModuleName("ast");
              // visitTypeDec(_) is a simple accessor - elide try ... catch
              setLineNumber(2882);    // compilenode identifier
              return GraceTrue;
            };
            func1297.paramCounts = [1];
            obj1199.methods["visitTypeDec(1)"] = func1297;
            func1297.definitionLine = 2882;
            func1297.definitionModule = "ast";
            var func1298 = function(argcv) {    // method visitTypeLiteral(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              setModuleName("ast");
              // visitTypeLiteral(_) is a simple accessor - elide try ... catch
              setLineNumber(2883);    // compilenode identifier
              return GraceTrue;
            };
            func1298.paramCounts = [1];
            obj1199.methods["visitTypeLiteral(1)"] = func1298;
            func1298.definitionLine = 2883;
            func1298.definitionModule = "ast";
            var func1299 = function(argcv) {    // method visitTypeParameters(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              setModuleName("ast");
              // visitTypeParameters(_) is a simple accessor - elide try ... catch
              setLineNumber(2884);    // compilenode identifier
              return GraceTrue;
            };
            func1299.paramCounts = [1];
            obj1199.methods["visitTypeParameters(1)"] = func1299;
            func1299.definitionLine = 2884;
            func1299.definitionModule = "ast";
            var func1300 = function(argcv) {    // method visitMethod(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              setModuleName("ast");
              // visitMethod(_) is a simple accessor - elide try ... catch
              setLineNumber(2885);    // compilenode identifier
              return GraceTrue;
            };
            func1300.paramCounts = [1];
            obj1199.methods["visitMethod(1)"] = func1300;
            func1300.definitionLine = 2885;
            func1300.definitionModule = "ast";
            var func1301 = function(argcv) {    // method visitCall(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              setModuleName("ast");
              // visitCall(_) is a simple accessor - elide try ... catch
              setLineNumber(2886);    // compilenode identifier
              return GraceTrue;
            };
            func1301.paramCounts = [1];
            obj1199.methods["visitCall(1)"] = func1301;
            func1301.definitionLine = 2886;
            func1301.definitionModule = "ast";
            var func1302 = function(argcv) {    // method visitObject(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              setModuleName("ast");
              // visitObject(_) is a simple accessor - elide try ... catch
              setLineNumber(2887);    // compilenode identifier
              return GraceTrue;
            };
            func1302.paramCounts = [1];
            obj1199.methods["visitObject(1)"] = func1302;
            func1302.definitionLine = 2887;
            func1302.definitionModule = "ast";
            var func1303 = function(argcv) {    // method visitModule(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              setModuleName("ast");
              // visitModule(_) is a simple accessor - elide try ... catch
              setLineNumber(2888);    // compilenode identifier
              return GraceTrue;
            };
            func1303.paramCounts = [1];
            obj1199.methods["visitModule(1)"] = func1303;
            func1303.definitionLine = 2888;
            func1303.definitionModule = "ast";
            var func1304 = function(argcv) {    // method visitArray(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              setModuleName("ast");
              // visitArray(_) is a simple accessor - elide try ... catch
              setLineNumber(2889);    // compilenode identifier
              return GraceTrue;
            };
            func1304.paramCounts = [1];
            obj1199.methods["visitArray(1)"] = func1304;
            func1304.definitionLine = 2889;
            func1304.definitionModule = "ast";
            var func1305 = function(argcv) {    // method visitMember(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              setModuleName("ast");
              // visitMember(_) is a simple accessor - elide try ... catch
              setLineNumber(2890);    // compilenode identifier
              return GraceTrue;
            };
            func1305.paramCounts = [1];
            obj1199.methods["visitMember(1)"] = func1305;
            func1305.definitionLine = 2890;
            func1305.definitionModule = "ast";
            var func1306 = function(argcv) {    // method visitGeneric(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              setModuleName("ast");
              // visitGeneric(_) is a simple accessor - elide try ... catch
              setLineNumber(2891);    // compilenode identifier
              return GraceTrue;
            };
            func1306.paramCounts = [1];
            obj1199.methods["visitGeneric(1)"] = func1306;
            func1306.definitionLine = 2891;
            func1306.definitionModule = "ast";
            var func1307 = function(argcv) {    // method visitIdentifier(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              setModuleName("ast");
              // visitIdentifier(_) is a simple accessor - elide try ... catch
              setLineNumber(2892);    // compilenode identifier
              return GraceTrue;
            };
            func1307.paramCounts = [1];
            obj1199.methods["visitIdentifier(1)"] = func1307;
            func1307.definitionLine = 2892;
            func1307.definitionModule = "ast";
            var func1308 = function(argcv) {    // method visitString(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              setModuleName("ast");
              // visitString(_) is a simple accessor - elide try ... catch
              setLineNumber(2893);    // compilenode identifier
              return GraceTrue;
            };
            func1308.paramCounts = [1];
            obj1199.methods["visitString(1)"] = func1308;
            func1308.definitionLine = 2893;
            func1308.definitionModule = "ast";
            var func1309 = function(argcv) {    // method visitNum(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              setModuleName("ast");
              // visitNum(_) is a simple accessor - elide try ... catch
              setLineNumber(2894);    // compilenode identifier
              return GraceTrue;
            };
            func1309.paramCounts = [1];
            obj1199.methods["visitNum(1)"] = func1309;
            func1309.definitionLine = 2894;
            func1309.definitionModule = "ast";
            var func1310 = function(argcv) {    // method visitOp(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              setModuleName("ast");
              // visitOp(_) is a simple accessor - elide try ... catch
              setLineNumber(2895);    // compilenode identifier
              return GraceTrue;
            };
            func1310.paramCounts = [1];
            obj1199.methods["visitOp(1)"] = func1310;
            func1310.definitionLine = 2895;
            func1310.definitionModule = "ast";
            var func1311 = function(argcv) {    // method visitBind(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              setModuleName("ast");
              // visitBind(_) is a simple accessor - elide try ... catch
              setLineNumber(2896);    // compilenode identifier
              return GraceTrue;
            };
            func1311.paramCounts = [1];
            obj1199.methods["visitBind(1)"] = func1311;
            func1311.definitionLine = 2896;
            func1311.definitionModule = "ast";
            var func1312 = function(argcv) {    // method visitDefDec(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              setModuleName("ast");
              // visitDefDec(_) is a simple accessor - elide try ... catch
              setLineNumber(2897);    // compilenode identifier
              return GraceTrue;
            };
            func1312.paramCounts = [1];
            obj1199.methods["visitDefDec(1)"] = func1312;
            func1312.definitionLine = 2897;
            func1312.definitionModule = "ast";
            var func1313 = function(argcv) {    // method visitVarDec(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              setModuleName("ast");
              // visitVarDec(_) is a simple accessor - elide try ... catch
              setLineNumber(2898);    // compilenode identifier
              return GraceTrue;
            };
            func1313.paramCounts = [1];
            obj1199.methods["visitVarDec(1)"] = func1313;
            func1313.definitionLine = 2898;
            func1313.definitionModule = "ast";
            var func1314 = function(argcv) {    // method visitImport(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              setModuleName("ast");
              // visitImport(_) is a simple accessor - elide try ... catch
              setLineNumber(2899);    // compilenode identifier
              return GraceTrue;
            };
            func1314.paramCounts = [1];
            obj1199.methods["visitImport(1)"] = func1314;
            func1314.definitionLine = 2899;
            func1314.definitionModule = "ast";
            var func1315 = function(argcv) {    // method visitReturn(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              setModuleName("ast");
              // visitReturn(_) is a simple accessor - elide try ... catch
              setLineNumber(2900);    // compilenode identifier
              return GraceTrue;
            };
            func1315.paramCounts = [1];
            obj1199.methods["visitReturn(1)"] = func1315;
            func1315.definitionLine = 2900;
            func1315.definitionModule = "ast";
            var func1316 = function(argcv) {    // method visitInherits(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              setModuleName("ast");
              // visitInherits(_) is a simple accessor - elide try ... catch
              setLineNumber(2901);    // compilenode identifier
              return GraceTrue;
            };
            func1316.paramCounts = [1];
            obj1199.methods["visitInherits(1)"] = func1316;
            func1316.definitionLine = 2901;
            func1316.definitionModule = "ast";
            var func1317 = function(argcv) {    // method visitDialect(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              setModuleName("ast");
              // visitDialect(_) is a simple accessor - elide try ... catch
              setLineNumber(2902);    // compilenode identifier
              return GraceTrue;
            };
            func1317.paramCounts = [1];
            obj1199.methods["visitDialect(1)"] = func1317;
            func1317.definitionLine = 2902;
            func1317.definitionModule = "ast";
            var func1318 = function(argcv) {    // method visitBlank(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              setModuleName("ast");
              // visitBlank(_) is a simple accessor - elide try ... catch
              setLineNumber(2903);    // compilenode identifier
              return GraceTrue;
            };
            func1318.paramCounts = [1];
            obj1199.methods["visitBlank(1)"] = func1318;
            func1318.definitionLine = 2903;
            func1318.definitionModule = "ast";
            var func1319 = function(argcv) {    // method visitComment(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              setModuleName("ast");
              // visitComment(_) is a simple accessor - elide try ... catch
              setLineNumber(2904);    // compilenode identifier
              return GraceTrue;
            };
            func1319.paramCounts = [1];
            obj1199.methods["visitComment(1)"] = func1319;
            func1319.definitionLine = 2904;
            func1319.definitionModule = "ast";
            var func1320 = function(argcv) {    // method visitImplicit(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              setModuleName("ast");
              // visitImplicit(_) is a simple accessor - elide try ... catch
              setLineNumber(2905);    // compilenode identifier
              return GraceTrue;
            };
            func1320.paramCounts = [1];
            obj1199.methods["visitImplicit(1)"] = func1320;
            func1320.definitionLine = 2905;
            func1320.definitionModule = "ast";
            var func1321 = function(argcv) {    // method asString
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              setModuleName("ast");
              setLineNumber(2907);    // compilenode string
              var string1322 = new GraceString("an AST visitor");
              return string1322;
            };
            func1321.paramCounts = [0];
            obj1199.methods["asString"] = func1321;
            func1321.definitionLine = 2907;
            func1321.definitionModule = "ast";
            superDepth = origSuperDepth;
          };
          obj_init_1199.apply(inheritingObject, []);
          return obj1199;
          };
          this.methods["baseVisitor$object(1)"] = func1198;
        setLineNumber(2910);    // compilenode method
        var func1323 = function(argcv) {    // method pluggableVisitor(_)
          var returnTarget = invocationCount;
          invocationCount++;
          var curarg = 1;
          var var_visitation = arguments[curarg];
          curarg++;
          // Start argument checking
          curarg = 1;
          // call case 5: prelude request
          var call1325 = callmethodChecked(var_prelude, "Block2", []);
          if (!Grace_isTrue(callmethod(call1325, "match(1)",  [1], arguments[curarg])))
              throw new GraceExceptionPacket(TypeErrorObject,
                  new GraceString("argument 1 in pluggableVisitor (arg list 1), which corresponds to parameter visitation, does not have " + 
                      callmethod(call1325, "asString", [0])._value + "."));
          curarg++;
          // End argument checking
          setModuleName("ast");
          var obj1326 = Grace_allocObject(GraceObject, "pluggableVisitor(_)");
          obj1326.definitionModule = "ast";
          obj1326.definitionLine = 2910;
          obj1326.outer = this;
          var reader_ast_outer1327 = function() {
            return this.outer;
          };
          obj1326.methods["outer"] = reader_ast_outer1327;
          var obj_init_1326 = function() {
            var origSuperDepth = superDepth;
            superDepth = obj1326;
            var func1328 = function(argcv) {    // method visitIf(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2917);    // compilenode identifier
              // call case 6: other requests
              var call1330 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
              return call1330;
            };
            func1328.paramCounts = [1, 1];
            obj1326.methods["visitIf(1)up(1)"] = func1328;
            func1328.definitionLine = 2917;
            func1328.definitionModule = "ast";
            var func1331 = function(argcv) {    // method visitBlock(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2918);    // compilenode identifier
              // call case 6: other requests
              var call1333 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
              return call1333;
            };
            func1331.paramCounts = [1, 1];
            obj1326.methods["visitBlock(1)up(1)"] = func1331;
            func1331.definitionLine = 2918;
            func1331.definitionModule = "ast";
            var func1334 = function(argcv) {    // method visitMatchCase(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2919);    // compilenode identifier
              // call case 6: other requests
              var call1336 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
              return call1336;
            };
            func1334.paramCounts = [1, 1];
            obj1326.methods["visitMatchCase(1)up(1)"] = func1334;
            func1334.definitionLine = 2919;
            func1334.definitionModule = "ast";
            var func1337 = function(argcv) {    // method visitTryCatch(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2920);    // compilenode identifier
              // call case 6: other requests
              var call1339 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
              return call1339;
            };
            func1337.paramCounts = [1, 1];
            obj1326.methods["visitTryCatch(1)up(1)"] = func1337;
            func1337.definitionLine = 2920;
            func1337.definitionModule = "ast";
            var func1340 = function(argcv) {    // method visitMethodType(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2921);    // compilenode identifier
              // call case 6: other requests
              var call1342 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
              return call1342;
            };
            func1340.paramCounts = [1, 1];
            obj1326.methods["visitMethodType(1)up(1)"] = func1340;
            func1340.definitionLine = 2921;
            func1340.definitionModule = "ast";
            var func1343 = function(argcv) {    // method visitSignaturePart(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2922);    // compilenode identifier
              // call case 6: other requests
              var call1345 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
              return call1345;
            };
            func1343.paramCounts = [1, 1];
            obj1326.methods["visitSignaturePart(1)up(1)"] = func1343;
            func1343.definitionLine = 2922;
            func1343.definitionModule = "ast";
            var func1346 = function(argcv) {    // method visitTypeDec(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2923);    // compilenode identifier
              // call case 6: other requests
              var call1348 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
              return call1348;
            };
            func1346.paramCounts = [1, 1];
            obj1326.methods["visitTypeDec(1)up(1)"] = func1346;
            func1346.definitionLine = 2923;
            func1346.definitionModule = "ast";
            var func1349 = function(argcv) {    // method visitTypeLiteral(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2924);    // compilenode identifier
              // call case 6: other requests
              var call1351 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
              return call1351;
            };
            func1349.paramCounts = [1, 1];
            obj1326.methods["visitTypeLiteral(1)up(1)"] = func1349;
            func1349.definitionLine = 2924;
            func1349.definitionModule = "ast";
            var func1352 = function(argcv) {    // method visitMethod(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2925);    // compilenode identifier
              // call case 6: other requests
              var call1354 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
              return call1354;
            };
            func1352.paramCounts = [1, 1];
            obj1326.methods["visitMethod(1)up(1)"] = func1352;
            func1352.definitionLine = 2925;
            func1352.definitionModule = "ast";
            var func1355 = function(argcv) {    // method visitCall(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2926);    // compilenode identifier
              // call case 6: other requests
              var call1357 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
              return call1357;
            };
            func1355.paramCounts = [1, 1];
            obj1326.methods["visitCall(1)up(1)"] = func1355;
            func1355.definitionLine = 2926;
            func1355.definitionModule = "ast";
            var func1358 = function(argcv) {    // method visitObject(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2927);    // compilenode identifier
              // call case 6: other requests
              var call1360 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
              return call1360;
            };
            func1358.paramCounts = [1, 1];
            obj1326.methods["visitObject(1)up(1)"] = func1358;
            func1358.definitionLine = 2927;
            func1358.definitionModule = "ast";
            var func1361 = function(argcv) {    // method visitModule(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2928);    // compilenode identifier
              // call case 6: other requests
              var call1363 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
              return call1363;
            };
            func1361.paramCounts = [1, 1];
            obj1326.methods["visitModule(1)up(1)"] = func1361;
            func1361.definitionLine = 2928;
            func1361.definitionModule = "ast";
            var func1364 = function(argcv) {    // method visitArray(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2929);    // compilenode identifier
              // call case 6: other requests
              var call1366 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
              return call1366;
            };
            func1364.paramCounts = [1, 1];
            obj1326.methods["visitArray(1)up(1)"] = func1364;
            func1364.definitionLine = 2929;
            func1364.definitionModule = "ast";
            var func1367 = function(argcv) {    // method visitMember(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2930);    // compilenode identifier
              // call case 6: other requests
              var call1369 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
              return call1369;
            };
            func1367.paramCounts = [1, 1];
            obj1326.methods["visitMember(1)up(1)"] = func1367;
            func1367.definitionLine = 2930;
            func1367.definitionModule = "ast";
            var func1370 = function(argcv) {    // method visitGeneric(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2931);    // compilenode identifier
              // call case 6: other requests
              var call1372 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
              return call1372;
            };
            func1370.paramCounts = [1, 1];
            obj1326.methods["visitGeneric(1)up(1)"] = func1370;
            func1370.definitionLine = 2931;
            func1370.definitionModule = "ast";
            var func1373 = function(argcv) {    // method visitIdentifier(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2932);    // compilenode identifier
              // call case 6: other requests
              var call1375 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
              return call1375;
            };
            func1373.paramCounts = [1, 1];
            obj1326.methods["visitIdentifier(1)up(1)"] = func1373;
            func1373.definitionLine = 2932;
            func1373.definitionModule = "ast";
            var func1376 = function(argcv) {    // method visitString(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2933);    // compilenode identifier
              // call case 6: other requests
              var call1378 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
              return call1378;
            };
            func1376.paramCounts = [1, 1];
            obj1326.methods["visitString(1)up(1)"] = func1376;
            func1376.definitionLine = 2933;
            func1376.definitionModule = "ast";
            var func1379 = function(argcv) {    // method visitNum(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2934);    // compilenode identifier
              // call case 6: other requests
              var call1381 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
              return call1381;
            };
            func1379.paramCounts = [1, 1];
            obj1326.methods["visitNum(1)up(1)"] = func1379;
            func1379.definitionLine = 2934;
            func1379.definitionModule = "ast";
            var func1382 = function(argcv) {    // method visitOp(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2935);    // compilenode identifier
              // call case 6: other requests
              var call1384 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
              return call1384;
            };
            func1382.paramCounts = [1, 1];
            obj1326.methods["visitOp(1)up(1)"] = func1382;
            func1382.definitionLine = 2935;
            func1382.definitionModule = "ast";
            var func1385 = function(argcv) {    // method visitBind(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2936);    // compilenode identifier
              // call case 6: other requests
              var call1387 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
              return call1387;
            };
            func1385.paramCounts = [1, 1];
            obj1326.methods["visitBind(1)up(1)"] = func1385;
            func1385.definitionLine = 2936;
            func1385.definitionModule = "ast";
            var func1388 = function(argcv) {    // method visitDefDec(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2937);    // compilenode identifier
              // call case 6: other requests
              var call1390 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
              return call1390;
            };
            func1388.paramCounts = [1, 1];
            obj1326.methods["visitDefDec(1)up(1)"] = func1388;
            func1388.definitionLine = 2937;
            func1388.definitionModule = "ast";
            var func1391 = function(argcv) {    // method visitVarDec(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2938);    // compilenode identifier
              // call case 6: other requests
              var call1393 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
              return call1393;
            };
            func1391.paramCounts = [1, 1];
            obj1326.methods["visitVarDec(1)up(1)"] = func1391;
            func1391.definitionLine = 2938;
            func1391.definitionModule = "ast";
            var func1394 = function(argcv) {    // method visitImport(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2939);    // compilenode identifier
              // call case 6: other requests
              var call1396 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
              return call1396;
            };
            func1394.paramCounts = [1, 1];
            obj1326.methods["visitImport(1)up(1)"] = func1394;
            func1394.definitionLine = 2939;
            func1394.definitionModule = "ast";
            var func1397 = function(argcv) {    // method visitReturn(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2940);    // compilenode identifier
              // call case 6: other requests
              var call1399 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
              return call1399;
            };
            func1397.paramCounts = [1, 1];
            obj1326.methods["visitReturn(1)up(1)"] = func1397;
            func1397.definitionLine = 2940;
            func1397.definitionModule = "ast";
            var func1400 = function(argcv) {    // method visitInherits(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2941);    // compilenode identifier
              // call case 6: other requests
              var call1402 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
              return call1402;
            };
            func1400.paramCounts = [1, 1];
            obj1326.methods["visitInherits(1)up(1)"] = func1400;
            func1400.definitionLine = 2941;
            func1400.definitionModule = "ast";
            var func1403 = function(argcv) {    // method visitDialect(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2942);    // compilenode identifier
              // call case 6: other requests
              var call1405 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
              return call1405;
            };
            func1403.paramCounts = [1, 1];
            obj1326.methods["visitDialect(1)up(1)"] = func1403;
            func1403.definitionLine = 2942;
            func1403.definitionModule = "ast";
            var func1406 = function(argcv) {    // method visitBlank(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2943);    // compilenode identifier
              // call case 6: other requests
              var call1408 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
              return call1408;
            };
            func1406.paramCounts = [1, 1];
            obj1326.methods["visitBlank(1)up(1)"] = func1406;
            func1406.definitionLine = 2943;
            func1406.definitionModule = "ast";
            var func1409 = function(argcv) {    // method visitComment(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2944);    // compilenode identifier
              // call case 6: other requests
              var call1411 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
              return call1411;
            };
            func1409.paramCounts = [1, 1];
            obj1326.methods["visitComment(1)up(1)"] = func1409;
            func1409.definitionLine = 2944;
            func1409.definitionModule = "ast";
            var func1412 = function(argcv) {    // method visitImplicit(_)up(_)
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              var var_o = arguments[curarg];
              curarg++;
              var var_as = arguments[curarg];
              curarg++;
              setModuleName("ast");
              setLineNumber(2945);    // compilenode identifier
              // call case 6: other requests
              var call1414 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
              return call1414;
            };
            func1412.paramCounts = [1, 1];
            obj1326.methods["visitImplicit(1)up(1)"] = func1412;
            func1412.definitionLine = 2945;
            func1412.definitionModule = "ast";
            var func1415 = function(argcv) {    // method asString
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              setModuleName("ast");
              setLineNumber(2947);    // compilenode string
              var string1416 = new GraceString("a pluggable AST visitor");
              return string1416;
            };
            func1415.paramCounts = [0];
            obj1326.methods["asString"] = func1415;
            func1415.definitionLine = 2947;
            func1415.definitionModule = "ast";
            superDepth = origSuperDepth;
          };
          obj_init_1326.apply(obj1326, []);
          setLineNumber(2910);    // return value
          if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)", [1], obj1326)))
              throw new GraceExceptionPacket(TypeErrorObject,
                  new GraceString("result of method pluggableVisitor(_) does not have " + 
                      callmethod(var_ASTVisitor, "asString", [0])._value + "."));
          return obj1326;
        };
        func1323.paramCounts = [1];
        this.methods["pluggableVisitor(1)"] = func1323;
        func1323.definitionLine = 2910;
        func1323.definitionModule = "ast";
          var func1417 = function(argcv) {    // method pluggableVisitor(_)$object(_)
            var curarg = 1;
            var var_visitation = arguments[curarg];
            curarg++;
            var inheritingObject = arguments[curarg++];
            // Start argument processing
            curarg = 1;
            // call case 5: prelude request
            var call1419 = callmethodChecked(var_prelude, "Block2", []);
            if (!Grace_isTrue(callmethod(call1419, "match(1)",  [1], arguments[curarg])))
                throw new GraceExceptionPacket(TypeErrorObject,
                    new GraceString("argument 1 in pluggableVisitor (arg list 1), which corresponds to parameter visitation, does not have " + 
                        callmethod(call1419, "asString", [0])._value + "."));
            curarg++;
            // End argument processing
            setModuleName("ast");
            var returnTarget = invocationCount;
            invocationCount++;
            var obj1420 = Grace_allocObject(GraceObject, "pluggableVisitor(1)");
            obj1420.definitionModule = "ast";
            obj1420.definitionLine = 2910;
            var inho1420 = inheritingObject;
            while (inho1420.superobj) inho1420 = inho1420.superobj;
            inho1420.superobj = obj1420;
            obj1420.data = inheritingObject.data;
            if (inheritingObject.hasOwnProperty('_value'))
              obj1420._value = inheritingObject._value;
            obj1420.outer = this;
            var reader_ast_outer1421 = function() {
              return this.outer;
            };
            obj1420.methods["outer"] = reader_ast_outer1421;
            var obj_init_1420 = function() {
              var origSuperDepth = superDepth;
              superDepth = obj1420;
              var func1422 = function(argcv) {    // method visitIf(_)up(_)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                var var_as = arguments[curarg];
                curarg++;
                setModuleName("ast");
                setLineNumber(2917);    // compilenode identifier
                // call case 6: other requests
                var call1424 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
                return call1424;
              };
              func1422.paramCounts = [1, 1];
              obj1420.methods["visitIf(1)up(1)"] = func1422;
              func1422.definitionLine = 2917;
              func1422.definitionModule = "ast";
              var func1425 = function(argcv) {    // method visitBlock(_)up(_)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                var var_as = arguments[curarg];
                curarg++;
                setModuleName("ast");
                setLineNumber(2918);    // compilenode identifier
                // call case 6: other requests
                var call1427 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
                return call1427;
              };
              func1425.paramCounts = [1, 1];
              obj1420.methods["visitBlock(1)up(1)"] = func1425;
              func1425.definitionLine = 2918;
              func1425.definitionModule = "ast";
              var func1428 = function(argcv) {    // method visitMatchCase(_)up(_)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                var var_as = arguments[curarg];
                curarg++;
                setModuleName("ast");
                setLineNumber(2919);    // compilenode identifier
                // call case 6: other requests
                var call1430 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
                return call1430;
              };
              func1428.paramCounts = [1, 1];
              obj1420.methods["visitMatchCase(1)up(1)"] = func1428;
              func1428.definitionLine = 2919;
              func1428.definitionModule = "ast";
              var func1431 = function(argcv) {    // method visitTryCatch(_)up(_)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                var var_as = arguments[curarg];
                curarg++;
                setModuleName("ast");
                setLineNumber(2920);    // compilenode identifier
                // call case 6: other requests
                var call1433 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
                return call1433;
              };
              func1431.paramCounts = [1, 1];
              obj1420.methods["visitTryCatch(1)up(1)"] = func1431;
              func1431.definitionLine = 2920;
              func1431.definitionModule = "ast";
              var func1434 = function(argcv) {    // method visitMethodType(_)up(_)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                var var_as = arguments[curarg];
                curarg++;
                setModuleName("ast");
                setLineNumber(2921);    // compilenode identifier
                // call case 6: other requests
                var call1436 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
                return call1436;
              };
              func1434.paramCounts = [1, 1];
              obj1420.methods["visitMethodType(1)up(1)"] = func1434;
              func1434.definitionLine = 2921;
              func1434.definitionModule = "ast";
              var func1437 = function(argcv) {    // method visitSignaturePart(_)up(_)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                var var_as = arguments[curarg];
                curarg++;
                setModuleName("ast");
                setLineNumber(2922);    // compilenode identifier
                // call case 6: other requests
                var call1439 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
                return call1439;
              };
              func1437.paramCounts = [1, 1];
              obj1420.methods["visitSignaturePart(1)up(1)"] = func1437;
              func1437.definitionLine = 2922;
              func1437.definitionModule = "ast";
              var func1440 = function(argcv) {    // method visitTypeDec(_)up(_)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                var var_as = arguments[curarg];
                curarg++;
                setModuleName("ast");
                setLineNumber(2923);    // compilenode identifier
                // call case 6: other requests
                var call1442 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
                return call1442;
              };
              func1440.paramCounts = [1, 1];
              obj1420.methods["visitTypeDec(1)up(1)"] = func1440;
              func1440.definitionLine = 2923;
              func1440.definitionModule = "ast";
              var func1443 = function(argcv) {    // method visitTypeLiteral(_)up(_)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                var var_as = arguments[curarg];
                curarg++;
                setModuleName("ast");
                setLineNumber(2924);    // compilenode identifier
                // call case 6: other requests
                var call1445 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
                return call1445;
              };
              func1443.paramCounts = [1, 1];
              obj1420.methods["visitTypeLiteral(1)up(1)"] = func1443;
              func1443.definitionLine = 2924;
              func1443.definitionModule = "ast";
              var func1446 = function(argcv) {    // method visitMethod(_)up(_)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                var var_as = arguments[curarg];
                curarg++;
                setModuleName("ast");
                setLineNumber(2925);    // compilenode identifier
                // call case 6: other requests
                var call1448 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
                return call1448;
              };
              func1446.paramCounts = [1, 1];
              obj1420.methods["visitMethod(1)up(1)"] = func1446;
              func1446.definitionLine = 2925;
              func1446.definitionModule = "ast";
              var func1449 = function(argcv) {    // method visitCall(_)up(_)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                var var_as = arguments[curarg];
                curarg++;
                setModuleName("ast");
                setLineNumber(2926);    // compilenode identifier
                // call case 6: other requests
                var call1451 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
                return call1451;
              };
              func1449.paramCounts = [1, 1];
              obj1420.methods["visitCall(1)up(1)"] = func1449;
              func1449.definitionLine = 2926;
              func1449.definitionModule = "ast";
              var func1452 = function(argcv) {    // method visitObject(_)up(_)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                var var_as = arguments[curarg];
                curarg++;
                setModuleName("ast");
                setLineNumber(2927);    // compilenode identifier
                // call case 6: other requests
                var call1454 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
                return call1454;
              };
              func1452.paramCounts = [1, 1];
              obj1420.methods["visitObject(1)up(1)"] = func1452;
              func1452.definitionLine = 2927;
              func1452.definitionModule = "ast";
              var func1455 = function(argcv) {    // method visitModule(_)up(_)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                var var_as = arguments[curarg];
                curarg++;
                setModuleName("ast");
                setLineNumber(2928);    // compilenode identifier
                // call case 6: other requests
                var call1457 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
                return call1457;
              };
              func1455.paramCounts = [1, 1];
              obj1420.methods["visitModule(1)up(1)"] = func1455;
              func1455.definitionLine = 2928;
              func1455.definitionModule = "ast";
              var func1458 = function(argcv) {    // method visitArray(_)up(_)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                var var_as = arguments[curarg];
                curarg++;
                setModuleName("ast");
                setLineNumber(2929);    // compilenode identifier
                // call case 6: other requests
                var call1460 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
                return call1460;
              };
              func1458.paramCounts = [1, 1];
              obj1420.methods["visitArray(1)up(1)"] = func1458;
              func1458.definitionLine = 2929;
              func1458.definitionModule = "ast";
              var func1461 = function(argcv) {    // method visitMember(_)up(_)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                var var_as = arguments[curarg];
                curarg++;
                setModuleName("ast");
                setLineNumber(2930);    // compilenode identifier
                // call case 6: other requests
                var call1463 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
                return call1463;
              };
              func1461.paramCounts = [1, 1];
              obj1420.methods["visitMember(1)up(1)"] = func1461;
              func1461.definitionLine = 2930;
              func1461.definitionModule = "ast";
              var func1464 = function(argcv) {    // method visitGeneric(_)up(_)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                var var_as = arguments[curarg];
                curarg++;
                setModuleName("ast");
                setLineNumber(2931);    // compilenode identifier
                // call case 6: other requests
                var call1466 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
                return call1466;
              };
              func1464.paramCounts = [1, 1];
              obj1420.methods["visitGeneric(1)up(1)"] = func1464;
              func1464.definitionLine = 2931;
              func1464.definitionModule = "ast";
              var func1467 = function(argcv) {    // method visitIdentifier(_)up(_)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                var var_as = arguments[curarg];
                curarg++;
                setModuleName("ast");
                setLineNumber(2932);    // compilenode identifier
                // call case 6: other requests
                var call1469 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
                return call1469;
              };
              func1467.paramCounts = [1, 1];
              obj1420.methods["visitIdentifier(1)up(1)"] = func1467;
              func1467.definitionLine = 2932;
              func1467.definitionModule = "ast";
              var func1470 = function(argcv) {    // method visitString(_)up(_)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                var var_as = arguments[curarg];
                curarg++;
                setModuleName("ast");
                setLineNumber(2933);    // compilenode identifier
                // call case 6: other requests
                var call1472 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
                return call1472;
              };
              func1470.paramCounts = [1, 1];
              obj1420.methods["visitString(1)up(1)"] = func1470;
              func1470.definitionLine = 2933;
              func1470.definitionModule = "ast";
              var func1473 = function(argcv) {    // method visitNum(_)up(_)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                var var_as = arguments[curarg];
                curarg++;
                setModuleName("ast");
                setLineNumber(2934);    // compilenode identifier
                // call case 6: other requests
                var call1475 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
                return call1475;
              };
              func1473.paramCounts = [1, 1];
              obj1420.methods["visitNum(1)up(1)"] = func1473;
              func1473.definitionLine = 2934;
              func1473.definitionModule = "ast";
              var func1476 = function(argcv) {    // method visitOp(_)up(_)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                var var_as = arguments[curarg];
                curarg++;
                setModuleName("ast");
                setLineNumber(2935);    // compilenode identifier
                // call case 6: other requests
                var call1478 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
                return call1478;
              };
              func1476.paramCounts = [1, 1];
              obj1420.methods["visitOp(1)up(1)"] = func1476;
              func1476.definitionLine = 2935;
              func1476.definitionModule = "ast";
              var func1479 = function(argcv) {    // method visitBind(_)up(_)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                var var_as = arguments[curarg];
                curarg++;
                setModuleName("ast");
                setLineNumber(2936);    // compilenode identifier
                // call case 6: other requests
                var call1481 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
                return call1481;
              };
              func1479.paramCounts = [1, 1];
              obj1420.methods["visitBind(1)up(1)"] = func1479;
              func1479.definitionLine = 2936;
              func1479.definitionModule = "ast";
              var func1482 = function(argcv) {    // method visitDefDec(_)up(_)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                var var_as = arguments[curarg];
                curarg++;
                setModuleName("ast");
                setLineNumber(2937);    // compilenode identifier
                // call case 6: other requests
                var call1484 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
                return call1484;
              };
              func1482.paramCounts = [1, 1];
              obj1420.methods["visitDefDec(1)up(1)"] = func1482;
              func1482.definitionLine = 2937;
              func1482.definitionModule = "ast";
              var func1485 = function(argcv) {    // method visitVarDec(_)up(_)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                var var_as = arguments[curarg];
                curarg++;
                setModuleName("ast");
                setLineNumber(2938);    // compilenode identifier
                // call case 6: other requests
                var call1487 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
                return call1487;
              };
              func1485.paramCounts = [1, 1];
              obj1420.methods["visitVarDec(1)up(1)"] = func1485;
              func1485.definitionLine = 2938;
              func1485.definitionModule = "ast";
              var func1488 = function(argcv) {    // method visitImport(_)up(_)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                var var_as = arguments[curarg];
                curarg++;
                setModuleName("ast");
                setLineNumber(2939);    // compilenode identifier
                // call case 6: other requests
                var call1490 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
                return call1490;
              };
              func1488.paramCounts = [1, 1];
              obj1420.methods["visitImport(1)up(1)"] = func1488;
              func1488.definitionLine = 2939;
              func1488.definitionModule = "ast";
              var func1491 = function(argcv) {    // method visitReturn(_)up(_)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                var var_as = arguments[curarg];
                curarg++;
                setModuleName("ast");
                setLineNumber(2940);    // compilenode identifier
                // call case 6: other requests
                var call1493 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
                return call1493;
              };
              func1491.paramCounts = [1, 1];
              obj1420.methods["visitReturn(1)up(1)"] = func1491;
              func1491.definitionLine = 2940;
              func1491.definitionModule = "ast";
              var func1494 = function(argcv) {    // method visitInherits(_)up(_)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                var var_as = arguments[curarg];
                curarg++;
                setModuleName("ast");
                setLineNumber(2941);    // compilenode identifier
                // call case 6: other requests
                var call1496 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
                return call1496;
              };
              func1494.paramCounts = [1, 1];
              obj1420.methods["visitInherits(1)up(1)"] = func1494;
              func1494.definitionLine = 2941;
              func1494.definitionModule = "ast";
              var func1497 = function(argcv) {    // method visitDialect(_)up(_)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                var var_as = arguments[curarg];
                curarg++;
                setModuleName("ast");
                setLineNumber(2942);    // compilenode identifier
                // call case 6: other requests
                var call1499 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
                return call1499;
              };
              func1497.paramCounts = [1, 1];
              obj1420.methods["visitDialect(1)up(1)"] = func1497;
              func1497.definitionLine = 2942;
              func1497.definitionModule = "ast";
              var func1500 = function(argcv) {    // method visitBlank(_)up(_)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                var var_as = arguments[curarg];
                curarg++;
                setModuleName("ast");
                setLineNumber(2943);    // compilenode identifier
                // call case 6: other requests
                var call1502 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
                return call1502;
              };
              func1500.paramCounts = [1, 1];
              obj1420.methods["visitBlank(1)up(1)"] = func1500;
              func1500.definitionLine = 2943;
              func1500.definitionModule = "ast";
              var func1503 = function(argcv) {    // method visitComment(_)up(_)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                var var_as = arguments[curarg];
                curarg++;
                setModuleName("ast");
                setLineNumber(2944);    // compilenode identifier
                // call case 6: other requests
                var call1505 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
                return call1505;
              };
              func1503.paramCounts = [1, 1];
              obj1420.methods["visitComment(1)up(1)"] = func1503;
              func1503.definitionLine = 2944;
              func1503.definitionModule = "ast";
              var func1506 = function(argcv) {    // method visitImplicit(_)up(_)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_o = arguments[curarg];
                curarg++;
                var var_as = arguments[curarg];
                curarg++;
                setModuleName("ast");
                setLineNumber(2945);    // compilenode identifier
                // call case 6: other requests
                var call1508 = callmethodChecked(var_visitation, "apply(2)", [2], var_o, var_as);
                return call1508;
              };
              func1506.paramCounts = [1, 1];
              obj1420.methods["visitImplicit(1)up(1)"] = func1506;
              func1506.definitionLine = 2945;
              func1506.definitionModule = "ast";
              var func1509 = function(argcv) {    // method asString
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                setModuleName("ast");
                setLineNumber(2947);    // compilenode string
                var string1510 = new GraceString("a pluggable AST visitor");
                return string1510;
              };
              func1509.paramCounts = [0];
              obj1420.methods["asString"] = func1509;
              func1509.definitionLine = 2947;
              func1509.definitionModule = "ast";
              superDepth = origSuperDepth;
            };
            obj_init_1420.apply(inheritingObject, []);
            return obj1420;
            };
            this.methods["pluggableVisitor(1)$object(1)"] = func1417;
          setLineNumber(2959);    // compilenode method
          var func1511 = function(argcv) {    // method findAnnotation(_,_)
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            var var_node = arguments[curarg];
            curarg++;
            var var_annName = arguments[curarg];
            curarg++;
            setModuleName("ast");
            setLineNumber(2960);    // compilenode member
            // call case 6: other requests
            var call1514 = callmethodChecked(var_node, "annotations", []);
            var block1515 = new GraceBlock(this, 2960, 1);
            setLineNumber(1);    // compilenode identifier
            block1515.real = function(var_ann) {
              var if1516 = GraceDone;
              setLineNumber(2961);    // compilenode block
              var block1517 = new GraceBlock(this, 2961, 0);
              block1517.real = function() {
                setLineNumber(2962);    // compilenode member
                // call case 6: other requests
                var call1520 = callmethodChecked(var_ann, "value", []);
                var opresult1522 = callmethodChecked(call1520, "==(1)", [1], var_annName);
                return opresult1522;
              };
              setLineNumber(2961);    // compilenode string
              var string1524 = new GraceString("identifier");
              // call case 6: other requests
              var call1527 = callmethodChecked(var_ann, "kind", []);
              var opresult1529 = callmethodChecked(call1527, "==(1)", [1], string1524);
              var opresult1531 = callmethodChecked(opresult1529, "&&(1)", [1], block1517);
              if (Grace_isTrue(opresult1531)) {
                setLineNumber(2963);    // compilenode object
                var obj1532 = Grace_allocObject(null, "object");
                obj1532.definitionModule = "ast";
                obj1532.definitionLine = 2963;
                obj1532.outer = this;
                var reader_ast_outer1533 = function() {
                  return this.outer;
                };
                obj1532.methods["outer"] = reader_ast_outer1533;
                var obj_init_1532 = function() {
                  var origSuperDepth = superDepth;
                  superDepth = obj1532;
                  setLineNumber(2964);    // compilenode identifier
                  obj1532.superobj = GraceTrue;
                  if (GraceTrue.data) obj1532.data = GraceTrue.data;
                  if (GraceTrue.hasOwnProperty('_value'))
                      obj1532._value = GraceTrue._value;
                  setLineNumber(2965);    // compilenode identifier
                  obj1532.data["value"] = var_ann;
                  var reader_ast_value1534 = function() {
                    return this.data["value"];
                  };
                  reader_ast_value1534.def = true;
                  obj1532.methods["value"] = reader_ast_value1534;
                  superDepth = origSuperDepth;
                };
                obj_init_1532.apply(obj1532, []);
                throw new ReturnException(obj1532, returnTarget);
              }
              return if1516;
            };
            // call case 5: prelude request
            var call1535 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call1514, block1515);
            setLineNumber(2969);    // compilenode identifier
            return GraceFalse;
          };
          func1511.paramCounts = [2];
          this.methods["findAnnotation(2)"] = func1511;
          func1511.definitionLine = 2959;
          func1511.definitionModule = "ast";
          setLineNumber(17);    // compilenode num
          var var_lineLength = new GraceNum(80);
          setLineNumber(1);    // compilenode method
          var func1536 = function(argcv) {    // method lineLength
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            setModuleName("ast");
            // lineLength is a simple accessor - elide try ... catch
            setLineNumber(17);    // compilenode identifier
            return var_lineLength;
          };
          func1536.paramCounts = [0];
          this.methods["lineLength"] = func1536;
          func1536.definitionLine = 1;
          func1536.definitionModule = "ast";
          this.methods["lineLength"].debug = "def";
          setLineNumber(18);    // compilenode string
          var string1538 = new GraceString("uninitialized");
          // call case 6: other requests
          // call case 5: prelude request
          var call1540 = callmethodChecked(var_prelude, "Singleton", []);
          var call1541 = callmethodChecked(call1540, "named(1)", [1], string1538);
          var var_uninitialized = call1541;
          setLineNumber(1);    // compilenode method
          var func1542 = function(argcv) {    // method uninitialized
            var returnTarget = invocationCount;
            invocationCount++;
            var curarg = 1;
            setModuleName("ast");
            // uninitialized is a simple accessor - elide try ... catch
            setLineNumber(18);    // compilenode identifier
            return var_uninitialized;
          };
          func1542.paramCounts = [0];
          this.methods["uninitialized"] = func1542;
          func1542.definitionLine = 1;
          func1542.definitionModule = "ast";
          this.methods["uninitialized"].debug = "def";
          setLineNumber(39);    // compilenode object
          var obj1543 = Grace_allocObject(GraceObject, "ancestorChain");
          obj1543.definitionModule = "ast";
          obj1543.definitionLine = 39;
          obj1543.outer = this;
          var reader_ast_outer1544 = function() {
            return this.outer;
          };
          obj1543.methods["outer"] = reader_ast_outer1544;
          var obj_init_1543 = function() {
            var origSuperDepth = superDepth;
            superDepth = obj1543;
            var func1545 = function(argcv) {    // method empty
              var returnTarget = invocationCount;
              invocationCount++;
              var curarg = 1;
              setModuleName("ast");
              setLineNumber(40);    // compilenode object
              var obj1546 = Grace_allocObject(GraceObject, "ancestorChain.empty");
              obj1546.definitionModule = "ast";
              obj1546.definitionLine = 40;
              obj1546.outer = this;
              var reader_ast_outer1547 = function() {
                return this.outer;
              };
              obj1546.methods["outer"] = reader_ast_outer1547;
              var obj_init_1546 = function() {
                var origSuperDepth = superDepth;
                superDepth = obj1546;
                var func1548 = function(argcv) {    // method isEmpty
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  setModuleName("ast");
                  // isEmpty is a simple accessor - elide try ... catch
                  setLineNumber(41);    // compilenode identifier
                  return GraceTrue;
                };
                func1548.paramCounts = [0];
                obj1546.methods["isEmpty"] = func1548;
                func1548.definitionLine = 41;
                func1548.definitionModule = "ast";
                var func1549 = function(argcv) {    // method asString
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  setModuleName("ast");
                  setLineNumber(42);    // compilenode string
                  var string1550 = new GraceString("ancestorChain \u25ab");
                  return string1550;
                };
                func1549.paramCounts = [0];
                obj1546.methods["asString"] = func1549;
                func1549.definitionLine = 42;
                func1549.definitionModule = "ast";
                var func1551 = function(argcv) {    // method extend(_)
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  var var_n = arguments[curarg];
                  curarg++;
                  setModuleName("ast");
                  setLineNumber(43);    // compilenode identifier
                  // call case 6: other requests
                  // call case 3: self.outer request
                  var call1554 = callmethodChecked(superDepth, "outer", [0]);
                  onSelf = true;
                  var call1555 = callmethodChecked(call1554, "cons(1)onto(1)", [1, 1], var_n, this);
                  return call1555;
                };
                func1551.paramCounts = [1];
                obj1546.methods["extend(1)"] = func1551;
                func1551.definitionLine = 43;
                func1551.definitionModule = "ast";
                superDepth = origSuperDepth;
              };
              obj_init_1546.apply(obj1546, []);
              return obj1546;
            };
            func1545.paramCounts = [0];
            obj1543.methods["empty"] = func1545;
            func1545.definitionLine = 40;
            func1545.definitionModule = "ast";
              var func1556 = function(argcv) {    // method empty$object(_)
                var curarg = 1;
                var inheritingObject = arguments[curarg++];
                // Start argument processing
                curarg = 1;
                // End argument processing
                setModuleName("ast");
                var returnTarget = invocationCount;
                invocationCount++;
                var obj1557 = Grace_allocObject(GraceObject, "empty");
                obj1557.definitionModule = "ast";
                obj1557.definitionLine = 40;
                var inho1557 = inheritingObject;
                while (inho1557.superobj) inho1557 = inho1557.superobj;
                inho1557.superobj = obj1557;
                obj1557.data = inheritingObject.data;
                if (inheritingObject.hasOwnProperty('_value'))
                  obj1557._value = inheritingObject._value;
                obj1557.outer = this;
                var reader_ast_outer1558 = function() {
                  return this.outer;
                };
                obj1557.methods["outer"] = reader_ast_outer1558;
                var obj_init_1557 = function() {
                  var origSuperDepth = superDepth;
                  superDepth = obj1557;
                  var func1559 = function(argcv) {    // method isEmpty
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    setModuleName("ast");
                    // isEmpty is a simple accessor - elide try ... catch
                    setLineNumber(41);    // compilenode identifier
                    return GraceTrue;
                  };
                  func1559.paramCounts = [0];
                  obj1557.methods["isEmpty"] = func1559;
                  func1559.definitionLine = 41;
                  func1559.definitionModule = "ast";
                  var func1560 = function(argcv) {    // method asString
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    setModuleName("ast");
                    setLineNumber(42);    // compilenode string
                    var string1561 = new GraceString("ancestorChain \u25ab");
                    return string1561;
                  };
                  func1560.paramCounts = [0];
                  obj1557.methods["asString"] = func1560;
                  func1560.definitionLine = 42;
                  func1560.definitionModule = "ast";
                  var func1562 = function(argcv) {    // method extend(_)
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    var var_n = arguments[curarg];
                    curarg++;
                    setModuleName("ast");
                    setLineNumber(43);    // compilenode identifier
                    // call case 6: other requests
                    // call case 3: self.outer request
                    var call1565 = callmethodChecked(superDepth, "outer", [0]);
                    onSelf = true;
                    var call1566 = callmethodChecked(call1565, "cons(1)onto(1)", [1, 1], var_n, this);
                    return call1566;
                  };
                  func1562.paramCounts = [1];
                  obj1557.methods["extend(1)"] = func1562;
                  func1562.definitionLine = 43;
                  func1562.definitionModule = "ast";
                  superDepth = origSuperDepth;
                };
                obj_init_1557.apply(inheritingObject, []);
                return obj1557;
                };
                obj1543.methods["empty$object(1)"] = func1556;
              var func1567 = function(argcv) {    // method with(_)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_n = arguments[curarg];
                curarg++;
                setModuleName("ast");
                setLineNumber(45);    // compilenode identifier
                // call case 6: other requests
                // call case 4: self request
                onSelf = true;
                var call1570 = callmethodChecked(this, "empty", []);
                var call1571 = callmethodChecked(call1570, "extend(1)", [1], var_n);
                return call1571;
              };
              func1567.paramCounts = [1];
              obj1543.methods["with(1)"] = func1567;
              func1567.definitionLine = 45;
              func1567.definitionModule = "ast";
              var func1572 = function(argcv) {    // method cons(_)onto(_)
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                var var_p = arguments[curarg];
                curarg++;
                var var_as = arguments[curarg];
                curarg++;
                setModuleName("ast");
                setLineNumber(46);    // compilenode object
                var obj1573 = Grace_allocObject(GraceObject, "ancestorChain.cons(_)onto(_)");
                obj1573.definitionModule = "ast";
                obj1573.definitionLine = 46;
                obj1573.outer = this;
                var reader_ast_outer1574 = function() {
                  return this.outer;
                };
                obj1573.methods["outer"] = reader_ast_outer1574;
                var obj_init_1573 = function() {
                  var origSuperDepth = superDepth;
                  superDepth = obj1573;
                  var func1575 = function(argcv) {    // method forebears
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    setModuleName("ast");
                    // forebears is a simple accessor - elide try ... catch
                    setLineNumber(47);    // compilenode identifier
                    return var_as;
                  };
                  func1575.paramCounts = [0];
                  obj1573.methods["forebears"] = func1575;
                  func1575.definitionLine = 47;
                  func1575.definitionModule = "ast";
                  var func1576 = function(argcv) {    // method isEmpty
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    setModuleName("ast");
                    // isEmpty is a simple accessor - elide try ... catch
                    setLineNumber(48);    // compilenode identifier
                    return GraceFalse;
                  };
                  func1576.paramCounts = [0];
                  obj1573.methods["isEmpty"] = func1576;
                  func1576.definitionLine = 48;
                  func1576.definitionModule = "ast";
                  var func1577 = function(argcv) {    // method parent
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    setModuleName("ast");
                    // parent is a simple accessor - elide try ... catch
                    setLineNumber(49);    // compilenode identifier
                    return var_p;
                  };
                  func1577.paramCounts = [0];
                  obj1573.methods["parent"] = func1577;
                  func1577.definitionLine = 49;
                  func1577.definitionModule = "ast";
                  var func1578 = function(argcv) {    // method grandparent
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    setModuleName("ast");
                    setLineNumber(50);    // compilenode member
                    // call case 6: other requests
                    // call case 4: self request
                    onSelf = true;
                    var call1581 = callmethodChecked(this, "forebears", []);
                    var call1582 = callmethodChecked(call1581, "parent", []);
                    return call1582;
                  };
                  func1578.paramCounts = [0];
                  obj1573.methods["grandparent"] = func1578;
                  func1578.definitionLine = 50;
                  func1578.definitionModule = "ast";
                  var func1583 = function(argcv) {    // method asString
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    setModuleName("ast");
                    setLineNumber(53);    // compilenode identifier
                    var var_a = this;
                    setLineNumber(54);    // compilenode string
                    var string1584 = new GraceString("ancestorChain ");
                    var var_s = string1584;
                    setLineNumber(55);    // compilenode block
                    var block1586 = new GraceBlock(this, 55, 0);
                    block1586.real = function() {
                      // call case 6: other requests
                      // call case 6: other requests
                      var call1589 = callmethodChecked(var_a, "isEmpty", []);
                      var call1590 = callmethodChecked(call1589, "not", []);
                      return call1590;
                    };
                    var block1591 = new GraceBlock(this, 55, 0);
                    block1591.real = function() {
                      setLineNumber(56);    // compilenode string
                      var string1592 = new GraceString("\u27a4");
                      // call case 6: other requests
                      var call1595 = callmethodChecked(var_a, "parent", []);
                      var opresult1598 = callmethodChecked(var_s, "++(1)", [1], call1595);
                      var opresult1600 = callmethodChecked(opresult1598, "++(1)", [1], string1592);
                      var_s = opresult1600;
                      setLineNumber(57);    // compilenode member
                      // call case 6: other requests
                      var call1602 = callmethodChecked(var_a, "forebears", []);
                      var_a = call1602;
                      return GraceDone;
                    };
                    // call case 5: prelude request
                    var call1603 = callmethodChecked(var_prelude, "while(1)do(1)", [1, 1], block1586, block1591);
                    setLineNumber(59);    // compilenode string
                    var string1604 = new GraceString("\u25ab");
                    var opresult1607 = callmethodChecked(var_s, "++(1)", [1], string1604);
                    return opresult1607;
                  };
                  func1583.paramCounts = [0];
                  obj1573.methods["asString"] = func1583;
                  func1583.definitionLine = 52;
                  func1583.definitionModule = "ast";
                  var func1608 = function(argcv) {    // method extend(_)
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    var var_n = arguments[curarg];
                    curarg++;
                    setModuleName("ast");
                    setLineNumber(61);    // compilenode identifier
                    // call case 6: other requests
                    // call case 3: self.outer request
                    var call1611 = callmethodChecked(superDepth, "outer", [0]);
                    onSelf = true;
                    var call1612 = callmethodChecked(call1611, "cons(1)onto(1)", [1, 1], var_n, this);
                    return call1612;
                  };
                  func1608.paramCounts = [1];
                  obj1573.methods["extend(1)"] = func1608;
                  func1608.definitionLine = 61;
                  func1608.definitionModule = "ast";
                  superDepth = origSuperDepth;
                };
                obj_init_1573.apply(obj1573, []);
                return obj1573;
              };
              func1572.confidential = true;
              func1572.paramCounts = [1, 1];
              obj1543.methods["cons(1)onto(1)"] = func1572;
              func1572.definitionLine = 46;
              func1572.definitionModule = "ast";
                var func1613 = function(argcv) {    // method cons(_)onto(_)$object(_)
                  var curarg = 1;
                  var var_p = arguments[curarg];
                  curarg++;
                  var var_as = arguments[curarg];
                  curarg++;
                  var inheritingObject = arguments[curarg++];
                  // Start argument processing
                  curarg = 1;
                  curarg++;
                  curarg++;
                  // End argument processing
                  setModuleName("ast");
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var obj1614 = Grace_allocObject(GraceObject, "cons(1)onto(1)");
                  obj1614.definitionModule = "ast";
                  obj1614.definitionLine = 46;
                  var inho1614 = inheritingObject;
                  while (inho1614.superobj) inho1614 = inho1614.superobj;
                  inho1614.superobj = obj1614;
                  obj1614.data = inheritingObject.data;
                  if (inheritingObject.hasOwnProperty('_value'))
                    obj1614._value = inheritingObject._value;
                  obj1614.outer = this;
                  var reader_ast_outer1615 = function() {
                    return this.outer;
                  };
                  obj1614.methods["outer"] = reader_ast_outer1615;
                  var obj_init_1614 = function() {
                    var origSuperDepth = superDepth;
                    superDepth = obj1614;
                    var func1616 = function(argcv) {    // method forebears
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      setModuleName("ast");
                      // forebears is a simple accessor - elide try ... catch
                      setLineNumber(47);    // compilenode identifier
                      return var_as;
                    };
                    func1616.paramCounts = [0];
                    obj1614.methods["forebears"] = func1616;
                    func1616.definitionLine = 47;
                    func1616.definitionModule = "ast";
                    var func1617 = function(argcv) {    // method isEmpty
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      setModuleName("ast");
                      // isEmpty is a simple accessor - elide try ... catch
                      setLineNumber(48);    // compilenode identifier
                      return GraceFalse;
                    };
                    func1617.paramCounts = [0];
                    obj1614.methods["isEmpty"] = func1617;
                    func1617.definitionLine = 48;
                    func1617.definitionModule = "ast";
                    var func1618 = function(argcv) {    // method parent
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      setModuleName("ast");
                      // parent is a simple accessor - elide try ... catch
                      setLineNumber(49);    // compilenode identifier
                      return var_p;
                    };
                    func1618.paramCounts = [0];
                    obj1614.methods["parent"] = func1618;
                    func1618.definitionLine = 49;
                    func1618.definitionModule = "ast";
                    var func1619 = function(argcv) {    // method grandparent
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      setModuleName("ast");
                      setLineNumber(50);    // compilenode member
                      // call case 6: other requests
                      // call case 4: self request
                      onSelf = true;
                      var call1622 = callmethodChecked(this, "forebears", []);
                      var call1623 = callmethodChecked(call1622, "parent", []);
                      return call1623;
                    };
                    func1619.paramCounts = [0];
                    obj1614.methods["grandparent"] = func1619;
                    func1619.definitionLine = 50;
                    func1619.definitionModule = "ast";
                    var func1624 = function(argcv) {    // method asString
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      setModuleName("ast");
                      setLineNumber(53);    // compilenode identifier
                      var var_a = this;
                      setLineNumber(54);    // compilenode string
                      var string1625 = new GraceString("ancestorChain ");
                      var var_s = string1625;
                      setLineNumber(55);    // compilenode block
                      var block1627 = new GraceBlock(this, 55, 0);
                      block1627.real = function() {
                        // call case 6: other requests
                        // call case 6: other requests
                        var call1630 = callmethodChecked(var_a, "isEmpty", []);
                        var call1631 = callmethodChecked(call1630, "not", []);
                        return call1631;
                      };
                      var block1632 = new GraceBlock(this, 55, 0);
                      block1632.real = function() {
                        setLineNumber(56);    // compilenode string
                        var string1633 = new GraceString("\u27a4");
                        // call case 6: other requests
                        var call1636 = callmethodChecked(var_a, "parent", []);
                        var opresult1639 = callmethodChecked(var_s, "++(1)", [1], call1636);
                        var opresult1641 = callmethodChecked(opresult1639, "++(1)", [1], string1633);
                        var_s = opresult1641;
                        setLineNumber(57);    // compilenode member
                        // call case 6: other requests
                        var call1643 = callmethodChecked(var_a, "forebears", []);
                        var_a = call1643;
                        return GraceDone;
                      };
                      // call case 5: prelude request
                      var call1644 = callmethodChecked(var_prelude, "while(1)do(1)", [1, 1], block1627, block1632);
                      setLineNumber(59);    // compilenode string
                      var string1645 = new GraceString("\u25ab");
                      var opresult1648 = callmethodChecked(var_s, "++(1)", [1], string1645);
                      return opresult1648;
                    };
                    func1624.paramCounts = [0];
                    obj1614.methods["asString"] = func1624;
                    func1624.definitionLine = 52;
                    func1624.definitionModule = "ast";
                    var func1649 = function(argcv) {    // method extend(_)
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      var var_n = arguments[curarg];
                      curarg++;
                      setModuleName("ast");
                      setLineNumber(61);    // compilenode identifier
                      // call case 6: other requests
                      // call case 3: self.outer request
                      var call1652 = callmethodChecked(superDepth, "outer", [0]);
                      onSelf = true;
                      var call1653 = callmethodChecked(call1652, "cons(1)onto(1)", [1, 1], var_n, this);
                      return call1653;
                    };
                    func1649.paramCounts = [1];
                    obj1614.methods["extend(1)"] = func1649;
                    func1649.definitionLine = 61;
                    func1649.definitionModule = "ast";
                    superDepth = origSuperDepth;
                  };
                  obj_init_1614.apply(inheritingObject, []);
                  return obj1614;
                  };
                  func1613.confidential = true;
                  obj1543.methods["cons(1)onto(1)$object(1)"] = func1613;
                superDepth = origSuperDepth;
              };
              obj_init_1543.apply(obj1543, []);
              var var_ancestorChain = obj1543;
              setLineNumber(1);    // compilenode method
              var func1654 = function(argcv) {    // method ancestorChain
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                setModuleName("ast");
                // ancestorChain is a simple accessor - elide try ... catch
                setLineNumber(39);    // compilenode identifier
                return var_ancestorChain;
              };
              func1654.paramCounts = [0];
              this.methods["ancestorChain"] = func1654;
              func1654.definitionLine = 1;
              func1654.definitionModule = "ast";
              this.methods["ancestorChain"].debug = "def";
              setLineNumber(65);    // compilenode member
              // call case 5: prelude request
              var call1656 = callmethodChecked(var_prelude, "emptySequence", []);
              var var_emptySeq = call1656;
              setLineNumber(1);    // compilenode method
              var func1657 = function(argcv) {    // method emptySeq
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                setModuleName("ast");
                // emptySeq is a simple accessor - elide try ... catch
                setLineNumber(65);    // compilenode identifier
                return var_emptySeq;
              };
              func1657.paramCounts = [0];
              this.methods["emptySeq"] = func1657;
              func1657.definitionLine = 1;
              func1657.definitionModule = "ast";
              this.methods["emptySeq"].debug = "def";
              setLineNumber(67);    // compilenode typedec
              // Type decl AstNode
              //   Type literal 
              var type1659 = new GraceType("AstNode");
              type1659.typeMethods.push("kind");
              type1659.typeMethods.push("register");
              type1659.typeMethods.push("line");
              type1659.typeMethods.push("line:=(1)");
              type1659.typeMethods.push("linePos");
              type1659.typeMethods.push("linePos:=(1)");
              type1659.typeMethods.push("scope");
              type1659.typeMethods.push("pretty(1)");
              type1659.typeMethods.push("comments");
              var var_AstNode = type1659;
              setLineNumber(1);    // compilenode method
              var func1660 = function(argcv) {    // method AstNode
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                setModuleName("ast");
                // AstNode is a simple accessor - elide try ... catch
                setLineNumber(67);    // compilenode identifier
                return var_AstNode;
              };
              func1660.paramCounts = [0];
              this.methods["AstNode"] = func1660;
              func1660.definitionLine = 1;
              func1660.definitionModule = "ast";
              setLineNumber(85);    // compilenode typedec
              // Type decl SymbolTable
              var var_SymbolTable = var_Unknown;
              setLineNumber(1);    // compilenode method
              var func1662 = function(argcv) {    // method SymbolTable
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                setModuleName("ast");
                // SymbolTable is a simple accessor - elide try ... catch
                setLineNumber(85);    // compilenode identifier
                return var_SymbolTable;
              };
              func1662.paramCounts = [0];
              this.methods["SymbolTable"] = func1662;
              func1662.definitionLine = 1;
              func1662.definitionModule = "ast";
              setLineNumber(205);    // compilenode object
              var obj1663 = Grace_allocObject(null, "implicit");
              obj1663.definitionModule = "ast";
              obj1663.definitionLine = 205;
              obj1663.outer = this;
              var reader_ast_outer1664 = function() {
                return this.outer;
              };
              obj1663.methods["outer"] = reader_ast_outer1664;
              var obj_init_1663 = function() {
                var origSuperDepth = superDepth;
                superDepth = obj1663;
                var func1665 = function(argcv) {    // method isImplicit
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  setModuleName("ast");
                  // isImplicit is a simple accessor - elide try ... catch
                  setLineNumber(211);    // compilenode identifier
                  return GraceTrue;
                };
                func1665.paramCounts = [0];
                obj1663.methods["isImplicit"] = func1665;
                func1665.definitionLine = 211;
                func1665.definitionModule = "ast";
                var func1666 = function(argcv) {    // method toGrace(_)
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  var var_depth = arguments[curarg];
                  curarg++;
                  setModuleName("ast");
                  setLineNumber(212);    // compilenode string
                  var string1667 = new GraceString("implicit");
                  return string1667;
                };
                func1666.paramCounts = [1];
                obj1663.methods["toGrace(1)"] = func1666;
                func1666.definitionLine = 212;
                func1666.definitionModule = "ast";
                var func1668 = function(argcv) {    // method asString
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  setModuleName("ast");
                  setLineNumber(213);    // compilenode string
                  var string1669 = new GraceString("the implicit receiver");
                  return string1669;
                };
                func1668.paramCounts = [0];
                obj1663.methods["asString"] = func1668;
                func1668.definitionLine = 213;
                func1668.definitionModule = "ast";
                var func1670 = function(argcv) {    // method ==(_)
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  var var_other = arguments[curarg];
                  curarg++;
                  setModuleName("ast");
                  setLineNumber(214);    // compilenode identifier
                  // call case 4: self request
                  onSelf = true;
                  var call1672 = callmethodChecked(this, "isMe(1)", [1], var_other);
                  return call1672;
                };
                func1670.paramCounts = [1];
                obj1663.methods["==(1)"] = func1670;
                func1670.definitionLine = 214;
                func1670.definitionModule = "ast";
                var func1673 = function(argcv) {    // method map(_)ancestors(_)
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  var var_blk = arguments[curarg];
                  curarg++;
                  var var_as = arguments[curarg];
                  curarg++;
                  setModuleName("ast");
                  // map(_)ancestors(_) is a simple accessor - elide try ... catch
                  setLineNumber(215);    // compilenode identifier
                  return this;
                };
                func1673.paramCounts = [1, 1];
                obj1663.methods["map(1)ancestors(1)"] = func1673;
                func1673.definitionLine = 215;
                func1673.definitionModule = "ast";
                var func1674 = function(argcv) {    // method accept(_)from(_)
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  var var_visitor = arguments[curarg];
                  curarg++;
                  var var_as = arguments[curarg];
                  curarg++;
                  setModuleName("ast");
                  setLineNumber(217);    // compilenode identifier
                  // call case 6: other requests
                  var call1676 = callmethodChecked(var_visitor, "visitImplicit(1)up(1)", [1, 1], this, var_as);
                  return call1676;
                };
                func1674.paramCounts = [1, 1];
                obj1663.methods["accept(1)from(1)"] = func1674;
                func1674.definitionLine = 216;
                func1674.definitionModule = "ast";
                var func1677 = function(argcv) {    // method pretty(_)
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  var var_depth = arguments[curarg];
                  curarg++;
                  setModuleName("ast");
                  setLineNumber(219);    // compilenode string
                  var string1678 = new GraceString("implicit");
                  return string1678;
                };
                func1677.paramCounts = [1];
                obj1663.methods["pretty(1)"] = func1677;
                func1677.definitionLine = 219;
                func1677.definitionModule = "ast";
                setLineNumber(206);    // compilenode identifier
                // call case 6: other requests
                // call case 3: self.outer request
                var call1681 = callmethodChecked(superDepth, "outer", [0]);
                var call1682 = callmethodChecked(call1681, "baseNode$object(1)", [0, 1], this);
                obj1663.superobj = call1682;
                if (call1682.data) obj1663.data = call1682.data;
                if (call1682.hasOwnProperty('_value'))
                    obj1663._value = call1682._value;
                setLineNumber(207);    // compilenode num
                // call case 4: self request
                onSelf = true;
                var call1684 = callmethodChecked(this, "line:=(1)", [1], new GraceNum(0));
                setLineNumber(208);    // compilenode num
                // call case 4: self request
                onSelf = true;
                var call1686 = callmethodChecked(this, "linePos:=(1)", [1], new GraceNum(0));
                setLineNumber(209);    // compilenode string
                var string1687 = new GraceString("implicit");
                obj1663.data["kind"] = string1687;
                var reader_ast_kind1688 = function() {
                  return this.data["kind"];
                };
                reader_ast_kind1688.def = true;
                obj1663.methods["kind"] = reader_ast_kind1688;
                setLineNumber(210);    // compilenode string
                var string1689 = new GraceString("implicit");
                obj1663.data["nameString"] = string1689;
                var reader_ast_nameString1690 = function() {
                  return this.data["nameString"];
                };
                reader_ast_nameString1690.def = true;
                obj1663.methods["nameString"] = reader_ast_nameString1690;
                superDepth = origSuperDepth;
              };
              obj_init_1663.apply(obj1663, []);
              var var_implicit = obj1663;
              setLineNumber(1);    // compilenode method
              var func1691 = function(argcv) {    // method implicit
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                setModuleName("ast");
                // implicit is a simple accessor - elide try ... catch
                setLineNumber(205);    // compilenode identifier
                return var_implicit;
              };
              func1691.paramCounts = [0];
              this.methods["implicit"] = func1691;
              func1691.definitionLine = 1;
              func1691.definitionModule = "ast";
              this.methods["implicit"].debug = "def";
              setLineNumber(222);    // compilenode object
              var obj1692 = Grace_allocObject(null, "nullNode");
              obj1692.definitionModule = "ast";
              obj1692.definitionLine = 222;
              obj1692.outer = this;
              var reader_ast_outer1693 = function() {
                return this.outer;
              };
              obj1692.methods["outer"] = reader_ast_outer1693;
              var obj_init_1692 = function() {
                var origSuperDepth = superDepth;
                superDepth = obj1692;
                var func1694 = function(argcv) {    // method toGrace(_)
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  var var_depth = arguments[curarg];
                  curarg++;
                  setModuleName("ast");
                  setLineNumber(226);    // compilenode string
                  var string1695 = new GraceString("// null");
                  return string1695;
                };
                func1694.paramCounts = [1];
                obj1692.methods["toGrace(1)"] = func1694;
                func1694.definitionLine = 225;
                func1694.definitionModule = "ast";
                var func1696 = function(argcv) {    // method asString
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  setModuleName("ast");
                  setLineNumber(228);    // compilenode string
                  var string1697 = new GraceString("the nullNode");
                  return string1697;
                };
                func1696.paramCounts = [0];
                obj1692.methods["asString"] = func1696;
                func1696.definitionLine = 228;
                func1696.definitionModule = "ast";
                var func1698 = function(argcv) {    // method ==(_)
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  var var_other = arguments[curarg];
                  curarg++;
                  setModuleName("ast");
                  setLineNumber(229);    // compilenode identifier
                  // call case 4: self request
                  onSelf = true;
                  var call1700 = callmethodChecked(this, "isMe(1)", [1], var_other);
                  return call1700;
                };
                func1698.paramCounts = [1];
                obj1692.methods["==(1)"] = func1698;
                func1698.definitionLine = 229;
                func1698.definitionModule = "ast";
                setLineNumber(223);    // compilenode identifier
                // call case 6: other requests
                // call case 3: self.outer request
                var call1703 = callmethodChecked(superDepth, "outer", [0]);
                var call1704 = callmethodChecked(call1703, "baseNode$object(1)", [0, 1], this);
                obj1692.superobj = call1704;
                if (call1704.data) obj1692.data = call1704.data;
                if (call1704.hasOwnProperty('_value'))
                    obj1692._value = call1704._value;
                setLineNumber(224);    // compilenode string
                var string1705 = new GraceString("null");
                obj1692.data["kind"] = string1705;
                var reader_ast_kind1706 = function() {
                  return this.data["kind"];
                };
                reader_ast_kind1706.def = true;
                obj1692.methods["kind"] = reader_ast_kind1706;
                superDepth = origSuperDepth;
              };
              obj_init_1692.apply(obj1692, []);
              var var_nullNode = obj1692;
              setLineNumber(1);    // compilenode method
              var func1707 = function(argcv) {    // method nullNode
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                setModuleName("ast");
                // nullNode is a simple accessor - elide try ... catch
                setLineNumber(222);    // compilenode identifier
                return var_nullNode;
              };
              func1707.paramCounts = [0];
              this.methods["nullNode"] = func1707;
              func1707.definitionLine = 1;
              func1707.definitionModule = "ast";
              this.methods["nullNode"].debug = "def";
              setLineNumber(232);    // compilenode object
              var obj1708 = Grace_allocObject(GraceObject, "fakeSymbolTable");
              obj1708.definitionModule = "ast";
              obj1708.definitionLine = 232;
              obj1708.outer = this;
              var reader_ast_outer1709 = function() {
                return this.outer;
              };
              obj1708.methods["outer"] = reader_ast_outer1709;
              var obj_init_1708 = function() {
                var origSuperDepth = superDepth;
                superDepth = obj1708;
                var func1710 = function(argcv) {    // method asString
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  setModuleName("ast");
                  setLineNumber(234);    // compilenode string
                  var string1711 = new GraceString("the fakeSymbolTable");
                  return string1711;
                };
                func1710.paramCounts = [0];
                obj1708.methods["asString"] = func1710;
                func1710.definitionLine = 234;
                func1710.definitionModule = "ast";
                var func1712 = function(argcv) {    // method addNode(_)as(_)
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  var var_n = arguments[curarg];
                  curarg++;
                  var var_kind = arguments[curarg];
                  curarg++;
                  setModuleName("ast");
                  setLineNumber(236);    // compilenode string
                  var string1714 = new GraceString("\" requested");
                  var string1717 = new GraceString(") as \"");
                  var string1720 = new GraceString(").addNode(");
                  // call case 4: self request
                  onSelf = true;
                  var call1723 = callmethodChecked(this, "node", []);
                  var string1725 = new GraceString("fakeSymbolTable(on node ");
                  var opresult1727 = callmethodChecked(string1725, "++(1)", [1], call1723);
                  var opresult1729 = callmethodChecked(opresult1727, "++(1)", [1], string1720);
                  var opresult1731 = callmethodChecked(opresult1729, "++(1)", [1], var_n);
                  var opresult1733 = callmethodChecked(opresult1731, "++(1)", [1], string1717);
                  var opresult1735 = callmethodChecked(opresult1733, "++(1)", [1], var_kind);
                  var opresult1737 = callmethodChecked(opresult1735, "++(1)", [1], string1714);
                  // call case 6: other requests
                  // call case 5: prelude request
                  var call1739 = callmethodChecked(var_prelude, "ProgrammingError", []);
                  var call1740 = callmethodChecked(call1739, "raise(1)", [1], opresult1737);
                  return call1740;
                };
                func1712.paramCounts = [1, 1];
                obj1708.methods["addNode(1)as(1)"] = func1712;
                func1712.definitionLine = 235;
                func1712.definitionModule = "ast";
                var func1741 = function(argcv) {    // method thatDefines(_)ifNone(_)
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  var var_name = arguments[curarg];
                  curarg++;
                  var var_action = arguments[curarg];
                  curarg++;
                  setModuleName("ast");
                  setLineNumber(239);    // compilenode string
                  var string1743 = new GraceString(").");
                  var string1746 = new GraceString("fakeSymbolTable.thatDefines(");
                  var opresult1748 = callmethodChecked(string1746, "++(1)", [1], var_name);
                  var opresult1750 = callmethodChecked(opresult1748, "++(1)", [1], string1743);
                  // call case 6: other requests
                  // call case 5: prelude request
                  var call1752 = callmethodChecked(var_prelude, "ProgrammingError", []);
                  var call1753 = callmethodChecked(call1752, "raise(1)", [1], opresult1750);
                  return call1753;
                };
                func1741.paramCounts = [1, 1];
                obj1708.methods["thatDefines(1)ifNone(1)"] = func1741;
                func1741.definitionLine = 238;
                func1741.definitionModule = "ast";
                var func1754 = function(argcv) {    // method enclosingObjectScope
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  setModuleName("ast");
                  setLineNumber(242);    // compilenode string
                  var string1756 = new GraceString("");
                  // call case 4: self request
                  onSelf = true;
                  var call1759 = callmethodChecked(this, "node", []);
                  var string1761 = new GraceString("fakeSymbolTable.enclosingObjectScope on node ");
                  var opresult1763 = callmethodChecked(string1761, "++(1)", [1], call1759);
                  var opresult1765 = callmethodChecked(opresult1763, "++(1)", [1], string1756);
                  // call case 6: other requests
                  // call case 5: prelude request
                  var call1767 = callmethodChecked(var_prelude, "ProgrammingError", []);
                  var call1768 = callmethodChecked(call1767, "raise(1)", [1], opresult1765);
                  return call1768;
                };
                func1754.paramCounts = [0];
                obj1708.methods["enclosingObjectScope"] = func1754;
                func1754.definitionLine = 241;
                func1754.definitionModule = "ast";
                var func1769 = function(argcv) {    // method variety
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  setModuleName("ast");
                  setLineNumber(244);    // compilenode string
                  var string1770 = new GraceString("fake");
                  return string1770;
                };
                func1769.paramCounts = [0];
                obj1708.methods["variety"] = func1769;
                func1769.definitionLine = 244;
                func1769.definitionModule = "ast";
                var func1771 = function(argcv) {    // method ==(_)
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  var var_other = arguments[curarg];
                  curarg++;
                  setModuleName("ast");
                  setLineNumber(245);    // compilenode identifier
                  // call case 4: self request
                  onSelf = true;
                  var call1773 = callmethodChecked(this, "isMe(1)", [1], var_other);
                  return call1773;
                };
                func1771.paramCounts = [1];
                obj1708.methods["==(1)"] = func1771;
                func1771.definitionLine = 245;
                func1771.definitionModule = "ast";
                setLineNumber(233);    // compilenode identifier
                obj1708.data["node"] = var_nullNode;
                var reader_ast_node1774 = function() {
                  return this.data["node"];
                };
                obj1708.methods["node"] = reader_ast_node1774;
                obj1708.data["node"] = var_nullNode;
                var writer_ast_node1774 = function(argcv, o) {
                  this.data["node"] = o;
                  return GraceDone;
                };
                obj1708.methods["node:=(1)"] = writer_ast_node1774;
                obj1708.mutable = true;
                superDepth = origSuperDepth;
              };
              obj_init_1708.apply(obj1708, []);
              var var_fakeSymbolTable = obj1708;
              setLineNumber(1);    // compilenode method
              var func1775 = function(argcv) {    // method fakeSymbolTable
                var returnTarget = invocationCount;
                invocationCount++;
                var curarg = 1;
                setModuleName("ast");
                // fakeSymbolTable is a simple accessor - elide try ... catch
                setLineNumber(232);    // compilenode identifier
                return var_fakeSymbolTable;
              };
              func1775.paramCounts = [0];
              this.methods["fakeSymbolTable"] = func1775;
              func1775.definitionLine = 1;
              func1775.definitionModule = "ast";
              this.methods["fakeSymbolTable"].debug = "def";
              setLineNumber(248);    // compilenode object
              var obj1776 = Grace_allocObject(GraceObject, "ifNode");
              obj1776.definitionModule = "ast";
              obj1776.definitionLine = 248;
              obj1776.outer = this;
              var reader_ast_outer1777 = function() {
                return this.outer;
              };
              obj1776.methods["outer"] = reader_ast_outer1777;
              var obj_init_1776 = function() {
                var origSuperDepth = superDepth;
                superDepth = obj1776;
                var func1778 = function(argcv) {    // method new(_,_,_)
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  var var_cond = arguments[curarg];
                  curarg++;
                  var var_thenblock__39__ = arguments[curarg];
                  curarg++;
                  var var_elseblock__39__ = arguments[curarg];
                  curarg++;
                  setModuleName("ast");
                  setLineNumber(249);    // compilenode object
                  var obj1779 = Grace_allocObject(null, "ifNode.new(_,_,_)");
                  obj1779.definitionModule = "ast";
                  obj1779.definitionLine = 249;
                  obj1779.outer = this;
                  var reader_ast_outer1780 = function() {
                    return this.outer;
                  };
                  obj1779.methods["outer"] = reader_ast_outer1780;
                  var obj_init_1779 = function() {
                    var origSuperDepth = superDepth;
                    superDepth = obj1779;
                    var func1781 = function(argcv) {    // method isSimple
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      setModuleName("ast");
                      // isSimple is a simple accessor - elide try ... catch
                      setLineNumber(256);    // compilenode identifier
                      return GraceFalse;
                    };
                    func1781.paramCounts = [0];
                    obj1779.methods["isSimple"] = func1781;
                    func1781.definitionLine = 256;
                    func1781.definitionModule = "ast";
                    var func1782 = function(argcv) {    // method accept(_)from(_)
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      var var_visitor = arguments[curarg];
                      curarg++;
                      var var_as = arguments[curarg];
                      curarg++;
                      // Start argument checking
                      curarg = 1;
                      setLineNumber(257);    // compilenode identifier
                      if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                          throw new GraceExceptionPacket(TypeErrorObject,
                              new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                  callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                      curarg++;
                      curarg++;
                      // End argument checking
                      setModuleName("ast");
                      var if1783 = GraceDone;
                      setLineNumber(258);    // compilenode identifier
                      // call case 6: other requests
                      var call1785 = callmethodChecked(var_visitor, "visitIf(1)up(1)", [1, 1], this, var_as);
                      if (Grace_isTrue(call1785)) {
                        setLineNumber(259);    // compilenode identifier
                        // call case 6: other requests
                        var call1787 = callmethodChecked(var_as, "extend(1)", [1], this);
                        var var_newChain = call1787;
                        setLineNumber(260);    // compilenode identifier
                        // call case 6: other requests
                        // call case 4: self request
                        onSelf = true;
                        var call1790 = callmethodChecked(this, "value", []);
                        var call1791 = callmethodChecked(call1790, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                        setLineNumber(261);    // compilenode identifier
                        // call case 6: other requests
                        // call case 4: self request
                        onSelf = true;
                        var call1794 = callmethodChecked(this, "thenblock", []);
                        var call1795 = callmethodChecked(call1794, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                        setLineNumber(262);    // compilenode identifier
                        // call case 6: other requests
                        // call case 4: self request
                        onSelf = true;
                        var call1798 = callmethodChecked(this, "elseblock", []);
                        var call1799 = callmethodChecked(call1798, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                        if1783 = call1799;
                      }
                      return if1783;
                    };
                    func1782.paramTypes = [];
                    func1782.paramTypes.push([]);
                    func1782.paramTypes.push([]);
                    func1782.paramCounts = [1, 1];
                    obj1779.methods["accept(1)from(1)"] = func1782;
                    func1782.definitionLine = 257;
                    func1782.definitionModule = "ast";
                    var func1800 = function(argcv) {    // method map(_)ancestors(_)
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      var var_blk = arguments[curarg];
                      curarg++;
                      var var_as = arguments[curarg];
                      curarg++;
                      setModuleName("ast");
                      setLineNumber(266);    // compilenode member
                      // call case 4: self request
                      onSelf = true;
                      var call1802 = callmethodChecked(this, "shallowCopy", []);
                      var var_n = call1802;
                      setLineNumber(267);    // compilenode identifier
                      // call case 6: other requests
                      var call1804 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                      var var_newChain = call1804;
                      setLineNumber(268);    // compilenode identifier
                      // call case 6: other requests
                      // call case 4: self request
                      onSelf = true;
                      var call1808 = callmethodChecked(this, "value", []);
                      var call1809 = callmethodChecked(call1808, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
                      // call case 6: other requests
                      var call1810 = callmethodChecked(var_n, "value:=(1)", [1], call1809);
                      setLineNumber(269);    // compilenode identifier
                      // call case 6: other requests
                      // call case 4: self request
                      onSelf = true;
                      var call1814 = callmethodChecked(this, "thenblock", []);
                      var call1815 = callmethodChecked(call1814, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
                      // call case 6: other requests
                      var call1816 = callmethodChecked(var_n, "thenblock:=(1)", [1], call1815);
                      setLineNumber(270);    // compilenode identifier
                      // call case 6: other requests
                      // call case 4: self request
                      onSelf = true;
                      var call1820 = callmethodChecked(this, "elseblock", []);
                      var call1821 = callmethodChecked(call1820, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
                      // call case 6: other requests
                      var call1822 = callmethodChecked(var_n, "elseblock:=(1)", [1], call1821);
                      setLineNumber(271);    // compilenode identifier
                      // call case 6: other requests
                      var call1824 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                      return call1824;
                    };
                    func1800.paramCounts = [1, 1];
                    obj1779.methods["map(1)ancestors(1)"] = func1800;
                    func1800.definitionLine = 265;
                    func1800.definitionModule = "ast";
                    var func1825 = function(argcv) {    // method pretty(_)
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      var var_depth = arguments[curarg];
                      curarg++;
                      setModuleName("ast");
                      setLineNumber(274);    // compilenode string
                      var string1826 = new GraceString("");
                      var var_spc = string1826;
                      setLineNumber(275);    // compilenode num
                      var opresult1830 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                      var block1831 = new GraceBlock(this, 275, 1);
                      setLineNumber(1);    // compilenode identifier
                      block1831.real = function(var_i) {
                        setLineNumber(276);    // compilenode string
                        var string1832 = new GraceString("  ");
                        var opresult1835 = callmethodChecked(var_spc, "++(1)", [1], string1832);
                        var_spc = opresult1835;
                        return GraceDone;
                      };
                      // call case 5: prelude request
                      var call1836 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult1830, block1831);
                      setLineNumber(278);    // compilenode string
                      var string1837 = new GraceString("\n");
                      // call case 1: super request
                      var call1840 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                      var opresult1842 = callmethodChecked(call1840, "++(1)", [1], string1837);
                      var var_s = opresult1842;
                      setLineNumber(279);    // compilenode identifier
                      var opresult1846 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                      // call case 6: other requests
                      // call case 4: self request
                      onSelf = true;
                      var call1848 = callmethodChecked(this, "value", []);
                      var call1849 = callmethodChecked(call1848, "pretty(1)", [1], opresult1846);
                      var opresult1853 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                      var opresult1855 = callmethodChecked(opresult1853, "++(1)", [1], call1849);
                      var_s = opresult1855;
                      setLineNumber(280);    // compilenode string
                      var string1856 = new GraceString("\n");
                      var opresult1859 = callmethodChecked(var_s, "++(1)", [1], string1856);
                      var_s = opresult1859;
                      var if1860 = GraceDone;
                      setLineNumber(281);    // compilenode string
                      var string1861 = new GraceString("symbols");
                      // call case 6: other requests
                      var call1864 = callmethodChecked(var_util, "target", []);
                      var opresult1866 = callmethodChecked(call1864, "==(1)", [1], string1861);
                      if (Grace_isTrue(opresult1866)) {
                        setLineNumber(282);    // compilenode string
                        var string1867 = new GraceString("\n");
                        var opresult1872 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                        // call case 6: other requests
                        // call case 4: self request
                        onSelf = true;
                        var call1874 = callmethodChecked(this, "thenblock", []);
                        var call1875 = callmethodChecked(call1874, "pretty(1)", [1], opresult1872);
                        var string1877 = new GraceString("Then: ");
                        var opresult1879 = callmethodChecked(string1877, "++(1)", [1], call1875);
                        var opresult1881 = callmethodChecked(opresult1879, "++(1)", [1], string1867);
                        var opresult1885 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                        var opresult1887 = callmethodChecked(opresult1885, "++(1)", [1], opresult1881);
                        var_s = opresult1887;
                        setLineNumber(283);    // compilenode string
                        var string1888 = new GraceString("");
                        var opresult1893 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                        // call case 6: other requests
                        // call case 4: self request
                        onSelf = true;
                        var call1895 = callmethodChecked(this, "elseblock", []);
                        var call1896 = callmethodChecked(call1895, "pretty(1)", [1], opresult1893);
                        var string1898 = new GraceString("Else: ");
                        var opresult1900 = callmethodChecked(string1898, "++(1)", [1], call1896);
                        var opresult1902 = callmethodChecked(opresult1900, "++(1)", [1], string1888);
                        var opresult1906 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                        var opresult1908 = callmethodChecked(opresult1906, "++(1)", [1], opresult1902);
                        var_s = opresult1908;
                        if1860 = GraceDone;
                      } else {
                        setLineNumber(285);    // compilenode string
                        var string1909 = new GraceString("Then:");
                        var opresult1913 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                        var opresult1915 = callmethodChecked(opresult1913, "++(1)", [1], string1909);
                        var_s = opresult1915;
                        setLineNumber(286);    // compilenode member
                        // call case 6: other requests
                        // call case 4: self request
                        onSelf = true;
                        var call1919 = callmethodChecked(this, "thenblock", []);
                        var call1920 = callmethodChecked(call1919, "body", []);
                        var block1921 = new GraceBlock(this, 286, 1);
                        setLineNumber(1);    // compilenode identifier
                        block1921.real = function(var_ix) {
                          setLineNumber(287);    // compilenode identifier
                          var opresult1925 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                          // call case 6: other requests
                          var call1926 = callmethodChecked(var_ix, "pretty(1)", [1], opresult1925);
                          var string1929 = new GraceString("\n  ");
                          var opresult1932 = callmethodChecked(var_s, "++(1)", [1], string1929);
                          var opresult1934 = callmethodChecked(opresult1932, "++(1)", [1], var_spc);
                          var opresult1936 = callmethodChecked(opresult1934, "++(1)", [1], call1926);
                          var_s = opresult1936;
                          return GraceDone;
                        };
                        // call case 5: prelude request
                        var call1937 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call1920, block1921);
                        setLineNumber(289);    // compilenode string
                        var string1938 = new GraceString("\n");
                        var opresult1941 = callmethodChecked(var_s, "++(1)", [1], string1938);
                        var_s = opresult1941;
                        setLineNumber(290);    // compilenode string
                        var string1942 = new GraceString("Else:");
                        var opresult1946 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                        var opresult1948 = callmethodChecked(opresult1946, "++(1)", [1], string1942);
                        var_s = opresult1948;
                        setLineNumber(291);    // compilenode member
                        // call case 6: other requests
                        // call case 4: self request
                        onSelf = true;
                        var call1952 = callmethodChecked(this, "elseblock", []);
                        var call1953 = callmethodChecked(call1952, "body", []);
                        var block1954 = new GraceBlock(this, 291, 1);
                        setLineNumber(1);    // compilenode identifier
                        block1954.real = function(var_ix) {
                          setLineNumber(292);    // compilenode identifier
                          var opresult1958 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                          // call case 6: other requests
                          var call1959 = callmethodChecked(var_ix, "pretty(1)", [1], opresult1958);
                          var string1962 = new GraceString("\n  ");
                          var opresult1965 = callmethodChecked(var_s, "++(1)", [1], string1962);
                          var opresult1967 = callmethodChecked(opresult1965, "++(1)", [1], var_spc);
                          var opresult1969 = callmethodChecked(opresult1967, "++(1)", [1], call1959);
                          var_s = opresult1969;
                          return GraceDone;
                        };
                        // call case 5: prelude request
                        var call1970 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call1953, block1954);
                        if1860 = call1970;
                      }
                      setLineNumber(295);    // compilenode identifier
                      return var_s;
                    };
                    func1825.paramCounts = [1];
                    obj1779.methods["pretty(1)"] = func1825;
                    func1825.definitionLine = 273;
                    func1825.definitionModule = "ast";
                    var func1971 = function(argcv) {    // method toGrace(_)
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      var var_depth = arguments[curarg];
                      curarg++;
                      // Start argument checking
                      curarg = 1;
                      setLineNumber(297);    // compilenode identifier
                      if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                          throw new GraceExceptionPacket(TypeErrorObject,
                              new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                  callmethod(var_Number, "asString", [0])._value + "."));
                      curarg++;
                      // End argument checking
                      setModuleName("ast");
                      setLineNumber(298);    // compilenode string
                      var string1972 = new GraceString("");
                      var var_spc = string1972;
                      setLineNumber(299);    // compilenode block
                      var block1974 = new GraceBlock(this, 299, 0);
                      block1974.real = function() {
                        setLineNumber(300);    // compilenode string
                        var string1975 = new GraceString("    ");
                        var opresult1978 = callmethodChecked(var_spc, "++(1)", [1], string1975);
                        var_spc = opresult1978;
                        return GraceDone;
                      };
                      // call case 5: prelude request
                      var call1979 = callmethodChecked(var_prelude, "repeat(1)times(1)", [1, 1], var_depth, block1974);
                      setLineNumber(302);    // compilenode string
                      var string1980 = new GraceString(") then {");
                      // call case 6: other requests
                      // call case 4: self request
                      onSelf = true;
                      var call1984 = callmethodChecked(this, "value", []);
                      var call1985 = callmethodChecked(call1984, "toGrace(1)", [1], new GraceNum(0));
                      var string1987 = new GraceString("if (");
                      var opresult1989 = callmethodChecked(string1987, "++(1)", [1], call1985);
                      var opresult1991 = callmethodChecked(opresult1989, "++(1)", [1], string1980);
                      var var_s = opresult1991;
                      setLineNumber(303);    // compilenode member
                      // call case 6: other requests
                      // call case 4: self request
                      onSelf = true;
                      var call1995 = callmethodChecked(this, "thenblock", []);
                      var call1996 = callmethodChecked(call1995, "body", []);
                      var block1997 = new GraceBlock(this, 303, 1);
                      setLineNumber(1);    // compilenode identifier
                      block1997.real = function(var_ix) {
                        setLineNumber(304);    // compilenode identifier
                        var opresult2001 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                        // call case 6: other requests
                        var call2002 = callmethodChecked(var_ix, "toGrace(1)", [1], opresult2001);
                        var string2004 = new GraceString("    ");
                        var string2007 = new GraceString("\n");
                        var opresult2010 = callmethodChecked(var_s, "++(1)", [1], string2007);
                        var opresult2012 = callmethodChecked(opresult2010, "++(1)", [1], var_spc);
                        var opresult2014 = callmethodChecked(opresult2012, "++(1)", [1], string2004);
                        var opresult2016 = callmethodChecked(opresult2014, "++(1)", [1], call2002);
                        var_s = opresult2016;
                        return GraceDone;
                      };
                      // call case 5: prelude request
                      var call2017 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call1996, block1997);
                      var if2018 = GraceDone;
                      setLineNumber(306);    // compilenode member
                      // call case 6: other requests
                      // call case 4: self request
                      onSelf = true;
                      var call2021 = callmethodChecked(this, "elseblock", []);
                      var call2022 = callmethodChecked(call2021, "isntEmpty", []);
                      if (Grace_isTrue(call2022)) {
                        setLineNumber(307);    // compilenode string
                        var string2023 = new GraceString("} else {");
                        var string2026 = new GraceString("\n");
                        var opresult2029 = callmethodChecked(var_s, "++(1)", [1], string2026);
                        var opresult2031 = callmethodChecked(opresult2029, "++(1)", [1], var_spc);
                        var opresult2033 = callmethodChecked(opresult2031, "++(1)", [1], string2023);
                        var_s = opresult2033;
                        setLineNumber(308);    // compilenode member
                        // call case 6: other requests
                        // call case 4: self request
                        onSelf = true;
                        var call2037 = callmethodChecked(this, "elseblock", []);
                        var call2038 = callmethodChecked(call2037, "body", []);
                        var block2039 = new GraceBlock(this, 308, 1);
                        setLineNumber(1);    // compilenode identifier
                        block2039.real = function(var_ix) {
                          setLineNumber(309);    // compilenode identifier
                          var opresult2043 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                          // call case 6: other requests
                          var call2044 = callmethodChecked(var_ix, "toGrace(1)", [1], opresult2043);
                          var string2046 = new GraceString("    ");
                          var string2049 = new GraceString("\n");
                          var opresult2052 = callmethodChecked(var_s, "++(1)", [1], string2049);
                          var opresult2054 = callmethodChecked(opresult2052, "++(1)", [1], var_spc);
                          var opresult2056 = callmethodChecked(opresult2054, "++(1)", [1], string2046);
                          var opresult2058 = callmethodChecked(opresult2056, "++(1)", [1], call2044);
                          var_s = opresult2058;
                          return GraceDone;
                        };
                        // call case 5: prelude request
                        var call2059 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call2038, block2039);
                        if2018 = call2059;
                      }
                      setLineNumber(312);    // compilenode string
                      var string2060 = new GraceString("}");
                      var string2063 = new GraceString("\n");
                      var opresult2066 = callmethodChecked(var_s, "++(1)", [1], string2063);
                      var opresult2068 = callmethodChecked(opresult2066, "++(1)", [1], var_spc);
                      var opresult2070 = callmethodChecked(opresult2068, "++(1)", [1], string2060);
                      var_s = opresult2070;
                      setLineNumber(313);    // return value
                      if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], var_s)))
                          throw new GraceExceptionPacket(TypeErrorObject,
                              new GraceString("result of method toGrace(_) does not have " + 
                                  callmethod(var_String, "asString", [0])._value + "."));
                      return var_s;
                    };
                    func1971.paramTypes = [];
                    func1971.paramTypes.push([type_Number, "depth"]);
                    func1971.paramCounts = [1];
                    obj1779.methods["toGrace(1)"] = func1971;
                    func1971.definitionLine = 297;
                    func1971.definitionModule = "ast";
                    var func2071 = function(argcv) {    // method shallowCopy
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      setModuleName("ast");
                      setLineNumber(316);    // compilenode identifier
                      // call case 6: other requests
                      // call case 6: other requests
                      var call2074 = callmethodChecked(var_ifNode, "new(3)", [3], var_nullNode, var_nullNode, var_nullNode);
                      var call2075 = callmethodChecked(call2074, "shallowCopyFieldsFrom(1)", [1], this);
                      return call2075;
                    };
                    func2071.paramCounts = [0];
                    obj1779.methods["shallowCopy"] = func2071;
                    func2071.definitionLine = 315;
                    func2071.definitionModule = "ast";
                    var func2076 = function(argcv) {    // method shallowCopyFieldsFrom(_)
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      var var_other = arguments[curarg];
                      curarg++;
                      setModuleName("ast");
                      setLineNumber(319);    // compilenode identifier
                      // call case 1: super request
                      var call2078 = callmethodsuper(this, "shallowCopyFieldsFrom(1)", [1], var_other);
                      setLineNumber(320);    // compilenode member
                      // call case 6: other requests
                      var call2081 = callmethodChecked(var_other, "handledIdentifiers", []);
                      // call case 4: self request
                      onSelf = true;
                      var call2082 = callmethodChecked(this, "handledIdentifiers:=(1)", [1], call2081);
                      setLineNumber(321);    // compilenode identifier
                      return this;
                    };
                    func2076.paramCounts = [1];
                    obj1779.methods["shallowCopyFieldsFrom(1)"] = func2076;
                    func2076.definitionLine = 318;
                    func2076.definitionModule = "ast";
                    setLineNumber(250);    // compilenode identifier
                    // call case 6: other requests
                    // call case 6: other requests
                    // call case 3: self.outer request
                    var call2086 = callmethodChecked(superDepth, "outer", [0]);
                    var call2087 = callmethodChecked(call2086, "outer", []);
                    var call2088 = callmethodChecked(call2087, "baseNode$object(1)", [0, 1], this);
                    obj1779.superobj = call2088;
                    if (call2088.data) obj1779.data = call2088.data;
                    if (call2088.hasOwnProperty('_value'))
                        obj1779._value = call2088._value;
                    setLineNumber(251);    // compilenode string
                    var string2089 = new GraceString("if");
                    obj1779.data["kind"] = string2089;
                    var reader_ast_kind2090 = function() {
                      return this.data["kind"];
                    };
                    reader_ast_kind2090.def = true;
                    obj1779.methods["kind"] = reader_ast_kind2090;
                    setLineNumber(252);    // compilenode identifier
                    obj1779.data["value"] = var_cond;
                    var reader_ast_value2091 = function() {
                      return this.data["value"];
                    };
                    obj1779.methods["value"] = reader_ast_value2091;
                    obj1779.data["value"] = var_cond;
                    var writer_ast_value2091 = function(argcv, o) {
                      this.data["value"] = o;
                      return GraceDone;
                    };
                    obj1779.methods["value:=(1)"] = writer_ast_value2091;
                    obj1779.mutable = true;
                    setLineNumber(253);    // compilenode identifier
                    obj1779.data["thenblock"] = var_thenblock__39__;
                    var reader_ast_thenblock2092 = function() {
                      return this.data["thenblock"];
                    };
                    obj1779.methods["thenblock"] = reader_ast_thenblock2092;
                    obj1779.data["thenblock"] = var_thenblock__39__;
                    var writer_ast_thenblock2092 = function(argcv, o) {
                      this.data["thenblock"] = o;
                      return GraceDone;
                    };
                    obj1779.methods["thenblock:=(1)"] = writer_ast_thenblock2092;
                    obj1779.mutable = true;
                    setLineNumber(254);    // compilenode identifier
                    obj1779.data["elseblock"] = var_elseblock__39__;
                    var reader_ast_elseblock2093 = function() {
                      return this.data["elseblock"];
                    };
                    obj1779.methods["elseblock"] = reader_ast_elseblock2093;
                    obj1779.data["elseblock"] = var_elseblock__39__;
                    var writer_ast_elseblock2093 = function(argcv, o) {
                      this.data["elseblock"] = o;
                      return GraceDone;
                    };
                    obj1779.methods["elseblock:=(1)"] = writer_ast_elseblock2093;
                    obj1779.mutable = true;
                    setLineNumber(255);    // compilenode identifier
                    obj1779.data["handledIdentifiers"] = GraceFalse;
                    var reader_ast_handledIdentifiers2094 = function() {
                      return this.data["handledIdentifiers"];
                    };
                    obj1779.methods["handledIdentifiers"] = reader_ast_handledIdentifiers2094;
                    obj1779.data["handledIdentifiers"] = GraceFalse;
                    var writer_ast_handledIdentifiers2094 = function(argcv, o) {
                      this.data["handledIdentifiers"] = o;
                      return GraceDone;
                    };
                    obj1779.methods["handledIdentifiers:=(1)"] = writer_ast_handledIdentifiers2094;
                    obj1779.mutable = true;
                    superDepth = origSuperDepth;
                  };
                  obj_init_1779.apply(obj1779, []);
                  return obj1779;
                };
                func1778.paramCounts = [3];
                obj1776.methods["new(3)"] = func1778;
                func1778.definitionLine = 249;
                func1778.definitionModule = "ast";
                  var func2095 = function(argcv) {    // method new(_,_,_)$object(_)
                    var curarg = 1;
                    var var_cond = arguments[curarg];
                    curarg++;
                    var var_thenblock__39__ = arguments[curarg];
                    curarg++;
                    var var_elseblock__39__ = arguments[curarg];
                    curarg++;
                    var inheritingObject = arguments[curarg++];
                    // Start argument processing
                    curarg = 1;
                    curarg++;
                    curarg++;
                    curarg++;
                    // End argument processing
                    setModuleName("ast");
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var obj2096 = Grace_allocObject(null, "new(3)");
                    obj2096.definitionModule = "ast";
                    obj2096.definitionLine = 249;
                    var inho2096 = inheritingObject;
                    while (inho2096.superobj) inho2096 = inho2096.superobj;
                    inho2096.superobj = obj2096;
                    obj2096.data = inheritingObject.data;
                    if (inheritingObject.hasOwnProperty('_value'))
                      obj2096._value = inheritingObject._value;
                    obj2096.outer = this;
                    var reader_ast_outer2097 = function() {
                      return this.outer;
                    };
                    obj2096.methods["outer"] = reader_ast_outer2097;
                    var obj_init_2096 = function() {
                      var origSuperDepth = superDepth;
                      superDepth = obj2096;
                      var func2098 = function(argcv) {    // method isSimple
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        setModuleName("ast");
                        // isSimple is a simple accessor - elide try ... catch
                        setLineNumber(256);    // compilenode identifier
                        return GraceFalse;
                      };
                      func2098.paramCounts = [0];
                      obj2096.methods["isSimple"] = func2098;
                      func2098.definitionLine = 256;
                      func2098.definitionModule = "ast";
                      var func2099 = function(argcv) {    // method accept(_)from(_)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_visitor = arguments[curarg];
                        curarg++;
                        var var_as = arguments[curarg];
                        curarg++;
                        // Start argument checking
                        curarg = 1;
                        setLineNumber(257);    // compilenode identifier
                        if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                    callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                        curarg++;
                        curarg++;
                        // End argument checking
                        setModuleName("ast");
                        var if2100 = GraceDone;
                        setLineNumber(258);    // compilenode identifier
                        // call case 6: other requests
                        var call2102 = callmethodChecked(var_visitor, "visitIf(1)up(1)", [1, 1], this, var_as);
                        if (Grace_isTrue(call2102)) {
                          setLineNumber(259);    // compilenode identifier
                          // call case 6: other requests
                          var call2104 = callmethodChecked(var_as, "extend(1)", [1], this);
                          var var_newChain = call2104;
                          setLineNumber(260);    // compilenode identifier
                          // call case 6: other requests
                          // call case 4: self request
                          onSelf = true;
                          var call2107 = callmethodChecked(this, "value", []);
                          var call2108 = callmethodChecked(call2107, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                          setLineNumber(261);    // compilenode identifier
                          // call case 6: other requests
                          // call case 4: self request
                          onSelf = true;
                          var call2111 = callmethodChecked(this, "thenblock", []);
                          var call2112 = callmethodChecked(call2111, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                          setLineNumber(262);    // compilenode identifier
                          // call case 6: other requests
                          // call case 4: self request
                          onSelf = true;
                          var call2115 = callmethodChecked(this, "elseblock", []);
                          var call2116 = callmethodChecked(call2115, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                          if2100 = call2116;
                        }
                        return if2100;
                      };
                      func2099.paramTypes = [];
                      func2099.paramTypes.push([]);
                      func2099.paramTypes.push([]);
                      func2099.paramCounts = [1, 1];
                      obj2096.methods["accept(1)from(1)"] = func2099;
                      func2099.definitionLine = 257;
                      func2099.definitionModule = "ast";
                      var func2117 = function(argcv) {    // method map(_)ancestors(_)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_blk = arguments[curarg];
                        curarg++;
                        var var_as = arguments[curarg];
                        curarg++;
                        setModuleName("ast");
                        setLineNumber(266);    // compilenode member
                        // call case 4: self request
                        onSelf = true;
                        var call2119 = callmethodChecked(this, "shallowCopy", []);
                        var var_n = call2119;
                        setLineNumber(267);    // compilenode identifier
                        // call case 6: other requests
                        var call2121 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                        var var_newChain = call2121;
                        setLineNumber(268);    // compilenode identifier
                        // call case 6: other requests
                        // call case 4: self request
                        onSelf = true;
                        var call2125 = callmethodChecked(this, "value", []);
                        var call2126 = callmethodChecked(call2125, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
                        // call case 6: other requests
                        var call2127 = callmethodChecked(var_n, "value:=(1)", [1], call2126);
                        setLineNumber(269);    // compilenode identifier
                        // call case 6: other requests
                        // call case 4: self request
                        onSelf = true;
                        var call2131 = callmethodChecked(this, "thenblock", []);
                        var call2132 = callmethodChecked(call2131, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
                        // call case 6: other requests
                        var call2133 = callmethodChecked(var_n, "thenblock:=(1)", [1], call2132);
                        setLineNumber(270);    // compilenode identifier
                        // call case 6: other requests
                        // call case 4: self request
                        onSelf = true;
                        var call2137 = callmethodChecked(this, "elseblock", []);
                        var call2138 = callmethodChecked(call2137, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
                        // call case 6: other requests
                        var call2139 = callmethodChecked(var_n, "elseblock:=(1)", [1], call2138);
                        setLineNumber(271);    // compilenode identifier
                        // call case 6: other requests
                        var call2141 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                        return call2141;
                      };
                      func2117.paramCounts = [1, 1];
                      obj2096.methods["map(1)ancestors(1)"] = func2117;
                      func2117.definitionLine = 265;
                      func2117.definitionModule = "ast";
                      var func2142 = function(argcv) {    // method pretty(_)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_depth = arguments[curarg];
                        curarg++;
                        setModuleName("ast");
                        setLineNumber(274);    // compilenode string
                        var string2143 = new GraceString("");
                        var var_spc = string2143;
                        setLineNumber(275);    // compilenode num
                        var opresult2147 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                        var block2148 = new GraceBlock(this, 275, 1);
                        setLineNumber(1);    // compilenode identifier
                        block2148.real = function(var_i) {
                          setLineNumber(276);    // compilenode string
                          var string2149 = new GraceString("  ");
                          var opresult2152 = callmethodChecked(var_spc, "++(1)", [1], string2149);
                          var_spc = opresult2152;
                          return GraceDone;
                        };
                        // call case 5: prelude request
                        var call2153 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult2147, block2148);
                        setLineNumber(278);    // compilenode string
                        var string2154 = new GraceString("\n");
                        // call case 1: super request
                        var call2157 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                        var opresult2159 = callmethodChecked(call2157, "++(1)", [1], string2154);
                        var var_s = opresult2159;
                        setLineNumber(279);    // compilenode identifier
                        var opresult2163 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                        // call case 6: other requests
                        // call case 4: self request
                        onSelf = true;
                        var call2165 = callmethodChecked(this, "value", []);
                        var call2166 = callmethodChecked(call2165, "pretty(1)", [1], opresult2163);
                        var opresult2170 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                        var opresult2172 = callmethodChecked(opresult2170, "++(1)", [1], call2166);
                        var_s = opresult2172;
                        setLineNumber(280);    // compilenode string
                        var string2173 = new GraceString("\n");
                        var opresult2176 = callmethodChecked(var_s, "++(1)", [1], string2173);
                        var_s = opresult2176;
                        var if2177 = GraceDone;
                        setLineNumber(281);    // compilenode string
                        var string2178 = new GraceString("symbols");
                        // call case 6: other requests
                        var call2181 = callmethodChecked(var_util, "target", []);
                        var opresult2183 = callmethodChecked(call2181, "==(1)", [1], string2178);
                        if (Grace_isTrue(opresult2183)) {
                          setLineNumber(282);    // compilenode string
                          var string2184 = new GraceString("\n");
                          var opresult2189 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                          // call case 6: other requests
                          // call case 4: self request
                          onSelf = true;
                          var call2191 = callmethodChecked(this, "thenblock", []);
                          var call2192 = callmethodChecked(call2191, "pretty(1)", [1], opresult2189);
                          var string2194 = new GraceString("Then: ");
                          var opresult2196 = callmethodChecked(string2194, "++(1)", [1], call2192);
                          var opresult2198 = callmethodChecked(opresult2196, "++(1)", [1], string2184);
                          var opresult2202 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                          var opresult2204 = callmethodChecked(opresult2202, "++(1)", [1], opresult2198);
                          var_s = opresult2204;
                          setLineNumber(283);    // compilenode string
                          var string2205 = new GraceString("");
                          var opresult2210 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                          // call case 6: other requests
                          // call case 4: self request
                          onSelf = true;
                          var call2212 = callmethodChecked(this, "elseblock", []);
                          var call2213 = callmethodChecked(call2212, "pretty(1)", [1], opresult2210);
                          var string2215 = new GraceString("Else: ");
                          var opresult2217 = callmethodChecked(string2215, "++(1)", [1], call2213);
                          var opresult2219 = callmethodChecked(opresult2217, "++(1)", [1], string2205);
                          var opresult2223 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                          var opresult2225 = callmethodChecked(opresult2223, "++(1)", [1], opresult2219);
                          var_s = opresult2225;
                          if2177 = GraceDone;
                        } else {
                          setLineNumber(285);    // compilenode string
                          var string2226 = new GraceString("Then:");
                          var opresult2230 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                          var opresult2232 = callmethodChecked(opresult2230, "++(1)", [1], string2226);
                          var_s = opresult2232;
                          setLineNumber(286);    // compilenode member
                          // call case 6: other requests
                          // call case 4: self request
                          onSelf = true;
                          var call2236 = callmethodChecked(this, "thenblock", []);
                          var call2237 = callmethodChecked(call2236, "body", []);
                          var block2238 = new GraceBlock(this, 286, 1);
                          setLineNumber(1);    // compilenode identifier
                          block2238.real = function(var_ix) {
                            setLineNumber(287);    // compilenode identifier
                            var opresult2242 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                            // call case 6: other requests
                            var call2243 = callmethodChecked(var_ix, "pretty(1)", [1], opresult2242);
                            var string2246 = new GraceString("\n  ");
                            var opresult2249 = callmethodChecked(var_s, "++(1)", [1], string2246);
                            var opresult2251 = callmethodChecked(opresult2249, "++(1)", [1], var_spc);
                            var opresult2253 = callmethodChecked(opresult2251, "++(1)", [1], call2243);
                            var_s = opresult2253;
                            return GraceDone;
                          };
                          // call case 5: prelude request
                          var call2254 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call2237, block2238);
                          setLineNumber(289);    // compilenode string
                          var string2255 = new GraceString("\n");
                          var opresult2258 = callmethodChecked(var_s, "++(1)", [1], string2255);
                          var_s = opresult2258;
                          setLineNumber(290);    // compilenode string
                          var string2259 = new GraceString("Else:");
                          var opresult2263 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                          var opresult2265 = callmethodChecked(opresult2263, "++(1)", [1], string2259);
                          var_s = opresult2265;
                          setLineNumber(291);    // compilenode member
                          // call case 6: other requests
                          // call case 4: self request
                          onSelf = true;
                          var call2269 = callmethodChecked(this, "elseblock", []);
                          var call2270 = callmethodChecked(call2269, "body", []);
                          var block2271 = new GraceBlock(this, 291, 1);
                          setLineNumber(1);    // compilenode identifier
                          block2271.real = function(var_ix) {
                            setLineNumber(292);    // compilenode identifier
                            var opresult2275 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                            // call case 6: other requests
                            var call2276 = callmethodChecked(var_ix, "pretty(1)", [1], opresult2275);
                            var string2279 = new GraceString("\n  ");
                            var opresult2282 = callmethodChecked(var_s, "++(1)", [1], string2279);
                            var opresult2284 = callmethodChecked(opresult2282, "++(1)", [1], var_spc);
                            var opresult2286 = callmethodChecked(opresult2284, "++(1)", [1], call2276);
                            var_s = opresult2286;
                            return GraceDone;
                          };
                          // call case 5: prelude request
                          var call2287 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call2270, block2271);
                          if2177 = call2287;
                        }
                        setLineNumber(295);    // compilenode identifier
                        return var_s;
                      };
                      func2142.paramCounts = [1];
                      obj2096.methods["pretty(1)"] = func2142;
                      func2142.definitionLine = 273;
                      func2142.definitionModule = "ast";
                      var func2288 = function(argcv) {    // method toGrace(_)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_depth = arguments[curarg];
                        curarg++;
                        // Start argument checking
                        curarg = 1;
                        setLineNumber(297);    // compilenode identifier
                        if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                    callmethod(var_Number, "asString", [0])._value + "."));
                        curarg++;
                        // End argument checking
                        setModuleName("ast");
                        setLineNumber(298);    // compilenode string
                        var string2289 = new GraceString("");
                        var var_spc = string2289;
                        setLineNumber(299);    // compilenode block
                        var block2291 = new GraceBlock(this, 299, 0);
                        block2291.real = function() {
                          setLineNumber(300);    // compilenode string
                          var string2292 = new GraceString("    ");
                          var opresult2295 = callmethodChecked(var_spc, "++(1)", [1], string2292);
                          var_spc = opresult2295;
                          return GraceDone;
                        };
                        // call case 5: prelude request
                        var call2296 = callmethodChecked(var_prelude, "repeat(1)times(1)", [1, 1], var_depth, block2291);
                        setLineNumber(302);    // compilenode string
                        var string2297 = new GraceString(") then {");
                        // call case 6: other requests
                        // call case 4: self request
                        onSelf = true;
                        var call2301 = callmethodChecked(this, "value", []);
                        var call2302 = callmethodChecked(call2301, "toGrace(1)", [1], new GraceNum(0));
                        var string2304 = new GraceString("if (");
                        var opresult2306 = callmethodChecked(string2304, "++(1)", [1], call2302);
                        var opresult2308 = callmethodChecked(opresult2306, "++(1)", [1], string2297);
                        var var_s = opresult2308;
                        setLineNumber(303);    // compilenode member
                        // call case 6: other requests
                        // call case 4: self request
                        onSelf = true;
                        var call2312 = callmethodChecked(this, "thenblock", []);
                        var call2313 = callmethodChecked(call2312, "body", []);
                        var block2314 = new GraceBlock(this, 303, 1);
                        setLineNumber(1);    // compilenode identifier
                        block2314.real = function(var_ix) {
                          setLineNumber(304);    // compilenode identifier
                          var opresult2318 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                          // call case 6: other requests
                          var call2319 = callmethodChecked(var_ix, "toGrace(1)", [1], opresult2318);
                          var string2321 = new GraceString("    ");
                          var string2324 = new GraceString("\n");
                          var opresult2327 = callmethodChecked(var_s, "++(1)", [1], string2324);
                          var opresult2329 = callmethodChecked(opresult2327, "++(1)", [1], var_spc);
                          var opresult2331 = callmethodChecked(opresult2329, "++(1)", [1], string2321);
                          var opresult2333 = callmethodChecked(opresult2331, "++(1)", [1], call2319);
                          var_s = opresult2333;
                          return GraceDone;
                        };
                        // call case 5: prelude request
                        var call2334 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call2313, block2314);
                        var if2335 = GraceDone;
                        setLineNumber(306);    // compilenode member
                        // call case 6: other requests
                        // call case 4: self request
                        onSelf = true;
                        var call2338 = callmethodChecked(this, "elseblock", []);
                        var call2339 = callmethodChecked(call2338, "isntEmpty", []);
                        if (Grace_isTrue(call2339)) {
                          setLineNumber(307);    // compilenode string
                          var string2340 = new GraceString("} else {");
                          var string2343 = new GraceString("\n");
                          var opresult2346 = callmethodChecked(var_s, "++(1)", [1], string2343);
                          var opresult2348 = callmethodChecked(opresult2346, "++(1)", [1], var_spc);
                          var opresult2350 = callmethodChecked(opresult2348, "++(1)", [1], string2340);
                          var_s = opresult2350;
                          setLineNumber(308);    // compilenode member
                          // call case 6: other requests
                          // call case 4: self request
                          onSelf = true;
                          var call2354 = callmethodChecked(this, "elseblock", []);
                          var call2355 = callmethodChecked(call2354, "body", []);
                          var block2356 = new GraceBlock(this, 308, 1);
                          setLineNumber(1);    // compilenode identifier
                          block2356.real = function(var_ix) {
                            setLineNumber(309);    // compilenode identifier
                            var opresult2360 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                            // call case 6: other requests
                            var call2361 = callmethodChecked(var_ix, "toGrace(1)", [1], opresult2360);
                            var string2363 = new GraceString("    ");
                            var string2366 = new GraceString("\n");
                            var opresult2369 = callmethodChecked(var_s, "++(1)", [1], string2366);
                            var opresult2371 = callmethodChecked(opresult2369, "++(1)", [1], var_spc);
                            var opresult2373 = callmethodChecked(opresult2371, "++(1)", [1], string2363);
                            var opresult2375 = callmethodChecked(opresult2373, "++(1)", [1], call2361);
                            var_s = opresult2375;
                            return GraceDone;
                          };
                          // call case 5: prelude request
                          var call2376 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call2355, block2356);
                          if2335 = call2376;
                        }
                        setLineNumber(312);    // compilenode string
                        var string2377 = new GraceString("}");
                        var string2380 = new GraceString("\n");
                        var opresult2383 = callmethodChecked(var_s, "++(1)", [1], string2380);
                        var opresult2385 = callmethodChecked(opresult2383, "++(1)", [1], var_spc);
                        var opresult2387 = callmethodChecked(opresult2385, "++(1)", [1], string2377);
                        var_s = opresult2387;
                        setLineNumber(313);    // return value
                        if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], var_s)))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("result of method toGrace(_) does not have " + 
                                    callmethod(var_String, "asString", [0])._value + "."));
                        return var_s;
                      };
                      func2288.paramTypes = [];
                      func2288.paramTypes.push([type_Number, "depth"]);
                      func2288.paramCounts = [1];
                      obj2096.methods["toGrace(1)"] = func2288;
                      func2288.definitionLine = 297;
                      func2288.definitionModule = "ast";
                      var func2388 = function(argcv) {    // method shallowCopy
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        setModuleName("ast");
                        setLineNumber(316);    // compilenode identifier
                        // call case 6: other requests
                        // call case 6: other requests
                        var call2391 = callmethodChecked(var_ifNode, "new(3)", [3], var_nullNode, var_nullNode, var_nullNode);
                        var call2392 = callmethodChecked(call2391, "shallowCopyFieldsFrom(1)", [1], this);
                        return call2392;
                      };
                      func2388.paramCounts = [0];
                      obj2096.methods["shallowCopy"] = func2388;
                      func2388.definitionLine = 315;
                      func2388.definitionModule = "ast";
                      var func2393 = function(argcv) {    // method shallowCopyFieldsFrom(_)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_other = arguments[curarg];
                        curarg++;
                        setModuleName("ast");
                        setLineNumber(319);    // compilenode identifier
                        // call case 1: super request
                        var call2395 = callmethodsuper(this, "shallowCopyFieldsFrom(1)", [1], var_other);
                        setLineNumber(320);    // compilenode member
                        // call case 6: other requests
                        var call2398 = callmethodChecked(var_other, "handledIdentifiers", []);
                        // call case 4: self request
                        onSelf = true;
                        var call2399 = callmethodChecked(this, "handledIdentifiers:=(1)", [1], call2398);
                        setLineNumber(321);    // compilenode identifier
                        return this;
                      };
                      func2393.paramCounts = [1];
                      obj2096.methods["shallowCopyFieldsFrom(1)"] = func2393;
                      func2393.definitionLine = 318;
                      func2393.definitionModule = "ast";
                      setLineNumber(250);    // compilenode identifier
                      // call case 6: other requests
                      // call case 6: other requests
                      // call case 3: self.outer request
                      var call2403 = callmethodChecked(superDepth, "outer", [0]);
                      var call2404 = callmethodChecked(call2403, "outer", []);
                      var call2405 = callmethodChecked(call2404, "baseNode$object(1)", [0, 1], this);
                      obj2096.superobj = call2405;
                      if (call2405.data) obj2096.data = call2405.data;
                      if (call2405.hasOwnProperty('_value'))
                          obj2096._value = call2405._value;
                      setLineNumber(251);    // compilenode string
                      var string2406 = new GraceString("if");
                      obj2096.data["kind"] = string2406;
                      var reader_ast_kind2407 = function() {
                        return this.data["kind"];
                      };
                      reader_ast_kind2407.def = true;
                      obj2096.methods["kind"] = reader_ast_kind2407;
                      setLineNumber(252);    // compilenode identifier
                      obj2096.data["value"] = var_cond;
                      var reader_ast_value2408 = function() {
                        return this.data["value"];
                      };
                      obj2096.methods["value"] = reader_ast_value2408;
                      obj2096.data["value"] = var_cond;
                      var writer_ast_value2408 = function(argcv, o) {
                        this.data["value"] = o;
                        return GraceDone;
                      };
                      obj2096.methods["value:=(1)"] = writer_ast_value2408;
                      obj2096.mutable = true;
                      setLineNumber(253);    // compilenode identifier
                      obj2096.data["thenblock"] = var_thenblock__39__;
                      var reader_ast_thenblock2409 = function() {
                        return this.data["thenblock"];
                      };
                      obj2096.methods["thenblock"] = reader_ast_thenblock2409;
                      obj2096.data["thenblock"] = var_thenblock__39__;
                      var writer_ast_thenblock2409 = function(argcv, o) {
                        this.data["thenblock"] = o;
                        return GraceDone;
                      };
                      obj2096.methods["thenblock:=(1)"] = writer_ast_thenblock2409;
                      obj2096.mutable = true;
                      setLineNumber(254);    // compilenode identifier
                      obj2096.data["elseblock"] = var_elseblock__39__;
                      var reader_ast_elseblock2410 = function() {
                        return this.data["elseblock"];
                      };
                      obj2096.methods["elseblock"] = reader_ast_elseblock2410;
                      obj2096.data["elseblock"] = var_elseblock__39__;
                      var writer_ast_elseblock2410 = function(argcv, o) {
                        this.data["elseblock"] = o;
                        return GraceDone;
                      };
                      obj2096.methods["elseblock:=(1)"] = writer_ast_elseblock2410;
                      obj2096.mutable = true;
                      setLineNumber(255);    // compilenode identifier
                      obj2096.data["handledIdentifiers"] = GraceFalse;
                      var reader_ast_handledIdentifiers2411 = function() {
                        return this.data["handledIdentifiers"];
                      };
                      obj2096.methods["handledIdentifiers"] = reader_ast_handledIdentifiers2411;
                      obj2096.data["handledIdentifiers"] = GraceFalse;
                      var writer_ast_handledIdentifiers2411 = function(argcv, o) {
                        this.data["handledIdentifiers"] = o;
                        return GraceDone;
                      };
                      obj2096.methods["handledIdentifiers:=(1)"] = writer_ast_handledIdentifiers2411;
                      obj2096.mutable = true;
                      superDepth = origSuperDepth;
                    };
                    obj_init_2096.apply(inheritingObject, []);
                    return obj2096;
                    };
                    obj1776.methods["new(3)$object(1)"] = func2095;
                  superDepth = origSuperDepth;
                };
                obj_init_1776.apply(obj1776, []);
                var var_ifNode = obj1776;
                setLineNumber(1);    // compilenode method
                var func2412 = function(argcv) {    // method ifNode
                  var returnTarget = invocationCount;
                  invocationCount++;
                  var curarg = 1;
                  setModuleName("ast");
                  // ifNode is a simple accessor - elide try ... catch
                  setLineNumber(248);    // compilenode identifier
                  return var_ifNode;
                };
                func2412.paramCounts = [0];
                this.methods["ifNode"] = func2412;
                func2412.definitionLine = 1;
                func2412.definitionModule = "ast";
                this.methods["ifNode"].debug = "def";
                setLineNumber(325);    // compilenode object
                var obj2413 = Grace_allocObject(GraceObject, "blockNode");
                obj2413.definitionModule = "ast";
                obj2413.definitionLine = 325;
                obj2413.outer = this;
                var reader_ast_outer2414 = function() {
                  return this.outer;
                };
                obj2413.methods["outer"] = reader_ast_outer2414;
                var obj_init_2413 = function() {
                  var origSuperDepth = superDepth;
                  superDepth = obj2413;
                  var func2415 = function(argcv) {    // method new(_,_)
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    var var_params__39__ = arguments[curarg];
                    curarg++;
                    var var_body__39__ = arguments[curarg];
                    curarg++;
                    setModuleName("ast");
                    setLineNumber(326);    // compilenode object
                    var obj2416 = Grace_allocObject(null, "blockNode.new(_,_)");
                    obj2416.definitionModule = "ast";
                    obj2416.definitionLine = 326;
                    obj2416.outer = this;
                    var reader_ast_outer2417 = function() {
                      return this.outer;
                    };
                    obj2416.methods["outer"] = reader_ast_outer2417;
                    var obj_init_2416 = function() {
                      var origSuperDepth = superDepth;
                      superDepth = obj2416;
                      var func2418 = function(argcv) {    // method isBlock
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        setModuleName("ast");
                        // isBlock is a simple accessor - elide try ... catch
                        setLineNumber(338);    // compilenode identifier
                        return GraceTrue;
                      };
                      func2418.paramCounts = [0];
                      obj2416.methods["isBlock"] = func2418;
                      func2418.definitionLine = 338;
                      func2418.definitionModule = "ast";
                      var func2419 = function(argcv) {    // method isDelimited
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        setModuleName("ast");
                        // isDelimited is a simple accessor - elide try ... catch
                        setLineNumber(339);    // compilenode identifier
                        return GraceTrue;
                      };
                      func2419.paramCounts = [0];
                      obj2416.methods["isDelimited"] = func2419;
                      func2419.definitionLine = 339;
                      func2419.definitionModule = "ast";
                      var func2420 = function(argcv) {    // method isEmpty
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        setModuleName("ast");
                        setLineNumber(340);    // compilenode member
                        // call case 6: other requests
                        // call case 4: self request
                        onSelf = true;
                        var call2424 = callmethodChecked(this, "body", []);
                        var call2425 = callmethodChecked(call2424, "size", []);
                        var opresult2427 = callmethodChecked(call2425, "==(1)", [1], new GraceNum(0));
                        return opresult2427;
                      };
                      func2420.paramCounts = [0];
                      obj2416.methods["isEmpty"] = func2420;
                      func2420.definitionLine = 340;
                      func2420.definitionModule = "ast";
                      var func2428 = function(argcv) {    // method isntEmpty
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        setModuleName("ast");
                        setLineNumber(341);    // compilenode member
                        // call case 6: other requests
                        // call case 4: self request
                        onSelf = true;
                        var call2432 = callmethodChecked(this, "body", []);
                        var call2433 = callmethodChecked(call2432, "size", []);
                        var opresult2435 = callmethodChecked(call2433, ">(1)", [1], new GraceNum(0));
                        return opresult2435;
                      };
                      func2428.paramCounts = [0];
                      obj2416.methods["isntEmpty"] = func2428;
                      func2428.definitionLine = 341;
                      func2428.definitionModule = "ast";
                      var func2436 = function(argcv) {    // method scope:=(_)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_st = arguments[curarg];
                        curarg++;
                        setModuleName("ast");
                        setLineNumber(345);    // compilenode identifier
                        // call case 4: self request
                        onSelf = true;
                        var call2438 = callmethodChecked(this, "symbolTable:=(1)", [1], var_st);
                        setLineNumber(346);    // compilenode identifier
                        // call case 6: other requests
                        var call2440 = callmethodChecked(var_st, "node:=(1)", [1], this);
                        return call2440;
                      };
                      func2436.paramCounts = [1];
                      obj2416.methods["scope:=(1)"] = func2436;
                      func2436.definitionLine = 342;
                      func2436.definitionModule = "ast";
                      var func2441 = function(argcv) {    // method declarationKindWithAncestors(_)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_as = arguments[curarg];
                        curarg++;
                        setModuleName("ast");
                        setLineNumber(348);    // compilenode member
                        // call case 6: other requests
                        var call2443 = callmethodChecked(var_k, "parameter", []);
                        return call2443;
                      };
                      func2441.paramCounts = [1];
                      obj2416.methods["declarationKindWithAncestors(1)"] = func2441;
                      func2441.definitionLine = 348;
                      func2441.definitionModule = "ast";
                      var func2444 = function(argcv) {    // method isMatchingBlock
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        setModuleName("ast");
                        setLineNumber(349);    // compilenode member
                        // call case 6: other requests
                        // call case 4: self request
                        onSelf = true;
                        var call2448 = callmethodChecked(this, "params", []);
                        var call2449 = callmethodChecked(call2448, "size", []);
                        var opresult2451 = callmethodChecked(call2449, "==(1)", [1], new GraceNum(1));
                        return opresult2451;
                      };
                      func2444.paramCounts = [0];
                      obj2416.methods["isMatchingBlock"] = func2444;
                      func2444.definitionLine = 349;
                      func2444.definitionModule = "ast";
                      var func2452 = function(argcv) {    // method returnsObject
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        setModuleName("ast");
                        setLineNumber(351);    // compilenode block
                        var block2453 = new GraceBlock(this, 351, 0);
                        block2453.real = function() {
                          // call case 6: other requests
                          // call case 6: other requests
                          // call case 4: self request
                          onSelf = true;
                          var call2457 = callmethodChecked(this, "body", []);
                          var call2458 = callmethodChecked(call2457, "last", []);
                          var call2459 = callmethodChecked(call2458, "returnsObject", []);
                          return call2459;
                        };
                        // call case 6: other requests
                        // call case 4: self request
                        onSelf = true;
                        var call2464 = callmethodChecked(this, "body", []);
                        var call2465 = callmethodChecked(call2464, "size", []);
                        var opresult2467 = callmethodChecked(call2465, ">(1)", [1], new GraceNum(0));
                        var opresult2469 = callmethodChecked(opresult2467, "&&(1)", [1], block2453);
                        return opresult2469;
                      };
                      func2452.paramCounts = [0];
                      obj2416.methods["returnsObject"] = func2452;
                      func2452.definitionLine = 350;
                      func2452.definitionModule = "ast";
                      var func2470 = function(argcv) {    // method returnedObjectScope
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        setModuleName("ast");
                        setLineNumber(355);    // compilenode member
                        // call case 6: other requests
                        // call case 6: other requests
                        // call case 4: self request
                        onSelf = true;
                        var call2474 = callmethodChecked(this, "body", []);
                        var call2475 = callmethodChecked(call2474, "last", []);
                        var call2476 = callmethodChecked(call2475, "returnedObjectScope", []);
                        return call2476;
                      };
                      func2470.paramCounts = [0];
                      obj2416.methods["returnedObjectScope"] = func2470;
                      func2470.definitionLine = 353;
                      func2470.definitionModule = "ast";
                      var func2477 = function(argcv) {    // method parametersDo(_)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_b = arguments[curarg];
                        curarg++;
                        setModuleName("ast");
                        setLineNumber(358);    // compilenode identifier
                        // call case 6: other requests
                        // call case 4: self request
                        onSelf = true;
                        var call2480 = callmethodChecked(this, "params", []);
                        var call2481 = callmethodChecked(call2480, "do(1)", [1], var_b);
                        return call2481;
                      };
                      func2477.paramCounts = [1];
                      obj2416.methods["parametersDo(1)"] = func2477;
                      func2477.definitionLine = 357;
                      func2477.definitionModule = "ast";
                      var func2482 = function(argcv) {    // method accept(_)from(_)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_visitor = arguments[curarg];
                        curarg++;
                        var var_as = arguments[curarg];
                        curarg++;
                        // Start argument checking
                        curarg = 1;
                        setLineNumber(360);    // compilenode identifier
                        if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                    callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                        curarg++;
                        curarg++;
                        // End argument checking
                        setModuleName("ast");
                        var if2483 = GraceDone;
                        setLineNumber(361);    // compilenode identifier
                        // call case 6: other requests
                        var call2485 = callmethodChecked(var_visitor, "visitBlock(1)up(1)", [1, 1], this, var_as);
                        if (Grace_isTrue(call2485)) {
                          setLineNumber(362);    // compilenode identifier
                          // call case 6: other requests
                          var call2487 = callmethodChecked(var_as, "extend(1)", [1], this);
                          var var_newChain = call2487;
                          setLineNumber(363);    // compilenode member
                          // call case 4: self request
                          onSelf = true;
                          var call2490 = callmethodChecked(this, "params", []);
                          var block2491 = new GraceBlock(this, 363, 1);
                          setLineNumber(1);    // compilenode identifier
                          block2491.real = function(var_mx) {
                            setLineNumber(364);    // compilenode identifier
                            // call case 6: other requests
                            var call2493 = callmethodChecked(var_mx, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                            return call2493;
                          };
                          // call case 5: prelude request
                          var call2494 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call2490, block2491);
                          setLineNumber(366);    // compilenode member
                          // call case 4: self request
                          onSelf = true;
                          var call2497 = callmethodChecked(this, "body", []);
                          var block2498 = new GraceBlock(this, 366, 1);
                          setLineNumber(1);    // compilenode identifier
                          block2498.real = function(var_mx) {
                            setLineNumber(367);    // compilenode identifier
                            // call case 6: other requests
                            var call2500 = callmethodChecked(var_mx, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                            return call2500;
                          };
                          // call case 5: prelude request
                          var call2501 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call2497, block2498);
                          var if2502 = GraceDone;
                          setLineNumber(369);    // compilenode member
                          // call case 4: self request
                          onSelf = true;
                          var call2504 = callmethodChecked(this, "matchingPattern", []);
                          var opresult2507 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call2504);
                          if (Grace_isTrue(opresult2507)) {
                            setLineNumber(370);    // compilenode identifier
                            // call case 6: other requests
                            // call case 4: self request
                            onSelf = true;
                            var call2510 = callmethodChecked(this, "matchingPattern", []);
                            var call2511 = callmethodChecked(call2510, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                            if2502 = call2511;
                          }
                          if2483 = if2502;
                        }
                        return if2483;
                      };
                      func2482.paramTypes = [];
                      func2482.paramTypes.push([]);
                      func2482.paramTypes.push([]);
                      func2482.paramCounts = [1, 1];
                      obj2416.methods["accept(1)from(1)"] = func2482;
                      func2482.definitionLine = 360;
                      func2482.definitionModule = "ast";
                      var func2512 = function(argcv) {    // method map(_)ancestors(_)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_blk = arguments[curarg];
                        curarg++;
                        var var_as = arguments[curarg];
                        curarg++;
                        setModuleName("ast");
                        setLineNumber(375);    // compilenode member
                        // call case 4: self request
                        onSelf = true;
                        var call2514 = callmethodChecked(this, "shallowCopy", []);
                        var var_n = call2514;
                        setLineNumber(376);    // compilenode identifier
                        // call case 6: other requests
                        var call2516 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                        var var_newChain = call2516;
                        setLineNumber(377);    // compilenode member
                        // call case 4: self request
                        onSelf = true;
                        var call2520 = callmethodChecked(this, "params", []);
                        // call case 6: other requests
                        // call case 6: other requests
                        // call case 3: self.outer request
                        var call2523 = callmethodChecked(superDepth, "outer", [0]);
                        var call2524 = callmethodChecked(call2523, "outer", []);
                        onSelf = true;
                        var call2525 = callmethodChecked(call2524, "listMap(2)ancestors(1)", [2, 1], call2520, var_blk, var_newChain);
                        // call case 6: other requests
                        var call2526 = callmethodChecked(var_n, "params:=(1)", [1], call2525);
                        setLineNumber(378);    // compilenode member
                        // call case 4: self request
                        onSelf = true;
                        var call2530 = callmethodChecked(this, "body", []);
                        // call case 6: other requests
                        // call case 6: other requests
                        // call case 3: self.outer request
                        var call2533 = callmethodChecked(superDepth, "outer", [0]);
                        var call2534 = callmethodChecked(call2533, "outer", []);
                        onSelf = true;
                        var call2535 = callmethodChecked(call2534, "listMap(2)ancestors(1)", [2, 1], call2530, var_blk, var_newChain);
                        // call case 6: other requests
                        var call2536 = callmethodChecked(var_n, "body:=(1)", [1], call2535);
                        setLineNumber(379);    // compilenode member
                        // call case 4: self request
                        onSelf = true;
                        var call2540 = callmethodChecked(this, "matchingPattern", []);
                        // call case 6: other requests
                        // call case 6: other requests
                        // call case 3: self.outer request
                        var call2543 = callmethodChecked(superDepth, "outer", [0]);
                        var call2544 = callmethodChecked(call2543, "outer", []);
                        onSelf = true;
                        var call2545 = callmethodChecked(call2544, "maybeMap(2)ancestors(1)", [2, 1], call2540, var_blk, var_newChain);
                        // call case 6: other requests
                        var call2546 = callmethodChecked(var_n, "matchingPattern:=(1)", [1], call2545);
                        setLineNumber(380);    // compilenode identifier
                        // call case 6: other requests
                        var call2548 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                        return call2548;
                      };
                      func2512.paramCounts = [1, 1];
                      obj2416.methods["map(1)ancestors(1)"] = func2512;
                      func2512.definitionLine = 374;
                      func2512.definitionModule = "ast";
                      var func2549 = function(argcv) {    // method pretty(_)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_depth = arguments[curarg];
                        curarg++;
                        setModuleName("ast");
                        setLineNumber(383);    // compilenode string
                        var string2550 = new GraceString("");
                        var var_spc = string2550;
                        setLineNumber(384);    // compilenode num
                        var opresult2554 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                        var block2555 = new GraceBlock(this, 384, 1);
                        setLineNumber(1);    // compilenode identifier
                        block2555.real = function(var_i) {
                          setLineNumber(385);    // compilenode string
                          var string2556 = new GraceString("  ");
                          var opresult2559 = callmethodChecked(var_spc, "++(1)", [1], string2556);
                          var_spc = opresult2559;
                          return GraceDone;
                        };
                        // call case 5: prelude request
                        var call2560 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult2554, block2555);
                        setLineNumber(387);    // compilenode string
                        var string2561 = new GraceString("\n");
                        // call case 1: super request
                        var call2564 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                        var opresult2566 = callmethodChecked(call2564, "++(1)", [1], string2561);
                        var var_s = opresult2566;
                        setLineNumber(388);    // compilenode string
                        var string2567 = new GraceString("Parameters:");
                        var opresult2571 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                        var opresult2573 = callmethodChecked(opresult2571, "++(1)", [1], string2567);
                        var_s = opresult2573;
                        setLineNumber(389);    // compilenode member
                        // call case 4: self request
                        onSelf = true;
                        var call2576 = callmethodChecked(this, "params", []);
                        var block2577 = new GraceBlock(this, 389, 1);
                        setLineNumber(1);    // compilenode identifier
                        block2577.real = function(var_mx) {
                          setLineNumber(390);    // compilenode identifier
                          var opresult2581 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                          // call case 6: other requests
                          var call2582 = callmethodChecked(var_mx, "pretty(1)", [1], opresult2581);
                          var string2585 = new GraceString("\n  ");
                          var opresult2588 = callmethodChecked(var_s, "++(1)", [1], string2585);
                          var opresult2590 = callmethodChecked(opresult2588, "++(1)", [1], var_spc);
                          var opresult2592 = callmethodChecked(opresult2590, "++(1)", [1], call2582);
                          var_s = opresult2592;
                          return GraceDone;
                        };
                        // call case 5: prelude request
                        var call2593 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call2576, block2577);
                        setLineNumber(392);    // compilenode string
                        var string2594 = new GraceString("\n");
                        var opresult2597 = callmethodChecked(var_s, "++(1)", [1], string2594);
                        var_s = opresult2597;
                        setLineNumber(393);    // compilenode string
                        var string2598 = new GraceString("Body:");
                        var opresult2602 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                        var opresult2604 = callmethodChecked(opresult2602, "++(1)", [1], string2598);
                        var_s = opresult2604;
                        setLineNumber(394);    // compilenode member
                        // call case 4: self request
                        onSelf = true;
                        var call2607 = callmethodChecked(this, "body", []);
                        var block2608 = new GraceBlock(this, 394, 1);
                        setLineNumber(1);    // compilenode identifier
                        block2608.real = function(var_mx) {
                          setLineNumber(395);    // compilenode identifier
                          var opresult2612 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                          // call case 6: other requests
                          var call2613 = callmethodChecked(var_mx, "pretty(1)", [1], opresult2612);
                          var string2616 = new GraceString("\n  ");
                          var opresult2619 = callmethodChecked(var_s, "++(1)", [1], string2616);
                          var opresult2621 = callmethodChecked(opresult2619, "++(1)", [1], var_spc);
                          var opresult2623 = callmethodChecked(opresult2621, "++(1)", [1], call2613);
                          var_s = opresult2623;
                          return GraceDone;
                        };
                        // call case 5: prelude request
                        var call2624 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call2607, block2608);
                        var if2625 = GraceDone;
                        setLineNumber(397);    // compilenode member
                        // call case 4: self request
                        onSelf = true;
                        var call2627 = callmethodChecked(this, "matchingPattern", []);
                        var opresult2630 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call2627);
                        if (Grace_isTrue(opresult2630)) {
                          setLineNumber(398);    // compilenode string
                          var string2631 = new GraceString("\n");
                          var opresult2634 = callmethodChecked(var_s, "++(1)", [1], string2631);
                          var_s = opresult2634;
                          setLineNumber(399);    // compilenode string
                          var string2635 = new GraceString("Pattern:");
                          var opresult2639 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                          var opresult2641 = callmethodChecked(opresult2639, "++(1)", [1], string2635);
                          var_s = opresult2641;
                          setLineNumber(400);    // compilenode identifier
                          var opresult2645 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                          // call case 6: other requests
                          // call case 4: self request
                          onSelf = true;
                          var call2647 = callmethodChecked(this, "matchingPattern", []);
                          var call2648 = callmethodChecked(call2647, "pretty(1)", [1], opresult2645);
                          var string2651 = new GraceString("\n  ");
                          var opresult2654 = callmethodChecked(var_s, "++(1)", [1], string2651);
                          var opresult2656 = callmethodChecked(opresult2654, "++(1)", [1], var_spc);
                          var opresult2658 = callmethodChecked(opresult2656, "++(1)", [1], call2648);
                          var_s = opresult2658;
                          if2625 = GraceDone;
                        }
                        setLineNumber(402);    // compilenode identifier
                        return var_s;
                      };
                      func2549.paramCounts = [1];
                      obj2416.methods["pretty(1)"] = func2549;
                      func2549.definitionLine = 382;
                      func2549.definitionModule = "ast";
                      var func2659 = function(argcv) {    // method toGrace(_)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_depth = arguments[curarg];
                        curarg++;
                        // Start argument checking
                        curarg = 1;
                        setLineNumber(404);    // compilenode identifier
                        if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                    callmethod(var_Number, "asString", [0])._value + "."));
                        curarg++;
                        // End argument checking
                        setModuleName("ast");
                        setLineNumber(405);    // compilenode string
                        var string2660 = new GraceString("");
                        var var_spc = string2660;
                        setLineNumber(406);    // compilenode block
                        var block2662 = new GraceBlock(this, 406, 0);
                        block2662.real = function() {
                          setLineNumber(407);    // compilenode string
                          var string2663 = new GraceString("    ");
                          var opresult2666 = callmethodChecked(var_spc, "++(1)", [1], string2663);
                          var_spc = opresult2666;
                          return GraceDone;
                        };
                        // call case 5: prelude request
                        var call2667 = callmethodChecked(var_prelude, "repeat(1)times(1)", [1, 1], var_depth, block2662);
                        setLineNumber(409);    // compilenode string
                        var string2668 = new GraceString("{");
                        var var_s = string2668;
                        var if2669 = GraceDone;
                        setLineNumber(410);    // compilenode member
                        // call case 6: other requests
                        // call case 4: self request
                        onSelf = true;
                        var call2673 = callmethodChecked(this, "params", []);
                        var call2674 = callmethodChecked(call2673, "size", []);
                        var opresult2676 = callmethodChecked(call2674, ">(1)", [1], new GraceNum(0));
                        if (Grace_isTrue(opresult2676)) {
                          setLineNumber(411);    // compilenode string
                          var string2677 = new GraceString(" ");
                          var opresult2680 = callmethodChecked(var_s, "++(1)", [1], string2677);
                          var_s = opresult2680;
                          setLineNumber(412);    // compilenode member
                          // call case 6: other requests
                          // call case 4: self request
                          onSelf = true;
                          var call2684 = callmethodChecked(this, "params", []);
                          var call2685 = callmethodChecked(call2684, "indices", []);
                          var block2686 = new GraceBlock(this, 412, 1);
                          setLineNumber(1);    // compilenode identifier
                          block2686.real = function(var_i) {
                            setLineNumber(413);    // compilenode identifier
                            // call case 6: other requests
                            // call case 4: self request
                            onSelf = true;
                            var call2689 = callmethodChecked(this, "params", []);
                            var call2690 = callmethodChecked(call2689, "at(1)", [1], var_i);
                            var var_p = call2690;
                            var if2691 = GraceDone;
                            setLineNumber(414);    // compilenode member
                            // call case 4: self request
                            onSelf = true;
                            var call2693 = callmethodChecked(this, "matchingPattern", []);
                            var opresult2696 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call2693);
                            if (Grace_isTrue(opresult2696)) {
                              setLineNumber(415);    // compilenode string
                              var string2697 = new GraceString(")");
                              // call case 6: other requests
                              var call2700 = callmethodChecked(var_p, "toGrace(1)", [1], new GraceNum(0));
                              var string2702 = new GraceString("(");
                              var opresult2705 = callmethodChecked(var_s, "++(1)", [1], string2702);
                              var opresult2707 = callmethodChecked(opresult2705, "++(1)", [1], call2700);
                              var opresult2709 = callmethodChecked(opresult2707, "++(1)", [1], string2697);
                              var_s = opresult2709;
                              if2691 = GraceDone;
                            } else {
                              setLineNumber(417);    // compilenode num
                              // call case 6: other requests
                              var call2711 = callmethodChecked(var_p, "toGrace(1)", [1], new GraceNum(0));
                              var opresult2714 = callmethodChecked(var_s, "++(1)", [1], call2711);
                              var_s = opresult2714;
                              if2691 = GraceDone;
                            }
                            var if2715 = GraceDone;
                            setLineNumber(419);    // compilenode member
                            // call case 6: other requests
                            // call case 4: self request
                            onSelf = true;
                            var call2718 = callmethodChecked(this, "params", []);
                            var call2719 = callmethodChecked(call2718, "size", []);
                            var opresult2722 = callmethodChecked(var_i, "<(1)", [1], call2719);
                            if (Grace_isTrue(opresult2722)) {
                              setLineNumber(420);    // compilenode string
                              var string2723 = new GraceString(", ");
                              var opresult2726 = callmethodChecked(var_s, "++(1)", [1], string2723);
                              var_s = opresult2726;
                              if2715 = GraceDone;
                            } else {
                              setLineNumber(422);    // compilenode string
                              var string2727 = new GraceString(" \u2192");
                              var opresult2730 = callmethodChecked(var_s, "++(1)", [1], string2727);
                              var_s = opresult2730;
                              if2715 = GraceDone;
                            }
                            return if2715;
                          };
                          // call case 5: prelude request
                          var call2731 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call2685, block2686);
                          if2669 = call2731;
                        }
                        setLineNumber(426);    // compilenode member
                        // call case 4: self request
                        onSelf = true;
                        var call2734 = callmethodChecked(this, "body", []);
                        var block2735 = new GraceBlock(this, 426, 1);
                        setLineNumber(1);    // compilenode identifier
                        block2735.real = function(var_mx) {
                          setLineNumber(427);    // compilenode identifier
                          var opresult2739 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                          // call case 6: other requests
                          var call2740 = callmethodChecked(var_mx, "toGrace(1)", [1], opresult2739);
                          var string2743 = new GraceString("\n");
                          var opresult2746 = callmethodChecked(var_s, "++(1)", [1], string2743);
                          var opresult2748 = callmethodChecked(opresult2746, "++(1)", [1], var_spc);
                          var opresult2750 = callmethodChecked(opresult2748, "++(1)", [1], call2740);
                          var_s = opresult2750;
                          return GraceDone;
                        };
                        // call case 5: prelude request
                        var call2751 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call2734, block2735);
                        setLineNumber(429);    // compilenode string
                        var string2752 = new GraceString("\n");
                        var opresult2755 = callmethodChecked(var_s, "++(1)", [1], string2752);
                        var_s = opresult2755;
                        setLineNumber(430);    // compilenode identifier
                        var diff2759 = callmethodChecked(var_depth, "-(1)", [1], new GraceNum(1));
                        var block2760 = new GraceBlock(this, 430, 0);
                        block2760.real = function() {
                          var string2761 = new GraceString("    ");
                          var opresult2764 = callmethodChecked(var_s, "++(1)", [1], string2761);
                          var_s = opresult2764;
                          return GraceDone;
                        };
                        // call case 5: prelude request
                        var call2765 = callmethodChecked(var_prelude, "repeat(1)times(1)", [1, 1], diff2759, block2760);
                        setLineNumber(431);    // compilenode string
                        var string2766 = new GraceString("}");
                        var opresult2769 = callmethodChecked(var_s, "++(1)", [1], string2766);
                        if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], opresult2769)))
                            throw new GraceExceptionPacket(TypeErrorObject,
                                new GraceString("result of method toGrace(_) does not have " + 
                                    callmethod(var_String, "asString", [0])._value + "."));
                        return opresult2769;
                      };
                      func2659.paramTypes = [];
                      func2659.paramTypes.push([type_Number, "depth"]);
                      func2659.paramCounts = [1];
                      obj2416.methods["toGrace(1)"] = func2659;
                      func2659.definitionLine = 404;
                      func2659.definitionModule = "ast";
                      var func2770 = function(argcv) {    // method shallowCopy
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        setModuleName("ast");
                        setLineNumber(434);    // compilenode identifier
                        // call case 6: other requests
                        // call case 4: self request
                        onSelf = true;
                        var call2774 = callmethodChecked(this, "params", []);
                        // call case 4: self request
                        onSelf = true;
                        var call2776 = callmethodChecked(this, "body", []);
                        // call case 6: other requests
                        var call2777 = callmethodChecked(var_blockNode, "new(2)", [2], call2774, call2776);
                        var call2778 = callmethodChecked(call2777, "shallowCopyFieldsFrom(1)", [1], this);
                        return call2778;
                      };
                      func2770.paramCounts = [0];
                      obj2416.methods["shallowCopy"] = func2770;
                      func2770.definitionLine = 433;
                      func2770.definitionModule = "ast";
                      var func2779 = function(argcv) {    // method shallowCopyFieldsFrom(_)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_other = arguments[curarg];
                        curarg++;
                        setModuleName("ast");
                        setLineNumber(437);    // compilenode identifier
                        // call case 1: super request
                        var call2781 = callmethodsuper(this, "shallowCopyFieldsFrom(1)", [1], var_other);
                        setLineNumber(438);    // compilenode member
                        // call case 6: other requests
                        var call2784 = callmethodChecked(var_other, "matchingPattern", []);
                        // call case 4: self request
                        onSelf = true;
                        var call2785 = callmethodChecked(this, "matchingPattern:=(1)", [1], call2784);
                        setLineNumber(439);    // compilenode member
                        // call case 6: other requests
                        var call2788 = callmethodChecked(var_other, "extraRuntimeData", []);
                        // call case 4: self request
                        onSelf = true;
                        var call2789 = callmethodChecked(this, "extraRuntimeData:=(1)", [1], call2788);
                        setLineNumber(440);    // compilenode identifier
                        return this;
                      };
                      func2779.paramCounts = [1];
                      obj2416.methods["shallowCopyFieldsFrom(1)"] = func2779;
                      func2779.definitionLine = 436;
                      func2779.definitionModule = "ast";
                      setLineNumber(327);    // compilenode identifier
                      // call case 6: other requests
                      // call case 6: other requests
                      // call case 3: self.outer request
                      var call2793 = callmethodChecked(superDepth, "outer", [0]);
                      var call2794 = callmethodChecked(call2793, "outer", []);
                      var call2795 = callmethodChecked(call2794, "baseNode$object(1)", [0, 1], this);
                      obj2416.superobj = call2795;
                      if (call2795.data) obj2416.data = call2795.data;
                      if (call2795.hasOwnProperty('_value'))
                          obj2416._value = call2795._value;
                      setLineNumber(328);    // compilenode string
                      var string2796 = new GraceString("block");
                      obj2416.data["kind"] = string2796;
                      var reader_ast_kind2797 = function() {
                        return this.data["kind"];
                      };
                      reader_ast_kind2797.def = true;
                      obj2416.methods["kind"] = reader_ast_kind2797;
                      setLineNumber(329);    // compilenode string
                      var string2798 = new GraceString("block");
                      obj2416.data["value"] = string2798;
                      var reader_ast_value2799 = function() {
                        return this.data["value"];
                      };
                      reader_ast_value2799.def = true;
                      obj2416.methods["value"] = reader_ast_value2799;
                      setLineNumber(330);    // compilenode identifier
                      obj2416.data["params"] = var_params__39__;
                      var reader_ast_params2800 = function() {
                        return this.data["params"];
                      };
                      obj2416.methods["params"] = reader_ast_params2800;
                      obj2416.data["params"] = var_params__39__;
                      var writer_ast_params2800 = function(argcv, o) {
                        this.data["params"] = o;
                        return GraceDone;
                      };
                      obj2416.methods["params:=(1)"] = writer_ast_params2800;
                      obj2416.mutable = true;
                      setLineNumber(331);    // compilenode identifier
                      obj2416.data["body"] = var_body__39__;
                      var reader_ast_body2801 = function() {
                        return this.data["body"];
                      };
                      obj2416.methods["body"] = reader_ast_body2801;
                      obj2416.data["body"] = var_body__39__;
                      var writer_ast_body2801 = function(argcv, o) {
                        this.data["body"] = o;
                        return GraceDone;
                      };
                      obj2416.methods["body:=(1)"] = writer_ast_body2801;
                      obj2416.mutable = true;
                      setLineNumber(332);    // compilenode identifier
                      obj2416.data["selfclosure"] = GraceTrue;
                      var reader_ast_selfclosure2802 = function() {
                        return this.data["selfclosure"];
                      };
                      reader_ast_selfclosure2802.def = true;
                      obj2416.methods["selfclosure"] = reader_ast_selfclosure2802;
                      setLineNumber(333);    // compilenode identifier
                      obj2416.data["matchingPattern"] = GraceFalse;
                      var reader_ast_matchingPattern2803 = function() {
                        return this.data["matchingPattern"];
                      };
                      obj2416.methods["matchingPattern"] = reader_ast_matchingPattern2803;
                      obj2416.data["matchingPattern"] = GraceFalse;
                      var writer_ast_matchingPattern2803 = function(argcv, o) {
                        this.data["matchingPattern"] = o;
                        return GraceDone;
                      };
                      obj2416.methods["matchingPattern:=(1)"] = writer_ast_matchingPattern2803;
                      obj2416.mutable = true;
                      setLineNumber(334);    // compilenode identifier
                      obj2416.data["extraRuntimeData"] = GraceFalse;
                      var reader_ast_extraRuntimeData2804 = function() {
                        return this.data["extraRuntimeData"];
                      };
                      obj2416.methods["extraRuntimeData"] = reader_ast_extraRuntimeData2804;
                      obj2416.data["extraRuntimeData"] = GraceFalse;
                      var writer_ast_extraRuntimeData2804 = function(argcv, o) {
                        this.data["extraRuntimeData"] = o;
                        return GraceDone;
                      };
                      obj2416.methods["extraRuntimeData:=(1)"] = writer_ast_extraRuntimeData2804;
                      obj2416.mutable = true;
                      setLineNumber(335);    // compilenode block
                      var block2806 = new GraceBlock(this, 335, 1);
                      setLineNumber(1);    // compilenode identifier
                      block2806.real = function(var_p) {
                        setLineNumber(336);    // compilenode identifier
                        // call case 6: other requests
                        var call2809 = callmethodChecked(var_ancestorChain, "with(1)", [1], this);
                        // call case 6: other requests
                        var call2810 = callmethodChecked(var_p, "accept(1)from(1)", [1, 1], var_patternMarkVisitor, call2809);
                        return call2810;
                      };
                      // call case 5: prelude request
                      var call2811 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], var_params__39__, block2806);
                      superDepth = origSuperDepth;
                    };
                    obj_init_2416.apply(obj2416, []);
                    return obj2416;
                  };
                  func2415.paramCounts = [2];
                  obj2413.methods["new(2)"] = func2415;
                  func2415.definitionLine = 326;
                  func2415.definitionModule = "ast";
                    var func2812 = function(argcv) {    // method new(_,_)$object(_)
                      var curarg = 1;
                      var var_params__39__ = arguments[curarg];
                      curarg++;
                      var var_body__39__ = arguments[curarg];
                      curarg++;
                      var inheritingObject = arguments[curarg++];
                      // Start argument processing
                      curarg = 1;
                      curarg++;
                      curarg++;
                      // End argument processing
                      setModuleName("ast");
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var obj2813 = Grace_allocObject(null, "new(2)");
                      obj2813.definitionModule = "ast";
                      obj2813.definitionLine = 326;
                      var inho2813 = inheritingObject;
                      while (inho2813.superobj) inho2813 = inho2813.superobj;
                      inho2813.superobj = obj2813;
                      obj2813.data = inheritingObject.data;
                      if (inheritingObject.hasOwnProperty('_value'))
                        obj2813._value = inheritingObject._value;
                      obj2813.outer = this;
                      var reader_ast_outer2814 = function() {
                        return this.outer;
                      };
                      obj2813.methods["outer"] = reader_ast_outer2814;
                      var obj_init_2813 = function() {
                        var origSuperDepth = superDepth;
                        superDepth = obj2813;
                        var func2815 = function(argcv) {    // method isBlock
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          setModuleName("ast");
                          // isBlock is a simple accessor - elide try ... catch
                          setLineNumber(338);    // compilenode identifier
                          return GraceTrue;
                        };
                        func2815.paramCounts = [0];
                        obj2813.methods["isBlock"] = func2815;
                        func2815.definitionLine = 338;
                        func2815.definitionModule = "ast";
                        var func2816 = function(argcv) {    // method isDelimited
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          setModuleName("ast");
                          // isDelimited is a simple accessor - elide try ... catch
                          setLineNumber(339);    // compilenode identifier
                          return GraceTrue;
                        };
                        func2816.paramCounts = [0];
                        obj2813.methods["isDelimited"] = func2816;
                        func2816.definitionLine = 339;
                        func2816.definitionModule = "ast";
                        var func2817 = function(argcv) {    // method isEmpty
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          setModuleName("ast");
                          setLineNumber(340);    // compilenode member
                          // call case 6: other requests
                          // call case 4: self request
                          onSelf = true;
                          var call2821 = callmethodChecked(this, "body", []);
                          var call2822 = callmethodChecked(call2821, "size", []);
                          var opresult2824 = callmethodChecked(call2822, "==(1)", [1], new GraceNum(0));
                          return opresult2824;
                        };
                        func2817.paramCounts = [0];
                        obj2813.methods["isEmpty"] = func2817;
                        func2817.definitionLine = 340;
                        func2817.definitionModule = "ast";
                        var func2825 = function(argcv) {    // method isntEmpty
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          setModuleName("ast");
                          setLineNumber(341);    // compilenode member
                          // call case 6: other requests
                          // call case 4: self request
                          onSelf = true;
                          var call2829 = callmethodChecked(this, "body", []);
                          var call2830 = callmethodChecked(call2829, "size", []);
                          var opresult2832 = callmethodChecked(call2830, ">(1)", [1], new GraceNum(0));
                          return opresult2832;
                        };
                        func2825.paramCounts = [0];
                        obj2813.methods["isntEmpty"] = func2825;
                        func2825.definitionLine = 341;
                        func2825.definitionModule = "ast";
                        var func2833 = function(argcv) {    // method scope:=(_)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_st = arguments[curarg];
                          curarg++;
                          setModuleName("ast");
                          setLineNumber(345);    // compilenode identifier
                          // call case 4: self request
                          onSelf = true;
                          var call2835 = callmethodChecked(this, "symbolTable:=(1)", [1], var_st);
                          setLineNumber(346);    // compilenode identifier
                          // call case 6: other requests
                          var call2837 = callmethodChecked(var_st, "node:=(1)", [1], this);
                          return call2837;
                        };
                        func2833.paramCounts = [1];
                        obj2813.methods["scope:=(1)"] = func2833;
                        func2833.definitionLine = 342;
                        func2833.definitionModule = "ast";
                        var func2838 = function(argcv) {    // method declarationKindWithAncestors(_)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_as = arguments[curarg];
                          curarg++;
                          setModuleName("ast");
                          setLineNumber(348);    // compilenode member
                          // call case 6: other requests
                          var call2840 = callmethodChecked(var_k, "parameter", []);
                          return call2840;
                        };
                        func2838.paramCounts = [1];
                        obj2813.methods["declarationKindWithAncestors(1)"] = func2838;
                        func2838.definitionLine = 348;
                        func2838.definitionModule = "ast";
                        var func2841 = function(argcv) {    // method isMatchingBlock
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          setModuleName("ast");
                          setLineNumber(349);    // compilenode member
                          // call case 6: other requests
                          // call case 4: self request
                          onSelf = true;
                          var call2845 = callmethodChecked(this, "params", []);
                          var call2846 = callmethodChecked(call2845, "size", []);
                          var opresult2848 = callmethodChecked(call2846, "==(1)", [1], new GraceNum(1));
                          return opresult2848;
                        };
                        func2841.paramCounts = [0];
                        obj2813.methods["isMatchingBlock"] = func2841;
                        func2841.definitionLine = 349;
                        func2841.definitionModule = "ast";
                        var func2849 = function(argcv) {    // method returnsObject
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          setModuleName("ast");
                          setLineNumber(351);    // compilenode block
                          var block2850 = new GraceBlock(this, 351, 0);
                          block2850.real = function() {
                            // call case 6: other requests
                            // call case 6: other requests
                            // call case 4: self request
                            onSelf = true;
                            var call2854 = callmethodChecked(this, "body", []);
                            var call2855 = callmethodChecked(call2854, "last", []);
                            var call2856 = callmethodChecked(call2855, "returnsObject", []);
                            return call2856;
                          };
                          // call case 6: other requests
                          // call case 4: self request
                          onSelf = true;
                          var call2861 = callmethodChecked(this, "body", []);
                          var call2862 = callmethodChecked(call2861, "size", []);
                          var opresult2864 = callmethodChecked(call2862, ">(1)", [1], new GraceNum(0));
                          var opresult2866 = callmethodChecked(opresult2864, "&&(1)", [1], block2850);
                          return opresult2866;
                        };
                        func2849.paramCounts = [0];
                        obj2813.methods["returnsObject"] = func2849;
                        func2849.definitionLine = 350;
                        func2849.definitionModule = "ast";
                        var func2867 = function(argcv) {    // method returnedObjectScope
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          setModuleName("ast");
                          setLineNumber(355);    // compilenode member
                          // call case 6: other requests
                          // call case 6: other requests
                          // call case 4: self request
                          onSelf = true;
                          var call2871 = callmethodChecked(this, "body", []);
                          var call2872 = callmethodChecked(call2871, "last", []);
                          var call2873 = callmethodChecked(call2872, "returnedObjectScope", []);
                          return call2873;
                        };
                        func2867.paramCounts = [0];
                        obj2813.methods["returnedObjectScope"] = func2867;
                        func2867.definitionLine = 353;
                        func2867.definitionModule = "ast";
                        var func2874 = function(argcv) {    // method parametersDo(_)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_b = arguments[curarg];
                          curarg++;
                          setModuleName("ast");
                          setLineNumber(358);    // compilenode identifier
                          // call case 6: other requests
                          // call case 4: self request
                          onSelf = true;
                          var call2877 = callmethodChecked(this, "params", []);
                          var call2878 = callmethodChecked(call2877, "do(1)", [1], var_b);
                          return call2878;
                        };
                        func2874.paramCounts = [1];
                        obj2813.methods["parametersDo(1)"] = func2874;
                        func2874.definitionLine = 357;
                        func2874.definitionModule = "ast";
                        var func2879 = function(argcv) {    // method accept(_)from(_)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_visitor = arguments[curarg];
                          curarg++;
                          var var_as = arguments[curarg];
                          curarg++;
                          // Start argument checking
                          curarg = 1;
                          setLineNumber(360);    // compilenode identifier
                          if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                      callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                          curarg++;
                          curarg++;
                          // End argument checking
                          setModuleName("ast");
                          var if2880 = GraceDone;
                          setLineNumber(361);    // compilenode identifier
                          // call case 6: other requests
                          var call2882 = callmethodChecked(var_visitor, "visitBlock(1)up(1)", [1, 1], this, var_as);
                          if (Grace_isTrue(call2882)) {
                            setLineNumber(362);    // compilenode identifier
                            // call case 6: other requests
                            var call2884 = callmethodChecked(var_as, "extend(1)", [1], this);
                            var var_newChain = call2884;
                            setLineNumber(363);    // compilenode member
                            // call case 4: self request
                            onSelf = true;
                            var call2887 = callmethodChecked(this, "params", []);
                            var block2888 = new GraceBlock(this, 363, 1);
                            setLineNumber(1);    // compilenode identifier
                            block2888.real = function(var_mx) {
                              setLineNumber(364);    // compilenode identifier
                              // call case 6: other requests
                              var call2890 = callmethodChecked(var_mx, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                              return call2890;
                            };
                            // call case 5: prelude request
                            var call2891 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call2887, block2888);
                            setLineNumber(366);    // compilenode member
                            // call case 4: self request
                            onSelf = true;
                            var call2894 = callmethodChecked(this, "body", []);
                            var block2895 = new GraceBlock(this, 366, 1);
                            setLineNumber(1);    // compilenode identifier
                            block2895.real = function(var_mx) {
                              setLineNumber(367);    // compilenode identifier
                              // call case 6: other requests
                              var call2897 = callmethodChecked(var_mx, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                              return call2897;
                            };
                            // call case 5: prelude request
                            var call2898 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call2894, block2895);
                            var if2899 = GraceDone;
                            setLineNumber(369);    // compilenode member
                            // call case 4: self request
                            onSelf = true;
                            var call2901 = callmethodChecked(this, "matchingPattern", []);
                            var opresult2904 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call2901);
                            if (Grace_isTrue(opresult2904)) {
                              setLineNumber(370);    // compilenode identifier
                              // call case 6: other requests
                              // call case 4: self request
                              onSelf = true;
                              var call2907 = callmethodChecked(this, "matchingPattern", []);
                              var call2908 = callmethodChecked(call2907, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                              if2899 = call2908;
                            }
                            if2880 = if2899;
                          }
                          return if2880;
                        };
                        func2879.paramTypes = [];
                        func2879.paramTypes.push([]);
                        func2879.paramTypes.push([]);
                        func2879.paramCounts = [1, 1];
                        obj2813.methods["accept(1)from(1)"] = func2879;
                        func2879.definitionLine = 360;
                        func2879.definitionModule = "ast";
                        var func2909 = function(argcv) {    // method map(_)ancestors(_)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_blk = arguments[curarg];
                          curarg++;
                          var var_as = arguments[curarg];
                          curarg++;
                          setModuleName("ast");
                          setLineNumber(375);    // compilenode member
                          // call case 4: self request
                          onSelf = true;
                          var call2911 = callmethodChecked(this, "shallowCopy", []);
                          var var_n = call2911;
                          setLineNumber(376);    // compilenode identifier
                          // call case 6: other requests
                          var call2913 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                          var var_newChain = call2913;
                          setLineNumber(377);    // compilenode member
                          // call case 4: self request
                          onSelf = true;
                          var call2917 = callmethodChecked(this, "params", []);
                          // call case 6: other requests
                          // call case 6: other requests
                          // call case 3: self.outer request
                          var call2920 = callmethodChecked(superDepth, "outer", [0]);
                          var call2921 = callmethodChecked(call2920, "outer", []);
                          onSelf = true;
                          var call2922 = callmethodChecked(call2921, "listMap(2)ancestors(1)", [2, 1], call2917, var_blk, var_newChain);
                          // call case 6: other requests
                          var call2923 = callmethodChecked(var_n, "params:=(1)", [1], call2922);
                          setLineNumber(378);    // compilenode member
                          // call case 4: self request
                          onSelf = true;
                          var call2927 = callmethodChecked(this, "body", []);
                          // call case 6: other requests
                          // call case 6: other requests
                          // call case 3: self.outer request
                          var call2930 = callmethodChecked(superDepth, "outer", [0]);
                          var call2931 = callmethodChecked(call2930, "outer", []);
                          onSelf = true;
                          var call2932 = callmethodChecked(call2931, "listMap(2)ancestors(1)", [2, 1], call2927, var_blk, var_newChain);
                          // call case 6: other requests
                          var call2933 = callmethodChecked(var_n, "body:=(1)", [1], call2932);
                          setLineNumber(379);    // compilenode member
                          // call case 4: self request
                          onSelf = true;
                          var call2937 = callmethodChecked(this, "matchingPattern", []);
                          // call case 6: other requests
                          // call case 6: other requests
                          // call case 3: self.outer request
                          var call2940 = callmethodChecked(superDepth, "outer", [0]);
                          var call2941 = callmethodChecked(call2940, "outer", []);
                          onSelf = true;
                          var call2942 = callmethodChecked(call2941, "maybeMap(2)ancestors(1)", [2, 1], call2937, var_blk, var_newChain);
                          // call case 6: other requests
                          var call2943 = callmethodChecked(var_n, "matchingPattern:=(1)", [1], call2942);
                          setLineNumber(380);    // compilenode identifier
                          // call case 6: other requests
                          var call2945 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                          return call2945;
                        };
                        func2909.paramCounts = [1, 1];
                        obj2813.methods["map(1)ancestors(1)"] = func2909;
                        func2909.definitionLine = 374;
                        func2909.definitionModule = "ast";
                        var func2946 = function(argcv) {    // method pretty(_)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_depth = arguments[curarg];
                          curarg++;
                          setModuleName("ast");
                          setLineNumber(383);    // compilenode string
                          var string2947 = new GraceString("");
                          var var_spc = string2947;
                          setLineNumber(384);    // compilenode num
                          var opresult2951 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                          var block2952 = new GraceBlock(this, 384, 1);
                          setLineNumber(1);    // compilenode identifier
                          block2952.real = function(var_i) {
                            setLineNumber(385);    // compilenode string
                            var string2953 = new GraceString("  ");
                            var opresult2956 = callmethodChecked(var_spc, "++(1)", [1], string2953);
                            var_spc = opresult2956;
                            return GraceDone;
                          };
                          // call case 5: prelude request
                          var call2957 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult2951, block2952);
                          setLineNumber(387);    // compilenode string
                          var string2958 = new GraceString("\n");
                          // call case 1: super request
                          var call2961 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                          var opresult2963 = callmethodChecked(call2961, "++(1)", [1], string2958);
                          var var_s = opresult2963;
                          setLineNumber(388);    // compilenode string
                          var string2964 = new GraceString("Parameters:");
                          var opresult2968 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                          var opresult2970 = callmethodChecked(opresult2968, "++(1)", [1], string2964);
                          var_s = opresult2970;
                          setLineNumber(389);    // compilenode member
                          // call case 4: self request
                          onSelf = true;
                          var call2973 = callmethodChecked(this, "params", []);
                          var block2974 = new GraceBlock(this, 389, 1);
                          setLineNumber(1);    // compilenode identifier
                          block2974.real = function(var_mx) {
                            setLineNumber(390);    // compilenode identifier
                            var opresult2978 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                            // call case 6: other requests
                            var call2979 = callmethodChecked(var_mx, "pretty(1)", [1], opresult2978);
                            var string2982 = new GraceString("\n  ");
                            var opresult2985 = callmethodChecked(var_s, "++(1)", [1], string2982);
                            var opresult2987 = callmethodChecked(opresult2985, "++(1)", [1], var_spc);
                            var opresult2989 = callmethodChecked(opresult2987, "++(1)", [1], call2979);
                            var_s = opresult2989;
                            return GraceDone;
                          };
                          // call case 5: prelude request
                          var call2990 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call2973, block2974);
                          setLineNumber(392);    // compilenode string
                          var string2991 = new GraceString("\n");
                          var opresult2994 = callmethodChecked(var_s, "++(1)", [1], string2991);
                          var_s = opresult2994;
                          setLineNumber(393);    // compilenode string
                          var string2995 = new GraceString("Body:");
                          var opresult2999 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                          var opresult3001 = callmethodChecked(opresult2999, "++(1)", [1], string2995);
                          var_s = opresult3001;
                          setLineNumber(394);    // compilenode member
                          // call case 4: self request
                          onSelf = true;
                          var call3004 = callmethodChecked(this, "body", []);
                          var block3005 = new GraceBlock(this, 394, 1);
                          setLineNumber(1);    // compilenode identifier
                          block3005.real = function(var_mx) {
                            setLineNumber(395);    // compilenode identifier
                            var opresult3009 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                            // call case 6: other requests
                            var call3010 = callmethodChecked(var_mx, "pretty(1)", [1], opresult3009);
                            var string3013 = new GraceString("\n  ");
                            var opresult3016 = callmethodChecked(var_s, "++(1)", [1], string3013);
                            var opresult3018 = callmethodChecked(opresult3016, "++(1)", [1], var_spc);
                            var opresult3020 = callmethodChecked(opresult3018, "++(1)", [1], call3010);
                            var_s = opresult3020;
                            return GraceDone;
                          };
                          // call case 5: prelude request
                          var call3021 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call3004, block3005);
                          var if3022 = GraceDone;
                          setLineNumber(397);    // compilenode member
                          // call case 4: self request
                          onSelf = true;
                          var call3024 = callmethodChecked(this, "matchingPattern", []);
                          var opresult3027 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call3024);
                          if (Grace_isTrue(opresult3027)) {
                            setLineNumber(398);    // compilenode string
                            var string3028 = new GraceString("\n");
                            var opresult3031 = callmethodChecked(var_s, "++(1)", [1], string3028);
                            var_s = opresult3031;
                            setLineNumber(399);    // compilenode string
                            var string3032 = new GraceString("Pattern:");
                            var opresult3036 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                            var opresult3038 = callmethodChecked(opresult3036, "++(1)", [1], string3032);
                            var_s = opresult3038;
                            setLineNumber(400);    // compilenode identifier
                            var opresult3042 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                            // call case 6: other requests
                            // call case 4: self request
                            onSelf = true;
                            var call3044 = callmethodChecked(this, "matchingPattern", []);
                            var call3045 = callmethodChecked(call3044, "pretty(1)", [1], opresult3042);
                            var string3048 = new GraceString("\n  ");
                            var opresult3051 = callmethodChecked(var_s, "++(1)", [1], string3048);
                            var opresult3053 = callmethodChecked(opresult3051, "++(1)", [1], var_spc);
                            var opresult3055 = callmethodChecked(opresult3053, "++(1)", [1], call3045);
                            var_s = opresult3055;
                            if3022 = GraceDone;
                          }
                          setLineNumber(402);    // compilenode identifier
                          return var_s;
                        };
                        func2946.paramCounts = [1];
                        obj2813.methods["pretty(1)"] = func2946;
                        func2946.definitionLine = 382;
                        func2946.definitionModule = "ast";
                        var func3056 = function(argcv) {    // method toGrace(_)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_depth = arguments[curarg];
                          curarg++;
                          // Start argument checking
                          curarg = 1;
                          setLineNumber(404);    // compilenode identifier
                          if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                      callmethod(var_Number, "asString", [0])._value + "."));
                          curarg++;
                          // End argument checking
                          setModuleName("ast");
                          setLineNumber(405);    // compilenode string
                          var string3057 = new GraceString("");
                          var var_spc = string3057;
                          setLineNumber(406);    // compilenode block
                          var block3059 = new GraceBlock(this, 406, 0);
                          block3059.real = function() {
                            setLineNumber(407);    // compilenode string
                            var string3060 = new GraceString("    ");
                            var opresult3063 = callmethodChecked(var_spc, "++(1)", [1], string3060);
                            var_spc = opresult3063;
                            return GraceDone;
                          };
                          // call case 5: prelude request
                          var call3064 = callmethodChecked(var_prelude, "repeat(1)times(1)", [1, 1], var_depth, block3059);
                          setLineNumber(409);    // compilenode string
                          var string3065 = new GraceString("{");
                          var var_s = string3065;
                          var if3066 = GraceDone;
                          setLineNumber(410);    // compilenode member
                          // call case 6: other requests
                          // call case 4: self request
                          onSelf = true;
                          var call3070 = callmethodChecked(this, "params", []);
                          var call3071 = callmethodChecked(call3070, "size", []);
                          var opresult3073 = callmethodChecked(call3071, ">(1)", [1], new GraceNum(0));
                          if (Grace_isTrue(opresult3073)) {
                            setLineNumber(411);    // compilenode string
                            var string3074 = new GraceString(" ");
                            var opresult3077 = callmethodChecked(var_s, "++(1)", [1], string3074);
                            var_s = opresult3077;
                            setLineNumber(412);    // compilenode member
                            // call case 6: other requests
                            // call case 4: self request
                            onSelf = true;
                            var call3081 = callmethodChecked(this, "params", []);
                            var call3082 = callmethodChecked(call3081, "indices", []);
                            var block3083 = new GraceBlock(this, 412, 1);
                            setLineNumber(1);    // compilenode identifier
                            block3083.real = function(var_i) {
                              setLineNumber(413);    // compilenode identifier
                              // call case 6: other requests
                              // call case 4: self request
                              onSelf = true;
                              var call3086 = callmethodChecked(this, "params", []);
                              var call3087 = callmethodChecked(call3086, "at(1)", [1], var_i);
                              var var_p = call3087;
                              var if3088 = GraceDone;
                              setLineNumber(414);    // compilenode member
                              // call case 4: self request
                              onSelf = true;
                              var call3090 = callmethodChecked(this, "matchingPattern", []);
                              var opresult3093 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call3090);
                              if (Grace_isTrue(opresult3093)) {
                                setLineNumber(415);    // compilenode string
                                var string3094 = new GraceString(")");
                                // call case 6: other requests
                                var call3097 = callmethodChecked(var_p, "toGrace(1)", [1], new GraceNum(0));
                                var string3099 = new GraceString("(");
                                var opresult3102 = callmethodChecked(var_s, "++(1)", [1], string3099);
                                var opresult3104 = callmethodChecked(opresult3102, "++(1)", [1], call3097);
                                var opresult3106 = callmethodChecked(opresult3104, "++(1)", [1], string3094);
                                var_s = opresult3106;
                                if3088 = GraceDone;
                              } else {
                                setLineNumber(417);    // compilenode num
                                // call case 6: other requests
                                var call3108 = callmethodChecked(var_p, "toGrace(1)", [1], new GraceNum(0));
                                var opresult3111 = callmethodChecked(var_s, "++(1)", [1], call3108);
                                var_s = opresult3111;
                                if3088 = GraceDone;
                              }
                              var if3112 = GraceDone;
                              setLineNumber(419);    // compilenode member
                              // call case 6: other requests
                              // call case 4: self request
                              onSelf = true;
                              var call3115 = callmethodChecked(this, "params", []);
                              var call3116 = callmethodChecked(call3115, "size", []);
                              var opresult3119 = callmethodChecked(var_i, "<(1)", [1], call3116);
                              if (Grace_isTrue(opresult3119)) {
                                setLineNumber(420);    // compilenode string
                                var string3120 = new GraceString(", ");
                                var opresult3123 = callmethodChecked(var_s, "++(1)", [1], string3120);
                                var_s = opresult3123;
                                if3112 = GraceDone;
                              } else {
                                setLineNumber(422);    // compilenode string
                                var string3124 = new GraceString(" \u2192");
                                var opresult3127 = callmethodChecked(var_s, "++(1)", [1], string3124);
                                var_s = opresult3127;
                                if3112 = GraceDone;
                              }
                              return if3112;
                            };
                            // call case 5: prelude request
                            var call3128 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call3082, block3083);
                            if3066 = call3128;
                          }
                          setLineNumber(426);    // compilenode member
                          // call case 4: self request
                          onSelf = true;
                          var call3131 = callmethodChecked(this, "body", []);
                          var block3132 = new GraceBlock(this, 426, 1);
                          setLineNumber(1);    // compilenode identifier
                          block3132.real = function(var_mx) {
                            setLineNumber(427);    // compilenode identifier
                            var opresult3136 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                            // call case 6: other requests
                            var call3137 = callmethodChecked(var_mx, "toGrace(1)", [1], opresult3136);
                            var string3140 = new GraceString("\n");
                            var opresult3143 = callmethodChecked(var_s, "++(1)", [1], string3140);
                            var opresult3145 = callmethodChecked(opresult3143, "++(1)", [1], var_spc);
                            var opresult3147 = callmethodChecked(opresult3145, "++(1)", [1], call3137);
                            var_s = opresult3147;
                            return GraceDone;
                          };
                          // call case 5: prelude request
                          var call3148 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call3131, block3132);
                          setLineNumber(429);    // compilenode string
                          var string3149 = new GraceString("\n");
                          var opresult3152 = callmethodChecked(var_s, "++(1)", [1], string3149);
                          var_s = opresult3152;
                          setLineNumber(430);    // compilenode identifier
                          var diff3156 = callmethodChecked(var_depth, "-(1)", [1], new GraceNum(1));
                          var block3157 = new GraceBlock(this, 430, 0);
                          block3157.real = function() {
                            var string3158 = new GraceString("    ");
                            var opresult3161 = callmethodChecked(var_s, "++(1)", [1], string3158);
                            var_s = opresult3161;
                            return GraceDone;
                          };
                          // call case 5: prelude request
                          var call3162 = callmethodChecked(var_prelude, "repeat(1)times(1)", [1, 1], diff3156, block3157);
                          setLineNumber(431);    // compilenode string
                          var string3163 = new GraceString("}");
                          var opresult3166 = callmethodChecked(var_s, "++(1)", [1], string3163);
                          if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], opresult3166)))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("result of method toGrace(_) does not have " + 
                                      callmethod(var_String, "asString", [0])._value + "."));
                          return opresult3166;
                        };
                        func3056.paramTypes = [];
                        func3056.paramTypes.push([type_Number, "depth"]);
                        func3056.paramCounts = [1];
                        obj2813.methods["toGrace(1)"] = func3056;
                        func3056.definitionLine = 404;
                        func3056.definitionModule = "ast";
                        var func3167 = function(argcv) {    // method shallowCopy
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          setModuleName("ast");
                          setLineNumber(434);    // compilenode identifier
                          // call case 6: other requests
                          // call case 4: self request
                          onSelf = true;
                          var call3171 = callmethodChecked(this, "params", []);
                          // call case 4: self request
                          onSelf = true;
                          var call3173 = callmethodChecked(this, "body", []);
                          // call case 6: other requests
                          var call3174 = callmethodChecked(var_blockNode, "new(2)", [2], call3171, call3173);
                          var call3175 = callmethodChecked(call3174, "shallowCopyFieldsFrom(1)", [1], this);
                          return call3175;
                        };
                        func3167.paramCounts = [0];
                        obj2813.methods["shallowCopy"] = func3167;
                        func3167.definitionLine = 433;
                        func3167.definitionModule = "ast";
                        var func3176 = function(argcv) {    // method shallowCopyFieldsFrom(_)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_other = arguments[curarg];
                          curarg++;
                          setModuleName("ast");
                          setLineNumber(437);    // compilenode identifier
                          // call case 1: super request
                          var call3178 = callmethodsuper(this, "shallowCopyFieldsFrom(1)", [1], var_other);
                          setLineNumber(438);    // compilenode member
                          // call case 6: other requests
                          var call3181 = callmethodChecked(var_other, "matchingPattern", []);
                          // call case 4: self request
                          onSelf = true;
                          var call3182 = callmethodChecked(this, "matchingPattern:=(1)", [1], call3181);
                          setLineNumber(439);    // compilenode member
                          // call case 6: other requests
                          var call3185 = callmethodChecked(var_other, "extraRuntimeData", []);
                          // call case 4: self request
                          onSelf = true;
                          var call3186 = callmethodChecked(this, "extraRuntimeData:=(1)", [1], call3185);
                          setLineNumber(440);    // compilenode identifier
                          return this;
                        };
                        func3176.paramCounts = [1];
                        obj2813.methods["shallowCopyFieldsFrom(1)"] = func3176;
                        func3176.definitionLine = 436;
                        func3176.definitionModule = "ast";
                        setLineNumber(327);    // compilenode identifier
                        // call case 6: other requests
                        // call case 6: other requests
                        // call case 3: self.outer request
                        var call3190 = callmethodChecked(superDepth, "outer", [0]);
                        var call3191 = callmethodChecked(call3190, "outer", []);
                        var call3192 = callmethodChecked(call3191, "baseNode$object(1)", [0, 1], this);
                        obj2813.superobj = call3192;
                        if (call3192.data) obj2813.data = call3192.data;
                        if (call3192.hasOwnProperty('_value'))
                            obj2813._value = call3192._value;
                        setLineNumber(328);    // compilenode string
                        var string3193 = new GraceString("block");
                        obj2813.data["kind"] = string3193;
                        var reader_ast_kind3194 = function() {
                          return this.data["kind"];
                        };
                        reader_ast_kind3194.def = true;
                        obj2813.methods["kind"] = reader_ast_kind3194;
                        setLineNumber(329);    // compilenode string
                        var string3195 = new GraceString("block");
                        obj2813.data["value"] = string3195;
                        var reader_ast_value3196 = function() {
                          return this.data["value"];
                        };
                        reader_ast_value3196.def = true;
                        obj2813.methods["value"] = reader_ast_value3196;
                        setLineNumber(330);    // compilenode identifier
                        obj2813.data["params"] = var_params__39__;
                        var reader_ast_params3197 = function() {
                          return this.data["params"];
                        };
                        obj2813.methods["params"] = reader_ast_params3197;
                        obj2813.data["params"] = var_params__39__;
                        var writer_ast_params3197 = function(argcv, o) {
                          this.data["params"] = o;
                          return GraceDone;
                        };
                        obj2813.methods["params:=(1)"] = writer_ast_params3197;
                        obj2813.mutable = true;
                        setLineNumber(331);    // compilenode identifier
                        obj2813.data["body"] = var_body__39__;
                        var reader_ast_body3198 = function() {
                          return this.data["body"];
                        };
                        obj2813.methods["body"] = reader_ast_body3198;
                        obj2813.data["body"] = var_body__39__;
                        var writer_ast_body3198 = function(argcv, o) {
                          this.data["body"] = o;
                          return GraceDone;
                        };
                        obj2813.methods["body:=(1)"] = writer_ast_body3198;
                        obj2813.mutable = true;
                        setLineNumber(332);    // compilenode identifier
                        obj2813.data["selfclosure"] = GraceTrue;
                        var reader_ast_selfclosure3199 = function() {
                          return this.data["selfclosure"];
                        };
                        reader_ast_selfclosure3199.def = true;
                        obj2813.methods["selfclosure"] = reader_ast_selfclosure3199;
                        setLineNumber(333);    // compilenode identifier
                        obj2813.data["matchingPattern"] = GraceFalse;
                        var reader_ast_matchingPattern3200 = function() {
                          return this.data["matchingPattern"];
                        };
                        obj2813.methods["matchingPattern"] = reader_ast_matchingPattern3200;
                        obj2813.data["matchingPattern"] = GraceFalse;
                        var writer_ast_matchingPattern3200 = function(argcv, o) {
                          this.data["matchingPattern"] = o;
                          return GraceDone;
                        };
                        obj2813.methods["matchingPattern:=(1)"] = writer_ast_matchingPattern3200;
                        obj2813.mutable = true;
                        setLineNumber(334);    // compilenode identifier
                        obj2813.data["extraRuntimeData"] = GraceFalse;
                        var reader_ast_extraRuntimeData3201 = function() {
                          return this.data["extraRuntimeData"];
                        };
                        obj2813.methods["extraRuntimeData"] = reader_ast_extraRuntimeData3201;
                        obj2813.data["extraRuntimeData"] = GraceFalse;
                        var writer_ast_extraRuntimeData3201 = function(argcv, o) {
                          this.data["extraRuntimeData"] = o;
                          return GraceDone;
                        };
                        obj2813.methods["extraRuntimeData:=(1)"] = writer_ast_extraRuntimeData3201;
                        obj2813.mutable = true;
                        setLineNumber(335);    // compilenode block
                        var block3203 = new GraceBlock(this, 335, 1);
                        setLineNumber(1);    // compilenode identifier
                        block3203.real = function(var_p) {
                          setLineNumber(336);    // compilenode identifier
                          // call case 6: other requests
                          var call3206 = callmethodChecked(var_ancestorChain, "with(1)", [1], this);
                          // call case 6: other requests
                          var call3207 = callmethodChecked(var_p, "accept(1)from(1)", [1, 1], var_patternMarkVisitor, call3206);
                          return call3207;
                        };
                        // call case 5: prelude request
                        var call3208 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], var_params__39__, block3203);
                        superDepth = origSuperDepth;
                      };
                      obj_init_2813.apply(inheritingObject, []);
                      return obj2813;
                      };
                      obj2413.methods["new(2)$object(1)"] = func2812;
                    superDepth = origSuperDepth;
                  };
                  obj_init_2413.apply(obj2413, []);
                  var var_blockNode = obj2413;
                  setLineNumber(1);    // compilenode method
                  var func3209 = function(argcv) {    // method blockNode
                    var returnTarget = invocationCount;
                    invocationCount++;
                    var curarg = 1;
                    setModuleName("ast");
                    // blockNode is a simple accessor - elide try ... catch
                    setLineNumber(325);    // compilenode identifier
                    return var_blockNode;
                  };
                  func3209.paramCounts = [0];
                  this.methods["blockNode"] = func3209;
                  func3209.definitionLine = 1;
                  func3209.definitionModule = "ast";
                  this.methods["blockNode"].debug = "def";
                  setLineNumber(444);    // compilenode object
                  var obj3210 = Grace_allocObject(GraceObject, "tryCatchNode");
                  obj3210.definitionModule = "ast";
                  obj3210.definitionLine = 444;
                  obj3210.outer = this;
                  var reader_ast_outer3211 = function() {
                    return this.outer;
                  };
                  obj3210.methods["outer"] = reader_ast_outer3211;
                  var obj_init_3210 = function() {
                    var origSuperDepth = superDepth;
                    superDepth = obj3210;
                    var func3212 = function(argcv) {    // method new(_,_,_)
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      var var_block = arguments[curarg];
                      curarg++;
                      var var_cases__39__ = arguments[curarg];
                      curarg++;
                      var var_finally__39__ = arguments[curarg];
                      curarg++;
                      setModuleName("ast");
                      setLineNumber(445);    // compilenode object
                      var obj3213 = Grace_allocObject(null, "tryCatchNode.new(_,_,_)");
                      obj3213.definitionModule = "ast";
                      obj3213.definitionLine = 445;
                      obj3213.outer = this;
                      var reader_ast_outer3214 = function() {
                        return this.outer;
                      };
                      obj3213.methods["outer"] = reader_ast_outer3214;
                      var obj_init_3213 = function() {
                        var origSuperDepth = superDepth;
                        superDepth = obj3213;
                        var func3215 = function(argcv) {    // method isSimple
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          setModuleName("ast");
                          // isSimple is a simple accessor - elide try ... catch
                          setLineNumber(451);    // compilenode identifier
                          return GraceFalse;
                        };
                        func3215.paramCounts = [0];
                        obj3213.methods["isSimple"] = func3215;
                        func3215.definitionLine = 451;
                        func3215.definitionModule = "ast";
                        var func3216 = function(argcv) {    // method accept(_)from(_)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_visitor = arguments[curarg];
                          curarg++;
                          var var_as = arguments[curarg];
                          curarg++;
                          // Start argument checking
                          curarg = 1;
                          setLineNumber(453);    // compilenode identifier
                          if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                      callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                          curarg++;
                          curarg++;
                          // End argument checking
                          setModuleName("ast");
                          var if3217 = GraceDone;
                          setLineNumber(454);    // compilenode identifier
                          // call case 6: other requests
                          var call3219 = callmethodChecked(var_visitor, "visitTryCatch(1)up(1)", [1, 1], this, var_as);
                          if (Grace_isTrue(call3219)) {
                            setLineNumber(455);    // compilenode identifier
                            // call case 6: other requests
                            var call3221 = callmethodChecked(var_as, "extend(1)", [1], this);
                            var var_newChain = call3221;
                            setLineNumber(456);    // compilenode identifier
                            // call case 6: other requests
                            // call case 4: self request
                            onSelf = true;
                            var call3224 = callmethodChecked(this, "value", []);
                            var call3225 = callmethodChecked(call3224, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                            setLineNumber(457);    // compilenode member
                            // call case 4: self request
                            onSelf = true;
                            var call3228 = callmethodChecked(this, "cases", []);
                            var block3229 = new GraceBlock(this, 457, 1);
                            setLineNumber(1);    // compilenode identifier
                            block3229.real = function(var_mx) {
                              setLineNumber(458);    // compilenode identifier
                              // call case 6: other requests
                              var call3231 = callmethodChecked(var_mx, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                              return call3231;
                            };
                            // call case 5: prelude request
                            var call3232 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call3228, block3229);
                            var if3233 = GraceDone;
                            setLineNumber(460);    // compilenode member
                            // call case 4: self request
                            onSelf = true;
                            var call3235 = callmethodChecked(this, "finally", []);
                            var opresult3238 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call3235);
                            if (Grace_isTrue(opresult3238)) {
                              setLineNumber(461);    // compilenode identifier
                              // call case 6: other requests
                              // call case 4: self request
                              onSelf = true;
                              var call3241 = callmethodChecked(this, "finally", []);
                              var call3242 = callmethodChecked(call3241, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                              if3233 = call3242;
                            }
                            if3217 = if3233;
                          }
                          return if3217;
                        };
                        func3216.paramTypes = [];
                        func3216.paramTypes.push([]);
                        func3216.paramTypes.push([]);
                        func3216.paramCounts = [1, 1];
                        obj3213.methods["accept(1)from(1)"] = func3216;
                        func3216.definitionLine = 453;
                        func3216.definitionModule = "ast";
                        var func3243 = function(argcv) {    // method map(_)ancestors(_)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_blk = arguments[curarg];
                          curarg++;
                          var var_as = arguments[curarg];
                          curarg++;
                          setModuleName("ast");
                          setLineNumber(466);    // compilenode member
                          // call case 4: self request
                          onSelf = true;
                          var call3245 = callmethodChecked(this, "shallowCopy", []);
                          var var_n = call3245;
                          setLineNumber(467);    // compilenode identifier
                          // call case 6: other requests
                          var call3247 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                          var var_newChain = call3247;
                          setLineNumber(468);    // compilenode identifier
                          // call case 6: other requests
                          // call case 4: self request
                          onSelf = true;
                          var call3251 = callmethodChecked(this, "value", []);
                          var call3252 = callmethodChecked(call3251, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
                          // call case 6: other requests
                          var call3253 = callmethodChecked(var_n, "value:=(1)", [1], call3252);
                          setLineNumber(469);    // compilenode member
                          // call case 4: self request
                          onSelf = true;
                          var call3257 = callmethodChecked(this, "cases", []);
                          // call case 6: other requests
                          // call case 6: other requests
                          // call case 3: self.outer request
                          var call3260 = callmethodChecked(superDepth, "outer", [0]);
                          var call3261 = callmethodChecked(call3260, "outer", []);
                          onSelf = true;
                          var call3262 = callmethodChecked(call3261, "listMap(2)ancestors(1)", [2, 1], call3257, var_blk, var_newChain);
                          // call case 6: other requests
                          var call3263 = callmethodChecked(var_n, "cases:=(1)", [1], call3262);
                          setLineNumber(470);    // compilenode member
                          // call case 4: self request
                          onSelf = true;
                          var call3267 = callmethodChecked(this, "finally", []);
                          // call case 6: other requests
                          // call case 6: other requests
                          // call case 3: self.outer request
                          var call3270 = callmethodChecked(superDepth, "outer", [0]);
                          var call3271 = callmethodChecked(call3270, "outer", []);
                          onSelf = true;
                          var call3272 = callmethodChecked(call3271, "maybeMap(2)ancestors(1)", [2, 1], call3267, var_blk, var_newChain);
                          // call case 6: other requests
                          var call3273 = callmethodChecked(var_n, "finally:=(1)", [1], call3272);
                          setLineNumber(471);    // compilenode identifier
                          // call case 6: other requests
                          var call3275 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                          return call3275;
                        };
                        func3243.paramCounts = [1, 1];
                        obj3213.methods["map(1)ancestors(1)"] = func3243;
                        func3243.definitionLine = 465;
                        func3243.definitionModule = "ast";
                        var func3276 = function(argcv) {    // method pretty(_)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_depth = arguments[curarg];
                          curarg++;
                          setModuleName("ast");
                          setLineNumber(474);    // compilenode string
                          var string3277 = new GraceString("");
                          var var_spc = string3277;
                          setLineNumber(475);    // compilenode num
                          var opresult3281 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                          var block3282 = new GraceBlock(this, 475, 1);
                          setLineNumber(1);    // compilenode identifier
                          block3282.real = function(var_i) {
                            setLineNumber(476);    // compilenode string
                            var string3283 = new GraceString("  ");
                            var opresult3286 = callmethodChecked(var_spc, "++(1)", [1], string3283);
                            var_spc = opresult3286;
                            return GraceDone;
                          };
                          // call case 5: prelude request
                          var call3287 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult3281, block3282);
                          setLineNumber(478);    // compilenode string
                          var string3288 = new GraceString("\n");
                          // call case 1: super request
                          var call3291 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                          var string3293 = new GraceString("");
                          var opresult3295 = callmethodChecked(string3293, "++(1)", [1], call3291);
                          var opresult3297 = callmethodChecked(opresult3295, "++(1)", [1], string3288);
                          var var_s = opresult3297;
                          setLineNumber(479);    // compilenode identifier
                          var opresult3301 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                          // call case 6: other requests
                          // call case 4: self request
                          onSelf = true;
                          var call3303 = callmethodChecked(this, "value", []);
                          var call3304 = callmethodChecked(call3303, "pretty(1)", [1], opresult3301);
                          var opresult3308 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                          var opresult3310 = callmethodChecked(opresult3308, "++(1)", [1], call3304);
                          var_s = opresult3310;
                          setLineNumber(480);    // compilenode member
                          // call case 4: self request
                          onSelf = true;
                          var call3313 = callmethodChecked(this, "cases", []);
                          var block3314 = new GraceBlock(this, 480, 1);
                          setLineNumber(1);    // compilenode identifier
                          block3314.real = function(var_mx) {
                            setLineNumber(481);    // compilenode string
                            var string3315 = new GraceString("");
                            var opresult3320 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                            // call case 6: other requests
                            var call3321 = callmethodChecked(var_mx, "pretty(1)", [1], opresult3320);
                            var string3323 = new GraceString("  ");
                            var string3326 = new GraceString("Case:\n");
                            var string3329 = new GraceString("\n");
                            var opresult3331 = callmethodChecked(string3329, "++(1)", [1], var_spc);
                            var opresult3333 = callmethodChecked(opresult3331, "++(1)", [1], string3326);
                            var opresult3335 = callmethodChecked(opresult3333, "++(1)", [1], var_spc);
                            var opresult3337 = callmethodChecked(opresult3335, "++(1)", [1], string3323);
                            var opresult3339 = callmethodChecked(opresult3337, "++(1)", [1], call3321);
                            var opresult3341 = callmethodChecked(opresult3339, "++(1)", [1], string3315);
                            var opresult3344 = callmethodChecked(var_s, "++(1)", [1], opresult3341);
                            var_s = opresult3344;
                            return GraceDone;
                          };
                          // call case 5: prelude request
                          var call3345 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call3313, block3314);
                          var if3346 = GraceDone;
                          setLineNumber(483);    // compilenode member
                          // call case 4: self request
                          onSelf = true;
                          var call3348 = callmethodChecked(this, "finally", []);
                          var opresult3351 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call3348);
                          if (Grace_isTrue(opresult3351)) {
                            setLineNumber(484);    // compilenode string
                            var string3352 = new GraceString("");
                            var opresult3357 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                            // call case 6: other requests
                            // call case 4: self request
                            onSelf = true;
                            var call3359 = callmethodChecked(this, "finally", []);
                            var call3360 = callmethodChecked(call3359, "pretty(1)", [1], opresult3357);
                            var string3362 = new GraceString("  ");
                            var string3365 = new GraceString("Finally:\n");
                            var string3368 = new GraceString("\n");
                            var opresult3370 = callmethodChecked(string3368, "++(1)", [1], var_spc);
                            var opresult3372 = callmethodChecked(opresult3370, "++(1)", [1], string3365);
                            var opresult3374 = callmethodChecked(opresult3372, "++(1)", [1], var_spc);
                            var opresult3376 = callmethodChecked(opresult3374, "++(1)", [1], string3362);
                            var opresult3378 = callmethodChecked(opresult3376, "++(1)", [1], call3360);
                            var opresult3380 = callmethodChecked(opresult3378, "++(1)", [1], string3352);
                            var opresult3383 = callmethodChecked(var_s, "++(1)", [1], opresult3380);
                            var_s = opresult3383;
                            if3346 = GraceDone;
                          }
                          setLineNumber(486);    // compilenode identifier
                          return var_s;
                        };
                        func3276.paramCounts = [1];
                        obj3213.methods["pretty(1)"] = func3276;
                        func3276.definitionLine = 473;
                        func3276.definitionModule = "ast";
                        var func3384 = function(argcv) {    // method toGrace(_)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_depth = arguments[curarg];
                          curarg++;
                          // Start argument checking
                          curarg = 1;
                          setLineNumber(488);    // compilenode identifier
                          if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                      callmethod(var_Number, "asString", [0])._value + "."));
                          curarg++;
                          // End argument checking
                          setModuleName("ast");
                          setLineNumber(489);    // compilenode string
                          var string3385 = new GraceString("");
                          var var_spc = string3385;
                          setLineNumber(490);    // compilenode identifier
                          var diff3389 = callmethodChecked(var_depth, "-(1)", [1], new GraceNum(1));
                          var opresult3392 = callmethodChecked(new GraceNum(0), "..(1)", [1], diff3389);
                          var block3393 = new GraceBlock(this, 490, 1);
                          setLineNumber(1);    // compilenode identifier
                          block3393.real = function(var_i) {
                            setLineNumber(491);    // compilenode string
                            var string3394 = new GraceString("    ");
                            var opresult3397 = callmethodChecked(var_spc, "++(1)", [1], string3394);
                            var_spc = opresult3397;
                            return GraceDone;
                          };
                          // call case 5: prelude request
                          var call3398 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult3392, block3393);
                          setLineNumber(493);    // compilenode string
                          var string3399 = new GraceString(" ");
                          var opresult3404 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                          // call case 6: other requests
                          // call case 4: self request
                          onSelf = true;
                          var call3406 = callmethodChecked(this, "value", []);
                          var call3407 = callmethodChecked(call3406, "toGrace(1)", [1], opresult3404);
                          var string3409 = new GraceString("try ");
                          var opresult3411 = callmethodChecked(string3409, "++(1)", [1], call3407);
                          var opresult3413 = callmethodChecked(opresult3411, "++(1)", [1], string3399);
                          var var_s = opresult3413;
                          setLineNumber(494);    // compilenode member
                          // call case 4: self request
                          onSelf = true;
                          var call3416 = callmethodChecked(this, "cases", []);
                          var block3417 = new GraceBlock(this, 494, 1);
                          setLineNumber(1);    // compilenode identifier
                          block3417.real = function(var_case) {
                            setLineNumber(495);    // compilenode identifier
                            var opresult3421 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                            // call case 6: other requests
                            var call3422 = callmethodChecked(var_case, "toGrace(1)", [1], opresult3421);
                            var string3424 = new GraceString("catch ");
                            var string3426 = new GraceString("    ");
                            var string3429 = new GraceString("\n");
                            var opresult3432 = callmethodChecked(var_s, "++(1)", [1], string3429);
                            var opresult3434 = callmethodChecked(opresult3432, "++(1)", [1], var_spc);
                            var opresult3436 = callmethodChecked(opresult3434, "++(1)", [1], string3426);
                            var opresult3438 = callmethodChecked(opresult3436, "++(1)", [1], string3424);
                            var opresult3440 = callmethodChecked(opresult3438, "++(1)", [1], call3422);
                            var_s = opresult3440;
                            return GraceDone;
                          };
                          // call case 5: prelude request
                          var call3441 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call3416, block3417);
                          var if3442 = GraceDone;
                          setLineNumber(497);    // compilenode member
                          // call case 4: self request
                          onSelf = true;
                          var call3444 = callmethodChecked(this, "finally", []);
                          var opresult3447 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call3444);
                          if (Grace_isTrue(opresult3447)) {
                            setLineNumber(498);    // compilenode identifier
                            var opresult3451 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                            // call case 6: other requests
                            // call case 4: self request
                            onSelf = true;
                            var call3453 = callmethodChecked(this, "finally", []);
                            var call3454 = callmethodChecked(call3453, "toGrace(1)", [1], opresult3451);
                            var string3456 = new GraceString("finally ");
                            var string3458 = new GraceString("    ");
                            var string3461 = new GraceString("\n");
                            var opresult3464 = callmethodChecked(var_s, "++(1)", [1], string3461);
                            var opresult3466 = callmethodChecked(opresult3464, "++(1)", [1], var_spc);
                            var opresult3468 = callmethodChecked(opresult3466, "++(1)", [1], string3458);
                            var opresult3470 = callmethodChecked(opresult3468, "++(1)", [1], string3456);
                            var opresult3472 = callmethodChecked(opresult3470, "++(1)", [1], call3454);
                            var_s = opresult3472;
                            if3442 = GraceDone;
                          }
                          setLineNumber(500);    // return value
                          if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], var_s)))
                              throw new GraceExceptionPacket(TypeErrorObject,
                                  new GraceString("result of method toGrace(_) does not have " + 
                                      callmethod(var_String, "asString", [0])._value + "."));
                          return var_s;
                        };
                        func3384.paramTypes = [];
                        func3384.paramTypes.push([type_Number, "depth"]);
                        func3384.paramCounts = [1];
                        obj3213.methods["toGrace(1)"] = func3384;
                        func3384.definitionLine = 488;
                        func3384.definitionModule = "ast";
                        var func3473 = function(argcv) {    // method shallowCopy
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          setModuleName("ast");
                          setLineNumber(503);    // compilenode identifier
                          // call case 6: other requests
                          // call case 6: other requests
                          var call3476 = callmethodChecked(var_tryCatchNode, "new(3)", [3], var_nullNode, var_emptySeq, GraceFalse);
                          var call3477 = callmethodChecked(call3476, "shallowCopyFieldsFrom(1)", [1], this);
                          return call3477;
                        };
                        func3473.paramCounts = [0];
                        obj3213.methods["shallowCopy"] = func3473;
                        func3473.definitionLine = 502;
                        func3473.definitionModule = "ast";
                        setLineNumber(446);    // compilenode identifier
                        // call case 6: other requests
                        // call case 6: other requests
                        // call case 3: self.outer request
                        var call3481 = callmethodChecked(superDepth, "outer", [0]);
                        var call3482 = callmethodChecked(call3481, "outer", []);
                        var call3483 = callmethodChecked(call3482, "baseNode$object(1)", [0, 1], this);
                        obj3213.superobj = call3483;
                        if (call3483.data) obj3213.data = call3483.data;
                        if (call3483.hasOwnProperty('_value'))
                            obj3213._value = call3483._value;
                        setLineNumber(447);    // compilenode string
                        var string3484 = new GraceString("trycatch");
                        obj3213.data["kind"] = string3484;
                        var reader_ast_kind3485 = function() {
                          return this.data["kind"];
                        };
                        reader_ast_kind3485.def = true;
                        obj3213.methods["kind"] = reader_ast_kind3485;
                        setLineNumber(448);    // compilenode identifier
                        obj3213.data["value"] = var_block;
                        var reader_ast_value3486 = function() {
                          return this.data["value"];
                        };
                        obj3213.methods["value"] = reader_ast_value3486;
                        obj3213.data["value"] = var_block;
                        var writer_ast_value3486 = function(argcv, o) {
                          this.data["value"] = o;
                          return GraceDone;
                        };
                        obj3213.methods["value:=(1)"] = writer_ast_value3486;
                        obj3213.mutable = true;
                        setLineNumber(449);    // compilenode identifier
                        obj3213.data["cases"] = var_cases__39__;
                        var reader_ast_cases3487 = function() {
                          return this.data["cases"];
                        };
                        obj3213.methods["cases"] = reader_ast_cases3487;
                        obj3213.data["cases"] = var_cases__39__;
                        var writer_ast_cases3487 = function(argcv, o) {
                          this.data["cases"] = o;
                          return GraceDone;
                        };
                        obj3213.methods["cases:=(1)"] = writer_ast_cases3487;
                        obj3213.mutable = true;
                        setLineNumber(450);    // compilenode identifier
                        obj3213.data["finally"] = var_finally__39__;
                        var reader_ast_finally3488 = function() {
                          return this.data["finally"];
                        };
                        obj3213.methods["finally"] = reader_ast_finally3488;
                        obj3213.data["finally"] = var_finally__39__;
                        var writer_ast_finally3488 = function(argcv, o) {
                          this.data["finally"] = o;
                          return GraceDone;
                        };
                        obj3213.methods["finally:=(1)"] = writer_ast_finally3488;
                        obj3213.mutable = true;
                        superDepth = origSuperDepth;
                      };
                      obj_init_3213.apply(obj3213, []);
                      return obj3213;
                    };
                    func3212.paramCounts = [3];
                    obj3210.methods["new(3)"] = func3212;
                    func3212.definitionLine = 445;
                    func3212.definitionModule = "ast";
                      var func3489 = function(argcv) {    // method new(_,_,_)$object(_)
                        var curarg = 1;
                        var var_block = arguments[curarg];
                        curarg++;
                        var var_cases__39__ = arguments[curarg];
                        curarg++;
                        var var_finally__39__ = arguments[curarg];
                        curarg++;
                        var inheritingObject = arguments[curarg++];
                        // Start argument processing
                        curarg = 1;
                        curarg++;
                        curarg++;
                        curarg++;
                        // End argument processing
                        setModuleName("ast");
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var obj3490 = Grace_allocObject(null, "new(3)");
                        obj3490.definitionModule = "ast";
                        obj3490.definitionLine = 445;
                        var inho3490 = inheritingObject;
                        while (inho3490.superobj) inho3490 = inho3490.superobj;
                        inho3490.superobj = obj3490;
                        obj3490.data = inheritingObject.data;
                        if (inheritingObject.hasOwnProperty('_value'))
                          obj3490._value = inheritingObject._value;
                        obj3490.outer = this;
                        var reader_ast_outer3491 = function() {
                          return this.outer;
                        };
                        obj3490.methods["outer"] = reader_ast_outer3491;
                        var obj_init_3490 = function() {
                          var origSuperDepth = superDepth;
                          superDepth = obj3490;
                          var func3492 = function(argcv) {    // method isSimple
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            setModuleName("ast");
                            // isSimple is a simple accessor - elide try ... catch
                            setLineNumber(451);    // compilenode identifier
                            return GraceFalse;
                          };
                          func3492.paramCounts = [0];
                          obj3490.methods["isSimple"] = func3492;
                          func3492.definitionLine = 451;
                          func3492.definitionModule = "ast";
                          var func3493 = function(argcv) {    // method accept(_)from(_)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_visitor = arguments[curarg];
                            curarg++;
                            var var_as = arguments[curarg];
                            curarg++;
                            // Start argument checking
                            curarg = 1;
                            setLineNumber(453);    // compilenode identifier
                            if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                        callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                            curarg++;
                            curarg++;
                            // End argument checking
                            setModuleName("ast");
                            var if3494 = GraceDone;
                            setLineNumber(454);    // compilenode identifier
                            // call case 6: other requests
                            var call3496 = callmethodChecked(var_visitor, "visitTryCatch(1)up(1)", [1, 1], this, var_as);
                            if (Grace_isTrue(call3496)) {
                              setLineNumber(455);    // compilenode identifier
                              // call case 6: other requests
                              var call3498 = callmethodChecked(var_as, "extend(1)", [1], this);
                              var var_newChain = call3498;
                              setLineNumber(456);    // compilenode identifier
                              // call case 6: other requests
                              // call case 4: self request
                              onSelf = true;
                              var call3501 = callmethodChecked(this, "value", []);
                              var call3502 = callmethodChecked(call3501, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                              setLineNumber(457);    // compilenode member
                              // call case 4: self request
                              onSelf = true;
                              var call3505 = callmethodChecked(this, "cases", []);
                              var block3506 = new GraceBlock(this, 457, 1);
                              setLineNumber(1);    // compilenode identifier
                              block3506.real = function(var_mx) {
                                setLineNumber(458);    // compilenode identifier
                                // call case 6: other requests
                                var call3508 = callmethodChecked(var_mx, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                return call3508;
                              };
                              // call case 5: prelude request
                              var call3509 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call3505, block3506);
                              var if3510 = GraceDone;
                              setLineNumber(460);    // compilenode member
                              // call case 4: self request
                              onSelf = true;
                              var call3512 = callmethodChecked(this, "finally", []);
                              var opresult3515 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call3512);
                              if (Grace_isTrue(opresult3515)) {
                                setLineNumber(461);    // compilenode identifier
                                // call case 6: other requests
                                // call case 4: self request
                                onSelf = true;
                                var call3518 = callmethodChecked(this, "finally", []);
                                var call3519 = callmethodChecked(call3518, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                if3510 = call3519;
                              }
                              if3494 = if3510;
                            }
                            return if3494;
                          };
                          func3493.paramTypes = [];
                          func3493.paramTypes.push([]);
                          func3493.paramTypes.push([]);
                          func3493.paramCounts = [1, 1];
                          obj3490.methods["accept(1)from(1)"] = func3493;
                          func3493.definitionLine = 453;
                          func3493.definitionModule = "ast";
                          var func3520 = function(argcv) {    // method map(_)ancestors(_)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_blk = arguments[curarg];
                            curarg++;
                            var var_as = arguments[curarg];
                            curarg++;
                            setModuleName("ast");
                            setLineNumber(466);    // compilenode member
                            // call case 4: self request
                            onSelf = true;
                            var call3522 = callmethodChecked(this, "shallowCopy", []);
                            var var_n = call3522;
                            setLineNumber(467);    // compilenode identifier
                            // call case 6: other requests
                            var call3524 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                            var var_newChain = call3524;
                            setLineNumber(468);    // compilenode identifier
                            // call case 6: other requests
                            // call case 4: self request
                            onSelf = true;
                            var call3528 = callmethodChecked(this, "value", []);
                            var call3529 = callmethodChecked(call3528, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
                            // call case 6: other requests
                            var call3530 = callmethodChecked(var_n, "value:=(1)", [1], call3529);
                            setLineNumber(469);    // compilenode member
                            // call case 4: self request
                            onSelf = true;
                            var call3534 = callmethodChecked(this, "cases", []);
                            // call case 6: other requests
                            // call case 6: other requests
                            // call case 3: self.outer request
                            var call3537 = callmethodChecked(superDepth, "outer", [0]);
                            var call3538 = callmethodChecked(call3537, "outer", []);
                            onSelf = true;
                            var call3539 = callmethodChecked(call3538, "listMap(2)ancestors(1)", [2, 1], call3534, var_blk, var_newChain);
                            // call case 6: other requests
                            var call3540 = callmethodChecked(var_n, "cases:=(1)", [1], call3539);
                            setLineNumber(470);    // compilenode member
                            // call case 4: self request
                            onSelf = true;
                            var call3544 = callmethodChecked(this, "finally", []);
                            // call case 6: other requests
                            // call case 6: other requests
                            // call case 3: self.outer request
                            var call3547 = callmethodChecked(superDepth, "outer", [0]);
                            var call3548 = callmethodChecked(call3547, "outer", []);
                            onSelf = true;
                            var call3549 = callmethodChecked(call3548, "maybeMap(2)ancestors(1)", [2, 1], call3544, var_blk, var_newChain);
                            // call case 6: other requests
                            var call3550 = callmethodChecked(var_n, "finally:=(1)", [1], call3549);
                            setLineNumber(471);    // compilenode identifier
                            // call case 6: other requests
                            var call3552 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                            return call3552;
                          };
                          func3520.paramCounts = [1, 1];
                          obj3490.methods["map(1)ancestors(1)"] = func3520;
                          func3520.definitionLine = 465;
                          func3520.definitionModule = "ast";
                          var func3553 = function(argcv) {    // method pretty(_)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_depth = arguments[curarg];
                            curarg++;
                            setModuleName("ast");
                            setLineNumber(474);    // compilenode string
                            var string3554 = new GraceString("");
                            var var_spc = string3554;
                            setLineNumber(475);    // compilenode num
                            var opresult3558 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                            var block3559 = new GraceBlock(this, 475, 1);
                            setLineNumber(1);    // compilenode identifier
                            block3559.real = function(var_i) {
                              setLineNumber(476);    // compilenode string
                              var string3560 = new GraceString("  ");
                              var opresult3563 = callmethodChecked(var_spc, "++(1)", [1], string3560);
                              var_spc = opresult3563;
                              return GraceDone;
                            };
                            // call case 5: prelude request
                            var call3564 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult3558, block3559);
                            setLineNumber(478);    // compilenode string
                            var string3565 = new GraceString("\n");
                            // call case 1: super request
                            var call3568 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                            var string3570 = new GraceString("");
                            var opresult3572 = callmethodChecked(string3570, "++(1)", [1], call3568);
                            var opresult3574 = callmethodChecked(opresult3572, "++(1)", [1], string3565);
                            var var_s = opresult3574;
                            setLineNumber(479);    // compilenode identifier
                            var opresult3578 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                            // call case 6: other requests
                            // call case 4: self request
                            onSelf = true;
                            var call3580 = callmethodChecked(this, "value", []);
                            var call3581 = callmethodChecked(call3580, "pretty(1)", [1], opresult3578);
                            var opresult3585 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                            var opresult3587 = callmethodChecked(opresult3585, "++(1)", [1], call3581);
                            var_s = opresult3587;
                            setLineNumber(480);    // compilenode member
                            // call case 4: self request
                            onSelf = true;
                            var call3590 = callmethodChecked(this, "cases", []);
                            var block3591 = new GraceBlock(this, 480, 1);
                            setLineNumber(1);    // compilenode identifier
                            block3591.real = function(var_mx) {
                              setLineNumber(481);    // compilenode string
                              var string3592 = new GraceString("");
                              var opresult3597 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                              // call case 6: other requests
                              var call3598 = callmethodChecked(var_mx, "pretty(1)", [1], opresult3597);
                              var string3600 = new GraceString("  ");
                              var string3603 = new GraceString("Case:\n");
                              var string3606 = new GraceString("\n");
                              var opresult3608 = callmethodChecked(string3606, "++(1)", [1], var_spc);
                              var opresult3610 = callmethodChecked(opresult3608, "++(1)", [1], string3603);
                              var opresult3612 = callmethodChecked(opresult3610, "++(1)", [1], var_spc);
                              var opresult3614 = callmethodChecked(opresult3612, "++(1)", [1], string3600);
                              var opresult3616 = callmethodChecked(opresult3614, "++(1)", [1], call3598);
                              var opresult3618 = callmethodChecked(opresult3616, "++(1)", [1], string3592);
                              var opresult3621 = callmethodChecked(var_s, "++(1)", [1], opresult3618);
                              var_s = opresult3621;
                              return GraceDone;
                            };
                            // call case 5: prelude request
                            var call3622 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call3590, block3591);
                            var if3623 = GraceDone;
                            setLineNumber(483);    // compilenode member
                            // call case 4: self request
                            onSelf = true;
                            var call3625 = callmethodChecked(this, "finally", []);
                            var opresult3628 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call3625);
                            if (Grace_isTrue(opresult3628)) {
                              setLineNumber(484);    // compilenode string
                              var string3629 = new GraceString("");
                              var opresult3634 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                              // call case 6: other requests
                              // call case 4: self request
                              onSelf = true;
                              var call3636 = callmethodChecked(this, "finally", []);
                              var call3637 = callmethodChecked(call3636, "pretty(1)", [1], opresult3634);
                              var string3639 = new GraceString("  ");
                              var string3642 = new GraceString("Finally:\n");
                              var string3645 = new GraceString("\n");
                              var opresult3647 = callmethodChecked(string3645, "++(1)", [1], var_spc);
                              var opresult3649 = callmethodChecked(opresult3647, "++(1)", [1], string3642);
                              var opresult3651 = callmethodChecked(opresult3649, "++(1)", [1], var_spc);
                              var opresult3653 = callmethodChecked(opresult3651, "++(1)", [1], string3639);
                              var opresult3655 = callmethodChecked(opresult3653, "++(1)", [1], call3637);
                              var opresult3657 = callmethodChecked(opresult3655, "++(1)", [1], string3629);
                              var opresult3660 = callmethodChecked(var_s, "++(1)", [1], opresult3657);
                              var_s = opresult3660;
                              if3623 = GraceDone;
                            }
                            setLineNumber(486);    // compilenode identifier
                            return var_s;
                          };
                          func3553.paramCounts = [1];
                          obj3490.methods["pretty(1)"] = func3553;
                          func3553.definitionLine = 473;
                          func3553.definitionModule = "ast";
                          var func3661 = function(argcv) {    // method toGrace(_)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_depth = arguments[curarg];
                            curarg++;
                            // Start argument checking
                            curarg = 1;
                            setLineNumber(488);    // compilenode identifier
                            if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                        callmethod(var_Number, "asString", [0])._value + "."));
                            curarg++;
                            // End argument checking
                            setModuleName("ast");
                            setLineNumber(489);    // compilenode string
                            var string3662 = new GraceString("");
                            var var_spc = string3662;
                            setLineNumber(490);    // compilenode identifier
                            var diff3666 = callmethodChecked(var_depth, "-(1)", [1], new GraceNum(1));
                            var opresult3669 = callmethodChecked(new GraceNum(0), "..(1)", [1], diff3666);
                            var block3670 = new GraceBlock(this, 490, 1);
                            setLineNumber(1);    // compilenode identifier
                            block3670.real = function(var_i) {
                              setLineNumber(491);    // compilenode string
                              var string3671 = new GraceString("    ");
                              var opresult3674 = callmethodChecked(var_spc, "++(1)", [1], string3671);
                              var_spc = opresult3674;
                              return GraceDone;
                            };
                            // call case 5: prelude request
                            var call3675 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult3669, block3670);
                            setLineNumber(493);    // compilenode string
                            var string3676 = new GraceString(" ");
                            var opresult3681 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                            // call case 6: other requests
                            // call case 4: self request
                            onSelf = true;
                            var call3683 = callmethodChecked(this, "value", []);
                            var call3684 = callmethodChecked(call3683, "toGrace(1)", [1], opresult3681);
                            var string3686 = new GraceString("try ");
                            var opresult3688 = callmethodChecked(string3686, "++(1)", [1], call3684);
                            var opresult3690 = callmethodChecked(opresult3688, "++(1)", [1], string3676);
                            var var_s = opresult3690;
                            setLineNumber(494);    // compilenode member
                            // call case 4: self request
                            onSelf = true;
                            var call3693 = callmethodChecked(this, "cases", []);
                            var block3694 = new GraceBlock(this, 494, 1);
                            setLineNumber(1);    // compilenode identifier
                            block3694.real = function(var_case) {
                              setLineNumber(495);    // compilenode identifier
                              var opresult3698 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                              // call case 6: other requests
                              var call3699 = callmethodChecked(var_case, "toGrace(1)", [1], opresult3698);
                              var string3701 = new GraceString("catch ");
                              var string3703 = new GraceString("    ");
                              var string3706 = new GraceString("\n");
                              var opresult3709 = callmethodChecked(var_s, "++(1)", [1], string3706);
                              var opresult3711 = callmethodChecked(opresult3709, "++(1)", [1], var_spc);
                              var opresult3713 = callmethodChecked(opresult3711, "++(1)", [1], string3703);
                              var opresult3715 = callmethodChecked(opresult3713, "++(1)", [1], string3701);
                              var opresult3717 = callmethodChecked(opresult3715, "++(1)", [1], call3699);
                              var_s = opresult3717;
                              return GraceDone;
                            };
                            // call case 5: prelude request
                            var call3718 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call3693, block3694);
                            var if3719 = GraceDone;
                            setLineNumber(497);    // compilenode member
                            // call case 4: self request
                            onSelf = true;
                            var call3721 = callmethodChecked(this, "finally", []);
                            var opresult3724 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call3721);
                            if (Grace_isTrue(opresult3724)) {
                              setLineNumber(498);    // compilenode identifier
                              var opresult3728 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                              // call case 6: other requests
                              // call case 4: self request
                              onSelf = true;
                              var call3730 = callmethodChecked(this, "finally", []);
                              var call3731 = callmethodChecked(call3730, "toGrace(1)", [1], opresult3728);
                              var string3733 = new GraceString("finally ");
                              var string3735 = new GraceString("    ");
                              var string3738 = new GraceString("\n");
                              var opresult3741 = callmethodChecked(var_s, "++(1)", [1], string3738);
                              var opresult3743 = callmethodChecked(opresult3741, "++(1)", [1], var_spc);
                              var opresult3745 = callmethodChecked(opresult3743, "++(1)", [1], string3735);
                              var opresult3747 = callmethodChecked(opresult3745, "++(1)", [1], string3733);
                              var opresult3749 = callmethodChecked(opresult3747, "++(1)", [1], call3731);
                              var_s = opresult3749;
                              if3719 = GraceDone;
                            }
                            setLineNumber(500);    // return value
                            if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], var_s)))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("result of method toGrace(_) does not have " + 
                                        callmethod(var_String, "asString", [0])._value + "."));
                            return var_s;
                          };
                          func3661.paramTypes = [];
                          func3661.paramTypes.push([type_Number, "depth"]);
                          func3661.paramCounts = [1];
                          obj3490.methods["toGrace(1)"] = func3661;
                          func3661.definitionLine = 488;
                          func3661.definitionModule = "ast";
                          var func3750 = function(argcv) {    // method shallowCopy
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            setModuleName("ast");
                            setLineNumber(503);    // compilenode identifier
                            // call case 6: other requests
                            // call case 6: other requests
                            var call3753 = callmethodChecked(var_tryCatchNode, "new(3)", [3], var_nullNode, var_emptySeq, GraceFalse);
                            var call3754 = callmethodChecked(call3753, "shallowCopyFieldsFrom(1)", [1], this);
                            return call3754;
                          };
                          func3750.paramCounts = [0];
                          obj3490.methods["shallowCopy"] = func3750;
                          func3750.definitionLine = 502;
                          func3750.definitionModule = "ast";
                          setLineNumber(446);    // compilenode identifier
                          // call case 6: other requests
                          // call case 6: other requests
                          // call case 3: self.outer request
                          var call3758 = callmethodChecked(superDepth, "outer", [0]);
                          var call3759 = callmethodChecked(call3758, "outer", []);
                          var call3760 = callmethodChecked(call3759, "baseNode$object(1)", [0, 1], this);
                          obj3490.superobj = call3760;
                          if (call3760.data) obj3490.data = call3760.data;
                          if (call3760.hasOwnProperty('_value'))
                              obj3490._value = call3760._value;
                          setLineNumber(447);    // compilenode string
                          var string3761 = new GraceString("trycatch");
                          obj3490.data["kind"] = string3761;
                          var reader_ast_kind3762 = function() {
                            return this.data["kind"];
                          };
                          reader_ast_kind3762.def = true;
                          obj3490.methods["kind"] = reader_ast_kind3762;
                          setLineNumber(448);    // compilenode identifier
                          obj3490.data["value"] = var_block;
                          var reader_ast_value3763 = function() {
                            return this.data["value"];
                          };
                          obj3490.methods["value"] = reader_ast_value3763;
                          obj3490.data["value"] = var_block;
                          var writer_ast_value3763 = function(argcv, o) {
                            this.data["value"] = o;
                            return GraceDone;
                          };
                          obj3490.methods["value:=(1)"] = writer_ast_value3763;
                          obj3490.mutable = true;
                          setLineNumber(449);    // compilenode identifier
                          obj3490.data["cases"] = var_cases__39__;
                          var reader_ast_cases3764 = function() {
                            return this.data["cases"];
                          };
                          obj3490.methods["cases"] = reader_ast_cases3764;
                          obj3490.data["cases"] = var_cases__39__;
                          var writer_ast_cases3764 = function(argcv, o) {
                            this.data["cases"] = o;
                            return GraceDone;
                          };
                          obj3490.methods["cases:=(1)"] = writer_ast_cases3764;
                          obj3490.mutable = true;
                          setLineNumber(450);    // compilenode identifier
                          obj3490.data["finally"] = var_finally__39__;
                          var reader_ast_finally3765 = function() {
                            return this.data["finally"];
                          };
                          obj3490.methods["finally"] = reader_ast_finally3765;
                          obj3490.data["finally"] = var_finally__39__;
                          var writer_ast_finally3765 = function(argcv, o) {
                            this.data["finally"] = o;
                            return GraceDone;
                          };
                          obj3490.methods["finally:=(1)"] = writer_ast_finally3765;
                          obj3490.mutable = true;
                          superDepth = origSuperDepth;
                        };
                        obj_init_3490.apply(inheritingObject, []);
                        return obj3490;
                        };
                        obj3210.methods["new(3)$object(1)"] = func3489;
                      superDepth = origSuperDepth;
                    };
                    obj_init_3210.apply(obj3210, []);
                    var var_tryCatchNode = obj3210;
                    setLineNumber(1);    // compilenode method
                    var func3766 = function(argcv) {    // method tryCatchNode
                      var returnTarget = invocationCount;
                      invocationCount++;
                      var curarg = 1;
                      setModuleName("ast");
                      // tryCatchNode is a simple accessor - elide try ... catch
                      setLineNumber(444);    // compilenode identifier
                      return var_tryCatchNode;
                    };
                    func3766.paramCounts = [0];
                    this.methods["tryCatchNode"] = func3766;
                    func3766.definitionLine = 1;
                    func3766.definitionModule = "ast";
                    this.methods["tryCatchNode"].debug = "def";
                    setLineNumber(507);    // compilenode object
                    var obj3767 = Grace_allocObject(GraceObject, "matchCaseNode");
                    obj3767.definitionModule = "ast";
                    obj3767.definitionLine = 507;
                    obj3767.outer = this;
                    var reader_ast_outer3768 = function() {
                      return this.outer;
                    };
                    obj3767.methods["outer"] = reader_ast_outer3768;
                    var obj_init_3767 = function() {
                      var origSuperDepth = superDepth;
                      superDepth = obj3767;
                      var func3769 = function(argcv) {    // method new(_,_,_)
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        var var_matchee__39__ = arguments[curarg];
                        curarg++;
                        var var_cases__39__ = arguments[curarg];
                        curarg++;
                        var var_elsecase__39__ = arguments[curarg];
                        curarg++;
                        setModuleName("ast");
                        setLineNumber(508);    // compilenode object
                        var obj3770 = Grace_allocObject(null, "matchCaseNode.new(_,_,_)");
                        obj3770.definitionModule = "ast";
                        obj3770.definitionLine = 508;
                        obj3770.outer = this;
                        var reader_ast_outer3771 = function() {
                          return this.outer;
                        };
                        obj3770.methods["outer"] = reader_ast_outer3771;
                        var obj_init_3770 = function() {
                          var origSuperDepth = superDepth;
                          superDepth = obj3770;
                          var func3772 = function(argcv) {    // method isSimple
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            setModuleName("ast");
                            // isSimple is a simple accessor - elide try ... catch
                            setLineNumber(514);    // compilenode identifier
                            return GraceFalse;
                          };
                          func3772.paramCounts = [0];
                          obj3770.methods["isSimple"] = func3772;
                          func3772.definitionLine = 514;
                          func3772.definitionModule = "ast";
                          var func3773 = function(argcv) {    // method matchee
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            setModuleName("ast");
                            setLineNumber(515);    // compilenode member
                            // call case 4: self request
                            onSelf = true;
                            var call3775 = callmethodChecked(this, "value", []);
                            return call3775;
                          };
                          func3773.paramCounts = [0];
                          obj3770.methods["matchee"] = func3773;
                          func3773.definitionLine = 515;
                          func3773.definitionModule = "ast";
                          var func3776 = function(argcv) {    // method accept(_)from(_)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_visitor = arguments[curarg];
                            curarg++;
                            var var_as = arguments[curarg];
                            curarg++;
                            // Start argument checking
                            curarg = 1;
                            setLineNumber(516);    // compilenode identifier
                            if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                        callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                            curarg++;
                            curarg++;
                            // End argument checking
                            setModuleName("ast");
                            var if3777 = GraceDone;
                            setLineNumber(517);    // compilenode identifier
                            // call case 6: other requests
                            var call3779 = callmethodChecked(var_visitor, "visitMatchCase(1)up(1)", [1, 1], this, var_as);
                            if (Grace_isTrue(call3779)) {
                              setLineNumber(518);    // compilenode identifier
                              // call case 6: other requests
                              var call3781 = callmethodChecked(var_as, "extend(1)", [1], this);
                              var var_newChain = call3781;
                              setLineNumber(519);    // compilenode identifier
                              // call case 6: other requests
                              // call case 4: self request
                              onSelf = true;
                              var call3784 = callmethodChecked(this, "value", []);
                              var call3785 = callmethodChecked(call3784, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                              setLineNumber(520);    // compilenode member
                              // call case 4: self request
                              onSelf = true;
                              var call3788 = callmethodChecked(this, "cases", []);
                              var block3789 = new GraceBlock(this, 520, 1);
                              setLineNumber(1);    // compilenode identifier
                              block3789.real = function(var_mx) {
                                setLineNumber(521);    // compilenode identifier
                                // call case 6: other requests
                                var call3791 = callmethodChecked(var_mx, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                return call3791;
                              };
                              // call case 5: prelude request
                              var call3792 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call3788, block3789);
                              var if3793 = GraceDone;
                              setLineNumber(523);    // compilenode member
                              // call case 4: self request
                              onSelf = true;
                              var call3795 = callmethodChecked(this, "elsecase", []);
                              var opresult3798 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call3795);
                              if (Grace_isTrue(opresult3798)) {
                                setLineNumber(524);    // compilenode identifier
                                // call case 6: other requests
                                // call case 4: self request
                                onSelf = true;
                                var call3801 = callmethodChecked(this, "elsecase", []);
                                var call3802 = callmethodChecked(call3801, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                if3793 = call3802;
                              }
                              if3777 = if3793;
                            }
                            return if3777;
                          };
                          func3776.paramTypes = [];
                          func3776.paramTypes.push([]);
                          func3776.paramTypes.push([]);
                          func3776.paramCounts = [1, 1];
                          obj3770.methods["accept(1)from(1)"] = func3776;
                          func3776.definitionLine = 516;
                          func3776.definitionModule = "ast";
                          var func3803 = function(argcv) {    // method map(_)ancestors(_)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_blk = arguments[curarg];
                            curarg++;
                            var var_as = arguments[curarg];
                            curarg++;
                            setModuleName("ast");
                            setLineNumber(529);    // compilenode member
                            // call case 4: self request
                            onSelf = true;
                            var call3805 = callmethodChecked(this, "shallowCopy", []);
                            var var_n = call3805;
                            setLineNumber(530);    // compilenode identifier
                            // call case 6: other requests
                            var call3807 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                            var var_newChain = call3807;
                            setLineNumber(531);    // compilenode identifier
                            // call case 6: other requests
                            // call case 4: self request
                            onSelf = true;
                            var call3811 = callmethodChecked(this, "value", []);
                            var call3812 = callmethodChecked(call3811, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
                            // call case 6: other requests
                            var call3813 = callmethodChecked(var_n, "value:=(1)", [1], call3812);
                            setLineNumber(532);    // compilenode member
                            // call case 4: self request
                            onSelf = true;
                            var call3817 = callmethodChecked(this, "cases", []);
                            // call case 6: other requests
                            // call case 6: other requests
                            // call case 3: self.outer request
                            var call3820 = callmethodChecked(superDepth, "outer", [0]);
                            var call3821 = callmethodChecked(call3820, "outer", []);
                            onSelf = true;
                            var call3822 = callmethodChecked(call3821, "listMap(2)ancestors(1)", [2, 1], call3817, var_blk, var_newChain);
                            // call case 6: other requests
                            var call3823 = callmethodChecked(var_n, "cases:=(1)", [1], call3822);
                            setLineNumber(533);    // compilenode member
                            // call case 4: self request
                            onSelf = true;
                            var call3827 = callmethodChecked(this, "elsecase", []);
                            // call case 6: other requests
                            // call case 6: other requests
                            // call case 3: self.outer request
                            var call3830 = callmethodChecked(superDepth, "outer", [0]);
                            var call3831 = callmethodChecked(call3830, "outer", []);
                            onSelf = true;
                            var call3832 = callmethodChecked(call3831, "maybeMap(2)ancestors(1)", [2, 1], call3827, var_blk, var_newChain);
                            // call case 6: other requests
                            var call3833 = callmethodChecked(var_n, "elsecase:=(1)", [1], call3832);
                            setLineNumber(534);    // compilenode identifier
                            // call case 6: other requests
                            var call3835 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                            return call3835;
                          };
                          func3803.paramCounts = [1, 1];
                          obj3770.methods["map(1)ancestors(1)"] = func3803;
                          func3803.definitionLine = 528;
                          func3803.definitionModule = "ast";
                          var func3836 = function(argcv) {    // method pretty(_)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_depth = arguments[curarg];
                            curarg++;
                            setModuleName("ast");
                            setLineNumber(537);    // compilenode string
                            var string3837 = new GraceString("");
                            var var_spc = string3837;
                            setLineNumber(538);    // compilenode num
                            var opresult3841 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                            var block3842 = new GraceBlock(this, 538, 1);
                            setLineNumber(1);    // compilenode identifier
                            block3842.real = function(var_i) {
                              setLineNumber(539);    // compilenode string
                              var string3843 = new GraceString("  ");
                              var opresult3846 = callmethodChecked(var_spc, "++(1)", [1], string3843);
                              var_spc = opresult3846;
                              return GraceDone;
                            };
                            // call case 5: prelude request
                            var call3847 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult3841, block3842);
                            setLineNumber(541);    // compilenode string
                            var string3848 = new GraceString("\n");
                            // call case 1: super request
                            var call3851 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                            var opresult3853 = callmethodChecked(call3851, "++(1)", [1], string3848);
                            var var_s = opresult3853;
                            setLineNumber(542);    // compilenode identifier
                            var opresult3857 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                            // call case 6: other requests
                            // call case 4: self request
                            onSelf = true;
                            var call3859 = callmethodChecked(this, "matchee", []);
                            var call3860 = callmethodChecked(call3859, "pretty(1)", [1], opresult3857);
                            var opresult3864 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                            var opresult3866 = callmethodChecked(opresult3864, "++(1)", [1], call3860);
                            var_s = opresult3866;
                            setLineNumber(543);    // compilenode member
                            // call case 4: self request
                            onSelf = true;
                            var call3869 = callmethodChecked(this, "cases", []);
                            var block3870 = new GraceBlock(this, 543, 1);
                            setLineNumber(1);    // compilenode identifier
                            block3870.real = function(var_mx) {
                              setLineNumber(544);    // compilenode string
                              var string3871 = new GraceString("");
                              var opresult3876 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                              // call case 6: other requests
                              var call3877 = callmethodChecked(var_mx, "pretty(1)", [1], opresult3876);
                              var string3879 = new GraceString("  ");
                              var string3882 = new GraceString("Case:\n");
                              var string3885 = new GraceString("\n");
                              var opresult3887 = callmethodChecked(string3885, "++(1)", [1], var_spc);
                              var opresult3889 = callmethodChecked(opresult3887, "++(1)", [1], string3882);
                              var opresult3891 = callmethodChecked(opresult3889, "++(1)", [1], var_spc);
                              var opresult3893 = callmethodChecked(opresult3891, "++(1)", [1], string3879);
                              var opresult3895 = callmethodChecked(opresult3893, "++(1)", [1], call3877);
                              var opresult3897 = callmethodChecked(opresult3895, "++(1)", [1], string3871);
                              var opresult3900 = callmethodChecked(var_s, "++(1)", [1], opresult3897);
                              var_s = opresult3900;
                              return GraceDone;
                            };
                            // call case 5: prelude request
                            var call3901 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call3869, block3870);
                            var if3902 = GraceDone;
                            setLineNumber(546);    // compilenode member
                            // call case 4: self request
                            onSelf = true;
                            var call3904 = callmethodChecked(this, "elsecase", []);
                            var opresult3907 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call3904);
                            if (Grace_isTrue(opresult3907)) {
                              setLineNumber(547);    // compilenode string
                              var string3908 = new GraceString("");
                              var opresult3913 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                              // call case 6: other requests
                              // call case 4: self request
                              onSelf = true;
                              var call3915 = callmethodChecked(this, "elsecase", []);
                              var call3916 = callmethodChecked(call3915, "pretty(1)", [1], opresult3913);
                              var string3918 = new GraceString("  ");
                              var string3921 = new GraceString("Else:\n");
                              var string3924 = new GraceString("\n");
                              var opresult3926 = callmethodChecked(string3924, "++(1)", [1], var_spc);
                              var opresult3928 = callmethodChecked(opresult3926, "++(1)", [1], string3921);
                              var opresult3930 = callmethodChecked(opresult3928, "++(1)", [1], var_spc);
                              var opresult3932 = callmethodChecked(opresult3930, "++(1)", [1], string3918);
                              var opresult3934 = callmethodChecked(opresult3932, "++(1)", [1], call3916);
                              var opresult3936 = callmethodChecked(opresult3934, "++(1)", [1], string3908);
                              var opresult3939 = callmethodChecked(var_s, "++(1)", [1], opresult3936);
                              var_s = opresult3939;
                              if3902 = GraceDone;
                            }
                            setLineNumber(549);    // compilenode identifier
                            return var_s;
                          };
                          func3836.paramCounts = [1];
                          obj3770.methods["pretty(1)"] = func3836;
                          func3836.definitionLine = 536;
                          func3836.definitionModule = "ast";
                          var func3940 = function(argcv) {    // method toGrace(_)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_depth = arguments[curarg];
                            curarg++;
                            // Start argument checking
                            curarg = 1;
                            setLineNumber(551);    // compilenode identifier
                            if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                        callmethod(var_Number, "asString", [0])._value + "."));
                            curarg++;
                            // End argument checking
                            setModuleName("ast");
                            setLineNumber(552);    // compilenode string
                            var string3941 = new GraceString("");
                            var var_spc = string3941;
                            setLineNumber(553);    // compilenode identifier
                            var diff3945 = callmethodChecked(var_depth, "-(1)", [1], new GraceNum(1));
                            var opresult3948 = callmethodChecked(new GraceNum(0), "..(1)", [1], diff3945);
                            var block3949 = new GraceBlock(this, 553, 1);
                            setLineNumber(1);    // compilenode identifier
                            block3949.real = function(var_i) {
                              setLineNumber(554);    // compilenode string
                              var string3950 = new GraceString("    ");
                              var opresult3953 = callmethodChecked(var_spc, "++(1)", [1], string3950);
                              var_spc = opresult3953;
                              return GraceDone;
                            };
                            // call case 5: prelude request
                            var call3954 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult3948, block3949);
                            setLineNumber(556);    // compilenode string
                            var string3955 = new GraceString(")");
                            // call case 6: other requests
                            // call case 4: self request
                            onSelf = true;
                            var call3959 = callmethodChecked(this, "value", []);
                            var call3960 = callmethodChecked(call3959, "toGrace(1)", [1], new GraceNum(0));
                            var string3962 = new GraceString("match(");
                            var opresult3964 = callmethodChecked(string3962, "++(1)", [1], call3960);
                            var opresult3966 = callmethodChecked(opresult3964, "++(1)", [1], string3955);
                            var var_s = opresult3966;
                            setLineNumber(557);    // compilenode member
                            // call case 4: self request
                            onSelf = true;
                            var call3969 = callmethodChecked(this, "cases", []);
                            var block3970 = new GraceBlock(this, 557, 1);
                            setLineNumber(1);    // compilenode identifier
                            block3970.real = function(var_case) {
                              setLineNumber(558);    // compilenode identifier
                              var opresult3974 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                              // call case 6: other requests
                              var call3975 = callmethodChecked(var_case, "toGrace(1)", [1], opresult3974);
                              var string3977 = new GraceString("case ");
                              var string3979 = new GraceString("    ");
                              var string3982 = new GraceString("\n");
                              var opresult3985 = callmethodChecked(var_s, "++(1)", [1], string3982);
                              var opresult3987 = callmethodChecked(opresult3985, "++(1)", [1], var_spc);
                              var opresult3989 = callmethodChecked(opresult3987, "++(1)", [1], string3979);
                              var opresult3991 = callmethodChecked(opresult3989, "++(1)", [1], string3977);
                              var opresult3993 = callmethodChecked(opresult3991, "++(1)", [1], call3975);
                              var_s = opresult3993;
                              return GraceDone;
                            };
                            // call case 5: prelude request
                            var call3994 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call3969, block3970);
                            var if3995 = GraceDone;
                            setLineNumber(560);    // compilenode member
                            // call case 4: self request
                            onSelf = true;
                            var call3997 = callmethodChecked(this, "elsecase", []);
                            var opresult4000 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call3997);
                            if (Grace_isTrue(opresult4000)) {
                              setLineNumber(561);    // compilenode identifier
                              var opresult4004 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                              // call case 6: other requests
                              // call case 4: self request
                              onSelf = true;
                              var call4006 = callmethodChecked(this, "elsecase", []);
                              var call4007 = callmethodChecked(call4006, "toGrace(1)", [1], opresult4004);
                              var string4009 = new GraceString("else ");
                              var string4011 = new GraceString("    ");
                              var string4014 = new GraceString("\n");
                              var opresult4017 = callmethodChecked(var_s, "++(1)", [1], string4014);
                              var opresult4019 = callmethodChecked(opresult4017, "++(1)", [1], var_spc);
                              var opresult4021 = callmethodChecked(opresult4019, "++(1)", [1], string4011);
                              var opresult4023 = callmethodChecked(opresult4021, "++(1)", [1], string4009);
                              var opresult4025 = callmethodChecked(opresult4023, "++(1)", [1], call4007);
                              var_s = opresult4025;
                              if3995 = GraceDone;
                            }
                            setLineNumber(563);    // return value
                            if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], var_s)))
                                throw new GraceExceptionPacket(TypeErrorObject,
                                    new GraceString("result of method toGrace(_) does not have " + 
                                        callmethod(var_String, "asString", [0])._value + "."));
                            return var_s;
                          };
                          func3940.paramTypes = [];
                          func3940.paramTypes.push([type_Number, "depth"]);
                          func3940.paramCounts = [1];
                          obj3770.methods["toGrace(1)"] = func3940;
                          func3940.definitionLine = 551;
                          func3940.definitionModule = "ast";
                          var func4026 = function(argcv) {    // method shallowCopy
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            setModuleName("ast");
                            setLineNumber(566);    // compilenode identifier
                            // call case 6: other requests
                            // call case 6: other requests
                            var call4029 = callmethodChecked(var_matchCaseNode, "new(3)", [3], var_nullNode, var_emptySeq, GraceFalse);
                            var call4030 = callmethodChecked(call4029, "shallowCopyFieldsFrom(1)", [1], this);
                            return call4030;
                          };
                          func4026.paramCounts = [0];
                          obj3770.methods["shallowCopy"] = func4026;
                          func4026.definitionLine = 565;
                          func4026.definitionModule = "ast";
                          setLineNumber(509);    // compilenode identifier
                          // call case 6: other requests
                          // call case 6: other requests
                          // call case 3: self.outer request
                          var call4034 = callmethodChecked(superDepth, "outer", [0]);
                          var call4035 = callmethodChecked(call4034, "outer", []);
                          var call4036 = callmethodChecked(call4035, "baseNode$object(1)", [0, 1], this);
                          obj3770.superobj = call4036;
                          if (call4036.data) obj3770.data = call4036.data;
                          if (call4036.hasOwnProperty('_value'))
                              obj3770._value = call4036._value;
                          setLineNumber(510);    // compilenode string
                          var string4037 = new GraceString("matchcase");
                          obj3770.data["kind"] = string4037;
                          var reader_ast_kind4038 = function() {
                            return this.data["kind"];
                          };
                          reader_ast_kind4038.def = true;
                          obj3770.methods["kind"] = reader_ast_kind4038;
                          setLineNumber(511);    // compilenode identifier
                          obj3770.data["value"] = var_matchee__39__;
                          var reader_ast_value4039 = function() {
                            return this.data["value"];
                          };
                          obj3770.methods["value"] = reader_ast_value4039;
                          obj3770.data["value"] = var_matchee__39__;
                          var writer_ast_value4039 = function(argcv, o) {
                            this.data["value"] = o;
                            return GraceDone;
                          };
                          obj3770.methods["value:=(1)"] = writer_ast_value4039;
                          obj3770.mutable = true;
                          setLineNumber(512);    // compilenode identifier
                          obj3770.data["cases"] = var_cases__39__;
                          var reader_ast_cases4040 = function() {
                            return this.data["cases"];
                          };
                          obj3770.methods["cases"] = reader_ast_cases4040;
                          obj3770.data["cases"] = var_cases__39__;
                          var writer_ast_cases4040 = function(argcv, o) {
                            this.data["cases"] = o;
                            return GraceDone;
                          };
                          obj3770.methods["cases:=(1)"] = writer_ast_cases4040;
                          obj3770.mutable = true;
                          setLineNumber(513);    // compilenode identifier
                          obj3770.data["elsecase"] = var_elsecase__39__;
                          var reader_ast_elsecase4041 = function() {
                            return this.data["elsecase"];
                          };
                          obj3770.methods["elsecase"] = reader_ast_elsecase4041;
                          obj3770.data["elsecase"] = var_elsecase__39__;
                          var writer_ast_elsecase4041 = function(argcv, o) {
                            this.data["elsecase"] = o;
                            return GraceDone;
                          };
                          obj3770.methods["elsecase:=(1)"] = writer_ast_elsecase4041;
                          obj3770.mutable = true;
                          superDepth = origSuperDepth;
                        };
                        obj_init_3770.apply(obj3770, []);
                        return obj3770;
                      };
                      func3769.paramCounts = [3];
                      obj3767.methods["new(3)"] = func3769;
                      func3769.definitionLine = 508;
                      func3769.definitionModule = "ast";
                        var func4042 = function(argcv) {    // method new(_,_,_)$object(_)
                          var curarg = 1;
                          var var_matchee__39__ = arguments[curarg];
                          curarg++;
                          var var_cases__39__ = arguments[curarg];
                          curarg++;
                          var var_elsecase__39__ = arguments[curarg];
                          curarg++;
                          var inheritingObject = arguments[curarg++];
                          // Start argument processing
                          curarg = 1;
                          curarg++;
                          curarg++;
                          curarg++;
                          // End argument processing
                          setModuleName("ast");
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var obj4043 = Grace_allocObject(null, "new(3)");
                          obj4043.definitionModule = "ast";
                          obj4043.definitionLine = 508;
                          var inho4043 = inheritingObject;
                          while (inho4043.superobj) inho4043 = inho4043.superobj;
                          inho4043.superobj = obj4043;
                          obj4043.data = inheritingObject.data;
                          if (inheritingObject.hasOwnProperty('_value'))
                            obj4043._value = inheritingObject._value;
                          obj4043.outer = this;
                          var reader_ast_outer4044 = function() {
                            return this.outer;
                          };
                          obj4043.methods["outer"] = reader_ast_outer4044;
                          var obj_init_4043 = function() {
                            var origSuperDepth = superDepth;
                            superDepth = obj4043;
                            var func4045 = function(argcv) {    // method isSimple
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              setModuleName("ast");
                              // isSimple is a simple accessor - elide try ... catch
                              setLineNumber(514);    // compilenode identifier
                              return GraceFalse;
                            };
                            func4045.paramCounts = [0];
                            obj4043.methods["isSimple"] = func4045;
                            func4045.definitionLine = 514;
                            func4045.definitionModule = "ast";
                            var func4046 = function(argcv) {    // method matchee
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              setModuleName("ast");
                              setLineNumber(515);    // compilenode member
                              // call case 4: self request
                              onSelf = true;
                              var call4048 = callmethodChecked(this, "value", []);
                              return call4048;
                            };
                            func4046.paramCounts = [0];
                            obj4043.methods["matchee"] = func4046;
                            func4046.definitionLine = 515;
                            func4046.definitionModule = "ast";
                            var func4049 = function(argcv) {    // method accept(_)from(_)
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              var var_visitor = arguments[curarg];
                              curarg++;
                              var var_as = arguments[curarg];
                              curarg++;
                              // Start argument checking
                              curarg = 1;
                              setLineNumber(516);    // compilenode identifier
                              if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                  throw new GraceExceptionPacket(TypeErrorObject,
                                      new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                          callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                              curarg++;
                              curarg++;
                              // End argument checking
                              setModuleName("ast");
                              var if4050 = GraceDone;
                              setLineNumber(517);    // compilenode identifier
                              // call case 6: other requests
                              var call4052 = callmethodChecked(var_visitor, "visitMatchCase(1)up(1)", [1, 1], this, var_as);
                              if (Grace_isTrue(call4052)) {
                                setLineNumber(518);    // compilenode identifier
                                // call case 6: other requests
                                var call4054 = callmethodChecked(var_as, "extend(1)", [1], this);
                                var var_newChain = call4054;
                                setLineNumber(519);    // compilenode identifier
                                // call case 6: other requests
                                // call case 4: self request
                                onSelf = true;
                                var call4057 = callmethodChecked(this, "value", []);
                                var call4058 = callmethodChecked(call4057, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                setLineNumber(520);    // compilenode member
                                // call case 4: self request
                                onSelf = true;
                                var call4061 = callmethodChecked(this, "cases", []);
                                var block4062 = new GraceBlock(this, 520, 1);
                                setLineNumber(1);    // compilenode identifier
                                block4062.real = function(var_mx) {
                                  setLineNumber(521);    // compilenode identifier
                                  // call case 6: other requests
                                  var call4064 = callmethodChecked(var_mx, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                  return call4064;
                                };
                                // call case 5: prelude request
                                var call4065 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call4061, block4062);
                                var if4066 = GraceDone;
                                setLineNumber(523);    // compilenode member
                                // call case 4: self request
                                onSelf = true;
                                var call4068 = callmethodChecked(this, "elsecase", []);
                                var opresult4071 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call4068);
                                if (Grace_isTrue(opresult4071)) {
                                  setLineNumber(524);    // compilenode identifier
                                  // call case 6: other requests
                                  // call case 4: self request
                                  onSelf = true;
                                  var call4074 = callmethodChecked(this, "elsecase", []);
                                  var call4075 = callmethodChecked(call4074, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                  if4066 = call4075;
                                }
                                if4050 = if4066;
                              }
                              return if4050;
                            };
                            func4049.paramTypes = [];
                            func4049.paramTypes.push([]);
                            func4049.paramTypes.push([]);
                            func4049.paramCounts = [1, 1];
                            obj4043.methods["accept(1)from(1)"] = func4049;
                            func4049.definitionLine = 516;
                            func4049.definitionModule = "ast";
                            var func4076 = function(argcv) {    // method map(_)ancestors(_)
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              var var_blk = arguments[curarg];
                              curarg++;
                              var var_as = arguments[curarg];
                              curarg++;
                              setModuleName("ast");
                              setLineNumber(529);    // compilenode member
                              // call case 4: self request
                              onSelf = true;
                              var call4078 = callmethodChecked(this, "shallowCopy", []);
                              var var_n = call4078;
                              setLineNumber(530);    // compilenode identifier
                              // call case 6: other requests
                              var call4080 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                              var var_newChain = call4080;
                              setLineNumber(531);    // compilenode identifier
                              // call case 6: other requests
                              // call case 4: self request
                              onSelf = true;
                              var call4084 = callmethodChecked(this, "value", []);
                              var call4085 = callmethodChecked(call4084, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
                              // call case 6: other requests
                              var call4086 = callmethodChecked(var_n, "value:=(1)", [1], call4085);
                              setLineNumber(532);    // compilenode member
                              // call case 4: self request
                              onSelf = true;
                              var call4090 = callmethodChecked(this, "cases", []);
                              // call case 6: other requests
                              // call case 6: other requests
                              // call case 3: self.outer request
                              var call4093 = callmethodChecked(superDepth, "outer", [0]);
                              var call4094 = callmethodChecked(call4093, "outer", []);
                              onSelf = true;
                              var call4095 = callmethodChecked(call4094, "listMap(2)ancestors(1)", [2, 1], call4090, var_blk, var_newChain);
                              // call case 6: other requests
                              var call4096 = callmethodChecked(var_n, "cases:=(1)", [1], call4095);
                              setLineNumber(533);    // compilenode member
                              // call case 4: self request
                              onSelf = true;
                              var call4100 = callmethodChecked(this, "elsecase", []);
                              // call case 6: other requests
                              // call case 6: other requests
                              // call case 3: self.outer request
                              var call4103 = callmethodChecked(superDepth, "outer", [0]);
                              var call4104 = callmethodChecked(call4103, "outer", []);
                              onSelf = true;
                              var call4105 = callmethodChecked(call4104, "maybeMap(2)ancestors(1)", [2, 1], call4100, var_blk, var_newChain);
                              // call case 6: other requests
                              var call4106 = callmethodChecked(var_n, "elsecase:=(1)", [1], call4105);
                              setLineNumber(534);    // compilenode identifier
                              // call case 6: other requests
                              var call4108 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                              return call4108;
                            };
                            func4076.paramCounts = [1, 1];
                            obj4043.methods["map(1)ancestors(1)"] = func4076;
                            func4076.definitionLine = 528;
                            func4076.definitionModule = "ast";
                            var func4109 = function(argcv) {    // method pretty(_)
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              var var_depth = arguments[curarg];
                              curarg++;
                              setModuleName("ast");
                              setLineNumber(537);    // compilenode string
                              var string4110 = new GraceString("");
                              var var_spc = string4110;
                              setLineNumber(538);    // compilenode num
                              var opresult4114 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                              var block4115 = new GraceBlock(this, 538, 1);
                              setLineNumber(1);    // compilenode identifier
                              block4115.real = function(var_i) {
                                setLineNumber(539);    // compilenode string
                                var string4116 = new GraceString("  ");
                                var opresult4119 = callmethodChecked(var_spc, "++(1)", [1], string4116);
                                var_spc = opresult4119;
                                return GraceDone;
                              };
                              // call case 5: prelude request
                              var call4120 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult4114, block4115);
                              setLineNumber(541);    // compilenode string
                              var string4121 = new GraceString("\n");
                              // call case 1: super request
                              var call4124 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                              var opresult4126 = callmethodChecked(call4124, "++(1)", [1], string4121);
                              var var_s = opresult4126;
                              setLineNumber(542);    // compilenode identifier
                              var opresult4130 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                              // call case 6: other requests
                              // call case 4: self request
                              onSelf = true;
                              var call4132 = callmethodChecked(this, "matchee", []);
                              var call4133 = callmethodChecked(call4132, "pretty(1)", [1], opresult4130);
                              var opresult4137 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                              var opresult4139 = callmethodChecked(opresult4137, "++(1)", [1], call4133);
                              var_s = opresult4139;
                              setLineNumber(543);    // compilenode member
                              // call case 4: self request
                              onSelf = true;
                              var call4142 = callmethodChecked(this, "cases", []);
                              var block4143 = new GraceBlock(this, 543, 1);
                              setLineNumber(1);    // compilenode identifier
                              block4143.real = function(var_mx) {
                                setLineNumber(544);    // compilenode string
                                var string4144 = new GraceString("");
                                var opresult4149 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                // call case 6: other requests
                                var call4150 = callmethodChecked(var_mx, "pretty(1)", [1], opresult4149);
                                var string4152 = new GraceString("  ");
                                var string4155 = new GraceString("Case:\n");
                                var string4158 = new GraceString("\n");
                                var opresult4160 = callmethodChecked(string4158, "++(1)", [1], var_spc);
                                var opresult4162 = callmethodChecked(opresult4160, "++(1)", [1], string4155);
                                var opresult4164 = callmethodChecked(opresult4162, "++(1)", [1], var_spc);
                                var opresult4166 = callmethodChecked(opresult4164, "++(1)", [1], string4152);
                                var opresult4168 = callmethodChecked(opresult4166, "++(1)", [1], call4150);
                                var opresult4170 = callmethodChecked(opresult4168, "++(1)", [1], string4144);
                                var opresult4173 = callmethodChecked(var_s, "++(1)", [1], opresult4170);
                                var_s = opresult4173;
                                return GraceDone;
                              };
                              // call case 5: prelude request
                              var call4174 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call4142, block4143);
                              var if4175 = GraceDone;
                              setLineNumber(546);    // compilenode member
                              // call case 4: self request
                              onSelf = true;
                              var call4177 = callmethodChecked(this, "elsecase", []);
                              var opresult4180 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call4177);
                              if (Grace_isTrue(opresult4180)) {
                                setLineNumber(547);    // compilenode string
                                var string4181 = new GraceString("");
                                var opresult4186 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                // call case 6: other requests
                                // call case 4: self request
                                onSelf = true;
                                var call4188 = callmethodChecked(this, "elsecase", []);
                                var call4189 = callmethodChecked(call4188, "pretty(1)", [1], opresult4186);
                                var string4191 = new GraceString("  ");
                                var string4194 = new GraceString("Else:\n");
                                var string4197 = new GraceString("\n");
                                var opresult4199 = callmethodChecked(string4197, "++(1)", [1], var_spc);
                                var opresult4201 = callmethodChecked(opresult4199, "++(1)", [1], string4194);
                                var opresult4203 = callmethodChecked(opresult4201, "++(1)", [1], var_spc);
                                var opresult4205 = callmethodChecked(opresult4203, "++(1)", [1], string4191);
                                var opresult4207 = callmethodChecked(opresult4205, "++(1)", [1], call4189);
                                var opresult4209 = callmethodChecked(opresult4207, "++(1)", [1], string4181);
                                var opresult4212 = callmethodChecked(var_s, "++(1)", [1], opresult4209);
                                var_s = opresult4212;
                                if4175 = GraceDone;
                              }
                              setLineNumber(549);    // compilenode identifier
                              return var_s;
                            };
                            func4109.paramCounts = [1];
                            obj4043.methods["pretty(1)"] = func4109;
                            func4109.definitionLine = 536;
                            func4109.definitionModule = "ast";
                            var func4213 = function(argcv) {    // method toGrace(_)
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              var var_depth = arguments[curarg];
                              curarg++;
                              // Start argument checking
                              curarg = 1;
                              setLineNumber(551);    // compilenode identifier
                              if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                  throw new GraceExceptionPacket(TypeErrorObject,
                                      new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                          callmethod(var_Number, "asString", [0])._value + "."));
                              curarg++;
                              // End argument checking
                              setModuleName("ast");
                              setLineNumber(552);    // compilenode string
                              var string4214 = new GraceString("");
                              var var_spc = string4214;
                              setLineNumber(553);    // compilenode identifier
                              var diff4218 = callmethodChecked(var_depth, "-(1)", [1], new GraceNum(1));
                              var opresult4221 = callmethodChecked(new GraceNum(0), "..(1)", [1], diff4218);
                              var block4222 = new GraceBlock(this, 553, 1);
                              setLineNumber(1);    // compilenode identifier
                              block4222.real = function(var_i) {
                                setLineNumber(554);    // compilenode string
                                var string4223 = new GraceString("    ");
                                var opresult4226 = callmethodChecked(var_spc, "++(1)", [1], string4223);
                                var_spc = opresult4226;
                                return GraceDone;
                              };
                              // call case 5: prelude request
                              var call4227 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult4221, block4222);
                              setLineNumber(556);    // compilenode string
                              var string4228 = new GraceString(")");
                              // call case 6: other requests
                              // call case 4: self request
                              onSelf = true;
                              var call4232 = callmethodChecked(this, "value", []);
                              var call4233 = callmethodChecked(call4232, "toGrace(1)", [1], new GraceNum(0));
                              var string4235 = new GraceString("match(");
                              var opresult4237 = callmethodChecked(string4235, "++(1)", [1], call4233);
                              var opresult4239 = callmethodChecked(opresult4237, "++(1)", [1], string4228);
                              var var_s = opresult4239;
                              setLineNumber(557);    // compilenode member
                              // call case 4: self request
                              onSelf = true;
                              var call4242 = callmethodChecked(this, "cases", []);
                              var block4243 = new GraceBlock(this, 557, 1);
                              setLineNumber(1);    // compilenode identifier
                              block4243.real = function(var_case) {
                                setLineNumber(558);    // compilenode identifier
                                var opresult4247 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                // call case 6: other requests
                                var call4248 = callmethodChecked(var_case, "toGrace(1)", [1], opresult4247);
                                var string4250 = new GraceString("case ");
                                var string4252 = new GraceString("    ");
                                var string4255 = new GraceString("\n");
                                var opresult4258 = callmethodChecked(var_s, "++(1)", [1], string4255);
                                var opresult4260 = callmethodChecked(opresult4258, "++(1)", [1], var_spc);
                                var opresult4262 = callmethodChecked(opresult4260, "++(1)", [1], string4252);
                                var opresult4264 = callmethodChecked(opresult4262, "++(1)", [1], string4250);
                                var opresult4266 = callmethodChecked(opresult4264, "++(1)", [1], call4248);
                                var_s = opresult4266;
                                return GraceDone;
                              };
                              // call case 5: prelude request
                              var call4267 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call4242, block4243);
                              var if4268 = GraceDone;
                              setLineNumber(560);    // compilenode member
                              // call case 4: self request
                              onSelf = true;
                              var call4270 = callmethodChecked(this, "elsecase", []);
                              var opresult4273 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call4270);
                              if (Grace_isTrue(opresult4273)) {
                                setLineNumber(561);    // compilenode identifier
                                var opresult4277 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                // call case 6: other requests
                                // call case 4: self request
                                onSelf = true;
                                var call4279 = callmethodChecked(this, "elsecase", []);
                                var call4280 = callmethodChecked(call4279, "toGrace(1)", [1], opresult4277);
                                var string4282 = new GraceString("else ");
                                var string4284 = new GraceString("    ");
                                var string4287 = new GraceString("\n");
                                var opresult4290 = callmethodChecked(var_s, "++(1)", [1], string4287);
                                var opresult4292 = callmethodChecked(opresult4290, "++(1)", [1], var_spc);
                                var opresult4294 = callmethodChecked(opresult4292, "++(1)", [1], string4284);
                                var opresult4296 = callmethodChecked(opresult4294, "++(1)", [1], string4282);
                                var opresult4298 = callmethodChecked(opresult4296, "++(1)", [1], call4280);
                                var_s = opresult4298;
                                if4268 = GraceDone;
                              }
                              setLineNumber(563);    // return value
                              if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], var_s)))
                                  throw new GraceExceptionPacket(TypeErrorObject,
                                      new GraceString("result of method toGrace(_) does not have " + 
                                          callmethod(var_String, "asString", [0])._value + "."));
                              return var_s;
                            };
                            func4213.paramTypes = [];
                            func4213.paramTypes.push([type_Number, "depth"]);
                            func4213.paramCounts = [1];
                            obj4043.methods["toGrace(1)"] = func4213;
                            func4213.definitionLine = 551;
                            func4213.definitionModule = "ast";
                            var func4299 = function(argcv) {    // method shallowCopy
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              setModuleName("ast");
                              setLineNumber(566);    // compilenode identifier
                              // call case 6: other requests
                              // call case 6: other requests
                              var call4302 = callmethodChecked(var_matchCaseNode, "new(3)", [3], var_nullNode, var_emptySeq, GraceFalse);
                              var call4303 = callmethodChecked(call4302, "shallowCopyFieldsFrom(1)", [1], this);
                              return call4303;
                            };
                            func4299.paramCounts = [0];
                            obj4043.methods["shallowCopy"] = func4299;
                            func4299.definitionLine = 565;
                            func4299.definitionModule = "ast";
                            setLineNumber(509);    // compilenode identifier
                            // call case 6: other requests
                            // call case 6: other requests
                            // call case 3: self.outer request
                            var call4307 = callmethodChecked(superDepth, "outer", [0]);
                            var call4308 = callmethodChecked(call4307, "outer", []);
                            var call4309 = callmethodChecked(call4308, "baseNode$object(1)", [0, 1], this);
                            obj4043.superobj = call4309;
                            if (call4309.data) obj4043.data = call4309.data;
                            if (call4309.hasOwnProperty('_value'))
                                obj4043._value = call4309._value;
                            setLineNumber(510);    // compilenode string
                            var string4310 = new GraceString("matchcase");
                            obj4043.data["kind"] = string4310;
                            var reader_ast_kind4311 = function() {
                              return this.data["kind"];
                            };
                            reader_ast_kind4311.def = true;
                            obj4043.methods["kind"] = reader_ast_kind4311;
                            setLineNumber(511);    // compilenode identifier
                            obj4043.data["value"] = var_matchee__39__;
                            var reader_ast_value4312 = function() {
                              return this.data["value"];
                            };
                            obj4043.methods["value"] = reader_ast_value4312;
                            obj4043.data["value"] = var_matchee__39__;
                            var writer_ast_value4312 = function(argcv, o) {
                              this.data["value"] = o;
                              return GraceDone;
                            };
                            obj4043.methods["value:=(1)"] = writer_ast_value4312;
                            obj4043.mutable = true;
                            setLineNumber(512);    // compilenode identifier
                            obj4043.data["cases"] = var_cases__39__;
                            var reader_ast_cases4313 = function() {
                              return this.data["cases"];
                            };
                            obj4043.methods["cases"] = reader_ast_cases4313;
                            obj4043.data["cases"] = var_cases__39__;
                            var writer_ast_cases4313 = function(argcv, o) {
                              this.data["cases"] = o;
                              return GraceDone;
                            };
                            obj4043.methods["cases:=(1)"] = writer_ast_cases4313;
                            obj4043.mutable = true;
                            setLineNumber(513);    // compilenode identifier
                            obj4043.data["elsecase"] = var_elsecase__39__;
                            var reader_ast_elsecase4314 = function() {
                              return this.data["elsecase"];
                            };
                            obj4043.methods["elsecase"] = reader_ast_elsecase4314;
                            obj4043.data["elsecase"] = var_elsecase__39__;
                            var writer_ast_elsecase4314 = function(argcv, o) {
                              this.data["elsecase"] = o;
                              return GraceDone;
                            };
                            obj4043.methods["elsecase:=(1)"] = writer_ast_elsecase4314;
                            obj4043.mutable = true;
                            superDepth = origSuperDepth;
                          };
                          obj_init_4043.apply(inheritingObject, []);
                          return obj4043;
                          };
                          obj3767.methods["new(3)$object(1)"] = func4042;
                        superDepth = origSuperDepth;
                      };
                      obj_init_3767.apply(obj3767, []);
                      var var_matchCaseNode = obj3767;
                      setLineNumber(1);    // compilenode method
                      var func4315 = function(argcv) {    // method matchCaseNode
                        var returnTarget = invocationCount;
                        invocationCount++;
                        var curarg = 1;
                        setModuleName("ast");
                        // matchCaseNode is a simple accessor - elide try ... catch
                        setLineNumber(507);    // compilenode identifier
                        return var_matchCaseNode;
                      };
                      func4315.paramCounts = [0];
                      this.methods["matchCaseNode"] = func4315;
                      func4315.definitionLine = 1;
                      func4315.definitionModule = "ast";
                      this.methods["matchCaseNode"].debug = "def";
                      setLineNumber(570);    // compilenode object
                      var obj4316 = Grace_allocObject(GraceObject, "methodTypeNode");
                      obj4316.definitionModule = "ast";
                      obj4316.definitionLine = 570;
                      obj4316.outer = this;
                      var reader_ast_outer4317 = function() {
                        return this.outer;
                      };
                      obj4316.methods["outer"] = reader_ast_outer4317;
                      var obj_init_4316 = function() {
                        var origSuperDepth = superDepth;
                        superDepth = obj4316;
                        var func4318 = function(argcv) {    // method new(_,_)
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          var var_signature__39__ = arguments[curarg];
                          curarg++;
                          var var_rtype__39__ = arguments[curarg];
                          curarg++;
                          setModuleName("ast");
                          setLineNumber(571);    // compilenode object
                          var obj4319 = Grace_allocObject(null, "methodTypeNode.new(_,_)");
                          obj4319.definitionModule = "ast";
                          obj4319.definitionLine = 571;
                          obj4319.outer = this;
                          var reader_ast_outer4320 = function() {
                            return this.outer;
                          };
                          obj4319.methods["outer"] = reader_ast_outer4320;
                          var obj_init_4319 = function() {
                            var origSuperDepth = superDepth;
                            superDepth = obj4319;
                            var func4321 = function(argcv) {    // method nameString
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              setModuleName("ast");
                              setLineNumber(584);    // compilenode block
                              var block4323 = new GraceBlock(this, 584, 2);
                              setLineNumber(1);    // compilenode identifier
                              block4323.real = function(var_acc, var_each) {
                                setLineNumber(584);    // compilenode member
                                // call case 6: other requests
                                var call4325 = callmethodChecked(var_each, "nameString", []);
                                var opresult4328 = callmethodChecked(var_acc, "++(1)", [1], call4325);
                                return opresult4328;
                              };
                              setLineNumber(585);    // compilenode string
                              var string4329 = new GraceString("");
                              // call case 6: other requests
                              setLineNumber(584);    // compilenode member
                              // call case 4: self request
                              onSelf = true;
                              var call4331 = callmethodChecked(this, "signature", []);
                              var call4332 = callmethodChecked(call4331, "fold(1)startingWith(1)", [1, 1], block4323, string4329);
                              return call4332;
                            };
                            func4321.paramCounts = [0];
                            obj4319.methods["nameString"] = func4321;
                            func4321.definitionLine = 583;
                            func4321.definitionModule = "ast";
                            var func4333 = function(argcv) {    // method value
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              setModuleName("ast");
                              var if4334 = GraceDone;
                              setLineNumber(588);    // compilenode member
                              // call case 4: self request
                              onSelf = true;
                              var call4336 = callmethodChecked(this, "cachedIdentifier", []);
                              var opresult4339 = callmethodChecked(var_uninitialized, "==(1)", [1], call4336);
                              if (Grace_isTrue(opresult4339)) {
                                setLineNumber(589);    // compilenode member
                                // call case 4: self request
                                onSelf = true;
                                var call4343 = callmethodChecked(this, "nameString", []);
                                // call case 6: other requests
                                var call4344 = callmethodChecked(var_identifierNode, "new(2)", [2], call4343, GraceFalse);
                                // call case 4: self request
                                onSelf = true;
                                var call4345 = callmethodChecked(this, "cachedIdentifier:=(1)", [1], call4344);
                                setLineNumber(590);    // compilenode member
                                // call case 6: other requests
                                // call case 6: other requests
                                // call case 4: self request
                                onSelf = true;
                                var call4350 = callmethodChecked(this, "signature", []);
                                var call4351 = callmethodChecked(call4350, "first", []);
                                var call4352 = callmethodChecked(call4351, "line", []);
                                // call case 6: other requests
                                // call case 4: self request
                                onSelf = true;
                                var call4354 = callmethodChecked(this, "cachedIdentifier", []);
                                var call4355 = callmethodChecked(call4354, "line:=(1)", [1], call4352);
                                setLineNumber(591);    // compilenode member
                                // call case 6: other requests
                                // call case 6: other requests
                                // call case 4: self request
                                onSelf = true;
                                var call4360 = callmethodChecked(this, "signature", []);
                                var call4361 = callmethodChecked(call4360, "first", []);
                                var call4362 = callmethodChecked(call4361, "linePos", []);
                                // call case 6: other requests
                                // call case 4: self request
                                onSelf = true;
                                var call4364 = callmethodChecked(this, "cachedIdentifier", []);
                                var call4365 = callmethodChecked(call4364, "linePos:=(1)", [1], call4362);
                                setLineNumber(592);    // compilenode identifier
                                // call case 6: other requests
                                // call case 4: self request
                                onSelf = true;
                                var call4368 = callmethodChecked(this, "cachedIdentifier", []);
                                var call4369 = callmethodChecked(call4368, "isBindingOccurrence:=(1)", [1], GraceTrue);
                                if4334 = call4369;
                              }
                              setLineNumber(594);    // compilenode member
                              // call case 4: self request
                              onSelf = true;
                              var call4371 = callmethodChecked(this, "cachedIdentifier", []);
                              return call4371;
                            };
                            func4333.paramCounts = [0];
                            obj4319.methods["value"] = func4333;
                            func4333.definitionLine = 587;
                            func4333.definitionModule = "ast";
                            var func4372 = function(argcv) {    // method isExecutable
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              setModuleName("ast");
                              // isExecutable is a simple accessor - elide try ... catch
                              setLineNumber(596);    // compilenode identifier
                              return GraceFalse;
                            };
                            func4372.paramCounts = [0];
                            obj4319.methods["isExecutable"] = func4372;
                            func4372.definitionLine = 596;
                            func4372.definitionModule = "ast";
                            var func4373 = function(argcv) {    // method parametersDo(_)
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              var var_b = arguments[curarg];
                              curarg++;
                              setModuleName("ast");
                              setLineNumber(598);    // compilenode block
                              var block4375 = new GraceBlock(this, 598, 1);
                              setLineNumber(1);    // compilenode identifier
                              block4375.real = function(var_part) {
                                setLineNumber(599);    // compilenode block
                                var block4377 = new GraceBlock(this, 599, 1);
                                setLineNumber(1);    // compilenode identifier
                                block4377.real = function(var_each) {
                                  setLineNumber(599);    // compilenode identifier
                                  // call case 6: other requests
                                  var call4379 = callmethodChecked(var_b, "apply(1)", [1], var_each);
                                  return call4379;
                                };
                                // call case 6: other requests
                                // call case 6: other requests
                                var call4381 = callmethodChecked(var_part, "params", []);
                                var call4382 = callmethodChecked(call4381, "do(1)", [1], block4377);
                                return call4382;
                              };
                              // call case 6: other requests
                              setLineNumber(598);    // compilenode member
                              // call case 4: self request
                              onSelf = true;
                              var call4384 = callmethodChecked(this, "signature", []);
                              var call4385 = callmethodChecked(call4384, "do(1)", [1], block4375);
                              return call4385;
                            };
                            func4373.paramCounts = [1];
                            obj4319.methods["parametersDo(1)"] = func4373;
                            func4373.definitionLine = 597;
                            func4373.definitionModule = "ast";
                            var func4386 = function(argcv) {    // method scope:=(_)
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              var var_st = arguments[curarg];
                              curarg++;
                              setModuleName("ast");
                              setLineNumber(605);    // compilenode identifier
                              // call case 4: self request
                              onSelf = true;
                              var call4388 = callmethodChecked(this, "symbolTable:=(1)", [1], var_st);
                              setLineNumber(606);    // compilenode identifier
                              // call case 6: other requests
                              var call4390 = callmethodChecked(var_st, "node:=(1)", [1], this);
                              return call4390;
                            };
                            func4386.paramCounts = [1];
                            obj4319.methods["scope:=(1)"] = func4386;
                            func4386.definitionLine = 602;
                            func4386.definitionModule = "ast";
                            var func4391 = function(argcv) {    // method declarationKindWithAncestors(_)
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              var var_as = arguments[curarg];
                              curarg++;
                              setModuleName("ast");
                              setLineNumber(608);    // compilenode member
                              // call case 6: other requests
                              var call4393 = callmethodChecked(var_k, "typedec", []);
                              return call4393;
                            };
                            func4391.paramCounts = [1];
                            obj4319.methods["declarationKindWithAncestors(1)"] = func4391;
                            func4391.definitionLine = 608;
                            func4391.definitionModule = "ast";
                            var func4394 = function(argcv) {    // method accept(_)from(_)
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              var var_visitor = arguments[curarg];
                              curarg++;
                              var var_as = arguments[curarg];
                              curarg++;
                              // Start argument checking
                              curarg = 1;
                              setLineNumber(609);    // compilenode identifier
                              if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                  throw new GraceExceptionPacket(TypeErrorObject,
                                      new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                          callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                              curarg++;
                              curarg++;
                              // End argument checking
                              setModuleName("ast");
                              var if4395 = GraceDone;
                              setLineNumber(610);    // compilenode identifier
                              // call case 6: other requests
                              var call4397 = callmethodChecked(var_visitor, "visitMethodType(1)up(1)", [1, 1], this, var_as);
                              if (Grace_isTrue(call4397)) {
                                setLineNumber(611);    // compilenode identifier
                                // call case 6: other requests
                                var call4399 = callmethodChecked(var_as, "extend(1)", [1], this);
                                var var_newChain = call4399;
                                var if4400 = GraceDone;
                                setLineNumber(612);    // compilenode member
                                // call case 4: self request
                                onSelf = true;
                                var call4402 = callmethodChecked(this, "typeParams", []);
                                var opresult4405 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call4402);
                                if (Grace_isTrue(opresult4405)) {
                                  setLineNumber(613);    // compilenode identifier
                                  // call case 6: other requests
                                  // call case 4: self request
                                  onSelf = true;
                                  var call4408 = callmethodChecked(this, "typeParams", []);
                                  var call4409 = callmethodChecked(call4408, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                  if4400 = call4409;
                                }
                                var if4410 = GraceDone;
                                setLineNumber(615);    // compilenode member
                                // call case 4: self request
                                onSelf = true;
                                var call4412 = callmethodChecked(this, "rtype", []);
                                var opresult4415 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call4412);
                                if (Grace_isTrue(opresult4415)) {
                                  setLineNumber(616);    // compilenode identifier
                                  // call case 6: other requests
                                  // call case 4: self request
                                  onSelf = true;
                                  var call4418 = callmethodChecked(this, "rtype", []);
                                  var call4419 = callmethodChecked(call4418, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                  if4410 = call4419;
                                }
                                setLineNumber(618);    // compilenode member
                                // call case 4: self request
                                onSelf = true;
                                var call4422 = callmethodChecked(this, "signature", []);
                                var block4423 = new GraceBlock(this, 618, 1);
                                setLineNumber(1);    // compilenode identifier
                                block4423.real = function(var_part) {
                                  setLineNumber(619);    // compilenode identifier
                                  // call case 6: other requests
                                  var call4425 = callmethodChecked(var_part, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                  return call4425;
                                };
                                // call case 5: prelude request
                                var call4426 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call4422, block4423);
                                if4395 = call4426;
                              }
                              return if4395;
                            };
                            func4394.paramTypes = [];
                            func4394.paramTypes.push([]);
                            func4394.paramTypes.push([]);
                            func4394.paramCounts = [1, 1];
                            obj4319.methods["accept(1)from(1)"] = func4394;
                            func4394.definitionLine = 609;
                            func4394.definitionModule = "ast";
                            var func4427 = function(argcv) {    // method map(_)ancestors(_)
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              var var_blk = arguments[curarg];
                              curarg++;
                              var var_as = arguments[curarg];
                              curarg++;
                              setModuleName("ast");
                              setLineNumber(624);    // compilenode member
                              // call case 4: self request
                              onSelf = true;
                              var call4429 = callmethodChecked(this, "shallowCopy", []);
                              var var_n = call4429;
                              setLineNumber(625);    // compilenode identifier
                              // call case 6: other requests
                              var call4431 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                              var var_newChain = call4431;
                              setLineNumber(626);    // compilenode member
                              // call case 4: self request
                              onSelf = true;
                              var call4435 = callmethodChecked(this, "rtype", []);
                              // call case 6: other requests
                              // call case 6: other requests
                              // call case 3: self.outer request
                              var call4438 = callmethodChecked(superDepth, "outer", [0]);
                              var call4439 = callmethodChecked(call4438, "outer", []);
                              onSelf = true;
                              var call4440 = callmethodChecked(call4439, "maybeMap(2)ancestors(1)", [2, 1], call4435, var_blk, var_newChain);
                              // call case 6: other requests
                              var call4441 = callmethodChecked(var_n, "rtype:=(1)", [1], call4440);
                              setLineNumber(627);    // compilenode member
                              // call case 4: self request
                              onSelf = true;
                              var call4445 = callmethodChecked(this, "signature", []);
                              // call case 6: other requests
                              // call case 6: other requests
                              // call case 3: self.outer request
                              var call4448 = callmethodChecked(superDepth, "outer", [0]);
                              var call4449 = callmethodChecked(call4448, "outer", []);
                              onSelf = true;
                              var call4450 = callmethodChecked(call4449, "listMap(2)ancestors(1)", [2, 1], call4445, var_blk, var_newChain);
                              // call case 6: other requests
                              var call4451 = callmethodChecked(var_n, "signature:=(1)", [1], call4450);
                              setLineNumber(628);    // compilenode member
                              // call case 4: self request
                              onSelf = true;
                              var call4455 = callmethodChecked(this, "typeParams", []);
                              // call case 6: other requests
                              // call case 6: other requests
                              // call case 3: self.outer request
                              var call4458 = callmethodChecked(superDepth, "outer", [0]);
                              var call4459 = callmethodChecked(call4458, "outer", []);
                              onSelf = true;
                              var call4460 = callmethodChecked(call4459, "maybeMap(2)ancestors(1)", [2, 1], call4455, var_blk, var_newChain);
                              // call case 6: other requests
                              var call4461 = callmethodChecked(var_n, "typeParams:=(1)", [1], call4460);
                              setLineNumber(629);    // compilenode identifier
                              // call case 6: other requests
                              var call4463 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                              return call4463;
                            };
                            func4427.paramCounts = [1, 1];
                            obj4319.methods["map(1)ancestors(1)"] = func4427;
                            func4427.definitionLine = 623;
                            func4427.definitionModule = "ast";
                            var func4464 = function(argcv) {    // method pretty(_)
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              var var_depth = arguments[curarg];
                              curarg++;
                              setModuleName("ast");
                              setLineNumber(632);    // compilenode string
                              var string4465 = new GraceString("");
                              var var_spc = string4465;
                              setLineNumber(633);    // compilenode num
                              var opresult4469 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                              var block4470 = new GraceBlock(this, 633, 1);
                              setLineNumber(1);    // compilenode identifier
                              block4470.real = function(var_i) {
                                setLineNumber(634);    // compilenode string
                                var string4471 = new GraceString("  ");
                                var opresult4474 = callmethodChecked(var_spc, "++(1)", [1], string4471);
                                var_spc = opresult4474;
                                return GraceDone;
                              };
                              // call case 5: prelude request
                              var call4475 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult4469, block4470);
                              setLineNumber(636);    // compilenode string
                              var string4476 = new GraceString("\n");
                              // call case 1: super request
                              var call4479 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                              var opresult4481 = callmethodChecked(call4479, "++(1)", [1], string4476);
                              var var_s = opresult4481;
                              setLineNumber(637);    // compilenode string
                              var string4482 = new GraceString("\n");
                              // call case 4: self request
                              onSelf = true;
                              var call4485 = callmethodChecked(this, "value", []);
                              var string4487 = new GraceString("Name: ");
                              var string4490 = new GraceString("");
                              var string4493 = new GraceString("");
                              var opresult4495 = callmethodChecked(string4493, "++(1)", [1], var_s);
                              var opresult4497 = callmethodChecked(opresult4495, "++(1)", [1], string4490);
                              var opresult4499 = callmethodChecked(opresult4497, "++(1)", [1], var_spc);
                              var opresult4501 = callmethodChecked(opresult4499, "++(1)", [1], string4487);
                              var opresult4503 = callmethodChecked(opresult4501, "++(1)", [1], call4485);
                              var opresult4505 = callmethodChecked(opresult4503, "++(1)", [1], string4482);
                              var_s = opresult4505;
                              var if4506 = GraceDone;
                              setLineNumber(638);    // compilenode member
                              // call case 4: self request
                              onSelf = true;
                              var call4508 = callmethodChecked(this, "rtype", []);
                              var opresult4511 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call4508);
                              if (Grace_isTrue(opresult4511)) {
                                setLineNumber(639);    // compilenode string
                                var string4512 = new GraceString("");
                                var opresult4517 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                // call case 6: other requests
                                // call case 4: self request
                                onSelf = true;
                                var call4519 = callmethodChecked(this, "rtype", []);
                                var call4520 = callmethodChecked(call4519, "pretty(1)", [1], opresult4517);
                                var string4522 = new GraceString("");
                                var string4525 = new GraceString("Returns:\n  ");
                                var string4528 = new GraceString("");
                                var string4531 = new GraceString("");
                                var opresult4533 = callmethodChecked(string4531, "++(1)", [1], var_s);
                                var opresult4535 = callmethodChecked(opresult4533, "++(1)", [1], string4528);
                                var opresult4537 = callmethodChecked(opresult4535, "++(1)", [1], var_spc);
                                var opresult4539 = callmethodChecked(opresult4537, "++(1)", [1], string4525);
                                var opresult4541 = callmethodChecked(opresult4539, "++(1)", [1], var_spc);
                                var opresult4543 = callmethodChecked(opresult4541, "++(1)", [1], string4522);
                                var opresult4545 = callmethodChecked(opresult4543, "++(1)", [1], call4520);
                                var opresult4547 = callmethodChecked(opresult4545, "++(1)", [1], string4512);
                                var_s = opresult4547;
                                if4506 = GraceDone;
                              }
                              var if4548 = GraceDone;
                              setLineNumber(641);    // compilenode member
                              // call case 4: self request
                              onSelf = true;
                              var call4550 = callmethodChecked(this, "typeParams", []);
                              var opresult4553 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call4550);
                              if (Grace_isTrue(opresult4553)) {
                                setLineNumber(642);    // compilenode string
                                var string4554 = new GraceString("TypeParams:\n");
                                var string4557 = new GraceString("\n");
                                var string4560 = new GraceString("");
                                var opresult4562 = callmethodChecked(string4560, "++(1)", [1], var_s);
                                var opresult4564 = callmethodChecked(opresult4562, "++(1)", [1], string4557);
                                var opresult4566 = callmethodChecked(opresult4564, "++(1)", [1], var_spc);
                                var opresult4568 = callmethodChecked(opresult4566, "++(1)", [1], string4554);
                                var_s = opresult4568;
                                setLineNumber(643);    // compilenode identifier
                                var opresult4572 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                // call case 6: other requests
                                // call case 4: self request
                                onSelf = true;
                                var call4574 = callmethodChecked(this, "typeParams", []);
                                var call4575 = callmethodChecked(call4574, "pretty(1)", [1], opresult4572);
                                var opresult4578 = callmethodChecked(var_s, "++(1)", [1], call4575);
                                var_s = opresult4578;
                                if4548 = GraceDone;
                              }
                              setLineNumber(645);    // compilenode string
                              var string4579 = new GraceString("Signature:");
                              var string4582 = new GraceString("\n");
                              var string4585 = new GraceString("");
                              var opresult4587 = callmethodChecked(string4585, "++(1)", [1], var_s);
                              var opresult4589 = callmethodChecked(opresult4587, "++(1)", [1], string4582);
                              var opresult4591 = callmethodChecked(opresult4589, "++(1)", [1], var_spc);
                              var opresult4593 = callmethodChecked(opresult4591, "++(1)", [1], string4579);
                              var_s = opresult4593;
                              setLineNumber(646);    // compilenode member
                              // call case 4: self request
                              onSelf = true;
                              var call4596 = callmethodChecked(this, "signature", []);
                              var block4597 = new GraceBlock(this, 646, 1);
                              setLineNumber(1);    // compilenode identifier
                              block4597.real = function(var_part) {
                                setLineNumber(647);    // compilenode string
                                var string4598 = new GraceString("");
                                var opresult4603 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                // call case 6: other requests
                                var call4604 = callmethodChecked(var_part, "pretty(1)", [1], opresult4603);
                                var string4606 = new GraceString("");
                                var string4609 = new GraceString("\n  ");
                                var string4612 = new GraceString("");
                                var opresult4614 = callmethodChecked(string4612, "++(1)", [1], var_s);
                                var opresult4616 = callmethodChecked(opresult4614, "++(1)", [1], string4609);
                                var opresult4618 = callmethodChecked(opresult4616, "++(1)", [1], var_spc);
                                var opresult4620 = callmethodChecked(opresult4618, "++(1)", [1], string4606);
                                var opresult4622 = callmethodChecked(opresult4620, "++(1)", [1], call4604);
                                var opresult4624 = callmethodChecked(opresult4622, "++(1)", [1], string4598);
                                var_s = opresult4624;
                                return GraceDone;
                              };
                              // call case 5: prelude request
                              var call4625 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call4596, block4597);
                              setLineNumber(649);    // compilenode identifier
                              return var_s;
                            };
                            func4464.paramCounts = [1];
                            obj4319.methods["pretty(1)"] = func4464;
                            func4464.definitionLine = 631;
                            func4464.definitionModule = "ast";
                            var func4626 = function(argcv) {    // method toGrace(_)
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              var var_depth = arguments[curarg];
                              curarg++;
                              // Start argument checking
                              curarg = 1;
                              setLineNumber(651);    // compilenode identifier
                              if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                  throw new GraceExceptionPacket(TypeErrorObject,
                                      new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                          callmethod(var_Number, "asString", [0])._value + "."));
                              curarg++;
                              // End argument checking
                              setModuleName("ast");
                              setLineNumber(652);    // compilenode string
                              var string4627 = new GraceString("");
                              var var_s = string4627;
                              setLineNumber(653);    // compilenode block
                              var block4629 = new GraceBlock(this, 653, 1);
                              setLineNumber(1);    // compilenode identifier
                              block4629.real = function(var_part) {
                                setLineNumber(653);    // compilenode identifier
                                var opresult4633 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                // call case 6: other requests
                                var call4634 = callmethodChecked(var_part, "toGrace(1)", [1], opresult4633);
                                var opresult4637 = callmethodChecked(var_s, "++(1)", [1], call4634);
                                var_s = opresult4637;
                                return GraceDone;
                              };
                              // call case 6: other requests
                              // call case 4: self request
                              onSelf = true;
                              var call4639 = callmethodChecked(this, "signature", []);
                              var call4640 = callmethodChecked(call4639, "do(1)", [1], block4629);
                              setLineNumber(654);    // return value
                              if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], var_s)))
                                  throw new GraceExceptionPacket(TypeErrorObject,
                                      new GraceString("result of method toGrace(_) does not have " + 
                                          callmethod(var_String, "asString", [0])._value + "."));
                              return var_s;
                            };
                            func4626.paramTypes = [];
                            func4626.paramTypes.push([type_Number, "depth"]);
                            func4626.paramCounts = [1];
                            obj4319.methods["toGrace(1)"] = func4626;
                            func4626.definitionLine = 651;
                            func4626.definitionModule = "ast";
                            var func4641 = function(argcv) {    // method shallowCopy
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              setModuleName("ast");
                              setLineNumber(657);    // compilenode identifier
                              // call case 6: other requests
                              // call case 4: self request
                              onSelf = true;
                              var call4645 = callmethodChecked(this, "signature", []);
                              // call case 4: self request
                              onSelf = true;
                              var call4647 = callmethodChecked(this, "rtype", []);
                              // call case 6: other requests
                              var call4648 = callmethodChecked(var_methodTypeNode, "new(2)", [2], call4645, call4647);
                              var call4649 = callmethodChecked(call4648, "shallowCopyFieldsFrom(1)", [1], this);
                              return call4649;
                            };
                            func4641.paramCounts = [0];
                            obj4319.methods["shallowCopy"] = func4641;
                            func4641.definitionLine = 656;
                            func4641.definitionModule = "ast";
                            setLineNumber(576);    // compilenode identifier
                            // call case 6: other requests
                            // call case 6: other requests
                            // call case 3: self.outer request
                            var call4653 = callmethodChecked(superDepth, "outer", [0]);
                            var call4654 = callmethodChecked(call4653, "outer", []);
                            var call4655 = callmethodChecked(call4654, "baseNode$object(1)", [0, 1], this);
                            obj4319.superobj = call4655;
                            if (call4655.data) obj4319.data = call4655.data;
                            if (call4655.hasOwnProperty('_value'))
                                obj4319._value = call4655._value;
                            setLineNumber(577);    // compilenode string
                            var string4656 = new GraceString("methodtype");
                            obj4319.data["kind"] = string4656;
                            var reader_ast_kind4657 = function() {
                              return this.data["kind"];
                            };
                            reader_ast_kind4657.def = true;
                            obj4319.methods["kind"] = reader_ast_kind4657;
                            setLineNumber(578);    // compilenode identifier
                            obj4319.data["signature"] = var_signature__39__;
                            var reader_ast_signature4658 = function() {
                              return this.data["signature"];
                            };
                            obj4319.methods["signature"] = reader_ast_signature4658;
                            obj4319.data["signature"] = var_signature__39__;
                            var writer_ast_signature4658 = function(argcv, o) {
                              this.data["signature"] = o;
                              return GraceDone;
                            };
                            obj4319.methods["signature:=(1)"] = writer_ast_signature4658;
                            obj4319.mutable = true;
                            setLineNumber(579);    // compilenode identifier
                            obj4319.data["rtype"] = var_rtype__39__;
                            var reader_ast_rtype4659 = function() {
                              return this.data["rtype"];
                            };
                            obj4319.methods["rtype"] = reader_ast_rtype4659;
                            obj4319.data["rtype"] = var_rtype__39__;
                            var writer_ast_rtype4659 = function(argcv, o) {
                              this.data["rtype"] = o;
                              return GraceDone;
                            };
                            obj4319.methods["rtype:=(1)"] = writer_ast_rtype4659;
                            obj4319.mutable = true;
                            setLineNumber(580);    // compilenode identifier
                            obj4319.data["typeParams"] = GraceFalse;
                            var reader_ast_typeParams4660 = function() {
                              return this.data["typeParams"];
                            };
                            obj4319.methods["typeParams"] = reader_ast_typeParams4660;
                            obj4319.data["typeParams"] = GraceFalse;
                            var writer_ast_typeParams4660 = function(argcv, o) {
                              this.data["typeParams"] = o;
                              return GraceDone;
                            };
                            obj4319.methods["typeParams:=(1)"] = writer_ast_typeParams4660;
                            obj4319.mutable = true;
                            setLineNumber(581);    // compilenode identifier
                            obj4319.data["cachedIdentifier"] = var_uninitialized;
                            var reader_ast_cachedIdentifier4661 = function() {
                              return this.data["cachedIdentifier"];
                            };
                            obj4319.methods["cachedIdentifier"] = reader_ast_cachedIdentifier4661;
                            obj4319.data["cachedIdentifier"] = var_uninitialized;
                            var writer_ast_cachedIdentifier4661 = function(argcv, o) {
                              this.data["cachedIdentifier"] = o;
                              return GraceDone;
                            };
                            obj4319.methods["cachedIdentifier:=(1)"] = writer_ast_cachedIdentifier4661;
                            reader_ast_cachedIdentifier4661.confidential = true;
                            writer_ast_cachedIdentifier4661.confidential = true;
                            obj4319.mutable = true;
                            superDepth = origSuperDepth;
                          };
                          obj_init_4319.apply(obj4319, []);
                          return obj4319;
                        };
                        func4318.paramCounts = [2];
                        obj4316.methods["new(2)"] = func4318;
                        func4318.definitionLine = 571;
                        func4318.definitionModule = "ast";
                          var func4662 = function(argcv) {    // method new(_,_)$object(_)
                            var curarg = 1;
                            var var_signature__39__ = arguments[curarg];
                            curarg++;
                            var var_rtype__39__ = arguments[curarg];
                            curarg++;
                            var inheritingObject = arguments[curarg++];
                            // Start argument processing
                            curarg = 1;
                            curarg++;
                            curarg++;
                            // End argument processing
                            setModuleName("ast");
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var obj4663 = Grace_allocObject(null, "new(2)");
                            obj4663.definitionModule = "ast";
                            obj4663.definitionLine = 571;
                            var inho4663 = inheritingObject;
                            while (inho4663.superobj) inho4663 = inho4663.superobj;
                            inho4663.superobj = obj4663;
                            obj4663.data = inheritingObject.data;
                            if (inheritingObject.hasOwnProperty('_value'))
                              obj4663._value = inheritingObject._value;
                            obj4663.outer = this;
                            var reader_ast_outer4664 = function() {
                              return this.outer;
                            };
                            obj4663.methods["outer"] = reader_ast_outer4664;
                            var obj_init_4663 = function() {
                              var origSuperDepth = superDepth;
                              superDepth = obj4663;
                              var func4665 = function(argcv) {    // method nameString
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                setModuleName("ast");
                                setLineNumber(584);    // compilenode block
                                var block4667 = new GraceBlock(this, 584, 2);
                                setLineNumber(1);    // compilenode identifier
                                block4667.real = function(var_acc, var_each) {
                                  setLineNumber(584);    // compilenode member
                                  // call case 6: other requests
                                  var call4669 = callmethodChecked(var_each, "nameString", []);
                                  var opresult4672 = callmethodChecked(var_acc, "++(1)", [1], call4669);
                                  return opresult4672;
                                };
                                setLineNumber(585);    // compilenode string
                                var string4673 = new GraceString("");
                                // call case 6: other requests
                                setLineNumber(584);    // compilenode member
                                // call case 4: self request
                                onSelf = true;
                                var call4675 = callmethodChecked(this, "signature", []);
                                var call4676 = callmethodChecked(call4675, "fold(1)startingWith(1)", [1, 1], block4667, string4673);
                                return call4676;
                              };
                              func4665.paramCounts = [0];
                              obj4663.methods["nameString"] = func4665;
                              func4665.definitionLine = 583;
                              func4665.definitionModule = "ast";
                              var func4677 = function(argcv) {    // method value
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                setModuleName("ast");
                                var if4678 = GraceDone;
                                setLineNumber(588);    // compilenode member
                                // call case 4: self request
                                onSelf = true;
                                var call4680 = callmethodChecked(this, "cachedIdentifier", []);
                                var opresult4683 = callmethodChecked(var_uninitialized, "==(1)", [1], call4680);
                                if (Grace_isTrue(opresult4683)) {
                                  setLineNumber(589);    // compilenode member
                                  // call case 4: self request
                                  onSelf = true;
                                  var call4687 = callmethodChecked(this, "nameString", []);
                                  // call case 6: other requests
                                  var call4688 = callmethodChecked(var_identifierNode, "new(2)", [2], call4687, GraceFalse);
                                  // call case 4: self request
                                  onSelf = true;
                                  var call4689 = callmethodChecked(this, "cachedIdentifier:=(1)", [1], call4688);
                                  setLineNumber(590);    // compilenode member
                                  // call case 6: other requests
                                  // call case 6: other requests
                                  // call case 4: self request
                                  onSelf = true;
                                  var call4694 = callmethodChecked(this, "signature", []);
                                  var call4695 = callmethodChecked(call4694, "first", []);
                                  var call4696 = callmethodChecked(call4695, "line", []);
                                  // call case 6: other requests
                                  // call case 4: self request
                                  onSelf = true;
                                  var call4698 = callmethodChecked(this, "cachedIdentifier", []);
                                  var call4699 = callmethodChecked(call4698, "line:=(1)", [1], call4696);
                                  setLineNumber(591);    // compilenode member
                                  // call case 6: other requests
                                  // call case 6: other requests
                                  // call case 4: self request
                                  onSelf = true;
                                  var call4704 = callmethodChecked(this, "signature", []);
                                  var call4705 = callmethodChecked(call4704, "first", []);
                                  var call4706 = callmethodChecked(call4705, "linePos", []);
                                  // call case 6: other requests
                                  // call case 4: self request
                                  onSelf = true;
                                  var call4708 = callmethodChecked(this, "cachedIdentifier", []);
                                  var call4709 = callmethodChecked(call4708, "linePos:=(1)", [1], call4706);
                                  setLineNumber(592);    // compilenode identifier
                                  // call case 6: other requests
                                  // call case 4: self request
                                  onSelf = true;
                                  var call4712 = callmethodChecked(this, "cachedIdentifier", []);
                                  var call4713 = callmethodChecked(call4712, "isBindingOccurrence:=(1)", [1], GraceTrue);
                                  if4678 = call4713;
                                }
                                setLineNumber(594);    // compilenode member
                                // call case 4: self request
                                onSelf = true;
                                var call4715 = callmethodChecked(this, "cachedIdentifier", []);
                                return call4715;
                              };
                              func4677.paramCounts = [0];
                              obj4663.methods["value"] = func4677;
                              func4677.definitionLine = 587;
                              func4677.definitionModule = "ast";
                              var func4716 = function(argcv) {    // method isExecutable
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                setModuleName("ast");
                                // isExecutable is a simple accessor - elide try ... catch
                                setLineNumber(596);    // compilenode identifier
                                return GraceFalse;
                              };
                              func4716.paramCounts = [0];
                              obj4663.methods["isExecutable"] = func4716;
                              func4716.definitionLine = 596;
                              func4716.definitionModule = "ast";
                              var func4717 = function(argcv) {    // method parametersDo(_)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_b = arguments[curarg];
                                curarg++;
                                setModuleName("ast");
                                setLineNumber(598);    // compilenode block
                                var block4719 = new GraceBlock(this, 598, 1);
                                setLineNumber(1);    // compilenode identifier
                                block4719.real = function(var_part) {
                                  setLineNumber(599);    // compilenode block
                                  var block4721 = new GraceBlock(this, 599, 1);
                                  setLineNumber(1);    // compilenode identifier
                                  block4721.real = function(var_each) {
                                    setLineNumber(599);    // compilenode identifier
                                    // call case 6: other requests
                                    var call4723 = callmethodChecked(var_b, "apply(1)", [1], var_each);
                                    return call4723;
                                  };
                                  // call case 6: other requests
                                  // call case 6: other requests
                                  var call4725 = callmethodChecked(var_part, "params", []);
                                  var call4726 = callmethodChecked(call4725, "do(1)", [1], block4721);
                                  return call4726;
                                };
                                // call case 6: other requests
                                setLineNumber(598);    // compilenode member
                                // call case 4: self request
                                onSelf = true;
                                var call4728 = callmethodChecked(this, "signature", []);
                                var call4729 = callmethodChecked(call4728, "do(1)", [1], block4719);
                                return call4729;
                              };
                              func4717.paramCounts = [1];
                              obj4663.methods["parametersDo(1)"] = func4717;
                              func4717.definitionLine = 597;
                              func4717.definitionModule = "ast";
                              var func4730 = function(argcv) {    // method scope:=(_)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_st = arguments[curarg];
                                curarg++;
                                setModuleName("ast");
                                setLineNumber(605);    // compilenode identifier
                                // call case 4: self request
                                onSelf = true;
                                var call4732 = callmethodChecked(this, "symbolTable:=(1)", [1], var_st);
                                setLineNumber(606);    // compilenode identifier
                                // call case 6: other requests
                                var call4734 = callmethodChecked(var_st, "node:=(1)", [1], this);
                                return call4734;
                              };
                              func4730.paramCounts = [1];
                              obj4663.methods["scope:=(1)"] = func4730;
                              func4730.definitionLine = 602;
                              func4730.definitionModule = "ast";
                              var func4735 = function(argcv) {    // method declarationKindWithAncestors(_)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_as = arguments[curarg];
                                curarg++;
                                setModuleName("ast");
                                setLineNumber(608);    // compilenode member
                                // call case 6: other requests
                                var call4737 = callmethodChecked(var_k, "typedec", []);
                                return call4737;
                              };
                              func4735.paramCounts = [1];
                              obj4663.methods["declarationKindWithAncestors(1)"] = func4735;
                              func4735.definitionLine = 608;
                              func4735.definitionModule = "ast";
                              var func4738 = function(argcv) {    // method accept(_)from(_)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_visitor = arguments[curarg];
                                curarg++;
                                var var_as = arguments[curarg];
                                curarg++;
                                // Start argument checking
                                curarg = 1;
                                setLineNumber(609);    // compilenode identifier
                                if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                            callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                curarg++;
                                curarg++;
                                // End argument checking
                                setModuleName("ast");
                                var if4739 = GraceDone;
                                setLineNumber(610);    // compilenode identifier
                                // call case 6: other requests
                                var call4741 = callmethodChecked(var_visitor, "visitMethodType(1)up(1)", [1, 1], this, var_as);
                                if (Grace_isTrue(call4741)) {
                                  setLineNumber(611);    // compilenode identifier
                                  // call case 6: other requests
                                  var call4743 = callmethodChecked(var_as, "extend(1)", [1], this);
                                  var var_newChain = call4743;
                                  var if4744 = GraceDone;
                                  setLineNumber(612);    // compilenode member
                                  // call case 4: self request
                                  onSelf = true;
                                  var call4746 = callmethodChecked(this, "typeParams", []);
                                  var opresult4749 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call4746);
                                  if (Grace_isTrue(opresult4749)) {
                                    setLineNumber(613);    // compilenode identifier
                                    // call case 6: other requests
                                    // call case 4: self request
                                    onSelf = true;
                                    var call4752 = callmethodChecked(this, "typeParams", []);
                                    var call4753 = callmethodChecked(call4752, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                    if4744 = call4753;
                                  }
                                  var if4754 = GraceDone;
                                  setLineNumber(615);    // compilenode member
                                  // call case 4: self request
                                  onSelf = true;
                                  var call4756 = callmethodChecked(this, "rtype", []);
                                  var opresult4759 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call4756);
                                  if (Grace_isTrue(opresult4759)) {
                                    setLineNumber(616);    // compilenode identifier
                                    // call case 6: other requests
                                    // call case 4: self request
                                    onSelf = true;
                                    var call4762 = callmethodChecked(this, "rtype", []);
                                    var call4763 = callmethodChecked(call4762, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                    if4754 = call4763;
                                  }
                                  setLineNumber(618);    // compilenode member
                                  // call case 4: self request
                                  onSelf = true;
                                  var call4766 = callmethodChecked(this, "signature", []);
                                  var block4767 = new GraceBlock(this, 618, 1);
                                  setLineNumber(1);    // compilenode identifier
                                  block4767.real = function(var_part) {
                                    setLineNumber(619);    // compilenode identifier
                                    // call case 6: other requests
                                    var call4769 = callmethodChecked(var_part, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                    return call4769;
                                  };
                                  // call case 5: prelude request
                                  var call4770 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call4766, block4767);
                                  if4739 = call4770;
                                }
                                return if4739;
                              };
                              func4738.paramTypes = [];
                              func4738.paramTypes.push([]);
                              func4738.paramTypes.push([]);
                              func4738.paramCounts = [1, 1];
                              obj4663.methods["accept(1)from(1)"] = func4738;
                              func4738.definitionLine = 609;
                              func4738.definitionModule = "ast";
                              var func4771 = function(argcv) {    // method map(_)ancestors(_)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_blk = arguments[curarg];
                                curarg++;
                                var var_as = arguments[curarg];
                                curarg++;
                                setModuleName("ast");
                                setLineNumber(624);    // compilenode member
                                // call case 4: self request
                                onSelf = true;
                                var call4773 = callmethodChecked(this, "shallowCopy", []);
                                var var_n = call4773;
                                setLineNumber(625);    // compilenode identifier
                                // call case 6: other requests
                                var call4775 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                var var_newChain = call4775;
                                setLineNumber(626);    // compilenode member
                                // call case 4: self request
                                onSelf = true;
                                var call4779 = callmethodChecked(this, "rtype", []);
                                // call case 6: other requests
                                // call case 6: other requests
                                // call case 3: self.outer request
                                var call4782 = callmethodChecked(superDepth, "outer", [0]);
                                var call4783 = callmethodChecked(call4782, "outer", []);
                                onSelf = true;
                                var call4784 = callmethodChecked(call4783, "maybeMap(2)ancestors(1)", [2, 1], call4779, var_blk, var_newChain);
                                // call case 6: other requests
                                var call4785 = callmethodChecked(var_n, "rtype:=(1)", [1], call4784);
                                setLineNumber(627);    // compilenode member
                                // call case 4: self request
                                onSelf = true;
                                var call4789 = callmethodChecked(this, "signature", []);
                                // call case 6: other requests
                                // call case 6: other requests
                                // call case 3: self.outer request
                                var call4792 = callmethodChecked(superDepth, "outer", [0]);
                                var call4793 = callmethodChecked(call4792, "outer", []);
                                onSelf = true;
                                var call4794 = callmethodChecked(call4793, "listMap(2)ancestors(1)", [2, 1], call4789, var_blk, var_newChain);
                                // call case 6: other requests
                                var call4795 = callmethodChecked(var_n, "signature:=(1)", [1], call4794);
                                setLineNumber(628);    // compilenode member
                                // call case 4: self request
                                onSelf = true;
                                var call4799 = callmethodChecked(this, "typeParams", []);
                                // call case 6: other requests
                                // call case 6: other requests
                                // call case 3: self.outer request
                                var call4802 = callmethodChecked(superDepth, "outer", [0]);
                                var call4803 = callmethodChecked(call4802, "outer", []);
                                onSelf = true;
                                var call4804 = callmethodChecked(call4803, "maybeMap(2)ancestors(1)", [2, 1], call4799, var_blk, var_newChain);
                                // call case 6: other requests
                                var call4805 = callmethodChecked(var_n, "typeParams:=(1)", [1], call4804);
                                setLineNumber(629);    // compilenode identifier
                                // call case 6: other requests
                                var call4807 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                return call4807;
                              };
                              func4771.paramCounts = [1, 1];
                              obj4663.methods["map(1)ancestors(1)"] = func4771;
                              func4771.definitionLine = 623;
                              func4771.definitionModule = "ast";
                              var func4808 = function(argcv) {    // method pretty(_)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_depth = arguments[curarg];
                                curarg++;
                                setModuleName("ast");
                                setLineNumber(632);    // compilenode string
                                var string4809 = new GraceString("");
                                var var_spc = string4809;
                                setLineNumber(633);    // compilenode num
                                var opresult4813 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                                var block4814 = new GraceBlock(this, 633, 1);
                                setLineNumber(1);    // compilenode identifier
                                block4814.real = function(var_i) {
                                  setLineNumber(634);    // compilenode string
                                  var string4815 = new GraceString("  ");
                                  var opresult4818 = callmethodChecked(var_spc, "++(1)", [1], string4815);
                                  var_spc = opresult4818;
                                  return GraceDone;
                                };
                                // call case 5: prelude request
                                var call4819 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult4813, block4814);
                                setLineNumber(636);    // compilenode string
                                var string4820 = new GraceString("\n");
                                // call case 1: super request
                                var call4823 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                var opresult4825 = callmethodChecked(call4823, "++(1)", [1], string4820);
                                var var_s = opresult4825;
                                setLineNumber(637);    // compilenode string
                                var string4826 = new GraceString("\n");
                                // call case 4: self request
                                onSelf = true;
                                var call4829 = callmethodChecked(this, "value", []);
                                var string4831 = new GraceString("Name: ");
                                var string4834 = new GraceString("");
                                var string4837 = new GraceString("");
                                var opresult4839 = callmethodChecked(string4837, "++(1)", [1], var_s);
                                var opresult4841 = callmethodChecked(opresult4839, "++(1)", [1], string4834);
                                var opresult4843 = callmethodChecked(opresult4841, "++(1)", [1], var_spc);
                                var opresult4845 = callmethodChecked(opresult4843, "++(1)", [1], string4831);
                                var opresult4847 = callmethodChecked(opresult4845, "++(1)", [1], call4829);
                                var opresult4849 = callmethodChecked(opresult4847, "++(1)", [1], string4826);
                                var_s = opresult4849;
                                var if4850 = GraceDone;
                                setLineNumber(638);    // compilenode member
                                // call case 4: self request
                                onSelf = true;
                                var call4852 = callmethodChecked(this, "rtype", []);
                                var opresult4855 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call4852);
                                if (Grace_isTrue(opresult4855)) {
                                  setLineNumber(639);    // compilenode string
                                  var string4856 = new GraceString("");
                                  var opresult4861 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                  // call case 6: other requests
                                  // call case 4: self request
                                  onSelf = true;
                                  var call4863 = callmethodChecked(this, "rtype", []);
                                  var call4864 = callmethodChecked(call4863, "pretty(1)", [1], opresult4861);
                                  var string4866 = new GraceString("");
                                  var string4869 = new GraceString("Returns:\n  ");
                                  var string4872 = new GraceString("");
                                  var string4875 = new GraceString("");
                                  var opresult4877 = callmethodChecked(string4875, "++(1)", [1], var_s);
                                  var opresult4879 = callmethodChecked(opresult4877, "++(1)", [1], string4872);
                                  var opresult4881 = callmethodChecked(opresult4879, "++(1)", [1], var_spc);
                                  var opresult4883 = callmethodChecked(opresult4881, "++(1)", [1], string4869);
                                  var opresult4885 = callmethodChecked(opresult4883, "++(1)", [1], var_spc);
                                  var opresult4887 = callmethodChecked(opresult4885, "++(1)", [1], string4866);
                                  var opresult4889 = callmethodChecked(opresult4887, "++(1)", [1], call4864);
                                  var opresult4891 = callmethodChecked(opresult4889, "++(1)", [1], string4856);
                                  var_s = opresult4891;
                                  if4850 = GraceDone;
                                }
                                var if4892 = GraceDone;
                                setLineNumber(641);    // compilenode member
                                // call case 4: self request
                                onSelf = true;
                                var call4894 = callmethodChecked(this, "typeParams", []);
                                var opresult4897 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call4894);
                                if (Grace_isTrue(opresult4897)) {
                                  setLineNumber(642);    // compilenode string
                                  var string4898 = new GraceString("TypeParams:\n");
                                  var string4901 = new GraceString("\n");
                                  var string4904 = new GraceString("");
                                  var opresult4906 = callmethodChecked(string4904, "++(1)", [1], var_s);
                                  var opresult4908 = callmethodChecked(opresult4906, "++(1)", [1], string4901);
                                  var opresult4910 = callmethodChecked(opresult4908, "++(1)", [1], var_spc);
                                  var opresult4912 = callmethodChecked(opresult4910, "++(1)", [1], string4898);
                                  var_s = opresult4912;
                                  setLineNumber(643);    // compilenode identifier
                                  var opresult4916 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                  // call case 6: other requests
                                  // call case 4: self request
                                  onSelf = true;
                                  var call4918 = callmethodChecked(this, "typeParams", []);
                                  var call4919 = callmethodChecked(call4918, "pretty(1)", [1], opresult4916);
                                  var opresult4922 = callmethodChecked(var_s, "++(1)", [1], call4919);
                                  var_s = opresult4922;
                                  if4892 = GraceDone;
                                }
                                setLineNumber(645);    // compilenode string
                                var string4923 = new GraceString("Signature:");
                                var string4926 = new GraceString("\n");
                                var string4929 = new GraceString("");
                                var opresult4931 = callmethodChecked(string4929, "++(1)", [1], var_s);
                                var opresult4933 = callmethodChecked(opresult4931, "++(1)", [1], string4926);
                                var opresult4935 = callmethodChecked(opresult4933, "++(1)", [1], var_spc);
                                var opresult4937 = callmethodChecked(opresult4935, "++(1)", [1], string4923);
                                var_s = opresult4937;
                                setLineNumber(646);    // compilenode member
                                // call case 4: self request
                                onSelf = true;
                                var call4940 = callmethodChecked(this, "signature", []);
                                var block4941 = new GraceBlock(this, 646, 1);
                                setLineNumber(1);    // compilenode identifier
                                block4941.real = function(var_part) {
                                  setLineNumber(647);    // compilenode string
                                  var string4942 = new GraceString("");
                                  var opresult4947 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                  // call case 6: other requests
                                  var call4948 = callmethodChecked(var_part, "pretty(1)", [1], opresult4947);
                                  var string4950 = new GraceString("");
                                  var string4953 = new GraceString("\n  ");
                                  var string4956 = new GraceString("");
                                  var opresult4958 = callmethodChecked(string4956, "++(1)", [1], var_s);
                                  var opresult4960 = callmethodChecked(opresult4958, "++(1)", [1], string4953);
                                  var opresult4962 = callmethodChecked(opresult4960, "++(1)", [1], var_spc);
                                  var opresult4964 = callmethodChecked(opresult4962, "++(1)", [1], string4950);
                                  var opresult4966 = callmethodChecked(opresult4964, "++(1)", [1], call4948);
                                  var opresult4968 = callmethodChecked(opresult4966, "++(1)", [1], string4942);
                                  var_s = opresult4968;
                                  return GraceDone;
                                };
                                // call case 5: prelude request
                                var call4969 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call4940, block4941);
                                setLineNumber(649);    // compilenode identifier
                                return var_s;
                              };
                              func4808.paramCounts = [1];
                              obj4663.methods["pretty(1)"] = func4808;
                              func4808.definitionLine = 631;
                              func4808.definitionModule = "ast";
                              var func4970 = function(argcv) {    // method toGrace(_)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_depth = arguments[curarg];
                                curarg++;
                                // Start argument checking
                                curarg = 1;
                                setLineNumber(651);    // compilenode identifier
                                if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                            callmethod(var_Number, "asString", [0])._value + "."));
                                curarg++;
                                // End argument checking
                                setModuleName("ast");
                                setLineNumber(652);    // compilenode string
                                var string4971 = new GraceString("");
                                var var_s = string4971;
                                setLineNumber(653);    // compilenode block
                                var block4973 = new GraceBlock(this, 653, 1);
                                setLineNumber(1);    // compilenode identifier
                                block4973.real = function(var_part) {
                                  setLineNumber(653);    // compilenode identifier
                                  var opresult4977 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                  // call case 6: other requests
                                  var call4978 = callmethodChecked(var_part, "toGrace(1)", [1], opresult4977);
                                  var opresult4981 = callmethodChecked(var_s, "++(1)", [1], call4978);
                                  var_s = opresult4981;
                                  return GraceDone;
                                };
                                // call case 6: other requests
                                // call case 4: self request
                                onSelf = true;
                                var call4983 = callmethodChecked(this, "signature", []);
                                var call4984 = callmethodChecked(call4983, "do(1)", [1], block4973);
                                setLineNumber(654);    // return value
                                if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], var_s)))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("result of method toGrace(_) does not have " + 
                                            callmethod(var_String, "asString", [0])._value + "."));
                                return var_s;
                              };
                              func4970.paramTypes = [];
                              func4970.paramTypes.push([type_Number, "depth"]);
                              func4970.paramCounts = [1];
                              obj4663.methods["toGrace(1)"] = func4970;
                              func4970.definitionLine = 651;
                              func4970.definitionModule = "ast";
                              var func4985 = function(argcv) {    // method shallowCopy
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                setModuleName("ast");
                                setLineNumber(657);    // compilenode identifier
                                // call case 6: other requests
                                // call case 4: self request
                                onSelf = true;
                                var call4989 = callmethodChecked(this, "signature", []);
                                // call case 4: self request
                                onSelf = true;
                                var call4991 = callmethodChecked(this, "rtype", []);
                                // call case 6: other requests
                                var call4992 = callmethodChecked(var_methodTypeNode, "new(2)", [2], call4989, call4991);
                                var call4993 = callmethodChecked(call4992, "shallowCopyFieldsFrom(1)", [1], this);
                                return call4993;
                              };
                              func4985.paramCounts = [0];
                              obj4663.methods["shallowCopy"] = func4985;
                              func4985.definitionLine = 656;
                              func4985.definitionModule = "ast";
                              setLineNumber(576);    // compilenode identifier
                              // call case 6: other requests
                              // call case 6: other requests
                              // call case 3: self.outer request
                              var call4997 = callmethodChecked(superDepth, "outer", [0]);
                              var call4998 = callmethodChecked(call4997, "outer", []);
                              var call4999 = callmethodChecked(call4998, "baseNode$object(1)", [0, 1], this);
                              obj4663.superobj = call4999;
                              if (call4999.data) obj4663.data = call4999.data;
                              if (call4999.hasOwnProperty('_value'))
                                  obj4663._value = call4999._value;
                              setLineNumber(577);    // compilenode string
                              var string5000 = new GraceString("methodtype");
                              obj4663.data["kind"] = string5000;
                              var reader_ast_kind5001 = function() {
                                return this.data["kind"];
                              };
                              reader_ast_kind5001.def = true;
                              obj4663.methods["kind"] = reader_ast_kind5001;
                              setLineNumber(578);    // compilenode identifier
                              obj4663.data["signature"] = var_signature__39__;
                              var reader_ast_signature5002 = function() {
                                return this.data["signature"];
                              };
                              obj4663.methods["signature"] = reader_ast_signature5002;
                              obj4663.data["signature"] = var_signature__39__;
                              var writer_ast_signature5002 = function(argcv, o) {
                                this.data["signature"] = o;
                                return GraceDone;
                              };
                              obj4663.methods["signature:=(1)"] = writer_ast_signature5002;
                              obj4663.mutable = true;
                              setLineNumber(579);    // compilenode identifier
                              obj4663.data["rtype"] = var_rtype__39__;
                              var reader_ast_rtype5003 = function() {
                                return this.data["rtype"];
                              };
                              obj4663.methods["rtype"] = reader_ast_rtype5003;
                              obj4663.data["rtype"] = var_rtype__39__;
                              var writer_ast_rtype5003 = function(argcv, o) {
                                this.data["rtype"] = o;
                                return GraceDone;
                              };
                              obj4663.methods["rtype:=(1)"] = writer_ast_rtype5003;
                              obj4663.mutable = true;
                              setLineNumber(580);    // compilenode identifier
                              obj4663.data["typeParams"] = GraceFalse;
                              var reader_ast_typeParams5004 = function() {
                                return this.data["typeParams"];
                              };
                              obj4663.methods["typeParams"] = reader_ast_typeParams5004;
                              obj4663.data["typeParams"] = GraceFalse;
                              var writer_ast_typeParams5004 = function(argcv, o) {
                                this.data["typeParams"] = o;
                                return GraceDone;
                              };
                              obj4663.methods["typeParams:=(1)"] = writer_ast_typeParams5004;
                              obj4663.mutable = true;
                              setLineNumber(581);    // compilenode identifier
                              obj4663.data["cachedIdentifier"] = var_uninitialized;
                              var reader_ast_cachedIdentifier5005 = function() {
                                return this.data["cachedIdentifier"];
                              };
                              obj4663.methods["cachedIdentifier"] = reader_ast_cachedIdentifier5005;
                              obj4663.data["cachedIdentifier"] = var_uninitialized;
                              var writer_ast_cachedIdentifier5005 = function(argcv, o) {
                                this.data["cachedIdentifier"] = o;
                                return GraceDone;
                              };
                              obj4663.methods["cachedIdentifier:=(1)"] = writer_ast_cachedIdentifier5005;
                              reader_ast_cachedIdentifier5005.confidential = true;
                              writer_ast_cachedIdentifier5005.confidential = true;
                              obj4663.mutable = true;
                              superDepth = origSuperDepth;
                            };
                            obj_init_4663.apply(inheritingObject, []);
                            return obj4663;
                            };
                            obj4316.methods["new(2)$object(1)"] = func4662;
                          superDepth = origSuperDepth;
                        };
                        obj_init_4316.apply(obj4316, []);
                        var var_methodTypeNode = obj4316;
                        setLineNumber(1);    // compilenode method
                        var func5006 = function(argcv) {    // method methodTypeNode
                          var returnTarget = invocationCount;
                          invocationCount++;
                          var curarg = 1;
                          setModuleName("ast");
                          // methodTypeNode is a simple accessor - elide try ... catch
                          setLineNumber(570);    // compilenode identifier
                          return var_methodTypeNode;
                        };
                        func5006.paramCounts = [0];
                        this.methods["methodTypeNode"] = func5006;
                        func5006.definitionLine = 1;
                        func5006.definitionModule = "ast";
                        this.methods["methodTypeNode"].debug = "def";
                        setLineNumber(661);    // compilenode object
                        var obj5007 = Grace_allocObject(GraceObject, "typeLiteralNode");
                        obj5007.definitionModule = "ast";
                        obj5007.definitionLine = 661;
                        obj5007.outer = this;
                        var reader_ast_outer5008 = function() {
                          return this.outer;
                        };
                        obj5007.methods["outer"] = reader_ast_outer5008;
                        var obj_init_5007 = function() {
                          var origSuperDepth = superDepth;
                          superDepth = obj5007;
                          var func5009 = function(argcv) {    // method new(_,_)
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            var var_methods__39__ = arguments[curarg];
                            curarg++;
                            var var_types__39__ = arguments[curarg];
                            curarg++;
                            setModuleName("ast");
                            setLineNumber(662);    // compilenode object
                            var obj5010 = Grace_allocObject(null, "typeLiteralNode.new(_,_)");
                            obj5010.definitionModule = "ast";
                            obj5010.definitionLine = 662;
                            obj5010.outer = this;
                            var reader_ast_outer5011 = function() {
                              return this.outer;
                            };
                            obj5010.methods["outer"] = reader_ast_outer5011;
                            var obj_init_5010 = function() {
                              var origSuperDepth = superDepth;
                              superDepth = obj5010;
                              var func5012 = function(argcv) {    // method name
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                setModuleName("ast");
                                setLineNumber(671);    // compilenode member
                                // call case 4: self request
                                onSelf = true;
                                var call5014 = callmethodChecked(this, "value", []);
                                return call5014;
                              };
                              func5012.paramCounts = [0];
                              obj5010.methods["name"] = func5012;
                              func5012.definitionLine = 671;
                              func5012.definitionModule = "ast";
                              var func5015 = function(argcv) {    // method name:=(_)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_n = arguments[curarg];
                                curarg++;
                                setModuleName("ast");
                                setLineNumber(673);    // compilenode identifier
                                // call case 4: self request
                                onSelf = true;
                                var call5017 = callmethodChecked(this, "value:=(1)", [1], var_n);
                                setLineNumber(674);    // compilenode identifier
                                // call case 4: self request
                                onSelf = true;
                                var call5019 = callmethodChecked(this, "anonymous:=(1)", [1], GraceFalse);
                                return call5019;
                              };
                              func5015.paramCounts = [1];
                              obj5010.methods["name:=(1)"] = func5015;
                              func5015.definitionLine = 672;
                              func5015.definitionModule = "ast";
                              var func5020 = function(argcv) {    // method asString
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                setModuleName("ast");
                                setLineNumber(677);    // compilenode string
                                var string5021 = new GraceString("");
                                // call case 4: self request
                                onSelf = true;
                                var call5024 = callmethodChecked(this, "types", []);
                                var string5026 = new GraceString(", types = ");
                                // call case 4: self request
                                onSelf = true;
                                var call5029 = callmethodChecked(this, "methods", []);
                                var string5031 = new GraceString("typeliteral: methods = ");
                                var opresult5033 = callmethodChecked(string5031, "++(1)", [1], call5029);
                                var opresult5035 = callmethodChecked(opresult5033, "++(1)", [1], string5026);
                                var opresult5037 = callmethodChecked(opresult5035, "++(1)", [1], call5024);
                                var opresult5039 = callmethodChecked(opresult5037, "++(1)", [1], string5021);
                                return opresult5039;
                              };
                              func5020.paramCounts = [0];
                              obj5010.methods["asString"] = func5020;
                              func5020.definitionLine = 676;
                              func5020.definitionModule = "ast";
                              var func5040 = function(argcv) {    // method declarationKindWithAncestors(_)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_as = arguments[curarg];
                                curarg++;
                                setModuleName("ast");
                                setLineNumber(679);    // compilenode member
                                // call case 6: other requests
                                var call5042 = callmethodChecked(var_k, "typedec", []);
                                return call5042;
                              };
                              func5040.paramCounts = [1];
                              obj5010.methods["declarationKindWithAncestors(1)"] = func5040;
                              func5040.definitionLine = 679;
                              func5040.definitionModule = "ast";
                              var func5043 = function(argcv) {    // method isExecutable
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                setModuleName("ast");
                                // isExecutable is a simple accessor - elide try ... catch
                                setLineNumber(680);    // compilenode identifier
                                return GraceFalse;
                              };
                              func5043.paramCounts = [0];
                              obj5010.methods["isExecutable"] = func5043;
                              func5043.definitionLine = 680;
                              func5043.definitionModule = "ast";
                              var func5044 = function(argcv) {    // method accept(_)from(_)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_visitor = arguments[curarg];
                                curarg++;
                                var var_as = arguments[curarg];
                                curarg++;
                                // Start argument checking
                                curarg = 1;
                                setLineNumber(682);    // compilenode identifier
                                if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                            callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                curarg++;
                                curarg++;
                                // End argument checking
                                setModuleName("ast");
                                var if5045 = GraceDone;
                                setLineNumber(683);    // compilenode identifier
                                // call case 6: other requests
                                var call5047 = callmethodChecked(var_visitor, "visitTypeLiteral(1)up(1)", [1, 1], this, var_as);
                                if (Grace_isTrue(call5047)) {
                                  setLineNumber(684);    // compilenode identifier
                                  // call case 6: other requests
                                  var call5049 = callmethodChecked(var_as, "extend(1)", [1], this);
                                  var var_newChain = call5049;
                                  setLineNumber(685);    // compilenode member
                                  // call case 4: self request
                                  onSelf = true;
                                  var call5052 = callmethodChecked(this, "methods", []);
                                  var block5053 = new GraceBlock(this, 685, 1);
                                  setLineNumber(1);    // compilenode identifier
                                  block5053.real = function(var_each) {
                                    setLineNumber(686);    // compilenode identifier
                                    // call case 6: other requests
                                    var call5055 = callmethodChecked(var_each, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                    return call5055;
                                  };
                                  // call case 5: prelude request
                                  var call5056 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call5052, block5053);
                                  setLineNumber(688);    // compilenode member
                                  // call case 4: self request
                                  onSelf = true;
                                  var call5059 = callmethodChecked(this, "types", []);
                                  var block5060 = new GraceBlock(this, 688, 1);
                                  setLineNumber(1);    // compilenode identifier
                                  block5060.real = function(var_each) {
                                    setLineNumber(689);    // compilenode identifier
                                    // call case 6: other requests
                                    var call5062 = callmethodChecked(var_each, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                    return call5062;
                                  };
                                  // call case 5: prelude request
                                  var call5063 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call5059, block5060);
                                  if5045 = call5063;
                                }
                                return if5045;
                              };
                              func5044.paramTypes = [];
                              func5044.paramTypes.push([]);
                              func5044.paramTypes.push([]);
                              func5044.paramCounts = [1, 1];
                              obj5010.methods["accept(1)from(1)"] = func5044;
                              func5044.definitionLine = 682;
                              func5044.definitionModule = "ast";
                              var func5064 = function(argcv) {    // method map(_)ancestors(_)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_blk = arguments[curarg];
                                curarg++;
                                var var_as = arguments[curarg];
                                curarg++;
                                setModuleName("ast");
                                setLineNumber(694);    // compilenode member
                                // call case 4: self request
                                onSelf = true;
                                var call5066 = callmethodChecked(this, "shallowCopy", []);
                                var var_n = call5066;
                                setLineNumber(695);    // compilenode identifier
                                // call case 6: other requests
                                var call5068 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                var var_newChain = call5068;
                                setLineNumber(696);    // compilenode member
                                // call case 4: self request
                                onSelf = true;
                                var call5072 = callmethodChecked(this, "methods", []);
                                // call case 6: other requests
                                // call case 6: other requests
                                // call case 3: self.outer request
                                var call5075 = callmethodChecked(superDepth, "outer", [0]);
                                var call5076 = callmethodChecked(call5075, "outer", []);
                                onSelf = true;
                                var call5077 = callmethodChecked(call5076, "listMap(2)ancestors(1)", [2, 1], call5072, var_blk, var_as);
                                // call case 6: other requests
                                var call5078 = callmethodChecked(var_n, "methods:=(1)", [1], call5077);
                                setLineNumber(697);    // compilenode member
                                // call case 4: self request
                                onSelf = true;
                                var call5082 = callmethodChecked(this, "types", []);
                                // call case 6: other requests
                                // call case 6: other requests
                                // call case 3: self.outer request
                                var call5085 = callmethodChecked(superDepth, "outer", [0]);
                                var call5086 = callmethodChecked(call5085, "outer", []);
                                onSelf = true;
                                var call5087 = callmethodChecked(call5086, "listMap(2)ancestors(1)", [2, 1], call5082, var_blk, var_as);
                                // call case 6: other requests
                                var call5088 = callmethodChecked(var_n, "types:=(1)", [1], call5087);
                                setLineNumber(698);    // compilenode identifier
                                // call case 6: other requests
                                var call5090 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                return call5090;
                              };
                              func5064.paramCounts = [1, 1];
                              obj5010.methods["map(1)ancestors(1)"] = func5064;
                              func5064.definitionLine = 693;
                              func5064.definitionModule = "ast";
                              var func5091 = function(argcv) {    // method pretty(_)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_depth = arguments[curarg];
                                curarg++;
                                setModuleName("ast");
                                setLineNumber(701);    // compilenode string
                                var string5092 = new GraceString("");
                                var var_spc = string5092;
                                setLineNumber(702);    // compilenode num
                                var opresult5096 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                                var block5097 = new GraceBlock(this, 702, 1);
                                setLineNumber(1);    // compilenode identifier
                                block5097.real = function(var_i) {
                                  setLineNumber(703);    // compilenode string
                                  var string5098 = new GraceString("  ");
                                  var opresult5101 = callmethodChecked(var_spc, "++(1)", [1], string5098);
                                  var_spc = opresult5101;
                                  return GraceDone;
                                };
                                // call case 5: prelude request
                                var call5102 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult5096, block5097);
                                setLineNumber(705);    // compilenode string
                                var string5103 = new GraceString("\n");
                                // call case 1: super request
                                var call5106 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                var string5108 = new GraceString("");
                                var opresult5110 = callmethodChecked(string5108, "++(1)", [1], call5106);
                                var opresult5112 = callmethodChecked(opresult5110, "++(1)", [1], string5103);
                                var var_s = opresult5112;
                                setLineNumber(706);    // compilenode string
                                var string5113 = new GraceString("Types:");
                                var opresult5117 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                var opresult5119 = callmethodChecked(opresult5117, "++(1)", [1], string5113);
                                var_s = opresult5119;
                                setLineNumber(707);    // compilenode member
                                // call case 4: self request
                                onSelf = true;
                                var call5122 = callmethodChecked(this, "types", []);
                                var block5123 = new GraceBlock(this, 707, 1);
                                setLineNumber(1);    // compilenode identifier
                                block5123.real = function(var_each) {
                                  setLineNumber(708);    // compilenode identifier
                                  var opresult5127 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                  // call case 6: other requests
                                  var call5128 = callmethodChecked(var_each, "pretty(1)", [1], opresult5127);
                                  var string5131 = new GraceString("\n  ");
                                  var opresult5134 = callmethodChecked(var_s, "++(1)", [1], string5131);
                                  var opresult5136 = callmethodChecked(opresult5134, "++(1)", [1], var_spc);
                                  var opresult5138 = callmethodChecked(opresult5136, "++(1)", [1], call5128);
                                  var_s = opresult5138;
                                  return GraceDone;
                                };
                                // call case 5: prelude request
                                var call5139 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call5122, block5123);
                                setLineNumber(710);    // compilenode string
                                var string5140 = new GraceString("Methods:");
                                var string5143 = new GraceString("\n");
                                var opresult5146 = callmethodChecked(var_s, "++(1)", [1], string5143);
                                var opresult5148 = callmethodChecked(opresult5146, "++(1)", [1], var_spc);
                                var opresult5150 = callmethodChecked(opresult5148, "++(1)", [1], string5140);
                                var_s = opresult5150;
                                setLineNumber(711);    // compilenode member
                                // call case 4: self request
                                onSelf = true;
                                var call5153 = callmethodChecked(this, "methods", []);
                                var block5154 = new GraceBlock(this, 711, 1);
                                setLineNumber(1);    // compilenode identifier
                                block5154.real = function(var_each) {
                                  setLineNumber(712);    // compilenode identifier
                                  var opresult5158 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                  // call case 6: other requests
                                  var call5159 = callmethodChecked(var_each, "pretty(1)", [1], opresult5158);
                                  var string5162 = new GraceString("\n  ");
                                  var opresult5165 = callmethodChecked(var_s, "++(1)", [1], string5162);
                                  var opresult5167 = callmethodChecked(opresult5165, "++(1)", [1], var_spc);
                                  var opresult5169 = callmethodChecked(opresult5167, "++(1)", [1], call5159);
                                  var_s = opresult5169;
                                  return GraceDone;
                                };
                                // call case 5: prelude request
                                var call5170 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call5153, block5154);
                                setLineNumber(714);    // compilenode string
                                var string5171 = new GraceString("\n");
                                var opresult5174 = callmethodChecked(var_s, "++(1)", [1], string5171);
                                var_s = opresult5174;
                                setLineNumber(715);    // compilenode identifier
                                return var_s;
                              };
                              func5091.paramCounts = [1];
                              obj5010.methods["pretty(1)"] = func5091;
                              func5091.definitionLine = 700;
                              func5091.definitionModule = "ast";
                              var func5175 = function(argcv) {    // method toGrace(_)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_depth = arguments[curarg];
                                curarg++;
                                // Start argument checking
                                curarg = 1;
                                setLineNumber(717);    // compilenode identifier
                                if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                            callmethod(var_Number, "asString", [0])._value + "."));
                                curarg++;
                                // End argument checking
                                setModuleName("ast");
                                setLineNumber(718);    // compilenode string
                                var string5176 = new GraceString("");
                                var var_spc = string5176;
                                setLineNumber(719);    // compilenode identifier
                                var diff5180 = callmethodChecked(var_depth, "-(1)", [1], new GraceNum(1));
                                var opresult5183 = callmethodChecked(new GraceNum(0), "..(1)", [1], diff5180);
                                var block5184 = new GraceBlock(this, 719, 1);
                                setLineNumber(1);    // compilenode identifier
                                block5184.real = function(var_i) {
                                  setLineNumber(720);    // compilenode string
                                  var string5185 = new GraceString("    ");
                                  var opresult5188 = callmethodChecked(var_spc, "++(1)", [1], string5185);
                                  var_spc = opresult5188;
                                  return GraceDone;
                                };
                                // call case 5: prelude request
                                var call5189 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult5183, block5184);
                                setLineNumber(722);    // compilenode string
                                var string5190 = new GraceString("type");
                                var var_s = string5190;
                                setLineNumber(723);    // compilenode string
                                var string5191 = new GraceString(" = {");
                                var opresult5194 = callmethodChecked(var_s, "++(1)", [1], string5191);
                                var_s = opresult5194;
                                setLineNumber(724);    // compilenode member
                                // call case 4: self request
                                onSelf = true;
                                var call5197 = callmethodChecked(this, "methods", []);
                                var block5198 = new GraceBlock(this, 724, 1);
                                setLineNumber(1);    // compilenode identifier
                                block5198.real = function(var_each) {
                                  setLineNumber(725);    // compilenode identifier
                                  var opresult5202 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                  // call case 6: other requests
                                  var call5203 = callmethodChecked(var_each, "toGrace(1)", [1], opresult5202);
                                  var string5205 = new GraceString("    ");
                                  var string5208 = new GraceString("\n");
                                  var opresult5211 = callmethodChecked(var_s, "++(1)", [1], string5208);
                                  var opresult5213 = callmethodChecked(opresult5211, "++(1)", [1], var_spc);
                                  var opresult5215 = callmethodChecked(opresult5213, "++(1)", [1], string5205);
                                  var opresult5217 = callmethodChecked(opresult5215, "++(1)", [1], call5203);
                                  var_s = opresult5217;
                                  return GraceDone;
                                };
                                // call case 5: prelude request
                                var call5218 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call5197, block5198);
                                setLineNumber(727);    // compilenode member
                                // call case 4: self request
                                onSelf = true;
                                var call5221 = callmethodChecked(this, "types", []);
                                var block5222 = new GraceBlock(this, 727, 1);
                                setLineNumber(1);    // compilenode identifier
                                block5222.real = function(var_each) {
                                  setLineNumber(728);    // compilenode identifier
                                  var opresult5226 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                  // call case 6: other requests
                                  var call5227 = callmethodChecked(var_each, "toGrace(1)", [1], opresult5226);
                                  var string5229 = new GraceString("    ");
                                  var string5232 = new GraceString("\n");
                                  var opresult5235 = callmethodChecked(var_s, "++(1)", [1], string5232);
                                  var opresult5237 = callmethodChecked(opresult5235, "++(1)", [1], var_spc);
                                  var opresult5239 = callmethodChecked(opresult5237, "++(1)", [1], string5229);
                                  var opresult5241 = callmethodChecked(opresult5239, "++(1)", [1], call5227);
                                  var_s = opresult5241;
                                  return GraceDone;
                                };
                                // call case 5: prelude request
                                var call5242 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call5221, block5222);
                                setLineNumber(730);    // compilenode string
                                var string5243 = new GraceString("}");
                                var opresult5246 = callmethodChecked(var_s, "++(1)", [1], string5243);
                                if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], opresult5246)))
                                    throw new GraceExceptionPacket(TypeErrorObject,
                                        new GraceString("result of method toGrace(_) does not have " + 
                                            callmethod(var_String, "asString", [0])._value + "."));
                                return opresult5246;
                              };
                              func5175.paramTypes = [];
                              func5175.paramTypes.push([type_Number, "depth"]);
                              func5175.paramCounts = [1];
                              obj5010.methods["toGrace(1)"] = func5175;
                              func5175.definitionLine = 717;
                              func5175.definitionModule = "ast";
                              var func5247 = function(argcv) {    // method shallowCopy
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                setModuleName("ast");
                                setLineNumber(733);    // compilenode identifier
                                // call case 6: other requests
                                // call case 6: other requests
                                var call5250 = callmethodChecked(var_typeLiteralNode, "new(2)", [2], var_emptySeq, var_emptySeq);
                                var call5251 = callmethodChecked(call5250, "shallowCopyFieldsFrom(1)", [1], this);
                                return call5251;
                              };
                              func5247.paramCounts = [0];
                              obj5010.methods["shallowCopy"] = func5247;
                              func5247.definitionLine = 732;
                              func5247.definitionModule = "ast";
                              var func5252 = function(argcv) {    // method shallowCopyFieldsFrom(_)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_other = arguments[curarg];
                                curarg++;
                                setModuleName("ast");
                                setLineNumber(736);    // compilenode identifier
                                // call case 1: super request
                                var call5254 = callmethodsuper(this, "shallowCopyFieldsFrom(1)", [1], var_other);
                                setLineNumber(737);    // compilenode member
                                // call case 6: other requests
                                var call5257 = callmethodChecked(var_other, "nominal", []);
                                // call case 4: self request
                                onSelf = true;
                                var call5258 = callmethodChecked(this, "nominal:=(1)", [1], call5257);
                                setLineNumber(738);    // compilenode member
                                // call case 6: other requests
                                var call5261 = callmethodChecked(var_other, "anonymous", []);
                                // call case 4: self request
                                onSelf = true;
                                var call5262 = callmethodChecked(this, "anonymous:=(1)", [1], call5261);
                                setLineNumber(739);    // compilenode member
                                // call case 6: other requests
                                var call5265 = callmethodChecked(var_other, "value", []);
                                // call case 4: self request
                                onSelf = true;
                                var call5266 = callmethodChecked(this, "value:=(1)", [1], call5265);
                                setLineNumber(740);    // compilenode identifier
                                return this;
                              };
                              func5252.paramCounts = [1];
                              obj5010.methods["shallowCopyFieldsFrom(1)"] = func5252;
                              func5252.definitionLine = 735;
                              func5252.definitionModule = "ast";
                              setLineNumber(663);    // compilenode identifier
                              // call case 6: other requests
                              // call case 6: other requests
                              // call case 3: self.outer request
                              var call5270 = callmethodChecked(superDepth, "outer", [0]);
                              var call5271 = callmethodChecked(call5270, "outer", []);
                              var call5272 = callmethodChecked(call5271, "baseNode$object(1)", [0, 1], this);
                              obj5010.superobj = call5272;
                              if (call5272.data) obj5010.data = call5272.data;
                              if (call5272.hasOwnProperty('_value'))
                                  obj5010._value = call5272._value;
                              setLineNumber(664);    // compilenode string
                              var string5273 = new GraceString("typeliteral");
                              obj5010.data["kind"] = string5273;
                              var reader_ast_kind5274 = function() {
                                return this.data["kind"];
                              };
                              reader_ast_kind5274.def = true;
                              obj5010.methods["kind"] = reader_ast_kind5274;
                              setLineNumber(665);    // compilenode identifier
                              obj5010.data["methods"] = var_methods__39__;
                              var reader_ast_methods5275 = function() {
                                return this.data["methods"];
                              };
                              obj5010.methods["methods"] = reader_ast_methods5275;
                              obj5010.data["methods"] = var_methods__39__;
                              var writer_ast_methods5275 = function(argcv, o) {
                                this.data["methods"] = o;
                                return GraceDone;
                              };
                              obj5010.methods["methods:=(1)"] = writer_ast_methods5275;
                              obj5010.mutable = true;
                              setLineNumber(666);    // compilenode identifier
                              obj5010.data["types"] = var_types__39__;
                              var reader_ast_types5276 = function() {
                                return this.data["types"];
                              };
                              obj5010.methods["types"] = reader_ast_types5276;
                              obj5010.data["types"] = var_types__39__;
                              var writer_ast_types5276 = function(argcv, o) {
                                this.data["types"] = o;
                                return GraceDone;
                              };
                              obj5010.methods["types:=(1)"] = writer_ast_types5276;
                              obj5010.mutable = true;
                              setLineNumber(667);    // compilenode identifier
                              obj5010.data["nominal"] = GraceFalse;
                              var reader_ast_nominal5277 = function() {
                                return this.data["nominal"];
                              };
                              obj5010.methods["nominal"] = reader_ast_nominal5277;
                              obj5010.data["nominal"] = GraceFalse;
                              var writer_ast_nominal5277 = function(argcv, o) {
                                this.data["nominal"] = o;
                                return GraceDone;
                              };
                              obj5010.methods["nominal:=(1)"] = writer_ast_nominal5277;
                              obj5010.mutable = true;
                              setLineNumber(668);    // compilenode identifier
                              obj5010.data["anonymous"] = GraceTrue;
                              var reader_ast_anonymous5278 = function() {
                                return this.data["anonymous"];
                              };
                              obj5010.methods["anonymous"] = reader_ast_anonymous5278;
                              obj5010.data["anonymous"] = GraceTrue;
                              var writer_ast_anonymous5278 = function(argcv, o) {
                                this.data["anonymous"] = o;
                                return GraceDone;
                              };
                              obj5010.methods["anonymous:=(1)"] = writer_ast_anonymous5278;
                              obj5010.mutable = true;
                              setLineNumber(669);    // compilenode string
                              var string5279 = new GraceString("\u2039anon\u203a");
                              obj5010.data["value"] = string5279;
                              var reader_ast_value5280 = function() {
                                return this.data["value"];
                              };
                              obj5010.methods["value"] = reader_ast_value5280;
                              obj5010.data["value"] = string5279;
                              var writer_ast_value5280 = function(argcv, o) {
                                this.data["value"] = o;
                                return GraceDone;
                              };
                              obj5010.methods["value:=(1)"] = writer_ast_value5280;
                              obj5010.mutable = true;
                              superDepth = origSuperDepth;
                            };
                            obj_init_5010.apply(obj5010, []);
                            return obj5010;
                          };
                          func5009.paramCounts = [2];
                          obj5007.methods["new(2)"] = func5009;
                          func5009.definitionLine = 662;
                          func5009.definitionModule = "ast";
                            var func5281 = function(argcv) {    // method new(_,_)$object(_)
                              var curarg = 1;
                              var var_methods__39__ = arguments[curarg];
                              curarg++;
                              var var_types__39__ = arguments[curarg];
                              curarg++;
                              var inheritingObject = arguments[curarg++];
                              // Start argument processing
                              curarg = 1;
                              curarg++;
                              curarg++;
                              // End argument processing
                              setModuleName("ast");
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var obj5282 = Grace_allocObject(null, "new(2)");
                              obj5282.definitionModule = "ast";
                              obj5282.definitionLine = 662;
                              var inho5282 = inheritingObject;
                              while (inho5282.superobj) inho5282 = inho5282.superobj;
                              inho5282.superobj = obj5282;
                              obj5282.data = inheritingObject.data;
                              if (inheritingObject.hasOwnProperty('_value'))
                                obj5282._value = inheritingObject._value;
                              obj5282.outer = this;
                              var reader_ast_outer5283 = function() {
                                return this.outer;
                              };
                              obj5282.methods["outer"] = reader_ast_outer5283;
                              var obj_init_5282 = function() {
                                var origSuperDepth = superDepth;
                                superDepth = obj5282;
                                var func5284 = function(argcv) {    // method name
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  setModuleName("ast");
                                  setLineNumber(671);    // compilenode member
                                  // call case 4: self request
                                  onSelf = true;
                                  var call5286 = callmethodChecked(this, "value", []);
                                  return call5286;
                                };
                                func5284.paramCounts = [0];
                                obj5282.methods["name"] = func5284;
                                func5284.definitionLine = 671;
                                func5284.definitionModule = "ast";
                                var func5287 = function(argcv) {    // method name:=(_)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_n = arguments[curarg];
                                  curarg++;
                                  setModuleName("ast");
                                  setLineNumber(673);    // compilenode identifier
                                  // call case 4: self request
                                  onSelf = true;
                                  var call5289 = callmethodChecked(this, "value:=(1)", [1], var_n);
                                  setLineNumber(674);    // compilenode identifier
                                  // call case 4: self request
                                  onSelf = true;
                                  var call5291 = callmethodChecked(this, "anonymous:=(1)", [1], GraceFalse);
                                  return call5291;
                                };
                                func5287.paramCounts = [1];
                                obj5282.methods["name:=(1)"] = func5287;
                                func5287.definitionLine = 672;
                                func5287.definitionModule = "ast";
                                var func5292 = function(argcv) {    // method asString
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  setModuleName("ast");
                                  setLineNumber(677);    // compilenode string
                                  var string5293 = new GraceString("");
                                  // call case 4: self request
                                  onSelf = true;
                                  var call5296 = callmethodChecked(this, "types", []);
                                  var string5298 = new GraceString(", types = ");
                                  // call case 4: self request
                                  onSelf = true;
                                  var call5301 = callmethodChecked(this, "methods", []);
                                  var string5303 = new GraceString("typeliteral: methods = ");
                                  var opresult5305 = callmethodChecked(string5303, "++(1)", [1], call5301);
                                  var opresult5307 = callmethodChecked(opresult5305, "++(1)", [1], string5298);
                                  var opresult5309 = callmethodChecked(opresult5307, "++(1)", [1], call5296);
                                  var opresult5311 = callmethodChecked(opresult5309, "++(1)", [1], string5293);
                                  return opresult5311;
                                };
                                func5292.paramCounts = [0];
                                obj5282.methods["asString"] = func5292;
                                func5292.definitionLine = 676;
                                func5292.definitionModule = "ast";
                                var func5312 = function(argcv) {    // method declarationKindWithAncestors(_)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_as = arguments[curarg];
                                  curarg++;
                                  setModuleName("ast");
                                  setLineNumber(679);    // compilenode member
                                  // call case 6: other requests
                                  var call5314 = callmethodChecked(var_k, "typedec", []);
                                  return call5314;
                                };
                                func5312.paramCounts = [1];
                                obj5282.methods["declarationKindWithAncestors(1)"] = func5312;
                                func5312.definitionLine = 679;
                                func5312.definitionModule = "ast";
                                var func5315 = function(argcv) {    // method isExecutable
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  setModuleName("ast");
                                  // isExecutable is a simple accessor - elide try ... catch
                                  setLineNumber(680);    // compilenode identifier
                                  return GraceFalse;
                                };
                                func5315.paramCounts = [0];
                                obj5282.methods["isExecutable"] = func5315;
                                func5315.definitionLine = 680;
                                func5315.definitionModule = "ast";
                                var func5316 = function(argcv) {    // method accept(_)from(_)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_visitor = arguments[curarg];
                                  curarg++;
                                  var var_as = arguments[curarg];
                                  curarg++;
                                  // Start argument checking
                                  curarg = 1;
                                  setLineNumber(682);    // compilenode identifier
                                  if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                              callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                  curarg++;
                                  curarg++;
                                  // End argument checking
                                  setModuleName("ast");
                                  var if5317 = GraceDone;
                                  setLineNumber(683);    // compilenode identifier
                                  // call case 6: other requests
                                  var call5319 = callmethodChecked(var_visitor, "visitTypeLiteral(1)up(1)", [1, 1], this, var_as);
                                  if (Grace_isTrue(call5319)) {
                                    setLineNumber(684);    // compilenode identifier
                                    // call case 6: other requests
                                    var call5321 = callmethodChecked(var_as, "extend(1)", [1], this);
                                    var var_newChain = call5321;
                                    setLineNumber(685);    // compilenode member
                                    // call case 4: self request
                                    onSelf = true;
                                    var call5324 = callmethodChecked(this, "methods", []);
                                    var block5325 = new GraceBlock(this, 685, 1);
                                    setLineNumber(1);    // compilenode identifier
                                    block5325.real = function(var_each) {
                                      setLineNumber(686);    // compilenode identifier
                                      // call case 6: other requests
                                      var call5327 = callmethodChecked(var_each, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                      return call5327;
                                    };
                                    // call case 5: prelude request
                                    var call5328 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call5324, block5325);
                                    setLineNumber(688);    // compilenode member
                                    // call case 4: self request
                                    onSelf = true;
                                    var call5331 = callmethodChecked(this, "types", []);
                                    var block5332 = new GraceBlock(this, 688, 1);
                                    setLineNumber(1);    // compilenode identifier
                                    block5332.real = function(var_each) {
                                      setLineNumber(689);    // compilenode identifier
                                      // call case 6: other requests
                                      var call5334 = callmethodChecked(var_each, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                      return call5334;
                                    };
                                    // call case 5: prelude request
                                    var call5335 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call5331, block5332);
                                    if5317 = call5335;
                                  }
                                  return if5317;
                                };
                                func5316.paramTypes = [];
                                func5316.paramTypes.push([]);
                                func5316.paramTypes.push([]);
                                func5316.paramCounts = [1, 1];
                                obj5282.methods["accept(1)from(1)"] = func5316;
                                func5316.definitionLine = 682;
                                func5316.definitionModule = "ast";
                                var func5336 = function(argcv) {    // method map(_)ancestors(_)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_blk = arguments[curarg];
                                  curarg++;
                                  var var_as = arguments[curarg];
                                  curarg++;
                                  setModuleName("ast");
                                  setLineNumber(694);    // compilenode member
                                  // call case 4: self request
                                  onSelf = true;
                                  var call5338 = callmethodChecked(this, "shallowCopy", []);
                                  var var_n = call5338;
                                  setLineNumber(695);    // compilenode identifier
                                  // call case 6: other requests
                                  var call5340 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                  var var_newChain = call5340;
                                  setLineNumber(696);    // compilenode member
                                  // call case 4: self request
                                  onSelf = true;
                                  var call5344 = callmethodChecked(this, "methods", []);
                                  // call case 6: other requests
                                  // call case 6: other requests
                                  // call case 3: self.outer request
                                  var call5347 = callmethodChecked(superDepth, "outer", [0]);
                                  var call5348 = callmethodChecked(call5347, "outer", []);
                                  onSelf = true;
                                  var call5349 = callmethodChecked(call5348, "listMap(2)ancestors(1)", [2, 1], call5344, var_blk, var_as);
                                  // call case 6: other requests
                                  var call5350 = callmethodChecked(var_n, "methods:=(1)", [1], call5349);
                                  setLineNumber(697);    // compilenode member
                                  // call case 4: self request
                                  onSelf = true;
                                  var call5354 = callmethodChecked(this, "types", []);
                                  // call case 6: other requests
                                  // call case 6: other requests
                                  // call case 3: self.outer request
                                  var call5357 = callmethodChecked(superDepth, "outer", [0]);
                                  var call5358 = callmethodChecked(call5357, "outer", []);
                                  onSelf = true;
                                  var call5359 = callmethodChecked(call5358, "listMap(2)ancestors(1)", [2, 1], call5354, var_blk, var_as);
                                  // call case 6: other requests
                                  var call5360 = callmethodChecked(var_n, "types:=(1)", [1], call5359);
                                  setLineNumber(698);    // compilenode identifier
                                  // call case 6: other requests
                                  var call5362 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                  return call5362;
                                };
                                func5336.paramCounts = [1, 1];
                                obj5282.methods["map(1)ancestors(1)"] = func5336;
                                func5336.definitionLine = 693;
                                func5336.definitionModule = "ast";
                                var func5363 = function(argcv) {    // method pretty(_)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_depth = arguments[curarg];
                                  curarg++;
                                  setModuleName("ast");
                                  setLineNumber(701);    // compilenode string
                                  var string5364 = new GraceString("");
                                  var var_spc = string5364;
                                  setLineNumber(702);    // compilenode num
                                  var opresult5368 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                                  var block5369 = new GraceBlock(this, 702, 1);
                                  setLineNumber(1);    // compilenode identifier
                                  block5369.real = function(var_i) {
                                    setLineNumber(703);    // compilenode string
                                    var string5370 = new GraceString("  ");
                                    var opresult5373 = callmethodChecked(var_spc, "++(1)", [1], string5370);
                                    var_spc = opresult5373;
                                    return GraceDone;
                                  };
                                  // call case 5: prelude request
                                  var call5374 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult5368, block5369);
                                  setLineNumber(705);    // compilenode string
                                  var string5375 = new GraceString("\n");
                                  // call case 1: super request
                                  var call5378 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                  var string5380 = new GraceString("");
                                  var opresult5382 = callmethodChecked(string5380, "++(1)", [1], call5378);
                                  var opresult5384 = callmethodChecked(opresult5382, "++(1)", [1], string5375);
                                  var var_s = opresult5384;
                                  setLineNumber(706);    // compilenode string
                                  var string5385 = new GraceString("Types:");
                                  var opresult5389 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                  var opresult5391 = callmethodChecked(opresult5389, "++(1)", [1], string5385);
                                  var_s = opresult5391;
                                  setLineNumber(707);    // compilenode member
                                  // call case 4: self request
                                  onSelf = true;
                                  var call5394 = callmethodChecked(this, "types", []);
                                  var block5395 = new GraceBlock(this, 707, 1);
                                  setLineNumber(1);    // compilenode identifier
                                  block5395.real = function(var_each) {
                                    setLineNumber(708);    // compilenode identifier
                                    var opresult5399 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                    // call case 6: other requests
                                    var call5400 = callmethodChecked(var_each, "pretty(1)", [1], opresult5399);
                                    var string5403 = new GraceString("\n  ");
                                    var opresult5406 = callmethodChecked(var_s, "++(1)", [1], string5403);
                                    var opresult5408 = callmethodChecked(opresult5406, "++(1)", [1], var_spc);
                                    var opresult5410 = callmethodChecked(opresult5408, "++(1)", [1], call5400);
                                    var_s = opresult5410;
                                    return GraceDone;
                                  };
                                  // call case 5: prelude request
                                  var call5411 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call5394, block5395);
                                  setLineNumber(710);    // compilenode string
                                  var string5412 = new GraceString("Methods:");
                                  var string5415 = new GraceString("\n");
                                  var opresult5418 = callmethodChecked(var_s, "++(1)", [1], string5415);
                                  var opresult5420 = callmethodChecked(opresult5418, "++(1)", [1], var_spc);
                                  var opresult5422 = callmethodChecked(opresult5420, "++(1)", [1], string5412);
                                  var_s = opresult5422;
                                  setLineNumber(711);    // compilenode member
                                  // call case 4: self request
                                  onSelf = true;
                                  var call5425 = callmethodChecked(this, "methods", []);
                                  var block5426 = new GraceBlock(this, 711, 1);
                                  setLineNumber(1);    // compilenode identifier
                                  block5426.real = function(var_each) {
                                    setLineNumber(712);    // compilenode identifier
                                    var opresult5430 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                    // call case 6: other requests
                                    var call5431 = callmethodChecked(var_each, "pretty(1)", [1], opresult5430);
                                    var string5434 = new GraceString("\n  ");
                                    var opresult5437 = callmethodChecked(var_s, "++(1)", [1], string5434);
                                    var opresult5439 = callmethodChecked(opresult5437, "++(1)", [1], var_spc);
                                    var opresult5441 = callmethodChecked(opresult5439, "++(1)", [1], call5431);
                                    var_s = opresult5441;
                                    return GraceDone;
                                  };
                                  // call case 5: prelude request
                                  var call5442 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call5425, block5426);
                                  setLineNumber(714);    // compilenode string
                                  var string5443 = new GraceString("\n");
                                  var opresult5446 = callmethodChecked(var_s, "++(1)", [1], string5443);
                                  var_s = opresult5446;
                                  setLineNumber(715);    // compilenode identifier
                                  return var_s;
                                };
                                func5363.paramCounts = [1];
                                obj5282.methods["pretty(1)"] = func5363;
                                func5363.definitionLine = 700;
                                func5363.definitionModule = "ast";
                                var func5447 = function(argcv) {    // method toGrace(_)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_depth = arguments[curarg];
                                  curarg++;
                                  // Start argument checking
                                  curarg = 1;
                                  setLineNumber(717);    // compilenode identifier
                                  if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                              callmethod(var_Number, "asString", [0])._value + "."));
                                  curarg++;
                                  // End argument checking
                                  setModuleName("ast");
                                  setLineNumber(718);    // compilenode string
                                  var string5448 = new GraceString("");
                                  var var_spc = string5448;
                                  setLineNumber(719);    // compilenode identifier
                                  var diff5452 = callmethodChecked(var_depth, "-(1)", [1], new GraceNum(1));
                                  var opresult5455 = callmethodChecked(new GraceNum(0), "..(1)", [1], diff5452);
                                  var block5456 = new GraceBlock(this, 719, 1);
                                  setLineNumber(1);    // compilenode identifier
                                  block5456.real = function(var_i) {
                                    setLineNumber(720);    // compilenode string
                                    var string5457 = new GraceString("    ");
                                    var opresult5460 = callmethodChecked(var_spc, "++(1)", [1], string5457);
                                    var_spc = opresult5460;
                                    return GraceDone;
                                  };
                                  // call case 5: prelude request
                                  var call5461 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult5455, block5456);
                                  setLineNumber(722);    // compilenode string
                                  var string5462 = new GraceString("type");
                                  var var_s = string5462;
                                  setLineNumber(723);    // compilenode string
                                  var string5463 = new GraceString(" = {");
                                  var opresult5466 = callmethodChecked(var_s, "++(1)", [1], string5463);
                                  var_s = opresult5466;
                                  setLineNumber(724);    // compilenode member
                                  // call case 4: self request
                                  onSelf = true;
                                  var call5469 = callmethodChecked(this, "methods", []);
                                  var block5470 = new GraceBlock(this, 724, 1);
                                  setLineNumber(1);    // compilenode identifier
                                  block5470.real = function(var_each) {
                                    setLineNumber(725);    // compilenode identifier
                                    var opresult5474 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                    // call case 6: other requests
                                    var call5475 = callmethodChecked(var_each, "toGrace(1)", [1], opresult5474);
                                    var string5477 = new GraceString("    ");
                                    var string5480 = new GraceString("\n");
                                    var opresult5483 = callmethodChecked(var_s, "++(1)", [1], string5480);
                                    var opresult5485 = callmethodChecked(opresult5483, "++(1)", [1], var_spc);
                                    var opresult5487 = callmethodChecked(opresult5485, "++(1)", [1], string5477);
                                    var opresult5489 = callmethodChecked(opresult5487, "++(1)", [1], call5475);
                                    var_s = opresult5489;
                                    return GraceDone;
                                  };
                                  // call case 5: prelude request
                                  var call5490 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call5469, block5470);
                                  setLineNumber(727);    // compilenode member
                                  // call case 4: self request
                                  onSelf = true;
                                  var call5493 = callmethodChecked(this, "types", []);
                                  var block5494 = new GraceBlock(this, 727, 1);
                                  setLineNumber(1);    // compilenode identifier
                                  block5494.real = function(var_each) {
                                    setLineNumber(728);    // compilenode identifier
                                    var opresult5498 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                    // call case 6: other requests
                                    var call5499 = callmethodChecked(var_each, "toGrace(1)", [1], opresult5498);
                                    var string5501 = new GraceString("    ");
                                    var string5504 = new GraceString("\n");
                                    var opresult5507 = callmethodChecked(var_s, "++(1)", [1], string5504);
                                    var opresult5509 = callmethodChecked(opresult5507, "++(1)", [1], var_spc);
                                    var opresult5511 = callmethodChecked(opresult5509, "++(1)", [1], string5501);
                                    var opresult5513 = callmethodChecked(opresult5511, "++(1)", [1], call5499);
                                    var_s = opresult5513;
                                    return GraceDone;
                                  };
                                  // call case 5: prelude request
                                  var call5514 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call5493, block5494);
                                  setLineNumber(730);    // compilenode string
                                  var string5515 = new GraceString("}");
                                  var opresult5518 = callmethodChecked(var_s, "++(1)", [1], string5515);
                                  if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], opresult5518)))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("result of method toGrace(_) does not have " + 
                                              callmethod(var_String, "asString", [0])._value + "."));
                                  return opresult5518;
                                };
                                func5447.paramTypes = [];
                                func5447.paramTypes.push([type_Number, "depth"]);
                                func5447.paramCounts = [1];
                                obj5282.methods["toGrace(1)"] = func5447;
                                func5447.definitionLine = 717;
                                func5447.definitionModule = "ast";
                                var func5519 = function(argcv) {    // method shallowCopy
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  setModuleName("ast");
                                  setLineNumber(733);    // compilenode identifier
                                  // call case 6: other requests
                                  // call case 6: other requests
                                  var call5522 = callmethodChecked(var_typeLiteralNode, "new(2)", [2], var_emptySeq, var_emptySeq);
                                  var call5523 = callmethodChecked(call5522, "shallowCopyFieldsFrom(1)", [1], this);
                                  return call5523;
                                };
                                func5519.paramCounts = [0];
                                obj5282.methods["shallowCopy"] = func5519;
                                func5519.definitionLine = 732;
                                func5519.definitionModule = "ast";
                                var func5524 = function(argcv) {    // method shallowCopyFieldsFrom(_)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_other = arguments[curarg];
                                  curarg++;
                                  setModuleName("ast");
                                  setLineNumber(736);    // compilenode identifier
                                  // call case 1: super request
                                  var call5526 = callmethodsuper(this, "shallowCopyFieldsFrom(1)", [1], var_other);
                                  setLineNumber(737);    // compilenode member
                                  // call case 6: other requests
                                  var call5529 = callmethodChecked(var_other, "nominal", []);
                                  // call case 4: self request
                                  onSelf = true;
                                  var call5530 = callmethodChecked(this, "nominal:=(1)", [1], call5529);
                                  setLineNumber(738);    // compilenode member
                                  // call case 6: other requests
                                  var call5533 = callmethodChecked(var_other, "anonymous", []);
                                  // call case 4: self request
                                  onSelf = true;
                                  var call5534 = callmethodChecked(this, "anonymous:=(1)", [1], call5533);
                                  setLineNumber(739);    // compilenode member
                                  // call case 6: other requests
                                  var call5537 = callmethodChecked(var_other, "value", []);
                                  // call case 4: self request
                                  onSelf = true;
                                  var call5538 = callmethodChecked(this, "value:=(1)", [1], call5537);
                                  setLineNumber(740);    // compilenode identifier
                                  return this;
                                };
                                func5524.paramCounts = [1];
                                obj5282.methods["shallowCopyFieldsFrom(1)"] = func5524;
                                func5524.definitionLine = 735;
                                func5524.definitionModule = "ast";
                                setLineNumber(663);    // compilenode identifier
                                // call case 6: other requests
                                // call case 6: other requests
                                // call case 3: self.outer request
                                var call5542 = callmethodChecked(superDepth, "outer", [0]);
                                var call5543 = callmethodChecked(call5542, "outer", []);
                                var call5544 = callmethodChecked(call5543, "baseNode$object(1)", [0, 1], this);
                                obj5282.superobj = call5544;
                                if (call5544.data) obj5282.data = call5544.data;
                                if (call5544.hasOwnProperty('_value'))
                                    obj5282._value = call5544._value;
                                setLineNumber(664);    // compilenode string
                                var string5545 = new GraceString("typeliteral");
                                obj5282.data["kind"] = string5545;
                                var reader_ast_kind5546 = function() {
                                  return this.data["kind"];
                                };
                                reader_ast_kind5546.def = true;
                                obj5282.methods["kind"] = reader_ast_kind5546;
                                setLineNumber(665);    // compilenode identifier
                                obj5282.data["methods"] = var_methods__39__;
                                var reader_ast_methods5547 = function() {
                                  return this.data["methods"];
                                };
                                obj5282.methods["methods"] = reader_ast_methods5547;
                                obj5282.data["methods"] = var_methods__39__;
                                var writer_ast_methods5547 = function(argcv, o) {
                                  this.data["methods"] = o;
                                  return GraceDone;
                                };
                                obj5282.methods["methods:=(1)"] = writer_ast_methods5547;
                                obj5282.mutable = true;
                                setLineNumber(666);    // compilenode identifier
                                obj5282.data["types"] = var_types__39__;
                                var reader_ast_types5548 = function() {
                                  return this.data["types"];
                                };
                                obj5282.methods["types"] = reader_ast_types5548;
                                obj5282.data["types"] = var_types__39__;
                                var writer_ast_types5548 = function(argcv, o) {
                                  this.data["types"] = o;
                                  return GraceDone;
                                };
                                obj5282.methods["types:=(1)"] = writer_ast_types5548;
                                obj5282.mutable = true;
                                setLineNumber(667);    // compilenode identifier
                                obj5282.data["nominal"] = GraceFalse;
                                var reader_ast_nominal5549 = function() {
                                  return this.data["nominal"];
                                };
                                obj5282.methods["nominal"] = reader_ast_nominal5549;
                                obj5282.data["nominal"] = GraceFalse;
                                var writer_ast_nominal5549 = function(argcv, o) {
                                  this.data["nominal"] = o;
                                  return GraceDone;
                                };
                                obj5282.methods["nominal:=(1)"] = writer_ast_nominal5549;
                                obj5282.mutable = true;
                                setLineNumber(668);    // compilenode identifier
                                obj5282.data["anonymous"] = GraceTrue;
                                var reader_ast_anonymous5550 = function() {
                                  return this.data["anonymous"];
                                };
                                obj5282.methods["anonymous"] = reader_ast_anonymous5550;
                                obj5282.data["anonymous"] = GraceTrue;
                                var writer_ast_anonymous5550 = function(argcv, o) {
                                  this.data["anonymous"] = o;
                                  return GraceDone;
                                };
                                obj5282.methods["anonymous:=(1)"] = writer_ast_anonymous5550;
                                obj5282.mutable = true;
                                setLineNumber(669);    // compilenode string
                                var string5551 = new GraceString("\u2039anon\u203a");
                                obj5282.data["value"] = string5551;
                                var reader_ast_value5552 = function() {
                                  return this.data["value"];
                                };
                                obj5282.methods["value"] = reader_ast_value5552;
                                obj5282.data["value"] = string5551;
                                var writer_ast_value5552 = function(argcv, o) {
                                  this.data["value"] = o;
                                  return GraceDone;
                                };
                                obj5282.methods["value:=(1)"] = writer_ast_value5552;
                                obj5282.mutable = true;
                                superDepth = origSuperDepth;
                              };
                              obj_init_5282.apply(inheritingObject, []);
                              return obj5282;
                              };
                              obj5007.methods["new(2)$object(1)"] = func5281;
                            superDepth = origSuperDepth;
                          };
                          obj_init_5007.apply(obj5007, []);
                          var var_typeLiteralNode = obj5007;
                          setLineNumber(1);    // compilenode method
                          var func5553 = function(argcv) {    // method typeLiteralNode
                            var returnTarget = invocationCount;
                            invocationCount++;
                            var curarg = 1;
                            setModuleName("ast");
                            // typeLiteralNode is a simple accessor - elide try ... catch
                            setLineNumber(661);    // compilenode identifier
                            return var_typeLiteralNode;
                          };
                          func5553.paramCounts = [0];
                          this.methods["typeLiteralNode"] = func5553;
                          func5553.definitionLine = 1;
                          func5553.definitionModule = "ast";
                          this.methods["typeLiteralNode"].debug = "def";
                          setLineNumber(745);    // compilenode object
                          var obj5554 = Grace_allocObject(GraceObject, "typeDecNode");
                          obj5554.definitionModule = "ast";
                          obj5554.definitionLine = 745;
                          obj5554.outer = this;
                          var reader_ast_outer5555 = function() {
                            return this.outer;
                          };
                          obj5554.methods["outer"] = reader_ast_outer5555;
                          var obj_init_5554 = function() {
                            var origSuperDepth = superDepth;
                            superDepth = obj5554;
                            var func5556 = function(argcv) {    // method new(_,_)
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              var var_name__39__ = arguments[curarg];
                              curarg++;
                              var var_typeValue = arguments[curarg];
                              curarg++;
                              setModuleName("ast");
                              setLineNumber(746);    // compilenode object
                              var obj5557 = Grace_allocObject(null, "typeDecNode.new(_,_)");
                              obj5557.definitionModule = "ast";
                              obj5557.definitionLine = 746;
                              obj5557.outer = this;
                              var reader_ast_outer5558 = function() {
                                return this.outer;
                              };
                              obj5557.methods["outer"] = reader_ast_outer5558;
                              var obj_init_5557 = function() {
                                var origSuperDepth = superDepth;
                                superDepth = obj5557;
                                var func5559 = function(argcv) {    // method isLegalInTrait
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  setModuleName("ast");
                                  // isLegalInTrait is a simple accessor - elide try ... catch
                                  setLineNumber(755);    // compilenode identifier
                                  return GraceTrue;
                                };
                                func5559.paramCounts = [0];
                                obj5557.methods["isLegalInTrait"] = func5559;
                                func5559.definitionLine = 755;
                                func5559.definitionModule = "ast";
                                var func5560 = function(argcv) {    // method isTypeDec
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  setModuleName("ast");
                                  // isTypeDec is a simple accessor - elide try ... catch
                                  setLineNumber(756);    // compilenode identifier
                                  return GraceTrue;
                                };
                                func5560.paramCounts = [0];
                                obj5557.methods["isTypeDec"] = func5560;
                                func5560.definitionLine = 756;
                                func5560.definitionModule = "ast";
                                var func5561 = function(argcv) {    // method scope:=(_)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_st = arguments[curarg];
                                  curarg++;
                                  setModuleName("ast");
                                  setLineNumber(760);    // compilenode identifier
                                  // call case 4: self request
                                  onSelf = true;
                                  var call5563 = callmethodChecked(this, "symbolTable:=(1)", [1], var_st);
                                  setLineNumber(761);    // compilenode identifier
                                  // call case 6: other requests
                                  var call5565 = callmethodChecked(var_st, "node:=(1)", [1], this);
                                  return call5565;
                                };
                                func5561.paramCounts = [1];
                                obj5557.methods["scope:=(1)"] = func5561;
                                func5561.definitionLine = 757;
                                func5561.definitionModule = "ast";
                                var func5566 = function(argcv) {    // method isExecutable
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  setModuleName("ast");
                                  // isExecutable is a simple accessor - elide try ... catch
                                  setLineNumber(764);    // compilenode identifier
                                  return GraceTrue;
                                };
                                func5566.paramCounts = [0];
                                obj5557.methods["isExecutable"] = func5566;
                                func5566.definitionLine = 764;
                                func5566.definitionModule = "ast";
                                var func5567 = function(argcv) {    // method declarationKindWithAncestors(_)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_as = arguments[curarg];
                                  curarg++;
                                  setModuleName("ast");
                                  setLineNumber(765);    // compilenode member
                                  // call case 6: other requests
                                  var call5569 = callmethodChecked(var_k, "typeparam", []);
                                  return call5569;
                                };
                                func5567.paramCounts = [1];
                                obj5557.methods["declarationKindWithAncestors(1)"] = func5567;
                                func5567.definitionLine = 765;
                                func5567.definitionModule = "ast";
                                var func5570 = function(argcv) {    // method isConfidential
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  setModuleName("ast");
                                  var if5571 = GraceDone;
                                  setLineNumber(767);    // compilenode member
                                  // call case 6: other requests
                                  // call case 4: self request
                                  onSelf = true;
                                  var call5575 = callmethodChecked(this, "annotations", []);
                                  var call5576 = callmethodChecked(call5575, "size", []);
                                  var opresult5578 = callmethodChecked(call5576, "==(1)", [1], new GraceNum(0));
                                  if (Grace_isTrue(opresult5578)) {
                                    return GraceFalse;
                                  }
                                  setLineNumber(768);    // compilenode string
                                  var string5580 = new GraceString("confidential");
                                  // call case 6: other requests
                                  // call case 6: other requests
                                  // call case 3: self.outer request
                                  var call5583 = callmethodChecked(superDepth, "outer", [0]);
                                  var call5584 = callmethodChecked(call5583, "outer", []);
                                  onSelf = true;
                                  var call5585 = callmethodChecked(call5584, "findAnnotation(2)", [2], this, string5580);
                                  return call5585;
                                };
                                func5570.paramCounts = [0];
                                obj5557.methods["isConfidential"] = func5570;
                                func5570.definitionLine = 766;
                                func5570.definitionModule = "ast";
                                var func5586 = function(argcv) {    // method isPublic
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  setModuleName("ast");
                                  setLineNumber(770);    // compilenode member
                                  // call case 6: other requests
                                  // call case 4: self request
                                  onSelf = true;
                                  var call5589 = callmethodChecked(this, "isConfidential", []);
                                  var call5590 = callmethodChecked(call5589, "not", []);
                                  return call5590;
                                };
                                func5586.paramCounts = [0];
                                obj5557.methods["isPublic"] = func5586;
                                func5586.definitionLine = 770;
                                func5586.definitionModule = "ast";
                                var func5591 = function(argcv) {    // method isWritable
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  setModuleName("ast");
                                  // isWritable is a simple accessor - elide try ... catch
                                  setLineNumber(771);    // compilenode identifier
                                  return GraceFalse;
                                };
                                func5591.paramCounts = [0];
                                obj5557.methods["isWritable"] = func5591;
                                func5591.definitionLine = 771;
                                func5591.definitionModule = "ast";
                                var func5592 = function(argcv) {    // method isReadable
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  setModuleName("ast");
                                  setLineNumber(772);    // compilenode member
                                  // call case 4: self request
                                  onSelf = true;
                                  var call5594 = callmethodChecked(this, "isPublic", []);
                                  return call5594;
                                };
                                func5592.paramCounts = [0];
                                obj5557.methods["isReadable"] = func5592;
                                func5592.definitionLine = 772;
                                func5592.definitionModule = "ast";
                                var func5595 = function(argcv) {    // method accept(_)from(_)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_visitor = arguments[curarg];
                                  curarg++;
                                  var var_as = arguments[curarg];
                                  curarg++;
                                  // Start argument checking
                                  curarg = 1;
                                  setLineNumber(774);    // compilenode identifier
                                  if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                              callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                  curarg++;
                                  curarg++;
                                  // End argument checking
                                  setModuleName("ast");
                                  var if5596 = GraceDone;
                                  setLineNumber(775);    // compilenode identifier
                                  // call case 6: other requests
                                  var call5598 = callmethodChecked(var_visitor, "visitTypeDec(1)up(1)", [1, 1], this, var_as);
                                  if (Grace_isTrue(call5598)) {
                                    setLineNumber(776);    // compilenode identifier
                                    // call case 6: other requests
                                    var call5600 = callmethodChecked(var_as, "extend(1)", [1], this);
                                    var var_newChain = call5600;
                                    setLineNumber(777);    // compilenode identifier
                                    // call case 6: other requests
                                    // call case 4: self request
                                    onSelf = true;
                                    var call5603 = callmethodChecked(this, "name", []);
                                    var call5604 = callmethodChecked(call5603, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                    var if5605 = GraceDone;
                                    setLineNumber(778);    // compilenode member
                                    // call case 4: self request
                                    onSelf = true;
                                    var call5607 = callmethodChecked(this, "typeParams", []);
                                    var opresult5610 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call5607);
                                    if (Grace_isTrue(opresult5610)) {
                                      setLineNumber(779);    // compilenode identifier
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call5613 = callmethodChecked(this, "typeParams", []);
                                      var call5614 = callmethodChecked(call5613, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                      if5605 = call5614;
                                    }
                                    setLineNumber(781);    // compilenode block
                                    var block5616 = new GraceBlock(this, 781, 1);
                                    setLineNumber(1);    // compilenode identifier
                                    block5616.real = function(var_each) {
                                      setLineNumber(781);    // compilenode identifier
                                      // call case 6: other requests
                                      var call5618 = callmethodChecked(var_each, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                      return call5618;
                                    };
                                    // call case 6: other requests
                                    // call case 4: self request
                                    onSelf = true;
                                    var call5620 = callmethodChecked(this, "annotations", []);
                                    var call5621 = callmethodChecked(call5620, "do(1)", [1], block5616);
                                    setLineNumber(782);    // compilenode identifier
                                    // call case 6: other requests
                                    // call case 4: self request
                                    onSelf = true;
                                    var call5624 = callmethodChecked(this, "value", []);
                                    var call5625 = callmethodChecked(call5624, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                    if5596 = call5625;
                                  }
                                  return if5596;
                                };
                                func5595.paramTypes = [];
                                func5595.paramTypes.push([]);
                                func5595.paramTypes.push([]);
                                func5595.paramCounts = [1, 1];
                                obj5557.methods["accept(1)from(1)"] = func5595;
                                func5595.definitionLine = 774;
                                func5595.definitionModule = "ast";
                                var func5626 = function(argcv) {    // method map(_)ancestors(_)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_blk = arguments[curarg];
                                  curarg++;
                                  var var_as = arguments[curarg];
                                  curarg++;
                                  setModuleName("ast");
                                  setLineNumber(786);    // compilenode member
                                  // call case 4: self request
                                  onSelf = true;
                                  var call5628 = callmethodChecked(this, "shallowCopy", []);
                                  var var_n = call5628;
                                  setLineNumber(787);    // compilenode identifier
                                  // call case 6: other requests
                                  var call5630 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                  var var_newChain = call5630;
                                  setLineNumber(788);    // compilenode identifier
                                  // call case 6: other requests
                                  // call case 4: self request
                                  onSelf = true;
                                  var call5634 = callmethodChecked(this, "name", []);
                                  var call5635 = callmethodChecked(call5634, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
                                  // call case 6: other requests
                                  var call5636 = callmethodChecked(var_n, "name:=(1)", [1], call5635);
                                  setLineNumber(789);    // compilenode member
                                  // call case 4: self request
                                  onSelf = true;
                                  var call5640 = callmethodChecked(this, "typeParams", []);
                                  // call case 6: other requests
                                  // call case 6: other requests
                                  // call case 3: self.outer request
                                  var call5643 = callmethodChecked(superDepth, "outer", [0]);
                                  var call5644 = callmethodChecked(call5643, "outer", []);
                                  onSelf = true;
                                  var call5645 = callmethodChecked(call5644, "maybeMap(2)ancestors(1)", [2, 1], call5640, var_blk, var_newChain);
                                  // call case 6: other requests
                                  var call5646 = callmethodChecked(var_n, "typeParams:=(1)", [1], call5645);
                                  setLineNumber(790);    // compilenode identifier
                                  // call case 6: other requests
                                  // call case 4: self request
                                  onSelf = true;
                                  var call5650 = callmethodChecked(this, "value", []);
                                  var call5651 = callmethodChecked(call5650, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
                                  // call case 6: other requests
                                  var call5652 = callmethodChecked(var_n, "value:=(1)", [1], call5651);
                                  setLineNumber(791);    // compilenode member
                                  // call case 4: self request
                                  onSelf = true;
                                  var call5656 = callmethodChecked(this, "annotations", []);
                                  // call case 6: other requests
                                  // call case 6: other requests
                                  // call case 3: self.outer request
                                  var call5659 = callmethodChecked(superDepth, "outer", [0]);
                                  var call5660 = callmethodChecked(call5659, "outer", []);
                                  onSelf = true;
                                  var call5661 = callmethodChecked(call5660, "listMap(2)ancestors(1)", [2, 1], call5656, var_blk, var_newChain);
                                  // call case 6: other requests
                                  var call5662 = callmethodChecked(var_n, "annotations:=(1)", [1], call5661);
                                  setLineNumber(792);    // compilenode identifier
                                  // call case 6: other requests
                                  var call5664 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                  return call5664;
                                };
                                func5626.paramCounts = [1, 1];
                                obj5557.methods["map(1)ancestors(1)"] = func5626;
                                func5626.definitionLine = 785;
                                func5626.definitionModule = "ast";
                                var func5665 = function(argcv) {    // method pretty(_)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_depth = arguments[curarg];
                                  curarg++;
                                  setModuleName("ast");
                                  setLineNumber(795);    // compilenode string
                                  var string5666 = new GraceString("");
                                  var var_spc = string5666;
                                  setLineNumber(796);    // compilenode num
                                  var opresult5670 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                                  var block5671 = new GraceBlock(this, 796, 1);
                                  setLineNumber(1);    // compilenode identifier
                                  block5671.real = function(var_i) {
                                    setLineNumber(797);    // compilenode string
                                    var string5672 = new GraceString("  ");
                                    var opresult5675 = callmethodChecked(var_spc, "++(1)", [1], string5672);
                                    var_spc = opresult5675;
                                    return GraceDone;
                                  };
                                  // call case 5: prelude request
                                  var call5676 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult5670, block5671);
                                  setLineNumber(799);    // compilenode string
                                  var string5677 = new GraceString("\n");
                                  // call case 1: super request
                                  var call5680 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                  var opresult5682 = callmethodChecked(call5680, "++(1)", [1], string5677);
                                  var var_s = opresult5682;
                                  setLineNumber(800);    // compilenode string
                                  var string5683 = new GraceString("\n");
                                  var opresult5688 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                  // call case 6: other requests
                                  // call case 4: self request
                                  onSelf = true;
                                  var call5690 = callmethodChecked(this, "name", []);
                                  var call5691 = callmethodChecked(call5690, "pretty(1)", [1], opresult5688);
                                  var opresult5695 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                  var opresult5697 = callmethodChecked(opresult5695, "++(1)", [1], call5691);
                                  var opresult5699 = callmethodChecked(opresult5697, "++(1)", [1], string5683);
                                  var_s = opresult5699;
                                  var if5700 = GraceDone;
                                  setLineNumber(801);    // compilenode member
                                  // call case 4: self request
                                  onSelf = true;
                                  var call5702 = callmethodChecked(this, "typeParams", []);
                                  var opresult5705 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call5702);
                                  if (Grace_isTrue(opresult5705)) {
                                    setLineNumber(802);    // compilenode string
                                    var string5706 = new GraceString("\n");
                                    var opresult5711 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                    // call case 6: other requests
                                    // call case 4: self request
                                    onSelf = true;
                                    var call5713 = callmethodChecked(this, "typeParams", []);
                                    var call5714 = callmethodChecked(call5713, "pretty(1)", [1], opresult5711);
                                    var string5716 = new GraceString("Type parameters:\n");
                                    var string5719 = new GraceString("");
                                    var string5722 = new GraceString("");
                                    var opresult5724 = callmethodChecked(string5722, "++(1)", [1], var_s);
                                    var opresult5726 = callmethodChecked(opresult5724, "++(1)", [1], string5719);
                                    var opresult5728 = callmethodChecked(opresult5726, "++(1)", [1], var_spc);
                                    var opresult5730 = callmethodChecked(opresult5728, "++(1)", [1], string5716);
                                    var opresult5732 = callmethodChecked(opresult5730, "++(1)", [1], call5714);
                                    var opresult5734 = callmethodChecked(opresult5732, "++(1)", [1], string5706);
                                    var_s = opresult5734;
                                    if5700 = GraceDone;
                                  }
                                  setLineNumber(804);    // compilenode string
                                  var string5735 = new GraceString("Value:");
                                  var opresult5739 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                  var opresult5741 = callmethodChecked(opresult5739, "++(1)", [1], string5735);
                                  var_s = opresult5741;
                                  setLineNumber(805);    // compilenode identifier
                                  var opresult5745 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                  // call case 6: other requests
                                  // call case 4: self request
                                  onSelf = true;
                                  var call5747 = callmethodChecked(this, "value", []);
                                  var call5748 = callmethodChecked(call5747, "pretty(1)", [1], opresult5745);
                                  var opresult5751 = callmethodChecked(var_s, "++(1)", [1], call5748);
                                  var_s = opresult5751;
                                  setLineNumber(806);    // compilenode string
                                  var string5752 = new GraceString("\n");
                                  var opresult5755 = callmethodChecked(var_s, "++(1)", [1], string5752);
                                  var_s = opresult5755;
                                  var if5756 = GraceDone;
                                  setLineNumber(807);    // compilenode member
                                  // call case 4: self request
                                  onSelf = true;
                                  var call5758 = callmethodChecked(this, "comments", []);
                                  var opresult5761 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call5758);
                                  if (Grace_isTrue(opresult5761)) {
                                    setLineNumber(808);    // compilenode identifier
                                    var opresult5765 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                    // call case 6: other requests
                                    // call case 4: self request
                                    onSelf = true;
                                    var call5767 = callmethodChecked(this, "comments", []);
                                    var call5768 = callmethodChecked(call5767, "pretty(1)", [1], opresult5765);
                                    var opresult5771 = callmethodChecked(var_s, "++(1)", [1], call5768);
                                    var_s = opresult5771;
                                    if5756 = GraceDone;
                                  }
                                  setLineNumber(810);    // compilenode identifier
                                  return var_s;
                                };
                                func5665.paramCounts = [1];
                                obj5557.methods["pretty(1)"] = func5665;
                                func5665.definitionLine = 794;
                                func5665.definitionModule = "ast";
                                var func5772 = function(argcv) {    // method toGrace(_)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_depth = arguments[curarg];
                                  curarg++;
                                  // Start argument checking
                                  curarg = 1;
                                  setLineNumber(812);    // compilenode identifier
                                  if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                              callmethod(var_Number, "asString", [0])._value + "."));
                                  curarg++;
                                  // End argument checking
                                  setModuleName("ast");
                                  setLineNumber(813);    // compilenode string
                                  var string5773 = new GraceString("");
                                  var var_spc = string5773;
                                  setLineNumber(814);    // compilenode identifier
                                  var diff5777 = callmethodChecked(var_depth, "-(1)", [1], new GraceNum(1));
                                  var opresult5780 = callmethodChecked(new GraceNum(0), "..(1)", [1], diff5777);
                                  var block5781 = new GraceBlock(this, 814, 1);
                                  setLineNumber(1);    // compilenode identifier
                                  block5781.real = function(var_i) {
                                    setLineNumber(815);    // compilenode string
                                    var string5782 = new GraceString("    ");
                                    var opresult5785 = callmethodChecked(var_spc, "++(1)", [1], string5782);
                                    var_spc = opresult5785;
                                    return GraceDone;
                                  };
                                  // call case 5: prelude request
                                  var call5786 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult5780, block5781);
                                  setLineNumber(817);    // compilenode string
                                  var string5787 = new GraceString("");
                                  var var_s = string5787;
                                  setLineNumber(818);    // compilenode string
                                  var string5788 = new GraceString("");
                                  // call case 4: self request
                                  onSelf = true;
                                  var call5791 = callmethodChecked(this, "name", []);
                                  var string5793 = new GraceString("type ");
                                  var opresult5795 = callmethodChecked(string5793, "++(1)", [1], call5791);
                                  var opresult5797 = callmethodChecked(opresult5795, "++(1)", [1], string5788);
                                  var_s = opresult5797;
                                  var if5798 = GraceDone;
                                  setLineNumber(819);    // compilenode member
                                  // call case 4: self request
                                  onSelf = true;
                                  var call5800 = callmethodChecked(this, "typeParams", []);
                                  var opresult5803 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call5800);
                                  if (Grace_isTrue(opresult5803)) {
                                    setLineNumber(820);    // compilenode num
                                    // call case 6: other requests
                                    // call case 4: self request
                                    onSelf = true;
                                    var call5806 = callmethodChecked(this, "typeParams", []);
                                    var call5807 = callmethodChecked(call5806, "toGrace(1)", [1], new GraceNum(0));
                                    if5798 = call5807;
                                  }
                                  setLineNumber(822);    // compilenode identifier
                                  var opresult5811 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                  // call case 6: other requests
                                  // call case 4: self request
                                  onSelf = true;
                                  var call5813 = callmethodChecked(this, "value", []);
                                  var call5814 = callmethodChecked(call5813, "toGrace(1)", [1], opresult5811);
                                  var string5816 = new GraceString(" = ");
                                  var opresult5819 = callmethodChecked(var_s, "++(1)", [1], string5816);
                                  var opresult5821 = callmethodChecked(opresult5819, "++(1)", [1], call5814);
                                  if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], opresult5821)))
                                      throw new GraceExceptionPacket(TypeErrorObject,
                                          new GraceString("result of method toGrace(_) does not have " + 
                                              callmethod(var_String, "asString", [0])._value + "."));
                                  return opresult5821;
                                };
                                func5772.paramTypes = [];
                                func5772.paramTypes.push([type_Number, "depth"]);
                                func5772.paramCounts = [1];
                                obj5557.methods["toGrace(1)"] = func5772;
                                func5772.definitionLine = 812;
                                func5772.definitionModule = "ast";
                                var func5822 = function(argcv) {    // method shallowCopy
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  setModuleName("ast");
                                  setLineNumber(825);    // compilenode identifier
                                  // call case 6: other requests
                                  // call case 4: self request
                                  onSelf = true;
                                  var call5826 = callmethodChecked(this, "name", []);
                                  // call case 6: other requests
                                  var call5827 = callmethodChecked(var_typeDecNode, "new(2)", [2], call5826, var_nullNode);
                                  var call5828 = callmethodChecked(call5827, "shallowCopyFieldsFrom(1)", [1], this);
                                  return call5828;
                                };
                                func5822.paramCounts = [0];
                                obj5557.methods["shallowCopy"] = func5822;
                                func5822.definitionLine = 824;
                                func5822.definitionModule = "ast";
                                setLineNumber(747);    // compilenode identifier
                                // call case 6: other requests
                                // call case 6: other requests
                                // call case 3: self.outer request
                                var call5832 = callmethodChecked(superDepth, "outer", [0]);
                                var call5833 = callmethodChecked(call5832, "outer", []);
                                var call5834 = callmethodChecked(call5833, "baseNode$object(1)", [0, 1], this);
                                obj5557.superobj = call5834;
                                if (call5834.data) obj5557.data = call5834.data;
                                if (call5834.hasOwnProperty('_value'))
                                    obj5557._value = call5834._value;
                                setLineNumber(748);    // compilenode string
                                var string5835 = new GraceString("typedec");
                                obj5557.data["kind"] = string5835;
                                var reader_ast_kind5836 = function() {
                                  return this.data["kind"];
                                };
                                reader_ast_kind5836.def = true;
                                obj5557.methods["kind"] = reader_ast_kind5836;
                                setLineNumber(749);    // compilenode identifier
                                obj5557.data["name"] = var_name__39__;
                                var reader_ast_name5837 = function() {
                                  return this.data["name"];
                                };
                                obj5557.methods["name"] = reader_ast_name5837;
                                obj5557.data["name"] = var_name__39__;
                                var writer_ast_name5837 = function(argcv, o) {
                                  this.data["name"] = o;
                                  return GraceDone;
                                };
                                obj5557.methods["name:=(1)"] = writer_ast_name5837;
                                obj5557.mutable = true;
                                setLineNumber(750);    // compilenode identifier
                                obj5557.data["value"] = var_typeValue;
                                var reader_ast_value5838 = function() {
                                  return this.data["value"];
                                };
                                obj5557.methods["value"] = reader_ast_value5838;
                                obj5557.data["value"] = var_typeValue;
                                var writer_ast_value5838 = function(argcv, o) {
                                  this.data["value"] = o;
                                  return GraceDone;
                                };
                                obj5557.methods["value:=(1)"] = writer_ast_value5838;
                                obj5557.mutable = true;
                                setLineNumber(751);    // compilenode member
                                // call case 6: other requests
                                // call case 4: self request
                                onSelf = true;
                                var call5841 = callmethodChecked(this, "name", []);
                                var call5842 = callmethodChecked(call5841, "value", []);
                                obj5557.data["nameString"] = call5842;
                                var reader_ast_nameString5843 = function() {
                                  return this.data["nameString"];
                                };
                                reader_ast_nameString5843.def = true;
                                obj5557.methods["nameString"] = reader_ast_nameString5843;
                                setLineNumber(752);    // compilenode array
                                var array5844 = new PrimitiveGraceList([]);
                                obj5557.data["annotations"] = array5844;
                                var reader_ast_annotations5845 = function() {
                                  return this.data["annotations"];
                                };
                                obj5557.methods["annotations"] = reader_ast_annotations5845;
                                obj5557.data["annotations"] = array5844;
                                var writer_ast_annotations5845 = function(argcv, o) {
                                  this.data["annotations"] = o;
                                  return GraceDone;
                                };
                                obj5557.methods["annotations:=(1)"] = writer_ast_annotations5845;
                                obj5557.mutable = true;
                                setLineNumber(753);    // compilenode identifier
                                obj5557.data["typeParams"] = GraceFalse;
                                var reader_ast_typeParams5846 = function() {
                                  return this.data["typeParams"];
                                };
                                obj5557.methods["typeParams"] = reader_ast_typeParams5846;
                                obj5557.data["typeParams"] = GraceFalse;
                                var writer_ast_typeParams5846 = function(argcv, o) {
                                  this.data["typeParams"] = o;
                                  return GraceDone;
                                };
                                obj5557.methods["typeParams:=(1)"] = writer_ast_typeParams5846;
                                obj5557.mutable = true;
                                superDepth = origSuperDepth;
                              };
                              obj_init_5557.apply(obj5557, []);
                              return obj5557;
                            };
                            func5556.paramCounts = [2];
                            obj5554.methods["new(2)"] = func5556;
                            func5556.definitionLine = 746;
                            func5556.definitionModule = "ast";
                              var func5847 = function(argcv) {    // method new(_,_)$object(_)
                                var curarg = 1;
                                var var_name__39__ = arguments[curarg];
                                curarg++;
                                var var_typeValue = arguments[curarg];
                                curarg++;
                                var inheritingObject = arguments[curarg++];
                                // Start argument processing
                                curarg = 1;
                                curarg++;
                                curarg++;
                                // End argument processing
                                setModuleName("ast");
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var obj5848 = Grace_allocObject(null, "new(2)");
                                obj5848.definitionModule = "ast";
                                obj5848.definitionLine = 746;
                                var inho5848 = inheritingObject;
                                while (inho5848.superobj) inho5848 = inho5848.superobj;
                                inho5848.superobj = obj5848;
                                obj5848.data = inheritingObject.data;
                                if (inheritingObject.hasOwnProperty('_value'))
                                  obj5848._value = inheritingObject._value;
                                obj5848.outer = this;
                                var reader_ast_outer5849 = function() {
                                  return this.outer;
                                };
                                obj5848.methods["outer"] = reader_ast_outer5849;
                                var obj_init_5848 = function() {
                                  var origSuperDepth = superDepth;
                                  superDepth = obj5848;
                                  var func5850 = function(argcv) {    // method isLegalInTrait
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    setModuleName("ast");
                                    // isLegalInTrait is a simple accessor - elide try ... catch
                                    setLineNumber(755);    // compilenode identifier
                                    return GraceTrue;
                                  };
                                  func5850.paramCounts = [0];
                                  obj5848.methods["isLegalInTrait"] = func5850;
                                  func5850.definitionLine = 755;
                                  func5850.definitionModule = "ast";
                                  var func5851 = function(argcv) {    // method isTypeDec
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    setModuleName("ast");
                                    // isTypeDec is a simple accessor - elide try ... catch
                                    setLineNumber(756);    // compilenode identifier
                                    return GraceTrue;
                                  };
                                  func5851.paramCounts = [0];
                                  obj5848.methods["isTypeDec"] = func5851;
                                  func5851.definitionLine = 756;
                                  func5851.definitionModule = "ast";
                                  var func5852 = function(argcv) {    // method scope:=(_)
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    var var_st = arguments[curarg];
                                    curarg++;
                                    setModuleName("ast");
                                    setLineNumber(760);    // compilenode identifier
                                    // call case 4: self request
                                    onSelf = true;
                                    var call5854 = callmethodChecked(this, "symbolTable:=(1)", [1], var_st);
                                    setLineNumber(761);    // compilenode identifier
                                    // call case 6: other requests
                                    var call5856 = callmethodChecked(var_st, "node:=(1)", [1], this);
                                    return call5856;
                                  };
                                  func5852.paramCounts = [1];
                                  obj5848.methods["scope:=(1)"] = func5852;
                                  func5852.definitionLine = 757;
                                  func5852.definitionModule = "ast";
                                  var func5857 = function(argcv) {    // method isExecutable
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    setModuleName("ast");
                                    // isExecutable is a simple accessor - elide try ... catch
                                    setLineNumber(764);    // compilenode identifier
                                    return GraceTrue;
                                  };
                                  func5857.paramCounts = [0];
                                  obj5848.methods["isExecutable"] = func5857;
                                  func5857.definitionLine = 764;
                                  func5857.definitionModule = "ast";
                                  var func5858 = function(argcv) {    // method declarationKindWithAncestors(_)
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    var var_as = arguments[curarg];
                                    curarg++;
                                    setModuleName("ast");
                                    setLineNumber(765);    // compilenode member
                                    // call case 6: other requests
                                    var call5860 = callmethodChecked(var_k, "typeparam", []);
                                    return call5860;
                                  };
                                  func5858.paramCounts = [1];
                                  obj5848.methods["declarationKindWithAncestors(1)"] = func5858;
                                  func5858.definitionLine = 765;
                                  func5858.definitionModule = "ast";
                                  var func5861 = function(argcv) {    // method isConfidential
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    setModuleName("ast");
                                    var if5862 = GraceDone;
                                    setLineNumber(767);    // compilenode member
                                    // call case 6: other requests
                                    // call case 4: self request
                                    onSelf = true;
                                    var call5866 = callmethodChecked(this, "annotations", []);
                                    var call5867 = callmethodChecked(call5866, "size", []);
                                    var opresult5869 = callmethodChecked(call5867, "==(1)", [1], new GraceNum(0));
                                    if (Grace_isTrue(opresult5869)) {
                                      return GraceFalse;
                                    }
                                    setLineNumber(768);    // compilenode string
                                    var string5871 = new GraceString("confidential");
                                    // call case 6: other requests
                                    // call case 6: other requests
                                    // call case 3: self.outer request
                                    var call5874 = callmethodChecked(superDepth, "outer", [0]);
                                    var call5875 = callmethodChecked(call5874, "outer", []);
                                    onSelf = true;
                                    var call5876 = callmethodChecked(call5875, "findAnnotation(2)", [2], this, string5871);
                                    return call5876;
                                  };
                                  func5861.paramCounts = [0];
                                  obj5848.methods["isConfidential"] = func5861;
                                  func5861.definitionLine = 766;
                                  func5861.definitionModule = "ast";
                                  var func5877 = function(argcv) {    // method isPublic
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    setModuleName("ast");
                                    setLineNumber(770);    // compilenode member
                                    // call case 6: other requests
                                    // call case 4: self request
                                    onSelf = true;
                                    var call5880 = callmethodChecked(this, "isConfidential", []);
                                    var call5881 = callmethodChecked(call5880, "not", []);
                                    return call5881;
                                  };
                                  func5877.paramCounts = [0];
                                  obj5848.methods["isPublic"] = func5877;
                                  func5877.definitionLine = 770;
                                  func5877.definitionModule = "ast";
                                  var func5882 = function(argcv) {    // method isWritable
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    setModuleName("ast");
                                    // isWritable is a simple accessor - elide try ... catch
                                    setLineNumber(771);    // compilenode identifier
                                    return GraceFalse;
                                  };
                                  func5882.paramCounts = [0];
                                  obj5848.methods["isWritable"] = func5882;
                                  func5882.definitionLine = 771;
                                  func5882.definitionModule = "ast";
                                  var func5883 = function(argcv) {    // method isReadable
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    setModuleName("ast");
                                    setLineNumber(772);    // compilenode member
                                    // call case 4: self request
                                    onSelf = true;
                                    var call5885 = callmethodChecked(this, "isPublic", []);
                                    return call5885;
                                  };
                                  func5883.paramCounts = [0];
                                  obj5848.methods["isReadable"] = func5883;
                                  func5883.definitionLine = 772;
                                  func5883.definitionModule = "ast";
                                  var func5886 = function(argcv) {    // method accept(_)from(_)
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    var var_visitor = arguments[curarg];
                                    curarg++;
                                    var var_as = arguments[curarg];
                                    curarg++;
                                    // Start argument checking
                                    curarg = 1;
                                    setLineNumber(774);    // compilenode identifier
                                    if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                        throw new GraceExceptionPacket(TypeErrorObject,
                                            new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                    curarg++;
                                    curarg++;
                                    // End argument checking
                                    setModuleName("ast");
                                    var if5887 = GraceDone;
                                    setLineNumber(775);    // compilenode identifier
                                    // call case 6: other requests
                                    var call5889 = callmethodChecked(var_visitor, "visitTypeDec(1)up(1)", [1, 1], this, var_as);
                                    if (Grace_isTrue(call5889)) {
                                      setLineNumber(776);    // compilenode identifier
                                      // call case 6: other requests
                                      var call5891 = callmethodChecked(var_as, "extend(1)", [1], this);
                                      var var_newChain = call5891;
                                      setLineNumber(777);    // compilenode identifier
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call5894 = callmethodChecked(this, "name", []);
                                      var call5895 = callmethodChecked(call5894, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                      var if5896 = GraceDone;
                                      setLineNumber(778);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call5898 = callmethodChecked(this, "typeParams", []);
                                      var opresult5901 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call5898);
                                      if (Grace_isTrue(opresult5901)) {
                                        setLineNumber(779);    // compilenode identifier
                                        // call case 6: other requests
                                        // call case 4: self request
                                        onSelf = true;
                                        var call5904 = callmethodChecked(this, "typeParams", []);
                                        var call5905 = callmethodChecked(call5904, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                        if5896 = call5905;
                                      }
                                      setLineNumber(781);    // compilenode block
                                      var block5907 = new GraceBlock(this, 781, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block5907.real = function(var_each) {
                                        setLineNumber(781);    // compilenode identifier
                                        // call case 6: other requests
                                        var call5909 = callmethodChecked(var_each, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                        return call5909;
                                      };
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call5911 = callmethodChecked(this, "annotations", []);
                                      var call5912 = callmethodChecked(call5911, "do(1)", [1], block5907);
                                      setLineNumber(782);    // compilenode identifier
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call5915 = callmethodChecked(this, "value", []);
                                      var call5916 = callmethodChecked(call5915, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                      if5887 = call5916;
                                    }
                                    return if5887;
                                  };
                                  func5886.paramTypes = [];
                                  func5886.paramTypes.push([]);
                                  func5886.paramTypes.push([]);
                                  func5886.paramCounts = [1, 1];
                                  obj5848.methods["accept(1)from(1)"] = func5886;
                                  func5886.definitionLine = 774;
                                  func5886.definitionModule = "ast";
                                  var func5917 = function(argcv) {    // method map(_)ancestors(_)
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    var var_blk = arguments[curarg];
                                    curarg++;
                                    var var_as = arguments[curarg];
                                    curarg++;
                                    setModuleName("ast");
                                    setLineNumber(786);    // compilenode member
                                    // call case 4: self request
                                    onSelf = true;
                                    var call5919 = callmethodChecked(this, "shallowCopy", []);
                                    var var_n = call5919;
                                    setLineNumber(787);    // compilenode identifier
                                    // call case 6: other requests
                                    var call5921 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                    var var_newChain = call5921;
                                    setLineNumber(788);    // compilenode identifier
                                    // call case 6: other requests
                                    // call case 4: self request
                                    onSelf = true;
                                    var call5925 = callmethodChecked(this, "name", []);
                                    var call5926 = callmethodChecked(call5925, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
                                    // call case 6: other requests
                                    var call5927 = callmethodChecked(var_n, "name:=(1)", [1], call5926);
                                    setLineNumber(789);    // compilenode member
                                    // call case 4: self request
                                    onSelf = true;
                                    var call5931 = callmethodChecked(this, "typeParams", []);
                                    // call case 6: other requests
                                    // call case 6: other requests
                                    // call case 3: self.outer request
                                    var call5934 = callmethodChecked(superDepth, "outer", [0]);
                                    var call5935 = callmethodChecked(call5934, "outer", []);
                                    onSelf = true;
                                    var call5936 = callmethodChecked(call5935, "maybeMap(2)ancestors(1)", [2, 1], call5931, var_blk, var_newChain);
                                    // call case 6: other requests
                                    var call5937 = callmethodChecked(var_n, "typeParams:=(1)", [1], call5936);
                                    setLineNumber(790);    // compilenode identifier
                                    // call case 6: other requests
                                    // call case 4: self request
                                    onSelf = true;
                                    var call5941 = callmethodChecked(this, "value", []);
                                    var call5942 = callmethodChecked(call5941, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
                                    // call case 6: other requests
                                    var call5943 = callmethodChecked(var_n, "value:=(1)", [1], call5942);
                                    setLineNumber(791);    // compilenode member
                                    // call case 4: self request
                                    onSelf = true;
                                    var call5947 = callmethodChecked(this, "annotations", []);
                                    // call case 6: other requests
                                    // call case 6: other requests
                                    // call case 3: self.outer request
                                    var call5950 = callmethodChecked(superDepth, "outer", [0]);
                                    var call5951 = callmethodChecked(call5950, "outer", []);
                                    onSelf = true;
                                    var call5952 = callmethodChecked(call5951, "listMap(2)ancestors(1)", [2, 1], call5947, var_blk, var_newChain);
                                    // call case 6: other requests
                                    var call5953 = callmethodChecked(var_n, "annotations:=(1)", [1], call5952);
                                    setLineNumber(792);    // compilenode identifier
                                    // call case 6: other requests
                                    var call5955 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                    return call5955;
                                  };
                                  func5917.paramCounts = [1, 1];
                                  obj5848.methods["map(1)ancestors(1)"] = func5917;
                                  func5917.definitionLine = 785;
                                  func5917.definitionModule = "ast";
                                  var func5956 = function(argcv) {    // method pretty(_)
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    var var_depth = arguments[curarg];
                                    curarg++;
                                    setModuleName("ast");
                                    setLineNumber(795);    // compilenode string
                                    var string5957 = new GraceString("");
                                    var var_spc = string5957;
                                    setLineNumber(796);    // compilenode num
                                    var opresult5961 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                                    var block5962 = new GraceBlock(this, 796, 1);
                                    setLineNumber(1);    // compilenode identifier
                                    block5962.real = function(var_i) {
                                      setLineNumber(797);    // compilenode string
                                      var string5963 = new GraceString("  ");
                                      var opresult5966 = callmethodChecked(var_spc, "++(1)", [1], string5963);
                                      var_spc = opresult5966;
                                      return GraceDone;
                                    };
                                    // call case 5: prelude request
                                    var call5967 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult5961, block5962);
                                    setLineNumber(799);    // compilenode string
                                    var string5968 = new GraceString("\n");
                                    // call case 1: super request
                                    var call5971 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                    var opresult5973 = callmethodChecked(call5971, "++(1)", [1], string5968);
                                    var var_s = opresult5973;
                                    setLineNumber(800);    // compilenode string
                                    var string5974 = new GraceString("\n");
                                    var opresult5979 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                    // call case 6: other requests
                                    // call case 4: self request
                                    onSelf = true;
                                    var call5981 = callmethodChecked(this, "name", []);
                                    var call5982 = callmethodChecked(call5981, "pretty(1)", [1], opresult5979);
                                    var opresult5986 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                    var opresult5988 = callmethodChecked(opresult5986, "++(1)", [1], call5982);
                                    var opresult5990 = callmethodChecked(opresult5988, "++(1)", [1], string5974);
                                    var_s = opresult5990;
                                    var if5991 = GraceDone;
                                    setLineNumber(801);    // compilenode member
                                    // call case 4: self request
                                    onSelf = true;
                                    var call5993 = callmethodChecked(this, "typeParams", []);
                                    var opresult5996 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call5993);
                                    if (Grace_isTrue(opresult5996)) {
                                      setLineNumber(802);    // compilenode string
                                      var string5997 = new GraceString("\n");
                                      var opresult6002 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call6004 = callmethodChecked(this, "typeParams", []);
                                      var call6005 = callmethodChecked(call6004, "pretty(1)", [1], opresult6002);
                                      var string6007 = new GraceString("Type parameters:\n");
                                      var string6010 = new GraceString("");
                                      var string6013 = new GraceString("");
                                      var opresult6015 = callmethodChecked(string6013, "++(1)", [1], var_s);
                                      var opresult6017 = callmethodChecked(opresult6015, "++(1)", [1], string6010);
                                      var opresult6019 = callmethodChecked(opresult6017, "++(1)", [1], var_spc);
                                      var opresult6021 = callmethodChecked(opresult6019, "++(1)", [1], string6007);
                                      var opresult6023 = callmethodChecked(opresult6021, "++(1)", [1], call6005);
                                      var opresult6025 = callmethodChecked(opresult6023, "++(1)", [1], string5997);
                                      var_s = opresult6025;
                                      if5991 = GraceDone;
                                    }
                                    setLineNumber(804);    // compilenode string
                                    var string6026 = new GraceString("Value:");
                                    var opresult6030 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                    var opresult6032 = callmethodChecked(opresult6030, "++(1)", [1], string6026);
                                    var_s = opresult6032;
                                    setLineNumber(805);    // compilenode identifier
                                    var opresult6036 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                    // call case 6: other requests
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6038 = callmethodChecked(this, "value", []);
                                    var call6039 = callmethodChecked(call6038, "pretty(1)", [1], opresult6036);
                                    var opresult6042 = callmethodChecked(var_s, "++(1)", [1], call6039);
                                    var_s = opresult6042;
                                    setLineNumber(806);    // compilenode string
                                    var string6043 = new GraceString("\n");
                                    var opresult6046 = callmethodChecked(var_s, "++(1)", [1], string6043);
                                    var_s = opresult6046;
                                    var if6047 = GraceDone;
                                    setLineNumber(807);    // compilenode member
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6049 = callmethodChecked(this, "comments", []);
                                    var opresult6052 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call6049);
                                    if (Grace_isTrue(opresult6052)) {
                                      setLineNumber(808);    // compilenode identifier
                                      var opresult6056 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call6058 = callmethodChecked(this, "comments", []);
                                      var call6059 = callmethodChecked(call6058, "pretty(1)", [1], opresult6056);
                                      var opresult6062 = callmethodChecked(var_s, "++(1)", [1], call6059);
                                      var_s = opresult6062;
                                      if6047 = GraceDone;
                                    }
                                    setLineNumber(810);    // compilenode identifier
                                    return var_s;
                                  };
                                  func5956.paramCounts = [1];
                                  obj5848.methods["pretty(1)"] = func5956;
                                  func5956.definitionLine = 794;
                                  func5956.definitionModule = "ast";
                                  var func6063 = function(argcv) {    // method toGrace(_)
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    var var_depth = arguments[curarg];
                                    curarg++;
                                    // Start argument checking
                                    curarg = 1;
                                    setLineNumber(812);    // compilenode identifier
                                    if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                        throw new GraceExceptionPacket(TypeErrorObject,
                                            new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                callmethod(var_Number, "asString", [0])._value + "."));
                                    curarg++;
                                    // End argument checking
                                    setModuleName("ast");
                                    setLineNumber(813);    // compilenode string
                                    var string6064 = new GraceString("");
                                    var var_spc = string6064;
                                    setLineNumber(814);    // compilenode identifier
                                    var diff6068 = callmethodChecked(var_depth, "-(1)", [1], new GraceNum(1));
                                    var opresult6071 = callmethodChecked(new GraceNum(0), "..(1)", [1], diff6068);
                                    var block6072 = new GraceBlock(this, 814, 1);
                                    setLineNumber(1);    // compilenode identifier
                                    block6072.real = function(var_i) {
                                      setLineNumber(815);    // compilenode string
                                      var string6073 = new GraceString("    ");
                                      var opresult6076 = callmethodChecked(var_spc, "++(1)", [1], string6073);
                                      var_spc = opresult6076;
                                      return GraceDone;
                                    };
                                    // call case 5: prelude request
                                    var call6077 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult6071, block6072);
                                    setLineNumber(817);    // compilenode string
                                    var string6078 = new GraceString("");
                                    var var_s = string6078;
                                    setLineNumber(818);    // compilenode string
                                    var string6079 = new GraceString("");
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6082 = callmethodChecked(this, "name", []);
                                    var string6084 = new GraceString("type ");
                                    var opresult6086 = callmethodChecked(string6084, "++(1)", [1], call6082);
                                    var opresult6088 = callmethodChecked(opresult6086, "++(1)", [1], string6079);
                                    var_s = opresult6088;
                                    var if6089 = GraceDone;
                                    setLineNumber(819);    // compilenode member
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6091 = callmethodChecked(this, "typeParams", []);
                                    var opresult6094 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call6091);
                                    if (Grace_isTrue(opresult6094)) {
                                      setLineNumber(820);    // compilenode num
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call6097 = callmethodChecked(this, "typeParams", []);
                                      var call6098 = callmethodChecked(call6097, "toGrace(1)", [1], new GraceNum(0));
                                      if6089 = call6098;
                                    }
                                    setLineNumber(822);    // compilenode identifier
                                    var opresult6102 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                    // call case 6: other requests
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6104 = callmethodChecked(this, "value", []);
                                    var call6105 = callmethodChecked(call6104, "toGrace(1)", [1], opresult6102);
                                    var string6107 = new GraceString(" = ");
                                    var opresult6110 = callmethodChecked(var_s, "++(1)", [1], string6107);
                                    var opresult6112 = callmethodChecked(opresult6110, "++(1)", [1], call6105);
                                    if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], opresult6112)))
                                        throw new GraceExceptionPacket(TypeErrorObject,
                                            new GraceString("result of method toGrace(_) does not have " + 
                                                callmethod(var_String, "asString", [0])._value + "."));
                                    return opresult6112;
                                  };
                                  func6063.paramTypes = [];
                                  func6063.paramTypes.push([type_Number, "depth"]);
                                  func6063.paramCounts = [1];
                                  obj5848.methods["toGrace(1)"] = func6063;
                                  func6063.definitionLine = 812;
                                  func6063.definitionModule = "ast";
                                  var func6113 = function(argcv) {    // method shallowCopy
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    setModuleName("ast");
                                    setLineNumber(825);    // compilenode identifier
                                    // call case 6: other requests
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6117 = callmethodChecked(this, "name", []);
                                    // call case 6: other requests
                                    var call6118 = callmethodChecked(var_typeDecNode, "new(2)", [2], call6117, var_nullNode);
                                    var call6119 = callmethodChecked(call6118, "shallowCopyFieldsFrom(1)", [1], this);
                                    return call6119;
                                  };
                                  func6113.paramCounts = [0];
                                  obj5848.methods["shallowCopy"] = func6113;
                                  func6113.definitionLine = 824;
                                  func6113.definitionModule = "ast";
                                  setLineNumber(747);    // compilenode identifier
                                  // call case 6: other requests
                                  // call case 6: other requests
                                  // call case 3: self.outer request
                                  var call6123 = callmethodChecked(superDepth, "outer", [0]);
                                  var call6124 = callmethodChecked(call6123, "outer", []);
                                  var call6125 = callmethodChecked(call6124, "baseNode$object(1)", [0, 1], this);
                                  obj5848.superobj = call6125;
                                  if (call6125.data) obj5848.data = call6125.data;
                                  if (call6125.hasOwnProperty('_value'))
                                      obj5848._value = call6125._value;
                                  setLineNumber(748);    // compilenode string
                                  var string6126 = new GraceString("typedec");
                                  obj5848.data["kind"] = string6126;
                                  var reader_ast_kind6127 = function() {
                                    return this.data["kind"];
                                  };
                                  reader_ast_kind6127.def = true;
                                  obj5848.methods["kind"] = reader_ast_kind6127;
                                  setLineNumber(749);    // compilenode identifier
                                  obj5848.data["name"] = var_name__39__;
                                  var reader_ast_name6128 = function() {
                                    return this.data["name"];
                                  };
                                  obj5848.methods["name"] = reader_ast_name6128;
                                  obj5848.data["name"] = var_name__39__;
                                  var writer_ast_name6128 = function(argcv, o) {
                                    this.data["name"] = o;
                                    return GraceDone;
                                  };
                                  obj5848.methods["name:=(1)"] = writer_ast_name6128;
                                  obj5848.mutable = true;
                                  setLineNumber(750);    // compilenode identifier
                                  obj5848.data["value"] = var_typeValue;
                                  var reader_ast_value6129 = function() {
                                    return this.data["value"];
                                  };
                                  obj5848.methods["value"] = reader_ast_value6129;
                                  obj5848.data["value"] = var_typeValue;
                                  var writer_ast_value6129 = function(argcv, o) {
                                    this.data["value"] = o;
                                    return GraceDone;
                                  };
                                  obj5848.methods["value:=(1)"] = writer_ast_value6129;
                                  obj5848.mutable = true;
                                  setLineNumber(751);    // compilenode member
                                  // call case 6: other requests
                                  // call case 4: self request
                                  onSelf = true;
                                  var call6132 = callmethodChecked(this, "name", []);
                                  var call6133 = callmethodChecked(call6132, "value", []);
                                  obj5848.data["nameString"] = call6133;
                                  var reader_ast_nameString6134 = function() {
                                    return this.data["nameString"];
                                  };
                                  reader_ast_nameString6134.def = true;
                                  obj5848.methods["nameString"] = reader_ast_nameString6134;
                                  setLineNumber(752);    // compilenode array
                                  var array6135 = new PrimitiveGraceList([]);
                                  obj5848.data["annotations"] = array6135;
                                  var reader_ast_annotations6136 = function() {
                                    return this.data["annotations"];
                                  };
                                  obj5848.methods["annotations"] = reader_ast_annotations6136;
                                  obj5848.data["annotations"] = array6135;
                                  var writer_ast_annotations6136 = function(argcv, o) {
                                    this.data["annotations"] = o;
                                    return GraceDone;
                                  };
                                  obj5848.methods["annotations:=(1)"] = writer_ast_annotations6136;
                                  obj5848.mutable = true;
                                  setLineNumber(753);    // compilenode identifier
                                  obj5848.data["typeParams"] = GraceFalse;
                                  var reader_ast_typeParams6137 = function() {
                                    return this.data["typeParams"];
                                  };
                                  obj5848.methods["typeParams"] = reader_ast_typeParams6137;
                                  obj5848.data["typeParams"] = GraceFalse;
                                  var writer_ast_typeParams6137 = function(argcv, o) {
                                    this.data["typeParams"] = o;
                                    return GraceDone;
                                  };
                                  obj5848.methods["typeParams:=(1)"] = writer_ast_typeParams6137;
                                  obj5848.mutable = true;
                                  superDepth = origSuperDepth;
                                };
                                obj_init_5848.apply(inheritingObject, []);
                                return obj5848;
                                };
                                obj5554.methods["new(2)$object(1)"] = func5847;
                              superDepth = origSuperDepth;
                            };
                            obj_init_5554.apply(obj5554, []);
                            var var_typeDecNode = obj5554;
                            setLineNumber(1);    // compilenode method
                            var func6138 = function(argcv) {    // method typeDecNode
                              var returnTarget = invocationCount;
                              invocationCount++;
                              var curarg = 1;
                              setModuleName("ast");
                              // typeDecNode is a simple accessor - elide try ... catch
                              setLineNumber(745);    // compilenode identifier
                              return var_typeDecNode;
                            };
                            func6138.paramCounts = [0];
                            this.methods["typeDecNode"] = func6138;
                            func6138.definitionLine = 1;
                            func6138.definitionModule = "ast";
                            this.methods["typeDecNode"].debug = "def";
                            setLineNumber(830);    // compilenode object
                            var obj6139 = Grace_allocObject(GraceObject, "methodNode");
                            obj6139.definitionModule = "ast";
                            obj6139.definitionLine = 830;
                            obj6139.outer = this;
                            var reader_ast_outer6140 = function() {
                              return this.outer;
                            };
                            obj6139.methods["outer"] = reader_ast_outer6140;
                            var obj_init_6139 = function() {
                              var origSuperDepth = superDepth;
                              superDepth = obj6139;
                              var func6141 = function(argcv) {    // method new(_,_,_)scope(_)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_signature = arguments[curarg];
                                curarg++;
                                var var_body = arguments[curarg];
                                curarg++;
                                var var_dtype = arguments[curarg];
                                curarg++;
                                var var_s = arguments[curarg];
                                curarg++;
                                setModuleName("ast");
                                setLineNumber(832);    // compilenode identifier
                                // call case 4: self request
                                onSelf = true;
                                var call6143 = callmethodChecked(this, "new(3)", [3], var_signature, var_body, var_dtype);
                                var var_result = call6143;
                                setLineNumber(833);    // compilenode identifier
                                // call case 6: other requests
                                var call6145 = callmethodChecked(var_result, "scope:=(1)", [1], var_s);
                                setLineNumber(834);    // compilenode identifier
                                return var_result;
                              };
                              func6141.paramCounts = [3, 1];
                              obj6139.methods["new(3)scope(1)"] = func6141;
                              func6141.definitionLine = 831;
                              func6141.definitionModule = "ast";
                              var func6146 = function(argcv) {    // method new(_,_,_)
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                var var_signature__39__ = arguments[curarg];
                                curarg++;
                                var var_body__39__ = arguments[curarg];
                                curarg++;
                                var var_dtype__39__ = arguments[curarg];
                                curarg++;
                                setModuleName("ast");
                                setLineNumber(837);    // compilenode object
                                var obj6147 = Grace_allocObject(null, "methodNode.new(_,_,_)");
                                obj6147.definitionModule = "ast";
                                obj6147.definitionLine = 837;
                                obj6147.outer = this;
                                var reader_ast_outer6148 = function() {
                                  return this.outer;
                                };
                                obj6147.methods["outer"] = reader_ast_outer6148;
                                var obj_init_6147 = function() {
                                  var origSuperDepth = superDepth;
                                  superDepth = obj6147;
                                  var func6149 = function(argcv) {    // method appliedOccurence
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    setModuleName("ast");
                                    setLineNumber(859);    // compilenode identifier
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6151 = callmethodChecked(this, "isBindingOccurence:=(1)", [1], GraceFalse);
                                    var if6152 = GraceDone;
                                    setLineNumber(860);    // compilenode member
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6154 = callmethodChecked(this, "cachedIdentifier", []);
                                    var opresult6157 = callmethodChecked(var_uninitialized, "\u2260(1)", [1], call6154);
                                    if (Grace_isTrue(opresult6157)) {
                                      setLineNumber(861);    // compilenode identifier
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call6160 = callmethodChecked(this, "cachedIdentifier", []);
                                      var call6161 = callmethodChecked(call6160, "isBindingOccurence:=(1)", [1], GraceFalse);
                                      if6152 = call6161;
                                    }
                                    setLineNumber(863);    // compilenode identifier
                                    return this;
                                  };
                                  func6149.paramCounts = [0];
                                  obj6147.methods["appliedOccurence"] = func6149;
                                  func6149.definitionLine = 858;
                                  func6149.definitionModule = "ast";
                                  var func6162 = function(argcv) {    // method numParams
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    setModuleName("ast");
                                    setLineNumber(866);    // compilenode block
                                    var block6164 = new GraceBlock(this, 866, 2);
                                    setLineNumber(1);    // compilenode identifier
                                    block6164.real = function(var_acc, var_p) {
                                      setLineNumber(866);    // compilenode member
                                      // call case 6: other requests
                                      var call6166 = callmethodChecked(var_p, "numParams", []);
                                      var opresult6169 = callmethodChecked(var_acc, "+(1)", [1], call6166);
                                      return opresult6169;
                                    };
                                    // call case 6: other requests
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6171 = callmethodChecked(this, "signature", []);
                                    var call6172 = callmethodChecked(call6171, "fold(1)startingWith(1)", [1, 1], block6164, new GraceNum(0));
                                    return call6172;
                                  };
                                  func6162.paramCounts = [0];
                                  obj6147.methods["numParams"] = func6162;
                                  func6162.definitionLine = 865;
                                  func6162.definitionModule = "ast";
                                  var func6173 = function(argcv) {    // method endPos
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    setModuleName("ast");
                                    setLineNumber(869);    // compilenode member
                                    // call case 6: other requests
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6176 = callmethodChecked(this, "signature", []);
                                    var call6177 = callmethodChecked(call6176, "last", []);
                                    var var_lastPart = call6177;
                                    setLineNumber(870);    // compilenode member
                                    // call case 6: other requests
                                    // call case 6: other requests
                                    var call6181 = callmethodChecked(var_lastPart, "name", []);
                                    var call6182 = callmethodChecked(call6181, "size", []);
                                    // call case 6: other requests
                                    var call6185 = callmethodChecked(var_lastPart, "linePos", []);
                                    var opresult6187 = callmethodChecked(call6185, "+(1)", [1], call6182);
                                    var diff6189 = callmethodChecked(opresult6187, "-(1)", [1], new GraceNum(1));
                                    return diff6189;
                                  };
                                  func6173.paramCounts = [0];
                                  obj6147.methods["endPos"] = func6173;
                                  func6173.definitionLine = 868;
                                  func6173.definitionModule = "ast";
                                  var func6190 = function(argcv) {    // method nameString
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    setModuleName("ast");
                                    setLineNumber(874);    // compilenode block
                                    var block6192 = new GraceBlock(this, 874, 2);
                                    setLineNumber(1);    // compilenode identifier
                                    block6192.real = function(var_acc, var_each) {
                                      setLineNumber(874);    // compilenode member
                                      // call case 6: other requests
                                      var call6194 = callmethodChecked(var_each, "nameString", []);
                                      var opresult6197 = callmethodChecked(var_acc, "++(1)", [1], call6194);
                                      return opresult6197;
                                    };
                                    setLineNumber(875);    // compilenode string
                                    var string6198 = new GraceString("");
                                    // call case 6: other requests
                                    setLineNumber(874);    // compilenode member
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6200 = callmethodChecked(this, "signature", []);
                                    var call6201 = callmethodChecked(call6200, "fold(1)startingWith(1)", [1, 1], block6192, string6198);
                                    return call6201;
                                  };
                                  func6190.paramCounts = [0];
                                  obj6147.methods["nameString"] = func6190;
                                  func6190.definitionLine = 873;
                                  func6190.definitionModule = "ast";
                                  var func6202 = function(argcv) {    // method asIdentifier
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    setModuleName("ast");
                                    var if6203 = GraceDone;
                                    setLineNumber(878);    // compilenode member
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6205 = callmethodChecked(this, "cachedIdentifier", []);
                                    var opresult6208 = callmethodChecked(var_uninitialized, "==(1)", [1], call6205);
                                    if (Grace_isTrue(opresult6208)) {
                                      setLineNumber(879);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call6212 = callmethodChecked(this, "nameString", []);
                                      // call case 6: other requests
                                      var call6213 = callmethodChecked(var_identifierNode, "new(2)", [2], call6212, GraceFalse);
                                      // call case 4: self request
                                      onSelf = true;
                                      var call6214 = callmethodChecked(this, "cachedIdentifier:=(1)", [1], call6213);
                                      setLineNumber(880);    // compilenode member
                                      // call case 6: other requests
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call6219 = callmethodChecked(this, "signature", []);
                                      var call6220 = callmethodChecked(call6219, "first", []);
                                      var call6221 = callmethodChecked(call6220, "line", []);
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call6223 = callmethodChecked(this, "cachedIdentifier", []);
                                      var call6224 = callmethodChecked(call6223, "line:=(1)", [1], call6221);
                                      setLineNumber(881);    // compilenode member
                                      // call case 6: other requests
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call6229 = callmethodChecked(this, "signature", []);
                                      var call6230 = callmethodChecked(call6229, "first", []);
                                      var call6231 = callmethodChecked(call6230, "linePos", []);
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call6233 = callmethodChecked(this, "cachedIdentifier", []);
                                      var call6234 = callmethodChecked(call6233, "linePos:=(1)", [1], call6231);
                                      setLineNumber(882);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call6237 = callmethodChecked(this, "isBindingOccurence", []);
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call6239 = callmethodChecked(this, "cachedIdentifier", []);
                                      var call6240 = callmethodChecked(call6239, "isBindingOccurrence:=(1)", [1], call6237);
                                      if6203 = call6240;
                                    }
                                    setLineNumber(884);    // compilenode member
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6242 = callmethodChecked(this, "cachedIdentifier", []);
                                    return call6242;
                                  };
                                  func6202.paramCounts = [0];
                                  obj6147.methods["asIdentifier"] = func6202;
                                  func6202.definitionLine = 877;
                                  func6202.definitionModule = "ast";
                                  var func6243 = function(argcv) {    // method value
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    setModuleName("ast");
                                    setLineNumber(886);    // compilenode member
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6245 = callmethodChecked(this, "asIdentifier", []);
                                    return call6245;
                                  };
                                  func6243.paramCounts = [0];
                                  obj6147.methods["value"] = func6243;
                                  func6243.definitionLine = 886;
                                  func6243.definitionModule = "ast";
                                  var func6246 = function(argcv) {    // method canonicalName
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    setModuleName("ast");
                                    setLineNumber(888);    // compilenode block
                                    var block6248 = new GraceBlock(this, 888, 2);
                                    setLineNumber(1);    // compilenode identifier
                                    block6248.real = function(var_acc, var_each) {
                                      setLineNumber(888);    // compilenode member
                                      // call case 6: other requests
                                      var call6250 = callmethodChecked(var_each, "canonicalName", []);
                                      var opresult6253 = callmethodChecked(var_acc, "++(1)", [1], call6250);
                                      return opresult6253;
                                    };
                                    setLineNumber(889);    // compilenode string
                                    var string6254 = new GraceString("");
                                    // call case 6: other requests
                                    setLineNumber(888);    // compilenode member
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6256 = callmethodChecked(this, "signature", []);
                                    var call6257 = callmethodChecked(call6256, "fold(1)startingWith(1)", [1, 1], block6248, string6254);
                                    return call6257;
                                  };
                                  func6246.paramCounts = [0];
                                  obj6147.methods["canonicalName"] = func6246;
                                  func6246.definitionLine = 887;
                                  func6246.definitionModule = "ast";
                                  var func6258 = function(argcv) {    // method hasParams
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    setModuleName("ast");
                                    setLineNumber(891);    // compilenode member
                                    // call case 6: other requests
                                    // call case 6: other requests
                                    // call case 6: other requests
                                    // call case 6: other requests
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6264 = callmethodChecked(this, "signature", []);
                                    var call6265 = callmethodChecked(call6264, "first", []);
                                    var call6266 = callmethodChecked(call6265, "params", []);
                                    var call6267 = callmethodChecked(call6266, "isEmpty", []);
                                    var call6268 = callmethodChecked(call6267, "not", []);
                                    return call6268;
                                  };
                                  func6258.paramCounts = [0];
                                  obj6147.methods["hasParams"] = func6258;
                                  func6258.definitionLine = 891;
                                  func6258.definitionModule = "ast";
                                  var func6269 = function(argcv) {    // method numParamLists
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    setModuleName("ast");
                                    setLineNumber(895);    // compilenode member
                                    // call case 6: other requests
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6272 = callmethodChecked(this, "signature", []);
                                    var call6273 = callmethodChecked(call6272, "size", []);
                                    var var_sigSz = call6273;
                                    var if6274 = GraceDone;
                                    setLineNumber(896);    // compilenode identifier
                                    var opresult6277 = callmethodChecked(var_sigSz, ">(1)", [1], new GraceNum(1));
                                    if (Grace_isTrue(opresult6277)) {
                                      return var_sigSz;
                                    }
                                    var if6278 = GraceDone;
                                    setLineNumber(897);    // compilenode member
                                    // call case 6: other requests
                                    // call case 6: other requests
                                    // call case 6: other requests
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6283 = callmethodChecked(this, "signature", []);
                                    var call6284 = callmethodChecked(call6283, "first", []);
                                    var call6285 = callmethodChecked(call6284, "params", []);
                                    var call6286 = callmethodChecked(call6285, "isEmpty", []);
                                    if (Grace_isTrue(call6286)) {
                                      return new GraceNum(0);
                                    }
                                    setLineNumber(898);    // compilenode num
                                    return new GraceNum(1);
                                  };
                                  func6269.paramCounts = [0];
                                  obj6147.methods["numParamLists"] = func6269;
                                  func6269.definitionLine = 892;
                                  func6269.definitionModule = "ast";
                                  var func6287 = function(argcv) {    // method hasTypeParams
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    setModuleName("ast");
                                    setLineNumber(900);    // compilenode member
                                    // call case 6: other requests
                                    // call case 6: other requests
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6291 = callmethodChecked(this, "signature", []);
                                    var call6292 = callmethodChecked(call6291, "first", []);
                                    var call6293 = callmethodChecked(call6292, "typeParams", []);
                                    var opresult6296 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call6293);
                                    return opresult6296;
                                  };
                                  func6287.paramCounts = [0];
                                  obj6147.methods["hasTypeParams"] = func6287;
                                  func6287.definitionLine = 900;
                                  func6287.definitionModule = "ast";
                                  var func6297 = function(argcv) {    // method isMethod
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    setModuleName("ast");
                                    // isMethod is a simple accessor - elide try ... catch
                                    setLineNumber(901);    // compilenode identifier
                                    return GraceTrue;
                                  };
                                  func6297.paramCounts = [0];
                                  obj6147.methods["isMethod"] = func6297;
                                  func6297.definitionLine = 901;
                                  func6297.definitionModule = "ast";
                                  var func6298 = function(argcv) {    // method isExecutable
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    setModuleName("ast");
                                    // isExecutable is a simple accessor - elide try ... catch
                                    setLineNumber(902);    // compilenode identifier
                                    return GraceFalse;
                                  };
                                  func6298.paramCounts = [0];
                                  obj6147.methods["isExecutable"] = func6298;
                                  func6298.definitionLine = 902;
                                  func6298.definitionModule = "ast";
                                  var func6299 = function(argcv) {    // method isLegalInTrait
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    setModuleName("ast");
                                    // isLegalInTrait is a simple accessor - elide try ... catch
                                    setLineNumber(903);    // compilenode identifier
                                    return GraceTrue;
                                  };
                                  func6299.paramCounts = [0];
                                  obj6147.methods["isLegalInTrait"] = func6299;
                                  func6299.definitionLine = 903;
                                  func6299.definitionModule = "ast";
                                  var func6300 = function(argcv) {    // method isClass
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    setModuleName("ast");
                                    setLineNumber(904);    // compilenode member
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6302 = callmethodChecked(this, "usesClassSyntax", []);
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6305 = callmethodChecked(this, "isFresh", []);
                                    var opresult6307 = callmethodChecked(call6305, "||(1)", [1], call6302);
                                    return opresult6307;
                                  };
                                  func6300.paramCounts = [0];
                                  obj6147.methods["isClass"] = func6300;
                                  func6300.definitionLine = 904;
                                  func6300.definitionModule = "ast";
                                  var func6308 = function(argcv) {    // method isTrait
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    setModuleName("ast");
                                    var if6309 = GraceDone;
                                    setLineNumber(906);    // compilenode member
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6311 = callmethodChecked(this, "isFresh", []);
                                    if (Grace_isTrue(call6311)) {
                                      setLineNumber(907);    // compilenode member
                                      // call case 6: other requests
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call6315 = callmethodChecked(this, "body", []);
                                      var call6316 = callmethodChecked(call6315, "last", []);
                                      var call6317 = callmethodChecked(call6316, "isTrait", []);
                                      if6309 = call6317;
                                    } else {
                                      setLineNumber(909);    // compilenode identifier
                                      if6309 = GraceFalse;
                                    }
                                    return if6309;
                                  };
                                  func6308.paramCounts = [0];
                                  obj6147.methods["isTrait"] = func6308;
                                  func6308.definitionLine = 905;
                                  func6308.definitionModule = "ast";
                                  var func6318 = function(argcv) {    // method needsArgChecks
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    setModuleName("ast");
                                    setLineNumber(913);    // compilenode block
                                    var block6320 = new GraceBlock(this, 913, 1);
                                    setLineNumber(1);    // compilenode identifier
                                    block6320.real = function(var_part) {
                                      setLineNumber(914);    // compilenode block
                                      var block6322 = new GraceBlock(this, 914, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block6322.real = function(var_p) {
                                        var if6323 = GraceDone;
                                        setLineNumber(915);    // compilenode block
                                        var block6324 = new GraceBlock(this, 915, 0);
                                        block6324.real = function() {
                                          setLineNumber(916);    // compilenode string
                                          var string6325 = new GraceString("Unknown");
                                          // call case 6: other requests
                                          // call case 6: other requests
                                          var call6329 = callmethodChecked(var_p, "dtype", []);
                                          var call6330 = callmethodChecked(call6329, "nameString", []);
                                          var opresult6332 = callmethodChecked(call6330, "\u2260(1)", [1], string6325);
                                          return opresult6332;
                                        };
                                        setLineNumber(915);    // compilenode member
                                        // call case 6: other requests
                                        var call6335 = callmethodChecked(var_p, "dtype", []);
                                        var opresult6338 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call6335);
                                        var opresult6340 = callmethodChecked(opresult6338, "&&(1)", [1], block6324);
                                        if (Grace_isTrue(opresult6340)) {
                                          setLineNumber(917);    // compilenode identifier
                                          throw new ReturnException(GraceTrue, returnTarget);
                                        }
                                        return if6323;
                                      };
                                      // call case 6: other requests
                                      setLineNumber(914);    // compilenode member
                                      // call case 6: other requests
                                      var call6342 = callmethodChecked(var_part, "params", []);
                                      var call6343 = callmethodChecked(call6342, "do(1)", [1], block6322);
                                      return call6343;
                                    };
                                    // call case 6: other requests
                                    setLineNumber(913);    // compilenode member
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6345 = callmethodChecked(this, "signature", []);
                                    var call6346 = callmethodChecked(call6345, "do(1)", [1], block6320);
                                    setLineNumber(921);    // compilenode identifier
                                    return GraceFalse;
                                  };
                                  func6318.paramCounts = [0];
                                  obj6147.methods["needsArgChecks"] = func6318;
                                  func6318.definitionLine = 912;
                                  func6318.definitionModule = "ast";
                                  var func6347 = function(argcv) {    // method scope:=(_)
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    var var_st = arguments[curarg];
                                    curarg++;
                                    setModuleName("ast");
                                    setLineNumber(926);    // compilenode identifier
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6349 = callmethodChecked(this, "symbolTable:=(1)", [1], var_st);
                                    setLineNumber(927);    // compilenode identifier
                                    // call case 6: other requests
                                    var call6351 = callmethodChecked(var_st, "node:=(1)", [1], this);
                                    return call6351;
                                  };
                                  func6347.paramCounts = [1];
                                  obj6147.methods["scope:=(1)"] = func6347;
                                  func6347.definitionLine = 923;
                                  func6347.definitionModule = "ast";
                                  var func6352 = function(argcv) {    // method declarationKindWithAncestors(_)
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    var var_as = arguments[curarg];
                                    curarg++;
                                    setModuleName("ast");
                                    setLineNumber(929);    // compilenode member
                                    // call case 6: other requests
                                    var call6354 = callmethodChecked(var_k, "parameter", []);
                                    return call6354;
                                  };
                                  func6352.paramCounts = [1];
                                  obj6147.methods["declarationKindWithAncestors(1)"] = func6352;
                                  func6352.definitionLine = 929;
                                  func6352.definitionModule = "ast";
                                  var func6355 = function(argcv) {    // method isConfidential
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    setModuleName("ast");
                                    var if6356 = GraceDone;
                                    setLineNumber(931);    // compilenode member
                                    // call case 6: other requests
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6360 = callmethodChecked(this, "annotations", []);
                                    var call6361 = callmethodChecked(call6360, "size", []);
                                    var opresult6363 = callmethodChecked(call6361, "==(1)", [1], new GraceNum(0));
                                    if (Grace_isTrue(opresult6363)) {
                                      return GraceFalse;
                                    }
                                    setLineNumber(932);    // compilenode string
                                    var string6365 = new GraceString("confidential");
                                    // call case 6: other requests
                                    // call case 6: other requests
                                    // call case 3: self.outer request
                                    var call6368 = callmethodChecked(superDepth, "outer", [0]);
                                    var call6369 = callmethodChecked(call6368, "outer", []);
                                    onSelf = true;
                                    var call6370 = callmethodChecked(call6369, "findAnnotation(2)", [2], this, string6365);
                                    return call6370;
                                  };
                                  func6355.paramCounts = [0];
                                  obj6147.methods["isConfidential"] = func6355;
                                  func6355.definitionLine = 930;
                                  func6355.definitionModule = "ast";
                                  var func6371 = function(argcv) {    // method isPublic
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    setModuleName("ast");
                                    setLineNumber(934);    // compilenode member
                                    // call case 6: other requests
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6374 = callmethodChecked(this, "isConfidential", []);
                                    var call6375 = callmethodChecked(call6374, "not", []);
                                    return call6375;
                                  };
                                  func6371.paramCounts = [0];
                                  obj6147.methods["isPublic"] = func6371;
                                  func6371.definitionLine = 934;
                                  func6371.definitionModule = "ast";
                                  var func6376 = function(argcv) {    // method isWritable
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    setModuleName("ast");
                                    // isWritable is a simple accessor - elide try ... catch
                                    setLineNumber(935);    // compilenode identifier
                                    return GraceFalse;
                                  };
                                  func6376.paramCounts = [0];
                                  obj6147.methods["isWritable"] = func6376;
                                  func6376.definitionLine = 935;
                                  func6376.definitionModule = "ast";
                                  var func6377 = function(argcv) {    // method isReadable
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    setModuleName("ast");
                                    setLineNumber(936);    // compilenode member
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6379 = callmethodChecked(this, "isPublic", []);
                                    return call6379;
                                  };
                                  func6377.paramCounts = [0];
                                  obj6147.methods["isReadable"] = func6377;
                                  func6377.definitionLine = 936;
                                  func6377.definitionModule = "ast";
                                  var func6380 = function(argcv) {    // method usesAsType(_)
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    var var_aNode = arguments[curarg];
                                    curarg++;
                                    setModuleName("ast");
                                    setLineNumber(938);    // compilenode member
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6382 = callmethodChecked(this, "dtype", []);
                                    var opresult6385 = callmethodChecked(var_aNode, "==(1)", [1], call6382);
                                    return opresult6385;
                                  };
                                  func6380.paramCounts = [1];
                                  obj6147.methods["usesAsType(1)"] = func6380;
                                  func6380.definitionLine = 937;
                                  func6380.definitionModule = "ast";
                                  var func6386 = function(argcv) {    // method returnsObject
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    setModuleName("ast");
                                    setLineNumber(941);    // compilenode block
                                    var block6387 = new GraceBlock(this, 941, 0);
                                    block6387.real = function() {
                                      // call case 6: other requests
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call6391 = callmethodChecked(this, "body", []);
                                      var call6392 = callmethodChecked(call6391, "last", []);
                                      var call6393 = callmethodChecked(call6392, "returnsObject", []);
                                      return call6393;
                                    };
                                    // call case 6: other requests
                                    // call case 6: other requests
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6398 = callmethodChecked(this, "body", []);
                                    var call6399 = callmethodChecked(call6398, "isEmpty", []);
                                    var call6400 = callmethodChecked(call6399, "not", []);
                                    var opresult6402 = callmethodChecked(call6400, "&&(1)", [1], block6387);
                                    return opresult6402;
                                  };
                                  func6386.paramCounts = [0];
                                  obj6147.methods["returnsObject"] = func6386;
                                  func6386.definitionLine = 940;
                                  func6386.definitionModule = "ast";
                                  var func6403 = function(argcv) {    // method returnedObjectScope
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    setModuleName("ast");
                                    setLineNumber(945);    // compilenode member
                                    // call case 6: other requests
                                    // call case 6: other requests
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6407 = callmethodChecked(this, "body", []);
                                    var call6408 = callmethodChecked(call6407, "last", []);
                                    var call6409 = callmethodChecked(call6408, "returnedObjectScope", []);
                                    return call6409;
                                  };
                                  func6403.paramCounts = [0];
                                  obj6147.methods["returnedObjectScope"] = func6403;
                                  func6403.definitionLine = 943;
                                  func6403.definitionModule = "ast";
                                  var func6410 = function(argcv) {    // method accept(_)from(_)
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    var var_visitor = arguments[curarg];
                                    curarg++;
                                    var var_as = arguments[curarg];
                                    curarg++;
                                    // Start argument checking
                                    curarg = 1;
                                    setLineNumber(947);    // compilenode identifier
                                    if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                        throw new GraceExceptionPacket(TypeErrorObject,
                                            new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                    curarg++;
                                    curarg++;
                                    // End argument checking
                                    setModuleName("ast");
                                    var if6411 = GraceDone;
                                    setLineNumber(948);    // compilenode identifier
                                    // call case 6: other requests
                                    var call6413 = callmethodChecked(var_visitor, "visitMethod(1)up(1)", [1, 1], this, var_as);
                                    if (Grace_isTrue(call6413)) {
                                      setLineNumber(949);    // compilenode identifier
                                      // call case 6: other requests
                                      var call6415 = callmethodChecked(var_as, "extend(1)", [1], this);
                                      var var_newChain = call6415;
                                      setLineNumber(950);    // compilenode identifier
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call6418 = callmethodChecked(this, "value", []);
                                      var call6419 = callmethodChecked(call6418, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                      var if6420 = GraceDone;
                                      setLineNumber(951);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call6422 = callmethodChecked(this, "typeParams", []);
                                      var opresult6425 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call6422);
                                      if (Grace_isTrue(opresult6425)) {
                                        setLineNumber(952);    // compilenode identifier
                                        // call case 6: other requests
                                        // call case 4: self request
                                        onSelf = true;
                                        var call6428 = callmethodChecked(this, "typeParams", []);
                                        var call6429 = callmethodChecked(call6428, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                        if6420 = call6429;
                                      }
                                      setLineNumber(954);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call6432 = callmethodChecked(this, "signature", []);
                                      var block6433 = new GraceBlock(this, 954, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block6433.real = function(var_part) {
                                        setLineNumber(955);    // compilenode member
                                        // call case 6: other requests
                                        var call6436 = callmethodChecked(var_part, "params", []);
                                        var block6437 = new GraceBlock(this, 955, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block6437.real = function(var_p) {
                                          setLineNumber(956);    // compilenode identifier
                                          // call case 6: other requests
                                          var call6439 = callmethodChecked(var_p, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                          return call6439;
                                        };
                                        // call case 5: prelude request
                                        var call6440 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call6436, block6437);
                                        return call6440;
                                      };
                                      // call case 5: prelude request
                                      var call6441 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call6432, block6433);
                                      var if6442 = GraceDone;
                                      setLineNumber(959);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call6444 = callmethodChecked(this, "dtype", []);
                                      var opresult6447 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call6444);
                                      if (Grace_isTrue(opresult6447)) {
                                        setLineNumber(960);    // compilenode identifier
                                        // call case 6: other requests
                                        // call case 4: self request
                                        onSelf = true;
                                        var call6450 = callmethodChecked(this, "dtype", []);
                                        var call6451 = callmethodChecked(call6450, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                        if6442 = call6451;
                                      }
                                      setLineNumber(962);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call6454 = callmethodChecked(this, "annotations", []);
                                      var block6455 = new GraceBlock(this, 962, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block6455.real = function(var_ann) {
                                        setLineNumber(963);    // compilenode identifier
                                        // call case 6: other requests
                                        var call6457 = callmethodChecked(var_ann, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                        return call6457;
                                      };
                                      // call case 5: prelude request
                                      var call6458 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call6454, block6455);
                                      setLineNumber(965);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call6461 = callmethodChecked(this, "body", []);
                                      var block6462 = new GraceBlock(this, 965, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block6462.real = function(var_mx) {
                                        setLineNumber(966);    // compilenode identifier
                                        // call case 6: other requests
                                        var call6464 = callmethodChecked(var_mx, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                        return call6464;
                                      };
                                      // call case 5: prelude request
                                      var call6465 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call6461, block6462);
                                      if6411 = call6465;
                                    }
                                    return if6411;
                                  };
                                  func6410.paramTypes = [];
                                  func6410.paramTypes.push([]);
                                  func6410.paramTypes.push([]);
                                  func6410.paramCounts = [1, 1];
                                  obj6147.methods["accept(1)from(1)"] = func6410;
                                  func6410.definitionLine = 947;
                                  func6410.definitionModule = "ast";
                                  var func6466 = function(argcv) {    // method map(_)ancestors(_)
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    var var_blk = arguments[curarg];
                                    curarg++;
                                    var var_as = arguments[curarg];
                                    curarg++;
                                    setModuleName("ast");
                                    setLineNumber(971);    // compilenode member
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6468 = callmethodChecked(this, "shallowCopy", []);
                                    var var_n = call6468;
                                    setLineNumber(972);    // compilenode identifier
                                    // call case 6: other requests
                                    var call6470 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                    var var_newChain = call6470;
                                    setLineNumber(973);    // compilenode member
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6474 = callmethodChecked(this, "body", []);
                                    // call case 6: other requests
                                    // call case 6: other requests
                                    // call case 3: self.outer request
                                    var call6477 = callmethodChecked(superDepth, "outer", [0]);
                                    var call6478 = callmethodChecked(call6477, "outer", []);
                                    onSelf = true;
                                    var call6479 = callmethodChecked(call6478, "listMap(2)ancestors(1)", [2, 1], call6474, var_blk, var_newChain);
                                    // call case 6: other requests
                                    var call6480 = callmethodChecked(var_n, "body:=(1)", [1], call6479);
                                    setLineNumber(974);    // compilenode member
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6484 = callmethodChecked(this, "typeParams", []);
                                    // call case 6: other requests
                                    // call case 6: other requests
                                    // call case 3: self.outer request
                                    var call6487 = callmethodChecked(superDepth, "outer", [0]);
                                    var call6488 = callmethodChecked(call6487, "outer", []);
                                    onSelf = true;
                                    var call6489 = callmethodChecked(call6488, "maybeMap(2)ancestors(1)", [2, 1], call6484, var_blk, var_newChain);
                                    // call case 6: other requests
                                    var call6490 = callmethodChecked(var_n, "typeParams:=(1)", [1], call6489);
                                    setLineNumber(975);    // compilenode member
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6494 = callmethodChecked(this, "signature", []);
                                    // call case 6: other requests
                                    // call case 6: other requests
                                    // call case 3: self.outer request
                                    var call6497 = callmethodChecked(superDepth, "outer", [0]);
                                    var call6498 = callmethodChecked(call6497, "outer", []);
                                    onSelf = true;
                                    var call6499 = callmethodChecked(call6498, "listMap(2)ancestors(1)", [2, 1], call6494, var_blk, var_newChain);
                                    // call case 6: other requests
                                    var call6500 = callmethodChecked(var_n, "signature:=(1)", [1], call6499);
                                    setLineNumber(976);    // compilenode member
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6504 = callmethodChecked(this, "annotations", []);
                                    // call case 6: other requests
                                    // call case 6: other requests
                                    // call case 3: self.outer request
                                    var call6507 = callmethodChecked(superDepth, "outer", [0]);
                                    var call6508 = callmethodChecked(call6507, "outer", []);
                                    onSelf = true;
                                    var call6509 = callmethodChecked(call6508, "listMap(2)ancestors(1)", [2, 1], call6504, var_blk, var_newChain);
                                    // call case 6: other requests
                                    var call6510 = callmethodChecked(var_n, "annotations:=(1)", [1], call6509);
                                    setLineNumber(977);    // compilenode member
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6514 = callmethodChecked(this, "dtype", []);
                                    // call case 6: other requests
                                    // call case 6: other requests
                                    // call case 3: self.outer request
                                    var call6517 = callmethodChecked(superDepth, "outer", [0]);
                                    var call6518 = callmethodChecked(call6517, "outer", []);
                                    onSelf = true;
                                    var call6519 = callmethodChecked(call6518, "maybeMap(2)ancestors(1)", [2, 1], call6514, var_blk, var_newChain);
                                    // call case 6: other requests
                                    var call6520 = callmethodChecked(var_n, "dtype:=(1)", [1], call6519);
                                    setLineNumber(978);    // compilenode identifier
                                    // call case 6: other requests
                                    var call6522 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                    return call6522;
                                  };
                                  func6466.paramCounts = [1, 1];
                                  obj6147.methods["map(1)ancestors(1)"] = func6466;
                                  func6466.definitionLine = 970;
                                  func6466.definitionModule = "ast";
                                  var func6523 = function(argcv) {    // method pretty(_)
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    var var_depth = arguments[curarg];
                                    curarg++;
                                    setModuleName("ast");
                                    setLineNumber(981);    // compilenode string
                                    var string6524 = new GraceString("");
                                    var var_spc = string6524;
                                    setLineNumber(982);    // compilenode num
                                    var opresult6528 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                                    var block6529 = new GraceBlock(this, 982, 1);
                                    setLineNumber(1);    // compilenode identifier
                                    block6529.real = function(var_i) {
                                      setLineNumber(983);    // compilenode string
                                      var string6530 = new GraceString("  ");
                                      var opresult6533 = callmethodChecked(var_spc, "++(1)", [1], string6530);
                                      var_spc = opresult6533;
                                      return GraceDone;
                                    };
                                    // call case 5: prelude request
                                    var call6534 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult6528, block6529);
                                    setLineNumber(985);    // compilenode string
                                    var string6535 = new GraceString("\n");
                                    // call case 1: super request
                                    var call6538 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                    var opresult6540 = callmethodChecked(call6538, "++(1)", [1], string6535);
                                    var var_s = opresult6540;
                                    setLineNumber(986);    // compilenode string
                                    var string6541 = new GraceString("\n");
                                    var opresult6546 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                    // call case 6: other requests
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6548 = callmethodChecked(this, "value", []);
                                    var call6549 = callmethodChecked(call6548, "pretty(1)", [1], opresult6546);
                                    var string6551 = new GraceString("Name: ");
                                    var opresult6555 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                    var opresult6557 = callmethodChecked(opresult6555, "++(1)", [1], string6551);
                                    var opresult6559 = callmethodChecked(opresult6557, "++(1)", [1], call6549);
                                    var opresult6561 = callmethodChecked(opresult6559, "++(1)", [1], string6541);
                                    var_s = opresult6561;
                                    var if6562 = GraceDone;
                                    setLineNumber(987);    // compilenode member
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6564 = callmethodChecked(this, "dtype", []);
                                    var opresult6567 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call6564);
                                    if (Grace_isTrue(opresult6567)) {
                                      setLineNumber(988);    // compilenode string
                                      var string6568 = new GraceString("  ");
                                      var string6571 = new GraceString("Returns:\n");
                                      var opresult6575 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                      var opresult6577 = callmethodChecked(opresult6575, "++(1)", [1], string6571);
                                      var opresult6579 = callmethodChecked(opresult6577, "++(1)", [1], var_spc);
                                      var opresult6581 = callmethodChecked(opresult6579, "++(1)", [1], string6568);
                                      var_s = opresult6581;
                                      setLineNumber(989);    // compilenode string
                                      var string6582 = new GraceString("\n");
                                      var opresult6587 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call6589 = callmethodChecked(this, "dtype", []);
                                      var call6590 = callmethodChecked(call6589, "pretty(1)", [1], opresult6587);
                                      var opresult6593 = callmethodChecked(var_s, "++(1)", [1], call6590);
                                      var opresult6595 = callmethodChecked(opresult6593, "++(1)", [1], string6582);
                                      var_s = opresult6595;
                                      if6562 = GraceDone;
                                    }
                                    var if6596 = GraceDone;
                                    setLineNumber(991);    // compilenode member
                                    // call case 6: other requests
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6599 = callmethodChecked(this, "isBindingOccurence", []);
                                    var call6600 = callmethodChecked(call6599, "not", []);
                                    if (Grace_isTrue(call6600)) {
                                      var string6601 = new GraceString("Applied\n");
                                      var opresult6605 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                      var opresult6607 = callmethodChecked(opresult6605, "++(1)", [1], string6601);
                                      var_s = opresult6607;
                                      if6596 = GraceDone;
                                    }
                                    var if6608 = GraceDone;
                                    setLineNumber(992);    // compilenode member
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6610 = callmethodChecked(this, "isFresh", []);
                                    if (Grace_isTrue(call6610)) {
                                      var string6611 = new GraceString("Fresh\n");
                                      var opresult6615 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                      var opresult6617 = callmethodChecked(opresult6615, "++(1)", [1], string6611);
                                      var_s = opresult6617;
                                      if6608 = GraceDone;
                                    }
                                    setLineNumber(993);    // compilenode string
                                    var string6618 = new GraceString("Signature:");
                                    var string6621 = new GraceString("");
                                    var string6624 = new GraceString("");
                                    var opresult6626 = callmethodChecked(string6624, "++(1)", [1], var_s);
                                    var opresult6628 = callmethodChecked(opresult6626, "++(1)", [1], string6621);
                                    var opresult6630 = callmethodChecked(opresult6628, "++(1)", [1], var_spc);
                                    var opresult6632 = callmethodChecked(opresult6630, "++(1)", [1], string6618);
                                    var_s = opresult6632;
                                    setLineNumber(994);    // compilenode member
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6635 = callmethodChecked(this, "signature", []);
                                    var block6636 = new GraceBlock(this, 994, 1);
                                    setLineNumber(1);    // compilenode identifier
                                    block6636.real = function(var_part) {
                                      setLineNumber(995);    // compilenode string
                                      var string6637 = new GraceString("");
                                      // call case 6: other requests
                                      var call6640 = callmethodChecked(var_part, "name", []);
                                      var string6642 = new GraceString("Part: ");
                                      var string6645 = new GraceString("\n  ");
                                      var string6648 = new GraceString("");
                                      var opresult6650 = callmethodChecked(string6648, "++(1)", [1], var_s);
                                      var opresult6652 = callmethodChecked(opresult6650, "++(1)", [1], string6645);
                                      var opresult6654 = callmethodChecked(opresult6652, "++(1)", [1], var_spc);
                                      var opresult6656 = callmethodChecked(opresult6654, "++(1)", [1], string6642);
                                      var opresult6658 = callmethodChecked(opresult6656, "++(1)", [1], call6640);
                                      var opresult6660 = callmethodChecked(opresult6658, "++(1)", [1], string6637);
                                      var_s = opresult6660;
                                      setLineNumber(996);    // compilenode string
                                      var string6661 = new GraceString("Parameters:");
                                      var string6664 = new GraceString("\n    ");
                                      var string6667 = new GraceString("");
                                      var opresult6669 = callmethodChecked(string6667, "++(1)", [1], var_s);
                                      var opresult6671 = callmethodChecked(opresult6669, "++(1)", [1], string6664);
                                      var opresult6673 = callmethodChecked(opresult6671, "++(1)", [1], var_spc);
                                      var opresult6675 = callmethodChecked(opresult6673, "++(1)", [1], string6661);
                                      var_s = opresult6675;
                                      setLineNumber(997);    // compilenode member
                                      // call case 6: other requests
                                      var call6678 = callmethodChecked(var_part, "params", []);
                                      var block6679 = new GraceBlock(this, 997, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block6679.real = function(var_p) {
                                        setLineNumber(998);    // compilenode string
                                        var string6680 = new GraceString("");
                                        var opresult6685 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(4));
                                        // call case 6: other requests
                                        var call6686 = callmethodChecked(var_p, "pretty(1)", [1], opresult6685);
                                        var string6688 = new GraceString("");
                                        var string6691 = new GraceString("\n      ");
                                        var string6694 = new GraceString("");
                                        var opresult6696 = callmethodChecked(string6694, "++(1)", [1], var_s);
                                        var opresult6698 = callmethodChecked(opresult6696, "++(1)", [1], string6691);
                                        var opresult6700 = callmethodChecked(opresult6698, "++(1)", [1], var_spc);
                                        var opresult6702 = callmethodChecked(opresult6700, "++(1)", [1], string6688);
                                        var opresult6704 = callmethodChecked(opresult6702, "++(1)", [1], call6686);
                                        var opresult6706 = callmethodChecked(opresult6704, "++(1)", [1], string6680);
                                        var_s = opresult6706;
                                        return GraceDone;
                                      };
                                      // call case 5: prelude request
                                      var call6707 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call6678, block6679);
                                      return call6707;
                                    };
                                    // call case 5: prelude request
                                    var call6708 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call6635, block6636);
                                    setLineNumber(1001);    // compilenode string
                                    var string6709 = new GraceString("\n");
                                    var opresult6712 = callmethodChecked(var_s, "++(1)", [1], string6709);
                                    var_s = opresult6712;
                                    var if6713 = GraceDone;
                                    setLineNumber(1002);    // compilenode member
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6715 = callmethodChecked(this, "typeParams", []);
                                    var opresult6718 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call6715);
                                    if (Grace_isTrue(opresult6718)) {
                                      setLineNumber(1003);    // compilenode string
                                      var string6719 = new GraceString("Generics:");
                                      var string6722 = new GraceString("");
                                      var string6725 = new GraceString("");
                                      var opresult6727 = callmethodChecked(string6725, "++(1)", [1], var_s);
                                      var opresult6729 = callmethodChecked(opresult6727, "++(1)", [1], string6722);
                                      var opresult6731 = callmethodChecked(opresult6729, "++(1)", [1], var_spc);
                                      var opresult6733 = callmethodChecked(opresult6731, "++(1)", [1], string6719);
                                      var_s = opresult6733;
                                      setLineNumber(1004);    // compilenode block
                                      var block6735 = new GraceBlock(this, 1004, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block6735.real = function(var_g) {
                                        setLineNumber(1005);    // compilenode string
                                        var string6736 = new GraceString("");
                                        // call case 6: other requests
                                        var call6739 = callmethodChecked(var_g, "pretty(1)", [1], new GraceNum(0));
                                        var string6741 = new GraceString("  ");
                                        var string6744 = new GraceString("\n");
                                        var string6747 = new GraceString("");
                                        var opresult6749 = callmethodChecked(string6747, "++(1)", [1], var_s);
                                        var opresult6751 = callmethodChecked(opresult6749, "++(1)", [1], string6744);
                                        var opresult6753 = callmethodChecked(opresult6751, "++(1)", [1], var_spc);
                                        var opresult6755 = callmethodChecked(opresult6753, "++(1)", [1], string6741);
                                        var opresult6757 = callmethodChecked(opresult6755, "++(1)", [1], call6739);
                                        var opresult6759 = callmethodChecked(opresult6757, "++(1)", [1], string6736);
                                        var_s = opresult6759;
                                        return GraceDone;
                                      };
                                      // call case 6: other requests
                                      setLineNumber(1004);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call6761 = callmethodChecked(this, "typeParams", []);
                                      var call6762 = callmethodChecked(call6761, "do(1)", [1], block6735);
                                      setLineNumber(1007);    // compilenode string
                                      var string6763 = new GraceString("\n");
                                      var opresult6766 = callmethodChecked(var_s, "++(1)", [1], string6763);
                                      var_s = opresult6766;
                                      if6713 = GraceDone;
                                    }
                                    var if6767 = GraceDone;
                                    setLineNumber(1009);    // compilenode member
                                    // call case 6: other requests
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6771 = callmethodChecked(this, "annotations", []);
                                    var call6772 = callmethodChecked(call6771, "size", []);
                                    var opresult6774 = callmethodChecked(call6772, ">(1)", [1], new GraceNum(0));
                                    if (Grace_isTrue(opresult6774)) {
                                      setLineNumber(1010);    // compilenode string
                                      var string6775 = new GraceString("Annotations:");
                                      var string6778 = new GraceString("");
                                      var string6781 = new GraceString("");
                                      var opresult6783 = callmethodChecked(string6781, "++(1)", [1], var_s);
                                      var opresult6785 = callmethodChecked(opresult6783, "++(1)", [1], string6778);
                                      var opresult6787 = callmethodChecked(opresult6785, "++(1)", [1], var_spc);
                                      var opresult6789 = callmethodChecked(opresult6787, "++(1)", [1], string6775);
                                      var_s = opresult6789;
                                      setLineNumber(1011);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call6792 = callmethodChecked(this, "annotations", []);
                                      var block6793 = new GraceBlock(this, 1011, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block6793.real = function(var_an) {
                                        setLineNumber(1012);    // compilenode string
                                        var string6794 = new GraceString("");
                                        var opresult6799 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                        // call case 6: other requests
                                        var call6800 = callmethodChecked(var_an, "pretty(1)", [1], opresult6799);
                                        var string6802 = new GraceString("  ");
                                        var string6805 = new GraceString("\n");
                                        var string6808 = new GraceString("");
                                        var opresult6810 = callmethodChecked(string6808, "++(1)", [1], var_s);
                                        var opresult6812 = callmethodChecked(opresult6810, "++(1)", [1], string6805);
                                        var opresult6814 = callmethodChecked(opresult6812, "++(1)", [1], var_spc);
                                        var opresult6816 = callmethodChecked(opresult6814, "++(1)", [1], string6802);
                                        var opresult6818 = callmethodChecked(opresult6816, "++(1)", [1], call6800);
                                        var opresult6820 = callmethodChecked(opresult6818, "++(1)", [1], string6794);
                                        var_s = opresult6820;
                                        return GraceDone;
                                      };
                                      // call case 5: prelude request
                                      var call6821 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call6792, block6793);
                                      setLineNumber(1014);    // compilenode string
                                      var string6822 = new GraceString("\n");
                                      var opresult6825 = callmethodChecked(var_s, "++(1)", [1], string6822);
                                      var_s = opresult6825;
                                      if6767 = GraceDone;
                                    }
                                    setLineNumber(1016);    // compilenode string
                                    var string6826 = new GraceString("Body:");
                                    var opresult6830 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                    var opresult6832 = callmethodChecked(opresult6830, "++(1)", [1], string6826);
                                    var_s = opresult6832;
                                    setLineNumber(1017);    // compilenode member
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6835 = callmethodChecked(this, "body", []);
                                    var block6836 = new GraceBlock(this, 1017, 1);
                                    setLineNumber(1);    // compilenode identifier
                                    block6836.real = function(var_mx) {
                                      setLineNumber(1018);    // compilenode identifier
                                      var opresult6840 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                      // call case 6: other requests
                                      var call6841 = callmethodChecked(var_mx, "pretty(1)", [1], opresult6840);
                                      var string6844 = new GraceString("\n  ");
                                      var opresult6847 = callmethodChecked(var_s, "++(1)", [1], string6844);
                                      var opresult6849 = callmethodChecked(opresult6847, "++(1)", [1], var_spc);
                                      var opresult6851 = callmethodChecked(opresult6849, "++(1)", [1], call6841);
                                      var_s = opresult6851;
                                      return GraceDone;
                                    };
                                    // call case 5: prelude request
                                    var call6852 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call6835, block6836);
                                    var if6853 = GraceDone;
                                    setLineNumber(1020);    // compilenode member
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6855 = callmethodChecked(this, "comments", []);
                                    var opresult6858 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call6855);
                                    if (Grace_isTrue(opresult6858)) {
                                      setLineNumber(1021);    // compilenode identifier
                                      var opresult6862 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call6864 = callmethodChecked(this, "comments", []);
                                      var call6865 = callmethodChecked(call6864, "pretty(1)", [1], opresult6862);
                                      var opresult6868 = callmethodChecked(var_s, "++(1)", [1], call6865);
                                      var_s = opresult6868;
                                      if6853 = GraceDone;
                                    }
                                    setLineNumber(1023);    // compilenode identifier
                                    return var_s;
                                  };
                                  func6523.paramCounts = [1];
                                  obj6147.methods["pretty(1)"] = func6523;
                                  func6523.definitionLine = 980;
                                  func6523.definitionModule = "ast";
                                  var func6869 = function(argcv) {    // method toGrace(_)
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    var var_depth = arguments[curarg];
                                    curarg++;
                                    // Start argument checking
                                    curarg = 1;
                                    setLineNumber(1025);    // compilenode identifier
                                    if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                        throw new GraceExceptionPacket(TypeErrorObject,
                                            new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                callmethod(var_Number, "asString", [0])._value + "."));
                                    curarg++;
                                    // End argument checking
                                    setModuleName("ast");
                                    setLineNumber(1026);    // compilenode string
                                    var string6870 = new GraceString("");
                                    var var_spc = string6870;
                                    setLineNumber(1027);    // compilenode identifier
                                    var diff6874 = callmethodChecked(var_depth, "-(1)", [1], new GraceNum(1));
                                    var opresult6877 = callmethodChecked(new GraceNum(0), "..(1)", [1], diff6874);
                                    var block6878 = new GraceBlock(this, 1027, 1);
                                    setLineNumber(1);    // compilenode identifier
                                    block6878.real = function(var_i) {
                                      setLineNumber(1028);    // compilenode string
                                      var string6879 = new GraceString("    ");
                                      var opresult6882 = callmethodChecked(var_spc, "++(1)", [1], string6879);
                                      var_spc = opresult6882;
                                      return GraceDone;
                                    };
                                    // call case 5: prelude request
                                    var call6883 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult6877, block6878);
                                    setLineNumber(1030);    // compilenode string
                                    var string6884 = new GraceString("method ");
                                    var var_s = string6884;
                                    setLineNumber(1031);    // compilenode identifier
                                    var var_firstPart = GraceTrue;
                                    setLineNumber(1032);    // compilenode member
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6887 = callmethodChecked(this, "signature", []);
                                    var block6888 = new GraceBlock(this, 1032, 1);
                                    setLineNumber(1);    // compilenode identifier
                                    block6888.real = function(var_part) {
                                      setLineNumber(1033);    // compilenode member
                                      // call case 6: other requests
                                      var call6890 = callmethodChecked(var_part, "name", []);
                                      var opresult6893 = callmethodChecked(var_s, "++(1)", [1], call6890);
                                      var_s = opresult6893;
                                      var if6894 = GraceDone;
                                      setLineNumber(1034);    // compilenode block
                                      var block6895 = new GraceBlock(this, 1034, 0);
                                      block6895.real = function() {
                                        // call case 4: self request
                                        onSelf = true;
                                        var call6897 = callmethodChecked(this, "typeParams", []);
                                        var opresult6900 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call6897);
                                        return opresult6900;
                                      };
                                      var opresult6903 = callmethodChecked(var_firstPart, "&&(1)", [1], block6895);
                                      if (Grace_isTrue(opresult6903)) {
                                        setLineNumber(1035);    // compilenode identifier
                                        var opresult6907 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                        // call case 6: other requests
                                        // call case 4: self request
                                        onSelf = true;
                                        var call6909 = callmethodChecked(this, "typeParams", []);
                                        var call6910 = callmethodChecked(call6909, "toGrace(1)", [1], opresult6907);
                                        var opresult6913 = callmethodChecked(var_s, "++(1)", [1], call6910);
                                        var_s = opresult6913;
                                        if6894 = GraceDone;
                                      }
                                      setLineNumber(1037);    // compilenode identifier
                                      var_firstPart = GraceFalse;
                                      var if6914 = GraceDone;
                                      setLineNumber(1038);    // compilenode member
                                      // call case 6: other requests
                                      // call case 6: other requests
                                      var call6918 = callmethodChecked(var_part, "params", []);
                                      var call6919 = callmethodChecked(call6918, "size", []);
                                      var opresult6921 = callmethodChecked(call6919, ">(1)", [1], new GraceNum(0));
                                      if (Grace_isTrue(opresult6921)) {
                                        setLineNumber(1039);    // compilenode string
                                        var string6922 = new GraceString("(");
                                        var opresult6925 = callmethodChecked(var_s, "++(1)", [1], string6922);
                                        var_s = opresult6925;
                                        setLineNumber(1040);    // compilenode member
                                        // call case 6: other requests
                                        // call case 6: other requests
                                        var call6929 = callmethodChecked(var_part, "params", []);
                                        var call6930 = callmethodChecked(call6929, "indices", []);
                                        var block6931 = new GraceBlock(this, 1040, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block6931.real = function(var_pnr) {
                                          setLineNumber(1041);    // compilenode identifier
                                          // call case 6: other requests
                                          // call case 6: other requests
                                          var call6934 = callmethodChecked(var_part, "params", []);
                                          var call6935 = callmethodChecked(call6934, "at(1)", [1], var_pnr);
                                          var var_p = call6935;
                                          setLineNumber(1042);    // compilenode identifier
                                          var opresult6939 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                          // call case 6: other requests
                                          var call6940 = callmethodChecked(var_p, "toGrace(1)", [1], opresult6939);
                                          var opresult6943 = callmethodChecked(var_s, "++(1)", [1], call6940);
                                          var_s = opresult6943;
                                          var if6944 = GraceDone;
                                          setLineNumber(1043);    // compilenode member
                                          // call case 6: other requests
                                          // call case 6: other requests
                                          var call6947 = callmethodChecked(var_part, "params", []);
                                          var call6948 = callmethodChecked(call6947, "size", []);
                                          var opresult6951 = callmethodChecked(var_pnr, "<(1)", [1], call6948);
                                          if (Grace_isTrue(opresult6951)) {
                                            setLineNumber(1044);    // compilenode string
                                            var string6952 = new GraceString(", ");
                                            var opresult6955 = callmethodChecked(var_s, "++(1)", [1], string6952);
                                            var_s = opresult6955;
                                            if6944 = GraceDone;
                                          }
                                          return if6944;
                                        };
                                        // call case 5: prelude request
                                        var call6956 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call6930, block6931);
                                        setLineNumber(1047);    // compilenode string
                                        var string6957 = new GraceString(")");
                                        var opresult6960 = callmethodChecked(var_s, "++(1)", [1], string6957);
                                        var_s = opresult6960;
                                        if6914 = GraceDone;
                                      }
                                      return if6914;
                                    };
                                    // call case 5: prelude request
                                    var call6961 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call6887, block6888);
                                    var if6962 = GraceDone;
                                    setLineNumber(1050);    // compilenode member
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6964 = callmethodChecked(this, "dtype", []);
                                    var opresult6967 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call6964);
                                    if (Grace_isTrue(opresult6967)) {
                                      setLineNumber(1051);    // compilenode string
                                      var string6968 = new GraceString("");
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call6972 = callmethodChecked(this, "dtype", []);
                                      var call6973 = callmethodChecked(call6972, "toGrace(1)", [1], new GraceNum(0));
                                      var string6975 = new GraceString(" -> ");
                                      var opresult6977 = callmethodChecked(string6975, "++(1)", [1], call6973);
                                      var opresult6979 = callmethodChecked(opresult6977, "++(1)", [1], string6968);
                                      var opresult6982 = callmethodChecked(var_s, "++(1)", [1], opresult6979);
                                      var_s = opresult6982;
                                      if6962 = GraceDone;
                                    }
                                    var if6983 = GraceDone;
                                    setLineNumber(1053);    // compilenode member
                                    // call case 6: other requests
                                    // call case 4: self request
                                    onSelf = true;
                                    var call6987 = callmethodChecked(this, "annotations", []);
                                    var call6988 = callmethodChecked(call6987, "size", []);
                                    var opresult6990 = callmethodChecked(call6988, ">(1)", [1], new GraceNum(0));
                                    if (Grace_isTrue(opresult6990)) {
                                      setLineNumber(1054);    // compilenode string
                                      var string6991 = new GraceString(" is ");
                                      var opresult6994 = callmethodChecked(var_s, "++(1)", [1], string6991);
                                      var_s = opresult6994;
                                      setLineNumber(1055);    // compilenode block
                                      var block6996 = new GraceBlock(this, 1055, 2);
                                      setLineNumber(1);    // compilenode identifier
                                      block6996.real = function(var_a, var_b) {
                                        setLineNumber(1056);    // compilenode num
                                        // call case 6: other requests
                                        var call6998 = callmethodChecked(var_b, "toGrace(1)", [1], new GraceNum(0));
                                        var if7000 = GraceDone;
                                        var string7001 = new GraceString("");
                                        var opresult7004 = callmethodChecked(var_a, "\u2260(1)", [1], string7001);
                                        if (Grace_isTrue(opresult7004)) {
                                          var string7005 = new GraceString(", ");
                                          var opresult7008 = callmethodChecked(var_a, "++(1)", [1], string7005);
                                          if7000 = opresult7008;
                                        } else {
                                          var string7009 = new GraceString("");
                                          if7000 = string7009;
                                        }
                                        var opresult7011 = callmethodChecked(if7000, "++(1)", [1], call6998);
                                        return opresult7011;
                                      };
                                      setLineNumber(1057);    // compilenode string
                                      var string7012 = new GraceString("");
                                      // call case 6: other requests
                                      setLineNumber(1055);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7014 = callmethodChecked(this, "annotations", []);
                                      var call7015 = callmethodChecked(call7014, "fold(1)startingWith(1)", [1, 1], block6996, string7012);
                                      var opresult7018 = callmethodChecked(var_s, "++(1)", [1], call7015);
                                      var_s = opresult7018;
                                      if6983 = GraceDone;
                                    }
                                    setLineNumber(1059);    // compilenode string
                                    var string7019 = new GraceString(" {");
                                    var opresult7022 = callmethodChecked(var_s, "++(1)", [1], string7019);
                                    var_s = opresult7022;
                                    var if7023 = GraceDone;
                                    setLineNumber(1060);    // compilenode member
                                    // call case 4: self request
                                    onSelf = true;
                                    var call7025 = callmethodChecked(this, "comments", []);
                                    var opresult7028 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call7025);
                                    if (Grace_isTrue(opresult7028)) {
                                      setLineNumber(1061);    // compilenode identifier
                                      var opresult7032 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7034 = callmethodChecked(this, "comments", []);
                                      var call7035 = callmethodChecked(call7034, "toGrace(1)", [1], opresult7032);
                                      var opresult7038 = callmethodChecked(var_s, "++(1)", [1], call7035);
                                      var_s = opresult7038;
                                      if7023 = GraceDone;
                                    }
                                    setLineNumber(1063);    // compilenode member
                                    // call case 4: self request
                                    onSelf = true;
                                    var call7041 = callmethodChecked(this, "body", []);
                                    var block7042 = new GraceBlock(this, 1063, 1);
                                    setLineNumber(1);    // compilenode identifier
                                    block7042.real = function(var_mx) {
                                      setLineNumber(1064);    // compilenode identifier
                                      var opresult7046 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                      // call case 6: other requests
                                      var call7047 = callmethodChecked(var_mx, "toGrace(1)", [1], opresult7046);
                                      var string7049 = new GraceString("    ");
                                      var string7052 = new GraceString("\n");
                                      var opresult7055 = callmethodChecked(var_s, "++(1)", [1], string7052);
                                      var opresult7057 = callmethodChecked(opresult7055, "++(1)", [1], var_spc);
                                      var opresult7059 = callmethodChecked(opresult7057, "++(1)", [1], string7049);
                                      var opresult7061 = callmethodChecked(opresult7059, "++(1)", [1], call7047);
                                      var_s = opresult7061;
                                      return GraceDone;
                                    };
                                    // call case 5: prelude request
                                    var call7062 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call7041, block7042);
                                    setLineNumber(1066);    // compilenode string
                                    var string7063 = new GraceString("}");
                                    var string7066 = new GraceString("\n");
                                    var opresult7069 = callmethodChecked(var_s, "++(1)", [1], string7066);
                                    var opresult7071 = callmethodChecked(opresult7069, "++(1)", [1], var_spc);
                                    var opresult7073 = callmethodChecked(opresult7071, "++(1)", [1], string7063);
                                    var_s = opresult7073;
                                    setLineNumber(1067);    // return value
                                    if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], var_s)))
                                        throw new GraceExceptionPacket(TypeErrorObject,
                                            new GraceString("result of method toGrace(_) does not have " + 
                                                callmethod(var_String, "asString", [0])._value + "."));
                                    return var_s;
                                  };
                                  func6869.paramTypes = [];
                                  func6869.paramTypes.push([type_Number, "depth"]);
                                  func6869.paramCounts = [1];
                                  obj6147.methods["toGrace(1)"] = func6869;
                                  func6869.definitionLine = 1025;
                                  func6869.definitionModule = "ast";
                                  var func7074 = function(argcv) {    // method shallowCopy
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    setModuleName("ast");
                                    setLineNumber(1070);    // compilenode identifier
                                    // call case 6: other requests
                                    // call case 4: self request
                                    onSelf = true;
                                    var call7078 = callmethodChecked(this, "signature", []);
                                    // call case 4: self request
                                    onSelf = true;
                                    var call7080 = callmethodChecked(this, "body", []);
                                    // call case 4: self request
                                    onSelf = true;
                                    var call7082 = callmethodChecked(this, "dtype", []);
                                    // call case 6: other requests
                                    var call7083 = callmethodChecked(var_methodNode, "new(3)", [3], call7078, call7080, call7082);
                                    var call7084 = callmethodChecked(call7083, "shallowCopyFieldsFrom(1)", [1], this);
                                    return call7084;
                                  };
                                  func7074.paramCounts = [0];
                                  obj6147.methods["shallowCopy"] = func7074;
                                  func7074.definitionLine = 1069;
                                  func7074.definitionModule = "ast";
                                  var func7085 = function(argcv) {    // method shallowCopyFieldsFrom(_)
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    var var_other = arguments[curarg];
                                    curarg++;
                                    setModuleName("ast");
                                    setLineNumber(1073);    // compilenode identifier
                                    // call case 1: super request
                                    var call7087 = callmethodsuper(this, "shallowCopyFieldsFrom(1)", [1], var_other);
                                    setLineNumber(1074);    // compilenode member
                                    // call case 6: other requests
                                    var call7090 = callmethodChecked(var_other, "isFresh", []);
                                    // call case 4: self request
                                    onSelf = true;
                                    var call7091 = callmethodChecked(this, "isFresh:=(1)", [1], call7090);
                                    setLineNumber(1075);    // compilenode member
                                    // call case 6: other requests
                                    var call7094 = callmethodChecked(var_other, "selfclosure", []);
                                    // call case 4: self request
                                    onSelf = true;
                                    var call7095 = callmethodChecked(this, "selfclosure:=(1)", [1], call7094);
                                    var if7096 = GraceDone;
                                    setLineNumber(1076);    // compilenode member
                                    // call case 6: other requests
                                    // call case 6: other requests
                                    var call7099 = callmethodChecked(var_other, "isBindingOccurence", []);
                                    var call7100 = callmethodChecked(call7099, "not", []);
                                    if (Grace_isTrue(call7100)) {
                                      setLineNumber(1077);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7102 = callmethodChecked(this, "appliedOccurence", []);
                                      if7096 = call7102;
                                    }
                                    setLineNumber(1079);    // compilenode identifier
                                    return this;
                                  };
                                  func7085.paramCounts = [1];
                                  obj6147.methods["shallowCopyFieldsFrom(1)"] = func7085;
                                  func7085.definitionLine = 1072;
                                  func7085.definitionModule = "ast";
                                  setLineNumber(844);    // compilenode identifier
                                  // call case 6: other requests
                                  // call case 6: other requests
                                  // call case 3: self.outer request
                                  var call7106 = callmethodChecked(superDepth, "outer", [0]);
                                  var call7107 = callmethodChecked(call7106, "outer", []);
                                  var call7108 = callmethodChecked(call7107, "baseNode$object(1)", [0, 1], this);
                                  obj6147.superobj = call7108;
                                  if (call7108.data) obj6147.data = call7108.data;
                                  if (call7108.hasOwnProperty('_value'))
                                      obj6147._value = call7108._value;
                                  setLineNumber(845);    // compilenode string
                                  var string7109 = new GraceString("method");
                                  obj6147.data["kind"] = string7109;
                                  var reader_ast_kind7110 = function() {
                                    return this.data["kind"];
                                  };
                                  reader_ast_kind7110.def = true;
                                  obj6147.methods["kind"] = reader_ast_kind7110;
                                  setLineNumber(846);    // compilenode identifier
                                  obj6147.data["signature"] = var_signature__39__;
                                  var reader_ast_signature7111 = function() {
                                    return this.data["signature"];
                                  };
                                  obj6147.methods["signature"] = reader_ast_signature7111;
                                  obj6147.data["signature"] = var_signature__39__;
                                  var writer_ast_signature7111 = function(argcv, o) {
                                    this.data["signature"] = o;
                                    return GraceDone;
                                  };
                                  obj6147.methods["signature:=(1)"] = writer_ast_signature7111;
                                  obj6147.mutable = true;
                                  setLineNumber(847);    // compilenode identifier
                                  obj6147.data["body"] = var_body__39__;
                                  var reader_ast_body7112 = function() {
                                    return this.data["body"];
                                  };
                                  obj6147.methods["body"] = reader_ast_body7112;
                                  obj6147.data["body"] = var_body__39__;
                                  var writer_ast_body7112 = function(argcv, o) {
                                    this.data["body"] = o;
                                    return GraceDone;
                                  };
                                  obj6147.methods["body:=(1)"] = writer_ast_body7112;
                                  obj6147.mutable = true;
                                  setLineNumber(848);    // compilenode identifier
                                  obj6147.data["dtype"] = var_dtype__39__;
                                  var reader_ast_dtype7113 = function() {
                                    return this.data["dtype"];
                                  };
                                  obj6147.methods["dtype"] = reader_ast_dtype7113;
                                  obj6147.data["dtype"] = var_dtype__39__;
                                  var writer_ast_dtype7113 = function(argcv, o) {
                                    this.data["dtype"] = o;
                                    return GraceDone;
                                  };
                                  obj6147.methods["dtype:=(1)"] = writer_ast_dtype7113;
                                  obj6147.mutable = true;
                                  setLineNumber(849);    // compilenode identifier
                                  obj6147.data["typeParams"] = GraceFalse;
                                  var reader_ast_typeParams7114 = function() {
                                    return this.data["typeParams"];
                                  };
                                  obj6147.methods["typeParams"] = reader_ast_typeParams7114;
                                  obj6147.data["typeParams"] = GraceFalse;
                                  var writer_ast_typeParams7114 = function(argcv, o) {
                                    this.data["typeParams"] = o;
                                    return GraceDone;
                                  };
                                  obj6147.methods["typeParams:=(1)"] = writer_ast_typeParams7114;
                                  obj6147.mutable = true;
                                  setLineNumber(850);    // compilenode identifier
                                  obj6147.data["selfclosure"] = GraceFalse;
                                  var reader_ast_selfclosure7115 = function() {
                                    return this.data["selfclosure"];
                                  };
                                  obj6147.methods["selfclosure"] = reader_ast_selfclosure7115;
                                  obj6147.data["selfclosure"] = GraceFalse;
                                  var writer_ast_selfclosure7115 = function(argcv, o) {
                                    this.data["selfclosure"] = o;
                                    return GraceDone;
                                  };
                                  obj6147.methods["selfclosure:=(1)"] = writer_ast_selfclosure7115;
                                  obj6147.mutable = true;
                                  setLineNumber(851);    // compilenode array
                                  var array7116 = new PrimitiveGraceList([]);
                                  obj6147.data["annotations"] = array7116;
                                  var reader_ast_annotations7117 = function() {
                                    return this.data["annotations"];
                                  };
                                  obj6147.methods["annotations"] = reader_ast_annotations7117;
                                  obj6147.data["annotations"] = array7116;
                                  var writer_ast_annotations7117 = function(argcv, o) {
                                    this.data["annotations"] = o;
                                    return GraceDone;
                                  };
                                  obj6147.methods["annotations:=(1)"] = writer_ast_annotations7117;
                                  obj6147.mutable = true;
                                  setLineNumber(852);    // compilenode identifier
                                  obj6147.data["isFresh"] = GraceFalse;
                                  var reader_ast_isFresh7118 = function() {
                                    return this.data["isFresh"];
                                  };
                                  obj6147.methods["isFresh"] = reader_ast_isFresh7118;
                                  obj6147.data["isFresh"] = GraceFalse;
                                  var writer_ast_isFresh7118 = function(argcv, o) {
                                    this.data["isFresh"] = o;
                                    return GraceDone;
                                  };
                                  obj6147.methods["isFresh:=(1)"] = writer_ast_isFresh7118;
                                  obj6147.mutable = true;
                                  setLineNumber(853);    // compilenode identifier
                                  obj6147.data["usesClassSyntax"] = GraceFalse;
                                  var reader_ast_usesClassSyntax7119 = function() {
                                    return this.data["usesClassSyntax"];
                                  };
                                  obj6147.methods["usesClassSyntax"] = reader_ast_usesClassSyntax7119;
                                  obj6147.data["usesClassSyntax"] = GraceFalse;
                                  var writer_ast_usesClassSyntax7119 = function(argcv, o) {
                                    this.data["usesClassSyntax"] = o;
                                    return GraceDone;
                                  };
                                  obj6147.methods["usesClassSyntax:=(1)"] = writer_ast_usesClassSyntax7119;
                                  obj6147.mutable = true;
                                  setLineNumber(854);    // compilenode identifier
                                  obj6147.data["cachedIdentifier"] = var_uninitialized;
                                  var reader_ast_cachedIdentifier7120 = function() {
                                    return this.data["cachedIdentifier"];
                                  };
                                  obj6147.methods["cachedIdentifier"] = reader_ast_cachedIdentifier7120;
                                  obj6147.data["cachedIdentifier"] = var_uninitialized;
                                  var writer_ast_cachedIdentifier7120 = function(argcv, o) {
                                    this.data["cachedIdentifier"] = o;
                                    return GraceDone;
                                  };
                                  obj6147.methods["cachedIdentifier:=(1)"] = writer_ast_cachedIdentifier7120;
                                  reader_ast_cachedIdentifier7120.confidential = true;
                                  writer_ast_cachedIdentifier7120.confidential = true;
                                  obj6147.mutable = true;
                                  setLineNumber(855);    // compilenode identifier
                                  obj6147.data["isBindingOccurence"] = GraceTrue;
                                  var reader_ast_isBindingOccurence7121 = function() {
                                    return this.data["isBindingOccurence"];
                                  };
                                  obj6147.methods["isBindingOccurence"] = reader_ast_isBindingOccurence7121;
                                  obj6147.data["isBindingOccurence"] = GraceTrue;
                                  var writer_ast_isBindingOccurence7121 = function(argcv, o) {
                                    this.data["isBindingOccurence"] = o;
                                    return GraceDone;
                                  };
                                  obj6147.methods["isBindingOccurence:=(1)"] = writer_ast_isBindingOccurence7121;
                                  writer_ast_isBindingOccurence7121.confidential = true;
                                  obj6147.mutable = true;
                                  superDepth = origSuperDepth;
                                };
                                obj_init_6147.apply(obj6147, []);
                                return obj6147;
                              };
                              func6146.paramCounts = [3];
                              obj6139.methods["new(3)"] = func6146;
                              func6146.definitionLine = 837;
                              func6146.definitionModule = "ast";
                                var func7122 = function(argcv) {    // method new(_,_,_)$object(_)
                                  var curarg = 1;
                                  var var_signature__39__ = arguments[curarg];
                                  curarg++;
                                  var var_body__39__ = arguments[curarg];
                                  curarg++;
                                  var var_dtype__39__ = arguments[curarg];
                                  curarg++;
                                  var inheritingObject = arguments[curarg++];
                                  // Start argument processing
                                  curarg = 1;
                                  curarg++;
                                  curarg++;
                                  curarg++;
                                  // End argument processing
                                  setModuleName("ast");
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var obj7123 = Grace_allocObject(null, "new(3)");
                                  obj7123.definitionModule = "ast";
                                  obj7123.definitionLine = 837;
                                  var inho7123 = inheritingObject;
                                  while (inho7123.superobj) inho7123 = inho7123.superobj;
                                  inho7123.superobj = obj7123;
                                  obj7123.data = inheritingObject.data;
                                  if (inheritingObject.hasOwnProperty('_value'))
                                    obj7123._value = inheritingObject._value;
                                  obj7123.outer = this;
                                  var reader_ast_outer7124 = function() {
                                    return this.outer;
                                  };
                                  obj7123.methods["outer"] = reader_ast_outer7124;
                                  var obj_init_7123 = function() {
                                    var origSuperDepth = superDepth;
                                    superDepth = obj7123;
                                    var func7125 = function(argcv) {    // method appliedOccurence
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      setModuleName("ast");
                                      setLineNumber(859);    // compilenode identifier
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7127 = callmethodChecked(this, "isBindingOccurence:=(1)", [1], GraceFalse);
                                      var if7128 = GraceDone;
                                      setLineNumber(860);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7130 = callmethodChecked(this, "cachedIdentifier", []);
                                      var opresult7133 = callmethodChecked(var_uninitialized, "\u2260(1)", [1], call7130);
                                      if (Grace_isTrue(opresult7133)) {
                                        setLineNumber(861);    // compilenode identifier
                                        // call case 6: other requests
                                        // call case 4: self request
                                        onSelf = true;
                                        var call7136 = callmethodChecked(this, "cachedIdentifier", []);
                                        var call7137 = callmethodChecked(call7136, "isBindingOccurence:=(1)", [1], GraceFalse);
                                        if7128 = call7137;
                                      }
                                      setLineNumber(863);    // compilenode identifier
                                      return this;
                                    };
                                    func7125.paramCounts = [0];
                                    obj7123.methods["appliedOccurence"] = func7125;
                                    func7125.definitionLine = 858;
                                    func7125.definitionModule = "ast";
                                    var func7138 = function(argcv) {    // method numParams
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      setModuleName("ast");
                                      setLineNumber(866);    // compilenode block
                                      var block7140 = new GraceBlock(this, 866, 2);
                                      setLineNumber(1);    // compilenode identifier
                                      block7140.real = function(var_acc, var_p) {
                                        setLineNumber(866);    // compilenode member
                                        // call case 6: other requests
                                        var call7142 = callmethodChecked(var_p, "numParams", []);
                                        var opresult7145 = callmethodChecked(var_acc, "+(1)", [1], call7142);
                                        return opresult7145;
                                      };
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7147 = callmethodChecked(this, "signature", []);
                                      var call7148 = callmethodChecked(call7147, "fold(1)startingWith(1)", [1, 1], block7140, new GraceNum(0));
                                      return call7148;
                                    };
                                    func7138.paramCounts = [0];
                                    obj7123.methods["numParams"] = func7138;
                                    func7138.definitionLine = 865;
                                    func7138.definitionModule = "ast";
                                    var func7149 = function(argcv) {    // method endPos
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      setModuleName("ast");
                                      setLineNumber(869);    // compilenode member
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7152 = callmethodChecked(this, "signature", []);
                                      var call7153 = callmethodChecked(call7152, "last", []);
                                      var var_lastPart = call7153;
                                      setLineNumber(870);    // compilenode member
                                      // call case 6: other requests
                                      // call case 6: other requests
                                      var call7157 = callmethodChecked(var_lastPart, "name", []);
                                      var call7158 = callmethodChecked(call7157, "size", []);
                                      // call case 6: other requests
                                      var call7161 = callmethodChecked(var_lastPart, "linePos", []);
                                      var opresult7163 = callmethodChecked(call7161, "+(1)", [1], call7158);
                                      var diff7165 = callmethodChecked(opresult7163, "-(1)", [1], new GraceNum(1));
                                      return diff7165;
                                    };
                                    func7149.paramCounts = [0];
                                    obj7123.methods["endPos"] = func7149;
                                    func7149.definitionLine = 868;
                                    func7149.definitionModule = "ast";
                                    var func7166 = function(argcv) {    // method nameString
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      setModuleName("ast");
                                      setLineNumber(874);    // compilenode block
                                      var block7168 = new GraceBlock(this, 874, 2);
                                      setLineNumber(1);    // compilenode identifier
                                      block7168.real = function(var_acc, var_each) {
                                        setLineNumber(874);    // compilenode member
                                        // call case 6: other requests
                                        var call7170 = callmethodChecked(var_each, "nameString", []);
                                        var opresult7173 = callmethodChecked(var_acc, "++(1)", [1], call7170);
                                        return opresult7173;
                                      };
                                      setLineNumber(875);    // compilenode string
                                      var string7174 = new GraceString("");
                                      // call case 6: other requests
                                      setLineNumber(874);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7176 = callmethodChecked(this, "signature", []);
                                      var call7177 = callmethodChecked(call7176, "fold(1)startingWith(1)", [1, 1], block7168, string7174);
                                      return call7177;
                                    };
                                    func7166.paramCounts = [0];
                                    obj7123.methods["nameString"] = func7166;
                                    func7166.definitionLine = 873;
                                    func7166.definitionModule = "ast";
                                    var func7178 = function(argcv) {    // method asIdentifier
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      setModuleName("ast");
                                      var if7179 = GraceDone;
                                      setLineNumber(878);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7181 = callmethodChecked(this, "cachedIdentifier", []);
                                      var opresult7184 = callmethodChecked(var_uninitialized, "==(1)", [1], call7181);
                                      if (Grace_isTrue(opresult7184)) {
                                        setLineNumber(879);    // compilenode member
                                        // call case 4: self request
                                        onSelf = true;
                                        var call7188 = callmethodChecked(this, "nameString", []);
                                        // call case 6: other requests
                                        var call7189 = callmethodChecked(var_identifierNode, "new(2)", [2], call7188, GraceFalse);
                                        // call case 4: self request
                                        onSelf = true;
                                        var call7190 = callmethodChecked(this, "cachedIdentifier:=(1)", [1], call7189);
                                        setLineNumber(880);    // compilenode member
                                        // call case 6: other requests
                                        // call case 6: other requests
                                        // call case 4: self request
                                        onSelf = true;
                                        var call7195 = callmethodChecked(this, "signature", []);
                                        var call7196 = callmethodChecked(call7195, "first", []);
                                        var call7197 = callmethodChecked(call7196, "line", []);
                                        // call case 6: other requests
                                        // call case 4: self request
                                        onSelf = true;
                                        var call7199 = callmethodChecked(this, "cachedIdentifier", []);
                                        var call7200 = callmethodChecked(call7199, "line:=(1)", [1], call7197);
                                        setLineNumber(881);    // compilenode member
                                        // call case 6: other requests
                                        // call case 6: other requests
                                        // call case 4: self request
                                        onSelf = true;
                                        var call7205 = callmethodChecked(this, "signature", []);
                                        var call7206 = callmethodChecked(call7205, "first", []);
                                        var call7207 = callmethodChecked(call7206, "linePos", []);
                                        // call case 6: other requests
                                        // call case 4: self request
                                        onSelf = true;
                                        var call7209 = callmethodChecked(this, "cachedIdentifier", []);
                                        var call7210 = callmethodChecked(call7209, "linePos:=(1)", [1], call7207);
                                        setLineNumber(882);    // compilenode member
                                        // call case 4: self request
                                        onSelf = true;
                                        var call7213 = callmethodChecked(this, "isBindingOccurence", []);
                                        // call case 6: other requests
                                        // call case 4: self request
                                        onSelf = true;
                                        var call7215 = callmethodChecked(this, "cachedIdentifier", []);
                                        var call7216 = callmethodChecked(call7215, "isBindingOccurrence:=(1)", [1], call7213);
                                        if7179 = call7216;
                                      }
                                      setLineNumber(884);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7218 = callmethodChecked(this, "cachedIdentifier", []);
                                      return call7218;
                                    };
                                    func7178.paramCounts = [0];
                                    obj7123.methods["asIdentifier"] = func7178;
                                    func7178.definitionLine = 877;
                                    func7178.definitionModule = "ast";
                                    var func7219 = function(argcv) {    // method value
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      setModuleName("ast");
                                      setLineNumber(886);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7221 = callmethodChecked(this, "asIdentifier", []);
                                      return call7221;
                                    };
                                    func7219.paramCounts = [0];
                                    obj7123.methods["value"] = func7219;
                                    func7219.definitionLine = 886;
                                    func7219.definitionModule = "ast";
                                    var func7222 = function(argcv) {    // method canonicalName
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      setModuleName("ast");
                                      setLineNumber(888);    // compilenode block
                                      var block7224 = new GraceBlock(this, 888, 2);
                                      setLineNumber(1);    // compilenode identifier
                                      block7224.real = function(var_acc, var_each) {
                                        setLineNumber(888);    // compilenode member
                                        // call case 6: other requests
                                        var call7226 = callmethodChecked(var_each, "canonicalName", []);
                                        var opresult7229 = callmethodChecked(var_acc, "++(1)", [1], call7226);
                                        return opresult7229;
                                      };
                                      setLineNumber(889);    // compilenode string
                                      var string7230 = new GraceString("");
                                      // call case 6: other requests
                                      setLineNumber(888);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7232 = callmethodChecked(this, "signature", []);
                                      var call7233 = callmethodChecked(call7232, "fold(1)startingWith(1)", [1, 1], block7224, string7230);
                                      return call7233;
                                    };
                                    func7222.paramCounts = [0];
                                    obj7123.methods["canonicalName"] = func7222;
                                    func7222.definitionLine = 887;
                                    func7222.definitionModule = "ast";
                                    var func7234 = function(argcv) {    // method hasParams
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      setModuleName("ast");
                                      setLineNumber(891);    // compilenode member
                                      // call case 6: other requests
                                      // call case 6: other requests
                                      // call case 6: other requests
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7240 = callmethodChecked(this, "signature", []);
                                      var call7241 = callmethodChecked(call7240, "first", []);
                                      var call7242 = callmethodChecked(call7241, "params", []);
                                      var call7243 = callmethodChecked(call7242, "isEmpty", []);
                                      var call7244 = callmethodChecked(call7243, "not", []);
                                      return call7244;
                                    };
                                    func7234.paramCounts = [0];
                                    obj7123.methods["hasParams"] = func7234;
                                    func7234.definitionLine = 891;
                                    func7234.definitionModule = "ast";
                                    var func7245 = function(argcv) {    // method numParamLists
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      setModuleName("ast");
                                      setLineNumber(895);    // compilenode member
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7248 = callmethodChecked(this, "signature", []);
                                      var call7249 = callmethodChecked(call7248, "size", []);
                                      var var_sigSz = call7249;
                                      var if7250 = GraceDone;
                                      setLineNumber(896);    // compilenode identifier
                                      var opresult7253 = callmethodChecked(var_sigSz, ">(1)", [1], new GraceNum(1));
                                      if (Grace_isTrue(opresult7253)) {
                                        return var_sigSz;
                                      }
                                      var if7254 = GraceDone;
                                      setLineNumber(897);    // compilenode member
                                      // call case 6: other requests
                                      // call case 6: other requests
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7259 = callmethodChecked(this, "signature", []);
                                      var call7260 = callmethodChecked(call7259, "first", []);
                                      var call7261 = callmethodChecked(call7260, "params", []);
                                      var call7262 = callmethodChecked(call7261, "isEmpty", []);
                                      if (Grace_isTrue(call7262)) {
                                        return new GraceNum(0);
                                      }
                                      setLineNumber(898);    // compilenode num
                                      return new GraceNum(1);
                                    };
                                    func7245.paramCounts = [0];
                                    obj7123.methods["numParamLists"] = func7245;
                                    func7245.definitionLine = 892;
                                    func7245.definitionModule = "ast";
                                    var func7263 = function(argcv) {    // method hasTypeParams
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      setModuleName("ast");
                                      setLineNumber(900);    // compilenode member
                                      // call case 6: other requests
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7267 = callmethodChecked(this, "signature", []);
                                      var call7268 = callmethodChecked(call7267, "first", []);
                                      var call7269 = callmethodChecked(call7268, "typeParams", []);
                                      var opresult7272 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call7269);
                                      return opresult7272;
                                    };
                                    func7263.paramCounts = [0];
                                    obj7123.methods["hasTypeParams"] = func7263;
                                    func7263.definitionLine = 900;
                                    func7263.definitionModule = "ast";
                                    var func7273 = function(argcv) {    // method isMethod
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      setModuleName("ast");
                                      // isMethod is a simple accessor - elide try ... catch
                                      setLineNumber(901);    // compilenode identifier
                                      return GraceTrue;
                                    };
                                    func7273.paramCounts = [0];
                                    obj7123.methods["isMethod"] = func7273;
                                    func7273.definitionLine = 901;
                                    func7273.definitionModule = "ast";
                                    var func7274 = function(argcv) {    // method isExecutable
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      setModuleName("ast");
                                      // isExecutable is a simple accessor - elide try ... catch
                                      setLineNumber(902);    // compilenode identifier
                                      return GraceFalse;
                                    };
                                    func7274.paramCounts = [0];
                                    obj7123.methods["isExecutable"] = func7274;
                                    func7274.definitionLine = 902;
                                    func7274.definitionModule = "ast";
                                    var func7275 = function(argcv) {    // method isLegalInTrait
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      setModuleName("ast");
                                      // isLegalInTrait is a simple accessor - elide try ... catch
                                      setLineNumber(903);    // compilenode identifier
                                      return GraceTrue;
                                    };
                                    func7275.paramCounts = [0];
                                    obj7123.methods["isLegalInTrait"] = func7275;
                                    func7275.definitionLine = 903;
                                    func7275.definitionModule = "ast";
                                    var func7276 = function(argcv) {    // method isClass
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      setModuleName("ast");
                                      setLineNumber(904);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7278 = callmethodChecked(this, "usesClassSyntax", []);
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7281 = callmethodChecked(this, "isFresh", []);
                                      var opresult7283 = callmethodChecked(call7281, "||(1)", [1], call7278);
                                      return opresult7283;
                                    };
                                    func7276.paramCounts = [0];
                                    obj7123.methods["isClass"] = func7276;
                                    func7276.definitionLine = 904;
                                    func7276.definitionModule = "ast";
                                    var func7284 = function(argcv) {    // method isTrait
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      setModuleName("ast");
                                      var if7285 = GraceDone;
                                      setLineNumber(906);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7287 = callmethodChecked(this, "isFresh", []);
                                      if (Grace_isTrue(call7287)) {
                                        setLineNumber(907);    // compilenode member
                                        // call case 6: other requests
                                        // call case 6: other requests
                                        // call case 4: self request
                                        onSelf = true;
                                        var call7291 = callmethodChecked(this, "body", []);
                                        var call7292 = callmethodChecked(call7291, "last", []);
                                        var call7293 = callmethodChecked(call7292, "isTrait", []);
                                        if7285 = call7293;
                                      } else {
                                        setLineNumber(909);    // compilenode identifier
                                        if7285 = GraceFalse;
                                      }
                                      return if7285;
                                    };
                                    func7284.paramCounts = [0];
                                    obj7123.methods["isTrait"] = func7284;
                                    func7284.definitionLine = 905;
                                    func7284.definitionModule = "ast";
                                    var func7294 = function(argcv) {    // method needsArgChecks
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      setModuleName("ast");
                                      setLineNumber(913);    // compilenode block
                                      var block7296 = new GraceBlock(this, 913, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block7296.real = function(var_part) {
                                        setLineNumber(914);    // compilenode block
                                        var block7298 = new GraceBlock(this, 914, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block7298.real = function(var_p) {
                                          var if7299 = GraceDone;
                                          setLineNumber(915);    // compilenode block
                                          var block7300 = new GraceBlock(this, 915, 0);
                                          block7300.real = function() {
                                            setLineNumber(916);    // compilenode string
                                            var string7301 = new GraceString("Unknown");
                                            // call case 6: other requests
                                            // call case 6: other requests
                                            var call7305 = callmethodChecked(var_p, "dtype", []);
                                            var call7306 = callmethodChecked(call7305, "nameString", []);
                                            var opresult7308 = callmethodChecked(call7306, "\u2260(1)", [1], string7301);
                                            return opresult7308;
                                          };
                                          setLineNumber(915);    // compilenode member
                                          // call case 6: other requests
                                          var call7311 = callmethodChecked(var_p, "dtype", []);
                                          var opresult7314 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call7311);
                                          var opresult7316 = callmethodChecked(opresult7314, "&&(1)", [1], block7300);
                                          if (Grace_isTrue(opresult7316)) {
                                            setLineNumber(917);    // compilenode identifier
                                            throw new ReturnException(GraceTrue, returnTarget);
                                          }
                                          return if7299;
                                        };
                                        // call case 6: other requests
                                        setLineNumber(914);    // compilenode member
                                        // call case 6: other requests
                                        var call7318 = callmethodChecked(var_part, "params", []);
                                        var call7319 = callmethodChecked(call7318, "do(1)", [1], block7298);
                                        return call7319;
                                      };
                                      // call case 6: other requests
                                      setLineNumber(913);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7321 = callmethodChecked(this, "signature", []);
                                      var call7322 = callmethodChecked(call7321, "do(1)", [1], block7296);
                                      setLineNumber(921);    // compilenode identifier
                                      return GraceFalse;
                                    };
                                    func7294.paramCounts = [0];
                                    obj7123.methods["needsArgChecks"] = func7294;
                                    func7294.definitionLine = 912;
                                    func7294.definitionModule = "ast";
                                    var func7323 = function(argcv) {    // method scope:=(_)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_st = arguments[curarg];
                                      curarg++;
                                      setModuleName("ast");
                                      setLineNumber(926);    // compilenode identifier
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7325 = callmethodChecked(this, "symbolTable:=(1)", [1], var_st);
                                      setLineNumber(927);    // compilenode identifier
                                      // call case 6: other requests
                                      var call7327 = callmethodChecked(var_st, "node:=(1)", [1], this);
                                      return call7327;
                                    };
                                    func7323.paramCounts = [1];
                                    obj7123.methods["scope:=(1)"] = func7323;
                                    func7323.definitionLine = 923;
                                    func7323.definitionModule = "ast";
                                    var func7328 = function(argcv) {    // method declarationKindWithAncestors(_)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_as = arguments[curarg];
                                      curarg++;
                                      setModuleName("ast");
                                      setLineNumber(929);    // compilenode member
                                      // call case 6: other requests
                                      var call7330 = callmethodChecked(var_k, "parameter", []);
                                      return call7330;
                                    };
                                    func7328.paramCounts = [1];
                                    obj7123.methods["declarationKindWithAncestors(1)"] = func7328;
                                    func7328.definitionLine = 929;
                                    func7328.definitionModule = "ast";
                                    var func7331 = function(argcv) {    // method isConfidential
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      setModuleName("ast");
                                      var if7332 = GraceDone;
                                      setLineNumber(931);    // compilenode member
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7336 = callmethodChecked(this, "annotations", []);
                                      var call7337 = callmethodChecked(call7336, "size", []);
                                      var opresult7339 = callmethodChecked(call7337, "==(1)", [1], new GraceNum(0));
                                      if (Grace_isTrue(opresult7339)) {
                                        return GraceFalse;
                                      }
                                      setLineNumber(932);    // compilenode string
                                      var string7341 = new GraceString("confidential");
                                      // call case 6: other requests
                                      // call case 6: other requests
                                      // call case 3: self.outer request
                                      var call7344 = callmethodChecked(superDepth, "outer", [0]);
                                      var call7345 = callmethodChecked(call7344, "outer", []);
                                      onSelf = true;
                                      var call7346 = callmethodChecked(call7345, "findAnnotation(2)", [2], this, string7341);
                                      return call7346;
                                    };
                                    func7331.paramCounts = [0];
                                    obj7123.methods["isConfidential"] = func7331;
                                    func7331.definitionLine = 930;
                                    func7331.definitionModule = "ast";
                                    var func7347 = function(argcv) {    // method isPublic
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      setModuleName("ast");
                                      setLineNumber(934);    // compilenode member
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7350 = callmethodChecked(this, "isConfidential", []);
                                      var call7351 = callmethodChecked(call7350, "not", []);
                                      return call7351;
                                    };
                                    func7347.paramCounts = [0];
                                    obj7123.methods["isPublic"] = func7347;
                                    func7347.definitionLine = 934;
                                    func7347.definitionModule = "ast";
                                    var func7352 = function(argcv) {    // method isWritable
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      setModuleName("ast");
                                      // isWritable is a simple accessor - elide try ... catch
                                      setLineNumber(935);    // compilenode identifier
                                      return GraceFalse;
                                    };
                                    func7352.paramCounts = [0];
                                    obj7123.methods["isWritable"] = func7352;
                                    func7352.definitionLine = 935;
                                    func7352.definitionModule = "ast";
                                    var func7353 = function(argcv) {    // method isReadable
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      setModuleName("ast");
                                      setLineNumber(936);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7355 = callmethodChecked(this, "isPublic", []);
                                      return call7355;
                                    };
                                    func7353.paramCounts = [0];
                                    obj7123.methods["isReadable"] = func7353;
                                    func7353.definitionLine = 936;
                                    func7353.definitionModule = "ast";
                                    var func7356 = function(argcv) {    // method usesAsType(_)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_aNode = arguments[curarg];
                                      curarg++;
                                      setModuleName("ast");
                                      setLineNumber(938);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7358 = callmethodChecked(this, "dtype", []);
                                      var opresult7361 = callmethodChecked(var_aNode, "==(1)", [1], call7358);
                                      return opresult7361;
                                    };
                                    func7356.paramCounts = [1];
                                    obj7123.methods["usesAsType(1)"] = func7356;
                                    func7356.definitionLine = 937;
                                    func7356.definitionModule = "ast";
                                    var func7362 = function(argcv) {    // method returnsObject
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      setModuleName("ast");
                                      setLineNumber(941);    // compilenode block
                                      var block7363 = new GraceBlock(this, 941, 0);
                                      block7363.real = function() {
                                        // call case 6: other requests
                                        // call case 6: other requests
                                        // call case 4: self request
                                        onSelf = true;
                                        var call7367 = callmethodChecked(this, "body", []);
                                        var call7368 = callmethodChecked(call7367, "last", []);
                                        var call7369 = callmethodChecked(call7368, "returnsObject", []);
                                        return call7369;
                                      };
                                      // call case 6: other requests
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7374 = callmethodChecked(this, "body", []);
                                      var call7375 = callmethodChecked(call7374, "isEmpty", []);
                                      var call7376 = callmethodChecked(call7375, "not", []);
                                      var opresult7378 = callmethodChecked(call7376, "&&(1)", [1], block7363);
                                      return opresult7378;
                                    };
                                    func7362.paramCounts = [0];
                                    obj7123.methods["returnsObject"] = func7362;
                                    func7362.definitionLine = 940;
                                    func7362.definitionModule = "ast";
                                    var func7379 = function(argcv) {    // method returnedObjectScope
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      setModuleName("ast");
                                      setLineNumber(945);    // compilenode member
                                      // call case 6: other requests
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7383 = callmethodChecked(this, "body", []);
                                      var call7384 = callmethodChecked(call7383, "last", []);
                                      var call7385 = callmethodChecked(call7384, "returnedObjectScope", []);
                                      return call7385;
                                    };
                                    func7379.paramCounts = [0];
                                    obj7123.methods["returnedObjectScope"] = func7379;
                                    func7379.definitionLine = 943;
                                    func7379.definitionModule = "ast";
                                    var func7386 = function(argcv) {    // method accept(_)from(_)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_visitor = arguments[curarg];
                                      curarg++;
                                      var var_as = arguments[curarg];
                                      curarg++;
                                      // Start argument checking
                                      curarg = 1;
                                      setLineNumber(947);    // compilenode identifier
                                      if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                          throw new GraceExceptionPacket(TypeErrorObject,
                                              new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                  callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                      curarg++;
                                      curarg++;
                                      // End argument checking
                                      setModuleName("ast");
                                      var if7387 = GraceDone;
                                      setLineNumber(948);    // compilenode identifier
                                      // call case 6: other requests
                                      var call7389 = callmethodChecked(var_visitor, "visitMethod(1)up(1)", [1, 1], this, var_as);
                                      if (Grace_isTrue(call7389)) {
                                        setLineNumber(949);    // compilenode identifier
                                        // call case 6: other requests
                                        var call7391 = callmethodChecked(var_as, "extend(1)", [1], this);
                                        var var_newChain = call7391;
                                        setLineNumber(950);    // compilenode identifier
                                        // call case 6: other requests
                                        // call case 4: self request
                                        onSelf = true;
                                        var call7394 = callmethodChecked(this, "value", []);
                                        var call7395 = callmethodChecked(call7394, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                        var if7396 = GraceDone;
                                        setLineNumber(951);    // compilenode member
                                        // call case 4: self request
                                        onSelf = true;
                                        var call7398 = callmethodChecked(this, "typeParams", []);
                                        var opresult7401 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call7398);
                                        if (Grace_isTrue(opresult7401)) {
                                          setLineNumber(952);    // compilenode identifier
                                          // call case 6: other requests
                                          // call case 4: self request
                                          onSelf = true;
                                          var call7404 = callmethodChecked(this, "typeParams", []);
                                          var call7405 = callmethodChecked(call7404, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                          if7396 = call7405;
                                        }
                                        setLineNumber(954);    // compilenode member
                                        // call case 4: self request
                                        onSelf = true;
                                        var call7408 = callmethodChecked(this, "signature", []);
                                        var block7409 = new GraceBlock(this, 954, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block7409.real = function(var_part) {
                                          setLineNumber(955);    // compilenode member
                                          // call case 6: other requests
                                          var call7412 = callmethodChecked(var_part, "params", []);
                                          var block7413 = new GraceBlock(this, 955, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block7413.real = function(var_p) {
                                            setLineNumber(956);    // compilenode identifier
                                            // call case 6: other requests
                                            var call7415 = callmethodChecked(var_p, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                            return call7415;
                                          };
                                          // call case 5: prelude request
                                          var call7416 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call7412, block7413);
                                          return call7416;
                                        };
                                        // call case 5: prelude request
                                        var call7417 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call7408, block7409);
                                        var if7418 = GraceDone;
                                        setLineNumber(959);    // compilenode member
                                        // call case 4: self request
                                        onSelf = true;
                                        var call7420 = callmethodChecked(this, "dtype", []);
                                        var opresult7423 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call7420);
                                        if (Grace_isTrue(opresult7423)) {
                                          setLineNumber(960);    // compilenode identifier
                                          // call case 6: other requests
                                          // call case 4: self request
                                          onSelf = true;
                                          var call7426 = callmethodChecked(this, "dtype", []);
                                          var call7427 = callmethodChecked(call7426, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                          if7418 = call7427;
                                        }
                                        setLineNumber(962);    // compilenode member
                                        // call case 4: self request
                                        onSelf = true;
                                        var call7430 = callmethodChecked(this, "annotations", []);
                                        var block7431 = new GraceBlock(this, 962, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block7431.real = function(var_ann) {
                                          setLineNumber(963);    // compilenode identifier
                                          // call case 6: other requests
                                          var call7433 = callmethodChecked(var_ann, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                          return call7433;
                                        };
                                        // call case 5: prelude request
                                        var call7434 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call7430, block7431);
                                        setLineNumber(965);    // compilenode member
                                        // call case 4: self request
                                        onSelf = true;
                                        var call7437 = callmethodChecked(this, "body", []);
                                        var block7438 = new GraceBlock(this, 965, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block7438.real = function(var_mx) {
                                          setLineNumber(966);    // compilenode identifier
                                          // call case 6: other requests
                                          var call7440 = callmethodChecked(var_mx, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                          return call7440;
                                        };
                                        // call case 5: prelude request
                                        var call7441 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call7437, block7438);
                                        if7387 = call7441;
                                      }
                                      return if7387;
                                    };
                                    func7386.paramTypes = [];
                                    func7386.paramTypes.push([]);
                                    func7386.paramTypes.push([]);
                                    func7386.paramCounts = [1, 1];
                                    obj7123.methods["accept(1)from(1)"] = func7386;
                                    func7386.definitionLine = 947;
                                    func7386.definitionModule = "ast";
                                    var func7442 = function(argcv) {    // method map(_)ancestors(_)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_blk = arguments[curarg];
                                      curarg++;
                                      var var_as = arguments[curarg];
                                      curarg++;
                                      setModuleName("ast");
                                      setLineNumber(971);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7444 = callmethodChecked(this, "shallowCopy", []);
                                      var var_n = call7444;
                                      setLineNumber(972);    // compilenode identifier
                                      // call case 6: other requests
                                      var call7446 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                      var var_newChain = call7446;
                                      setLineNumber(973);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7450 = callmethodChecked(this, "body", []);
                                      // call case 6: other requests
                                      // call case 6: other requests
                                      // call case 3: self.outer request
                                      var call7453 = callmethodChecked(superDepth, "outer", [0]);
                                      var call7454 = callmethodChecked(call7453, "outer", []);
                                      onSelf = true;
                                      var call7455 = callmethodChecked(call7454, "listMap(2)ancestors(1)", [2, 1], call7450, var_blk, var_newChain);
                                      // call case 6: other requests
                                      var call7456 = callmethodChecked(var_n, "body:=(1)", [1], call7455);
                                      setLineNumber(974);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7460 = callmethodChecked(this, "typeParams", []);
                                      // call case 6: other requests
                                      // call case 6: other requests
                                      // call case 3: self.outer request
                                      var call7463 = callmethodChecked(superDepth, "outer", [0]);
                                      var call7464 = callmethodChecked(call7463, "outer", []);
                                      onSelf = true;
                                      var call7465 = callmethodChecked(call7464, "maybeMap(2)ancestors(1)", [2, 1], call7460, var_blk, var_newChain);
                                      // call case 6: other requests
                                      var call7466 = callmethodChecked(var_n, "typeParams:=(1)", [1], call7465);
                                      setLineNumber(975);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7470 = callmethodChecked(this, "signature", []);
                                      // call case 6: other requests
                                      // call case 6: other requests
                                      // call case 3: self.outer request
                                      var call7473 = callmethodChecked(superDepth, "outer", [0]);
                                      var call7474 = callmethodChecked(call7473, "outer", []);
                                      onSelf = true;
                                      var call7475 = callmethodChecked(call7474, "listMap(2)ancestors(1)", [2, 1], call7470, var_blk, var_newChain);
                                      // call case 6: other requests
                                      var call7476 = callmethodChecked(var_n, "signature:=(1)", [1], call7475);
                                      setLineNumber(976);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7480 = callmethodChecked(this, "annotations", []);
                                      // call case 6: other requests
                                      // call case 6: other requests
                                      // call case 3: self.outer request
                                      var call7483 = callmethodChecked(superDepth, "outer", [0]);
                                      var call7484 = callmethodChecked(call7483, "outer", []);
                                      onSelf = true;
                                      var call7485 = callmethodChecked(call7484, "listMap(2)ancestors(1)", [2, 1], call7480, var_blk, var_newChain);
                                      // call case 6: other requests
                                      var call7486 = callmethodChecked(var_n, "annotations:=(1)", [1], call7485);
                                      setLineNumber(977);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7490 = callmethodChecked(this, "dtype", []);
                                      // call case 6: other requests
                                      // call case 6: other requests
                                      // call case 3: self.outer request
                                      var call7493 = callmethodChecked(superDepth, "outer", [0]);
                                      var call7494 = callmethodChecked(call7493, "outer", []);
                                      onSelf = true;
                                      var call7495 = callmethodChecked(call7494, "maybeMap(2)ancestors(1)", [2, 1], call7490, var_blk, var_newChain);
                                      // call case 6: other requests
                                      var call7496 = callmethodChecked(var_n, "dtype:=(1)", [1], call7495);
                                      setLineNumber(978);    // compilenode identifier
                                      // call case 6: other requests
                                      var call7498 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                      return call7498;
                                    };
                                    func7442.paramCounts = [1, 1];
                                    obj7123.methods["map(1)ancestors(1)"] = func7442;
                                    func7442.definitionLine = 970;
                                    func7442.definitionModule = "ast";
                                    var func7499 = function(argcv) {    // method pretty(_)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_depth = arguments[curarg];
                                      curarg++;
                                      setModuleName("ast");
                                      setLineNumber(981);    // compilenode string
                                      var string7500 = new GraceString("");
                                      var var_spc = string7500;
                                      setLineNumber(982);    // compilenode num
                                      var opresult7504 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                                      var block7505 = new GraceBlock(this, 982, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block7505.real = function(var_i) {
                                        setLineNumber(983);    // compilenode string
                                        var string7506 = new GraceString("  ");
                                        var opresult7509 = callmethodChecked(var_spc, "++(1)", [1], string7506);
                                        var_spc = opresult7509;
                                        return GraceDone;
                                      };
                                      // call case 5: prelude request
                                      var call7510 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult7504, block7505);
                                      setLineNumber(985);    // compilenode string
                                      var string7511 = new GraceString("\n");
                                      // call case 1: super request
                                      var call7514 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                      var opresult7516 = callmethodChecked(call7514, "++(1)", [1], string7511);
                                      var var_s = opresult7516;
                                      setLineNumber(986);    // compilenode string
                                      var string7517 = new GraceString("\n");
                                      var opresult7522 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7524 = callmethodChecked(this, "value", []);
                                      var call7525 = callmethodChecked(call7524, "pretty(1)", [1], opresult7522);
                                      var string7527 = new GraceString("Name: ");
                                      var opresult7531 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                      var opresult7533 = callmethodChecked(opresult7531, "++(1)", [1], string7527);
                                      var opresult7535 = callmethodChecked(opresult7533, "++(1)", [1], call7525);
                                      var opresult7537 = callmethodChecked(opresult7535, "++(1)", [1], string7517);
                                      var_s = opresult7537;
                                      var if7538 = GraceDone;
                                      setLineNumber(987);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7540 = callmethodChecked(this, "dtype", []);
                                      var opresult7543 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call7540);
                                      if (Grace_isTrue(opresult7543)) {
                                        setLineNumber(988);    // compilenode string
                                        var string7544 = new GraceString("  ");
                                        var string7547 = new GraceString("Returns:\n");
                                        var opresult7551 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                        var opresult7553 = callmethodChecked(opresult7551, "++(1)", [1], string7547);
                                        var opresult7555 = callmethodChecked(opresult7553, "++(1)", [1], var_spc);
                                        var opresult7557 = callmethodChecked(opresult7555, "++(1)", [1], string7544);
                                        var_s = opresult7557;
                                        setLineNumber(989);    // compilenode string
                                        var string7558 = new GraceString("\n");
                                        var opresult7563 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                        // call case 6: other requests
                                        // call case 4: self request
                                        onSelf = true;
                                        var call7565 = callmethodChecked(this, "dtype", []);
                                        var call7566 = callmethodChecked(call7565, "pretty(1)", [1], opresult7563);
                                        var opresult7569 = callmethodChecked(var_s, "++(1)", [1], call7566);
                                        var opresult7571 = callmethodChecked(opresult7569, "++(1)", [1], string7558);
                                        var_s = opresult7571;
                                        if7538 = GraceDone;
                                      }
                                      var if7572 = GraceDone;
                                      setLineNumber(991);    // compilenode member
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7575 = callmethodChecked(this, "isBindingOccurence", []);
                                      var call7576 = callmethodChecked(call7575, "not", []);
                                      if (Grace_isTrue(call7576)) {
                                        var string7577 = new GraceString("Applied\n");
                                        var opresult7581 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                        var opresult7583 = callmethodChecked(opresult7581, "++(1)", [1], string7577);
                                        var_s = opresult7583;
                                        if7572 = GraceDone;
                                      }
                                      var if7584 = GraceDone;
                                      setLineNumber(992);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7586 = callmethodChecked(this, "isFresh", []);
                                      if (Grace_isTrue(call7586)) {
                                        var string7587 = new GraceString("Fresh\n");
                                        var opresult7591 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                        var opresult7593 = callmethodChecked(opresult7591, "++(1)", [1], string7587);
                                        var_s = opresult7593;
                                        if7584 = GraceDone;
                                      }
                                      setLineNumber(993);    // compilenode string
                                      var string7594 = new GraceString("Signature:");
                                      var string7597 = new GraceString("");
                                      var string7600 = new GraceString("");
                                      var opresult7602 = callmethodChecked(string7600, "++(1)", [1], var_s);
                                      var opresult7604 = callmethodChecked(opresult7602, "++(1)", [1], string7597);
                                      var opresult7606 = callmethodChecked(opresult7604, "++(1)", [1], var_spc);
                                      var opresult7608 = callmethodChecked(opresult7606, "++(1)", [1], string7594);
                                      var_s = opresult7608;
                                      setLineNumber(994);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7611 = callmethodChecked(this, "signature", []);
                                      var block7612 = new GraceBlock(this, 994, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block7612.real = function(var_part) {
                                        setLineNumber(995);    // compilenode string
                                        var string7613 = new GraceString("");
                                        // call case 6: other requests
                                        var call7616 = callmethodChecked(var_part, "name", []);
                                        var string7618 = new GraceString("Part: ");
                                        var string7621 = new GraceString("\n  ");
                                        var string7624 = new GraceString("");
                                        var opresult7626 = callmethodChecked(string7624, "++(1)", [1], var_s);
                                        var opresult7628 = callmethodChecked(opresult7626, "++(1)", [1], string7621);
                                        var opresult7630 = callmethodChecked(opresult7628, "++(1)", [1], var_spc);
                                        var opresult7632 = callmethodChecked(opresult7630, "++(1)", [1], string7618);
                                        var opresult7634 = callmethodChecked(opresult7632, "++(1)", [1], call7616);
                                        var opresult7636 = callmethodChecked(opresult7634, "++(1)", [1], string7613);
                                        var_s = opresult7636;
                                        setLineNumber(996);    // compilenode string
                                        var string7637 = new GraceString("Parameters:");
                                        var string7640 = new GraceString("\n    ");
                                        var string7643 = new GraceString("");
                                        var opresult7645 = callmethodChecked(string7643, "++(1)", [1], var_s);
                                        var opresult7647 = callmethodChecked(opresult7645, "++(1)", [1], string7640);
                                        var opresult7649 = callmethodChecked(opresult7647, "++(1)", [1], var_spc);
                                        var opresult7651 = callmethodChecked(opresult7649, "++(1)", [1], string7637);
                                        var_s = opresult7651;
                                        setLineNumber(997);    // compilenode member
                                        // call case 6: other requests
                                        var call7654 = callmethodChecked(var_part, "params", []);
                                        var block7655 = new GraceBlock(this, 997, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block7655.real = function(var_p) {
                                          setLineNumber(998);    // compilenode string
                                          var string7656 = new GraceString("");
                                          var opresult7661 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(4));
                                          // call case 6: other requests
                                          var call7662 = callmethodChecked(var_p, "pretty(1)", [1], opresult7661);
                                          var string7664 = new GraceString("");
                                          var string7667 = new GraceString("\n      ");
                                          var string7670 = new GraceString("");
                                          var opresult7672 = callmethodChecked(string7670, "++(1)", [1], var_s);
                                          var opresult7674 = callmethodChecked(opresult7672, "++(1)", [1], string7667);
                                          var opresult7676 = callmethodChecked(opresult7674, "++(1)", [1], var_spc);
                                          var opresult7678 = callmethodChecked(opresult7676, "++(1)", [1], string7664);
                                          var opresult7680 = callmethodChecked(opresult7678, "++(1)", [1], call7662);
                                          var opresult7682 = callmethodChecked(opresult7680, "++(1)", [1], string7656);
                                          var_s = opresult7682;
                                          return GraceDone;
                                        };
                                        // call case 5: prelude request
                                        var call7683 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call7654, block7655);
                                        return call7683;
                                      };
                                      // call case 5: prelude request
                                      var call7684 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call7611, block7612);
                                      setLineNumber(1001);    // compilenode string
                                      var string7685 = new GraceString("\n");
                                      var opresult7688 = callmethodChecked(var_s, "++(1)", [1], string7685);
                                      var_s = opresult7688;
                                      var if7689 = GraceDone;
                                      setLineNumber(1002);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7691 = callmethodChecked(this, "typeParams", []);
                                      var opresult7694 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call7691);
                                      if (Grace_isTrue(opresult7694)) {
                                        setLineNumber(1003);    // compilenode string
                                        var string7695 = new GraceString("Generics:");
                                        var string7698 = new GraceString("");
                                        var string7701 = new GraceString("");
                                        var opresult7703 = callmethodChecked(string7701, "++(1)", [1], var_s);
                                        var opresult7705 = callmethodChecked(opresult7703, "++(1)", [1], string7698);
                                        var opresult7707 = callmethodChecked(opresult7705, "++(1)", [1], var_spc);
                                        var opresult7709 = callmethodChecked(opresult7707, "++(1)", [1], string7695);
                                        var_s = opresult7709;
                                        setLineNumber(1004);    // compilenode block
                                        var block7711 = new GraceBlock(this, 1004, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block7711.real = function(var_g) {
                                          setLineNumber(1005);    // compilenode string
                                          var string7712 = new GraceString("");
                                          // call case 6: other requests
                                          var call7715 = callmethodChecked(var_g, "pretty(1)", [1], new GraceNum(0));
                                          var string7717 = new GraceString("  ");
                                          var string7720 = new GraceString("\n");
                                          var string7723 = new GraceString("");
                                          var opresult7725 = callmethodChecked(string7723, "++(1)", [1], var_s);
                                          var opresult7727 = callmethodChecked(opresult7725, "++(1)", [1], string7720);
                                          var opresult7729 = callmethodChecked(opresult7727, "++(1)", [1], var_spc);
                                          var opresult7731 = callmethodChecked(opresult7729, "++(1)", [1], string7717);
                                          var opresult7733 = callmethodChecked(opresult7731, "++(1)", [1], call7715);
                                          var opresult7735 = callmethodChecked(opresult7733, "++(1)", [1], string7712);
                                          var_s = opresult7735;
                                          return GraceDone;
                                        };
                                        // call case 6: other requests
                                        setLineNumber(1004);    // compilenode member
                                        // call case 4: self request
                                        onSelf = true;
                                        var call7737 = callmethodChecked(this, "typeParams", []);
                                        var call7738 = callmethodChecked(call7737, "do(1)", [1], block7711);
                                        setLineNumber(1007);    // compilenode string
                                        var string7739 = new GraceString("\n");
                                        var opresult7742 = callmethodChecked(var_s, "++(1)", [1], string7739);
                                        var_s = opresult7742;
                                        if7689 = GraceDone;
                                      }
                                      var if7743 = GraceDone;
                                      setLineNumber(1009);    // compilenode member
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7747 = callmethodChecked(this, "annotations", []);
                                      var call7748 = callmethodChecked(call7747, "size", []);
                                      var opresult7750 = callmethodChecked(call7748, ">(1)", [1], new GraceNum(0));
                                      if (Grace_isTrue(opresult7750)) {
                                        setLineNumber(1010);    // compilenode string
                                        var string7751 = new GraceString("Annotations:");
                                        var string7754 = new GraceString("");
                                        var string7757 = new GraceString("");
                                        var opresult7759 = callmethodChecked(string7757, "++(1)", [1], var_s);
                                        var opresult7761 = callmethodChecked(opresult7759, "++(1)", [1], string7754);
                                        var opresult7763 = callmethodChecked(opresult7761, "++(1)", [1], var_spc);
                                        var opresult7765 = callmethodChecked(opresult7763, "++(1)", [1], string7751);
                                        var_s = opresult7765;
                                        setLineNumber(1011);    // compilenode member
                                        // call case 4: self request
                                        onSelf = true;
                                        var call7768 = callmethodChecked(this, "annotations", []);
                                        var block7769 = new GraceBlock(this, 1011, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block7769.real = function(var_an) {
                                          setLineNumber(1012);    // compilenode string
                                          var string7770 = new GraceString("");
                                          var opresult7775 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                          // call case 6: other requests
                                          var call7776 = callmethodChecked(var_an, "pretty(1)", [1], opresult7775);
                                          var string7778 = new GraceString("  ");
                                          var string7781 = new GraceString("\n");
                                          var string7784 = new GraceString("");
                                          var opresult7786 = callmethodChecked(string7784, "++(1)", [1], var_s);
                                          var opresult7788 = callmethodChecked(opresult7786, "++(1)", [1], string7781);
                                          var opresult7790 = callmethodChecked(opresult7788, "++(1)", [1], var_spc);
                                          var opresult7792 = callmethodChecked(opresult7790, "++(1)", [1], string7778);
                                          var opresult7794 = callmethodChecked(opresult7792, "++(1)", [1], call7776);
                                          var opresult7796 = callmethodChecked(opresult7794, "++(1)", [1], string7770);
                                          var_s = opresult7796;
                                          return GraceDone;
                                        };
                                        // call case 5: prelude request
                                        var call7797 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call7768, block7769);
                                        setLineNumber(1014);    // compilenode string
                                        var string7798 = new GraceString("\n");
                                        var opresult7801 = callmethodChecked(var_s, "++(1)", [1], string7798);
                                        var_s = opresult7801;
                                        if7743 = GraceDone;
                                      }
                                      setLineNumber(1016);    // compilenode string
                                      var string7802 = new GraceString("Body:");
                                      var opresult7806 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                      var opresult7808 = callmethodChecked(opresult7806, "++(1)", [1], string7802);
                                      var_s = opresult7808;
                                      setLineNumber(1017);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7811 = callmethodChecked(this, "body", []);
                                      var block7812 = new GraceBlock(this, 1017, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block7812.real = function(var_mx) {
                                        setLineNumber(1018);    // compilenode identifier
                                        var opresult7816 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                        // call case 6: other requests
                                        var call7817 = callmethodChecked(var_mx, "pretty(1)", [1], opresult7816);
                                        var string7820 = new GraceString("\n  ");
                                        var opresult7823 = callmethodChecked(var_s, "++(1)", [1], string7820);
                                        var opresult7825 = callmethodChecked(opresult7823, "++(1)", [1], var_spc);
                                        var opresult7827 = callmethodChecked(opresult7825, "++(1)", [1], call7817);
                                        var_s = opresult7827;
                                        return GraceDone;
                                      };
                                      // call case 5: prelude request
                                      var call7828 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call7811, block7812);
                                      var if7829 = GraceDone;
                                      setLineNumber(1020);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7831 = callmethodChecked(this, "comments", []);
                                      var opresult7834 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call7831);
                                      if (Grace_isTrue(opresult7834)) {
                                        setLineNumber(1021);    // compilenode identifier
                                        var opresult7838 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                        // call case 6: other requests
                                        // call case 4: self request
                                        onSelf = true;
                                        var call7840 = callmethodChecked(this, "comments", []);
                                        var call7841 = callmethodChecked(call7840, "pretty(1)", [1], opresult7838);
                                        var opresult7844 = callmethodChecked(var_s, "++(1)", [1], call7841);
                                        var_s = opresult7844;
                                        if7829 = GraceDone;
                                      }
                                      setLineNumber(1023);    // compilenode identifier
                                      return var_s;
                                    };
                                    func7499.paramCounts = [1];
                                    obj7123.methods["pretty(1)"] = func7499;
                                    func7499.definitionLine = 980;
                                    func7499.definitionModule = "ast";
                                    var func7845 = function(argcv) {    // method toGrace(_)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_depth = arguments[curarg];
                                      curarg++;
                                      // Start argument checking
                                      curarg = 1;
                                      setLineNumber(1025);    // compilenode identifier
                                      if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                          throw new GraceExceptionPacket(TypeErrorObject,
                                              new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                  callmethod(var_Number, "asString", [0])._value + "."));
                                      curarg++;
                                      // End argument checking
                                      setModuleName("ast");
                                      setLineNumber(1026);    // compilenode string
                                      var string7846 = new GraceString("");
                                      var var_spc = string7846;
                                      setLineNumber(1027);    // compilenode identifier
                                      var diff7850 = callmethodChecked(var_depth, "-(1)", [1], new GraceNum(1));
                                      var opresult7853 = callmethodChecked(new GraceNum(0), "..(1)", [1], diff7850);
                                      var block7854 = new GraceBlock(this, 1027, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block7854.real = function(var_i) {
                                        setLineNumber(1028);    // compilenode string
                                        var string7855 = new GraceString("    ");
                                        var opresult7858 = callmethodChecked(var_spc, "++(1)", [1], string7855);
                                        var_spc = opresult7858;
                                        return GraceDone;
                                      };
                                      // call case 5: prelude request
                                      var call7859 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult7853, block7854);
                                      setLineNumber(1030);    // compilenode string
                                      var string7860 = new GraceString("method ");
                                      var var_s = string7860;
                                      setLineNumber(1031);    // compilenode identifier
                                      var var_firstPart = GraceTrue;
                                      setLineNumber(1032);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7863 = callmethodChecked(this, "signature", []);
                                      var block7864 = new GraceBlock(this, 1032, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block7864.real = function(var_part) {
                                        setLineNumber(1033);    // compilenode member
                                        // call case 6: other requests
                                        var call7866 = callmethodChecked(var_part, "name", []);
                                        var opresult7869 = callmethodChecked(var_s, "++(1)", [1], call7866);
                                        var_s = opresult7869;
                                        var if7870 = GraceDone;
                                        setLineNumber(1034);    // compilenode block
                                        var block7871 = new GraceBlock(this, 1034, 0);
                                        block7871.real = function() {
                                          // call case 4: self request
                                          onSelf = true;
                                          var call7873 = callmethodChecked(this, "typeParams", []);
                                          var opresult7876 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call7873);
                                          return opresult7876;
                                        };
                                        var opresult7879 = callmethodChecked(var_firstPart, "&&(1)", [1], block7871);
                                        if (Grace_isTrue(opresult7879)) {
                                          setLineNumber(1035);    // compilenode identifier
                                          var opresult7883 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                          // call case 6: other requests
                                          // call case 4: self request
                                          onSelf = true;
                                          var call7885 = callmethodChecked(this, "typeParams", []);
                                          var call7886 = callmethodChecked(call7885, "toGrace(1)", [1], opresult7883);
                                          var opresult7889 = callmethodChecked(var_s, "++(1)", [1], call7886);
                                          var_s = opresult7889;
                                          if7870 = GraceDone;
                                        }
                                        setLineNumber(1037);    // compilenode identifier
                                        var_firstPart = GraceFalse;
                                        var if7890 = GraceDone;
                                        setLineNumber(1038);    // compilenode member
                                        // call case 6: other requests
                                        // call case 6: other requests
                                        var call7894 = callmethodChecked(var_part, "params", []);
                                        var call7895 = callmethodChecked(call7894, "size", []);
                                        var opresult7897 = callmethodChecked(call7895, ">(1)", [1], new GraceNum(0));
                                        if (Grace_isTrue(opresult7897)) {
                                          setLineNumber(1039);    // compilenode string
                                          var string7898 = new GraceString("(");
                                          var opresult7901 = callmethodChecked(var_s, "++(1)", [1], string7898);
                                          var_s = opresult7901;
                                          setLineNumber(1040);    // compilenode member
                                          // call case 6: other requests
                                          // call case 6: other requests
                                          var call7905 = callmethodChecked(var_part, "params", []);
                                          var call7906 = callmethodChecked(call7905, "indices", []);
                                          var block7907 = new GraceBlock(this, 1040, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block7907.real = function(var_pnr) {
                                            setLineNumber(1041);    // compilenode identifier
                                            // call case 6: other requests
                                            // call case 6: other requests
                                            var call7910 = callmethodChecked(var_part, "params", []);
                                            var call7911 = callmethodChecked(call7910, "at(1)", [1], var_pnr);
                                            var var_p = call7911;
                                            setLineNumber(1042);    // compilenode identifier
                                            var opresult7915 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                            // call case 6: other requests
                                            var call7916 = callmethodChecked(var_p, "toGrace(1)", [1], opresult7915);
                                            var opresult7919 = callmethodChecked(var_s, "++(1)", [1], call7916);
                                            var_s = opresult7919;
                                            var if7920 = GraceDone;
                                            setLineNumber(1043);    // compilenode member
                                            // call case 6: other requests
                                            // call case 6: other requests
                                            var call7923 = callmethodChecked(var_part, "params", []);
                                            var call7924 = callmethodChecked(call7923, "size", []);
                                            var opresult7927 = callmethodChecked(var_pnr, "<(1)", [1], call7924);
                                            if (Grace_isTrue(opresult7927)) {
                                              setLineNumber(1044);    // compilenode string
                                              var string7928 = new GraceString(", ");
                                              var opresult7931 = callmethodChecked(var_s, "++(1)", [1], string7928);
                                              var_s = opresult7931;
                                              if7920 = GraceDone;
                                            }
                                            return if7920;
                                          };
                                          // call case 5: prelude request
                                          var call7932 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call7906, block7907);
                                          setLineNumber(1047);    // compilenode string
                                          var string7933 = new GraceString(")");
                                          var opresult7936 = callmethodChecked(var_s, "++(1)", [1], string7933);
                                          var_s = opresult7936;
                                          if7890 = GraceDone;
                                        }
                                        return if7890;
                                      };
                                      // call case 5: prelude request
                                      var call7937 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call7863, block7864);
                                      var if7938 = GraceDone;
                                      setLineNumber(1050);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7940 = callmethodChecked(this, "dtype", []);
                                      var opresult7943 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call7940);
                                      if (Grace_isTrue(opresult7943)) {
                                        setLineNumber(1051);    // compilenode string
                                        var string7944 = new GraceString("");
                                        // call case 6: other requests
                                        // call case 4: self request
                                        onSelf = true;
                                        var call7948 = callmethodChecked(this, "dtype", []);
                                        var call7949 = callmethodChecked(call7948, "toGrace(1)", [1], new GraceNum(0));
                                        var string7951 = new GraceString(" -> ");
                                        var opresult7953 = callmethodChecked(string7951, "++(1)", [1], call7949);
                                        var opresult7955 = callmethodChecked(opresult7953, "++(1)", [1], string7944);
                                        var opresult7958 = callmethodChecked(var_s, "++(1)", [1], opresult7955);
                                        var_s = opresult7958;
                                        if7938 = GraceDone;
                                      }
                                      var if7959 = GraceDone;
                                      setLineNumber(1053);    // compilenode member
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call7963 = callmethodChecked(this, "annotations", []);
                                      var call7964 = callmethodChecked(call7963, "size", []);
                                      var opresult7966 = callmethodChecked(call7964, ">(1)", [1], new GraceNum(0));
                                      if (Grace_isTrue(opresult7966)) {
                                        setLineNumber(1054);    // compilenode string
                                        var string7967 = new GraceString(" is ");
                                        var opresult7970 = callmethodChecked(var_s, "++(1)", [1], string7967);
                                        var_s = opresult7970;
                                        setLineNumber(1055);    // compilenode block
                                        var block7972 = new GraceBlock(this, 1055, 2);
                                        setLineNumber(1);    // compilenode identifier
                                        block7972.real = function(var_a, var_b) {
                                          setLineNumber(1056);    // compilenode num
                                          // call case 6: other requests
                                          var call7974 = callmethodChecked(var_b, "toGrace(1)", [1], new GraceNum(0));
                                          var if7976 = GraceDone;
                                          var string7977 = new GraceString("");
                                          var opresult7980 = callmethodChecked(var_a, "\u2260(1)", [1], string7977);
                                          if (Grace_isTrue(opresult7980)) {
                                            var string7981 = new GraceString(", ");
                                            var opresult7984 = callmethodChecked(var_a, "++(1)", [1], string7981);
                                            if7976 = opresult7984;
                                          } else {
                                            var string7985 = new GraceString("");
                                            if7976 = string7985;
                                          }
                                          var opresult7987 = callmethodChecked(if7976, "++(1)", [1], call7974);
                                          return opresult7987;
                                        };
                                        setLineNumber(1057);    // compilenode string
                                        var string7988 = new GraceString("");
                                        // call case 6: other requests
                                        setLineNumber(1055);    // compilenode member
                                        // call case 4: self request
                                        onSelf = true;
                                        var call7990 = callmethodChecked(this, "annotations", []);
                                        var call7991 = callmethodChecked(call7990, "fold(1)startingWith(1)", [1, 1], block7972, string7988);
                                        var opresult7994 = callmethodChecked(var_s, "++(1)", [1], call7991);
                                        var_s = opresult7994;
                                        if7959 = GraceDone;
                                      }
                                      setLineNumber(1059);    // compilenode string
                                      var string7995 = new GraceString(" {");
                                      var opresult7998 = callmethodChecked(var_s, "++(1)", [1], string7995);
                                      var_s = opresult7998;
                                      var if7999 = GraceDone;
                                      setLineNumber(1060);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call8001 = callmethodChecked(this, "comments", []);
                                      var opresult8004 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call8001);
                                      if (Grace_isTrue(opresult8004)) {
                                        setLineNumber(1061);    // compilenode identifier
                                        var opresult8008 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                        // call case 6: other requests
                                        // call case 4: self request
                                        onSelf = true;
                                        var call8010 = callmethodChecked(this, "comments", []);
                                        var call8011 = callmethodChecked(call8010, "toGrace(1)", [1], opresult8008);
                                        var opresult8014 = callmethodChecked(var_s, "++(1)", [1], call8011);
                                        var_s = opresult8014;
                                        if7999 = GraceDone;
                                      }
                                      setLineNumber(1063);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call8017 = callmethodChecked(this, "body", []);
                                      var block8018 = new GraceBlock(this, 1063, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block8018.real = function(var_mx) {
                                        setLineNumber(1064);    // compilenode identifier
                                        var opresult8022 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                        // call case 6: other requests
                                        var call8023 = callmethodChecked(var_mx, "toGrace(1)", [1], opresult8022);
                                        var string8025 = new GraceString("    ");
                                        var string8028 = new GraceString("\n");
                                        var opresult8031 = callmethodChecked(var_s, "++(1)", [1], string8028);
                                        var opresult8033 = callmethodChecked(opresult8031, "++(1)", [1], var_spc);
                                        var opresult8035 = callmethodChecked(opresult8033, "++(1)", [1], string8025);
                                        var opresult8037 = callmethodChecked(opresult8035, "++(1)", [1], call8023);
                                        var_s = opresult8037;
                                        return GraceDone;
                                      };
                                      // call case 5: prelude request
                                      var call8038 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call8017, block8018);
                                      setLineNumber(1066);    // compilenode string
                                      var string8039 = new GraceString("}");
                                      var string8042 = new GraceString("\n");
                                      var opresult8045 = callmethodChecked(var_s, "++(1)", [1], string8042);
                                      var opresult8047 = callmethodChecked(opresult8045, "++(1)", [1], var_spc);
                                      var opresult8049 = callmethodChecked(opresult8047, "++(1)", [1], string8039);
                                      var_s = opresult8049;
                                      setLineNumber(1067);    // return value
                                      if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], var_s)))
                                          throw new GraceExceptionPacket(TypeErrorObject,
                                              new GraceString("result of method toGrace(_) does not have " + 
                                                  callmethod(var_String, "asString", [0])._value + "."));
                                      return var_s;
                                    };
                                    func7845.paramTypes = [];
                                    func7845.paramTypes.push([type_Number, "depth"]);
                                    func7845.paramCounts = [1];
                                    obj7123.methods["toGrace(1)"] = func7845;
                                    func7845.definitionLine = 1025;
                                    func7845.definitionModule = "ast";
                                    var func8050 = function(argcv) {    // method shallowCopy
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      setModuleName("ast");
                                      setLineNumber(1070);    // compilenode identifier
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call8054 = callmethodChecked(this, "signature", []);
                                      // call case 4: self request
                                      onSelf = true;
                                      var call8056 = callmethodChecked(this, "body", []);
                                      // call case 4: self request
                                      onSelf = true;
                                      var call8058 = callmethodChecked(this, "dtype", []);
                                      // call case 6: other requests
                                      var call8059 = callmethodChecked(var_methodNode, "new(3)", [3], call8054, call8056, call8058);
                                      var call8060 = callmethodChecked(call8059, "shallowCopyFieldsFrom(1)", [1], this);
                                      return call8060;
                                    };
                                    func8050.paramCounts = [0];
                                    obj7123.methods["shallowCopy"] = func8050;
                                    func8050.definitionLine = 1069;
                                    func8050.definitionModule = "ast";
                                    var func8061 = function(argcv) {    // method shallowCopyFieldsFrom(_)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_other = arguments[curarg];
                                      curarg++;
                                      setModuleName("ast");
                                      setLineNumber(1073);    // compilenode identifier
                                      // call case 1: super request
                                      var call8063 = callmethodsuper(this, "shallowCopyFieldsFrom(1)", [1], var_other);
                                      setLineNumber(1074);    // compilenode member
                                      // call case 6: other requests
                                      var call8066 = callmethodChecked(var_other, "isFresh", []);
                                      // call case 4: self request
                                      onSelf = true;
                                      var call8067 = callmethodChecked(this, "isFresh:=(1)", [1], call8066);
                                      setLineNumber(1075);    // compilenode member
                                      // call case 6: other requests
                                      var call8070 = callmethodChecked(var_other, "selfclosure", []);
                                      // call case 4: self request
                                      onSelf = true;
                                      var call8071 = callmethodChecked(this, "selfclosure:=(1)", [1], call8070);
                                      var if8072 = GraceDone;
                                      setLineNumber(1076);    // compilenode member
                                      // call case 6: other requests
                                      // call case 6: other requests
                                      var call8075 = callmethodChecked(var_other, "isBindingOccurence", []);
                                      var call8076 = callmethodChecked(call8075, "not", []);
                                      if (Grace_isTrue(call8076)) {
                                        setLineNumber(1077);    // compilenode member
                                        // call case 4: self request
                                        onSelf = true;
                                        var call8078 = callmethodChecked(this, "appliedOccurence", []);
                                        if8072 = call8078;
                                      }
                                      setLineNumber(1079);    // compilenode identifier
                                      return this;
                                    };
                                    func8061.paramCounts = [1];
                                    obj7123.methods["shallowCopyFieldsFrom(1)"] = func8061;
                                    func8061.definitionLine = 1072;
                                    func8061.definitionModule = "ast";
                                    setLineNumber(844);    // compilenode identifier
                                    // call case 6: other requests
                                    // call case 6: other requests
                                    // call case 3: self.outer request
                                    var call8082 = callmethodChecked(superDepth, "outer", [0]);
                                    var call8083 = callmethodChecked(call8082, "outer", []);
                                    var call8084 = callmethodChecked(call8083, "baseNode$object(1)", [0, 1], this);
                                    obj7123.superobj = call8084;
                                    if (call8084.data) obj7123.data = call8084.data;
                                    if (call8084.hasOwnProperty('_value'))
                                        obj7123._value = call8084._value;
                                    setLineNumber(845);    // compilenode string
                                    var string8085 = new GraceString("method");
                                    obj7123.data["kind"] = string8085;
                                    var reader_ast_kind8086 = function() {
                                      return this.data["kind"];
                                    };
                                    reader_ast_kind8086.def = true;
                                    obj7123.methods["kind"] = reader_ast_kind8086;
                                    setLineNumber(846);    // compilenode identifier
                                    obj7123.data["signature"] = var_signature__39__;
                                    var reader_ast_signature8087 = function() {
                                      return this.data["signature"];
                                    };
                                    obj7123.methods["signature"] = reader_ast_signature8087;
                                    obj7123.data["signature"] = var_signature__39__;
                                    var writer_ast_signature8087 = function(argcv, o) {
                                      this.data["signature"] = o;
                                      return GraceDone;
                                    };
                                    obj7123.methods["signature:=(1)"] = writer_ast_signature8087;
                                    obj7123.mutable = true;
                                    setLineNumber(847);    // compilenode identifier
                                    obj7123.data["body"] = var_body__39__;
                                    var reader_ast_body8088 = function() {
                                      return this.data["body"];
                                    };
                                    obj7123.methods["body"] = reader_ast_body8088;
                                    obj7123.data["body"] = var_body__39__;
                                    var writer_ast_body8088 = function(argcv, o) {
                                      this.data["body"] = o;
                                      return GraceDone;
                                    };
                                    obj7123.methods["body:=(1)"] = writer_ast_body8088;
                                    obj7123.mutable = true;
                                    setLineNumber(848);    // compilenode identifier
                                    obj7123.data["dtype"] = var_dtype__39__;
                                    var reader_ast_dtype8089 = function() {
                                      return this.data["dtype"];
                                    };
                                    obj7123.methods["dtype"] = reader_ast_dtype8089;
                                    obj7123.data["dtype"] = var_dtype__39__;
                                    var writer_ast_dtype8089 = function(argcv, o) {
                                      this.data["dtype"] = o;
                                      return GraceDone;
                                    };
                                    obj7123.methods["dtype:=(1)"] = writer_ast_dtype8089;
                                    obj7123.mutable = true;
                                    setLineNumber(849);    // compilenode identifier
                                    obj7123.data["typeParams"] = GraceFalse;
                                    var reader_ast_typeParams8090 = function() {
                                      return this.data["typeParams"];
                                    };
                                    obj7123.methods["typeParams"] = reader_ast_typeParams8090;
                                    obj7123.data["typeParams"] = GraceFalse;
                                    var writer_ast_typeParams8090 = function(argcv, o) {
                                      this.data["typeParams"] = o;
                                      return GraceDone;
                                    };
                                    obj7123.methods["typeParams:=(1)"] = writer_ast_typeParams8090;
                                    obj7123.mutable = true;
                                    setLineNumber(850);    // compilenode identifier
                                    obj7123.data["selfclosure"] = GraceFalse;
                                    var reader_ast_selfclosure8091 = function() {
                                      return this.data["selfclosure"];
                                    };
                                    obj7123.methods["selfclosure"] = reader_ast_selfclosure8091;
                                    obj7123.data["selfclosure"] = GraceFalse;
                                    var writer_ast_selfclosure8091 = function(argcv, o) {
                                      this.data["selfclosure"] = o;
                                      return GraceDone;
                                    };
                                    obj7123.methods["selfclosure:=(1)"] = writer_ast_selfclosure8091;
                                    obj7123.mutable = true;
                                    setLineNumber(851);    // compilenode array
                                    var array8092 = new PrimitiveGraceList([]);
                                    obj7123.data["annotations"] = array8092;
                                    var reader_ast_annotations8093 = function() {
                                      return this.data["annotations"];
                                    };
                                    obj7123.methods["annotations"] = reader_ast_annotations8093;
                                    obj7123.data["annotations"] = array8092;
                                    var writer_ast_annotations8093 = function(argcv, o) {
                                      this.data["annotations"] = o;
                                      return GraceDone;
                                    };
                                    obj7123.methods["annotations:=(1)"] = writer_ast_annotations8093;
                                    obj7123.mutable = true;
                                    setLineNumber(852);    // compilenode identifier
                                    obj7123.data["isFresh"] = GraceFalse;
                                    var reader_ast_isFresh8094 = function() {
                                      return this.data["isFresh"];
                                    };
                                    obj7123.methods["isFresh"] = reader_ast_isFresh8094;
                                    obj7123.data["isFresh"] = GraceFalse;
                                    var writer_ast_isFresh8094 = function(argcv, o) {
                                      this.data["isFresh"] = o;
                                      return GraceDone;
                                    };
                                    obj7123.methods["isFresh:=(1)"] = writer_ast_isFresh8094;
                                    obj7123.mutable = true;
                                    setLineNumber(853);    // compilenode identifier
                                    obj7123.data["usesClassSyntax"] = GraceFalse;
                                    var reader_ast_usesClassSyntax8095 = function() {
                                      return this.data["usesClassSyntax"];
                                    };
                                    obj7123.methods["usesClassSyntax"] = reader_ast_usesClassSyntax8095;
                                    obj7123.data["usesClassSyntax"] = GraceFalse;
                                    var writer_ast_usesClassSyntax8095 = function(argcv, o) {
                                      this.data["usesClassSyntax"] = o;
                                      return GraceDone;
                                    };
                                    obj7123.methods["usesClassSyntax:=(1)"] = writer_ast_usesClassSyntax8095;
                                    obj7123.mutable = true;
                                    setLineNumber(854);    // compilenode identifier
                                    obj7123.data["cachedIdentifier"] = var_uninitialized;
                                    var reader_ast_cachedIdentifier8096 = function() {
                                      return this.data["cachedIdentifier"];
                                    };
                                    obj7123.methods["cachedIdentifier"] = reader_ast_cachedIdentifier8096;
                                    obj7123.data["cachedIdentifier"] = var_uninitialized;
                                    var writer_ast_cachedIdentifier8096 = function(argcv, o) {
                                      this.data["cachedIdentifier"] = o;
                                      return GraceDone;
                                    };
                                    obj7123.methods["cachedIdentifier:=(1)"] = writer_ast_cachedIdentifier8096;
                                    reader_ast_cachedIdentifier8096.confidential = true;
                                    writer_ast_cachedIdentifier8096.confidential = true;
                                    obj7123.mutable = true;
                                    setLineNumber(855);    // compilenode identifier
                                    obj7123.data["isBindingOccurence"] = GraceTrue;
                                    var reader_ast_isBindingOccurence8097 = function() {
                                      return this.data["isBindingOccurence"];
                                    };
                                    obj7123.methods["isBindingOccurence"] = reader_ast_isBindingOccurence8097;
                                    obj7123.data["isBindingOccurence"] = GraceTrue;
                                    var writer_ast_isBindingOccurence8097 = function(argcv, o) {
                                      this.data["isBindingOccurence"] = o;
                                      return GraceDone;
                                    };
                                    obj7123.methods["isBindingOccurence:=(1)"] = writer_ast_isBindingOccurence8097;
                                    writer_ast_isBindingOccurence8097.confidential = true;
                                    obj7123.mutable = true;
                                    superDepth = origSuperDepth;
                                  };
                                  obj_init_7123.apply(inheritingObject, []);
                                  return obj7123;
                                  };
                                  obj6139.methods["new(3)$object(1)"] = func7122;
                                superDepth = origSuperDepth;
                              };
                              obj_init_6139.apply(obj6139, []);
                              var var_methodNode = obj6139;
                              setLineNumber(1);    // compilenode method
                              var func8098 = function(argcv) {    // method methodNode
                                var returnTarget = invocationCount;
                                invocationCount++;
                                var curarg = 1;
                                setModuleName("ast");
                                // methodNode is a simple accessor - elide try ... catch
                                setLineNumber(830);    // compilenode identifier
                                return var_methodNode;
                              };
                              func8098.paramCounts = [0];
                              this.methods["methodNode"] = func8098;
                              func8098.definitionLine = 1;
                              func8098.definitionModule = "ast";
                              this.methods["methodNode"].debug = "def";
                              setLineNumber(1083);    // compilenode object
                              var obj8099 = Grace_allocObject(GraceObject, "callNode");
                              obj8099.definitionModule = "ast";
                              obj8099.definitionLine = 1083;
                              obj8099.outer = this;
                              var reader_ast_outer8100 = function() {
                                return this.outer;
                              };
                              obj8099.methods["outer"] = reader_ast_outer8100;
                              var obj_init_8099 = function() {
                                var origSuperDepth = superDepth;
                                superDepth = obj8099;
                                var func8101 = function(argcv) {    // method new(_,_)scope(_)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_receiver = arguments[curarg];
                                  curarg++;
                                  var var_parts = arguments[curarg];
                                  curarg++;
                                  var var_s = arguments[curarg];
                                  curarg++;
                                  setModuleName("ast");
                                  setLineNumber(1085);    // compilenode identifier
                                  // call case 4: self request
                                  onSelf = true;
                                  var call8103 = callmethodChecked(this, "new(2)", [2], var_receiver, var_parts);
                                  var var_result = call8103;
                                  setLineNumber(1086);    // compilenode identifier
                                  // call case 6: other requests
                                  var call8105 = callmethodChecked(var_result, "scope:=(1)", [1], var_s);
                                  setLineNumber(1087);    // compilenode identifier
                                  return var_result;
                                };
                                func8101.paramCounts = [2, 1];
                                obj8099.methods["new(2)scope(1)"] = func8101;
                                func8101.definitionLine = 1084;
                                func8101.definitionModule = "ast";
                                var func8106 = function(argcv) {    // method new(_,_)
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  var var_receiver__39__ = arguments[curarg];
                                  curarg++;
                                  var var_parts = arguments[curarg];
                                  curarg++;
                                  setModuleName("ast");
                                  setLineNumber(1089);    // compilenode object
                                  var obj8107 = Grace_allocObject(null, "callNode.new(_,_)");
                                  obj8107.definitionModule = "ast";
                                  obj8107.definitionLine = 1089;
                                  obj8107.outer = this;
                                  var reader_ast_outer8108 = function() {
                                    return this.outer;
                                  };
                                  obj8107.methods["outer"] = reader_ast_outer8108;
                                  var obj_init_8107 = function() {
                                    var origSuperDepth = superDepth;
                                    superDepth = obj8107;
                                    var func8109 = function(argcv) {    // method onSelf
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      setModuleName("ast");
                                      setLineNumber(1104);    // compilenode identifier
                                      // call case 4: self request
                                      onSelf = true;
                                      var call8111 = callmethodChecked(this, "isSelfRequest:=(1)", [1], GraceTrue);
                                      setLineNumber(1105);    // compilenode identifier
                                      return this;
                                    };
                                    func8109.paramCounts = [0];
                                    obj8107.methods["onSelf"] = func8109;
                                    func8109.definitionLine = 1102;
                                    func8109.definitionModule = "ast";
                                    var func8112 = function(argcv) {    // method nameString
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      setModuleName("ast");
                                      setLineNumber(1110);    // compilenode block
                                      var block8114 = new GraceBlock(this, 1110, 2);
                                      setLineNumber(1);    // compilenode identifier
                                      block8114.real = function(var_acc, var_each) {
                                        setLineNumber(1110);    // compilenode member
                                        // call case 6: other requests
                                        var call8116 = callmethodChecked(var_each, "nameString", []);
                                        var opresult8119 = callmethodChecked(var_acc, "++(1)", [1], call8116);
                                        return opresult8119;
                                      };
                                      var string8120 = new GraceString("");
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call8122 = callmethodChecked(this, "with", []);
                                      var call8123 = callmethodChecked(call8122, "fold(1)startingWith(1)", [1, 1], block8114, string8120);
                                      return call8123;
                                    };
                                    func8112.paramCounts = [0];
                                    obj8107.methods["nameString"] = func8112;
                                    func8112.definitionLine = 1108;
                                    func8112.definitionModule = "ast";
                                    var func8124 = function(argcv) {    // method canonicalName
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      setModuleName("ast");
                                      setLineNumber(1115);    // compilenode block
                                      var block8126 = new GraceBlock(this, 1115, 2);
                                      setLineNumber(1);    // compilenode identifier
                                      block8126.real = function(var_acc, var_each) {
                                        setLineNumber(1115);    // compilenode member
                                        // call case 6: other requests
                                        var call8128 = callmethodChecked(var_each, "canonicalName", []);
                                        var opresult8131 = callmethodChecked(var_acc, "++(1)", [1], call8128);
                                        return opresult8131;
                                      };
                                      setLineNumber(1116);    // compilenode string
                                      var string8132 = new GraceString("");
                                      // call case 6: other requests
                                      setLineNumber(1115);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call8134 = callmethodChecked(this, "with", []);
                                      var call8135 = callmethodChecked(call8134, "fold(1)startingWith(1)", [1, 1], block8126, string8132);
                                      return call8135;
                                    };
                                    func8124.paramCounts = [0];
                                    obj8107.methods["canonicalName"] = func8124;
                                    func8124.definitionLine = 1113;
                                    func8124.definitionModule = "ast";
                                    var func8136 = function(argcv) {    // method isCall
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      setModuleName("ast");
                                      // isCall is a simple accessor - elide try ... catch
                                      setLineNumber(1119);    // compilenode identifier
                                      return GraceTrue;
                                    };
                                    func8136.paramCounts = [0];
                                    obj8107.methods["isCall"] = func8136;
                                    func8136.definitionLine = 1119;
                                    func8136.definitionModule = "ast";
                                    var func8137 = function(argcv) {    // method returnsObject
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      setModuleName("ast");
                                      var if8138 = GraceDone;
                                      setLineNumber(1124);    // compilenode string
                                      var string8139 = new GraceString("clone(1)");
                                      // call case 4: self request
                                      onSelf = true;
                                      var call8142 = callmethodChecked(this, "nameString", []);
                                      var opresult8144 = callmethodChecked(call8142, "==(1)", [1], string8139);
                                      setLineNumber(1123);    // compilenode member
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call8148 = callmethodChecked(this, "receiver", []);
                                      var call8149 = callmethodChecked(call8148, "isPrelude", []);
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call8153 = callmethodChecked(this, "receiver", []);
                                      var call8154 = callmethodChecked(call8153, "isImplicit", []);
                                      var opresult8156 = callmethodChecked(call8154, "||(1)", [1], call8149);
                                      var opresult8158 = callmethodChecked(opresult8156, "&&(1)", [1], opresult8144);
                                      if (Grace_isTrue(opresult8158)) {
                                        setLineNumber(1124);    // compilenode identifier
                                        return GraceTrue;
                                      }
                                      var if8159 = GraceDone;
                                      setLineNumber(1126);    // compilenode string
                                      var string8160 = new GraceString("copy");
                                      // call case 4: self request
                                      onSelf = true;
                                      var call8163 = callmethodChecked(this, "nameString", []);
                                      var opresult8165 = callmethodChecked(call8163, "==(1)", [1], string8160);
                                      setLineNumber(1125);    // compilenode member
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call8169 = callmethodChecked(this, "receiver", []);
                                      var call8170 = callmethodChecked(call8169, "isSelf", []);
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call8174 = callmethodChecked(this, "receiver", []);
                                      var call8175 = callmethodChecked(call8174, "isImplicit", []);
                                      var opresult8177 = callmethodChecked(call8175, "||(1)", [1], call8170);
                                      var opresult8179 = callmethodChecked(opresult8177, "&&(1)", [1], opresult8165);
                                      if (Grace_isTrue(opresult8179)) {
                                        setLineNumber(1126);    // compilenode identifier
                                        return GraceTrue;
                                      }
                                      setLineNumber(1127);    // compilenode identifier
                                      return GraceFalse;
                                    };
                                    func8137.paramCounts = [0];
                                    obj8107.methods["returnsObject"] = func8137;
                                    func8137.definitionLine = 1120;
                                    func8137.definitionModule = "ast";
                                    var func8180 = function(argcv) {    // method returnedObjectScope
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      setModuleName("ast");
                                      setLineNumber(1131);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call8182 = callmethodChecked(this, "scope", []);
                                      return call8182;
                                    };
                                    func8180.paramCounts = [0];
                                    obj8107.methods["returnedObjectScope"] = func8180;
                                    func8180.definitionLine = 1129;
                                    func8180.definitionModule = "ast";
                                    var func8183 = function(argcv) {    // method arguments
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      setModuleName("ast");
                                      setLineNumber(1134);    // compilenode array
                                      var array8184 = new PrimitiveGraceList([]);
                                      var var_result = array8184;
                                      setLineNumber(1135);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call8187 = callmethodChecked(this, "with", []);
                                      var block8188 = new GraceBlock(this, 1135, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block8188.real = function(var_part) {
                                        setLineNumber(1136);    // compilenode member
                                        // call case 6: other requests
                                        var call8191 = callmethodChecked(var_part, "args", []);
                                        var block8192 = new GraceBlock(this, 1136, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block8192.real = function(var_arg) {
                                          setLineNumber(1136);    // compilenode identifier
                                          // call case 6: other requests
                                          var call8194 = callmethodChecked(var_result, "push(1)", [1], var_arg);
                                          return call8194;
                                        };
                                        // call case 5: prelude request
                                        var call8195 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call8191, block8192);
                                        return call8195;
                                      };
                                      // call case 5: prelude request
                                      var call8196 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call8187, block8188);
                                      setLineNumber(1138);    // compilenode identifier
                                      return var_result;
                                    };
                                    func8183.paramCounts = [0];
                                    obj8107.methods["arguments"] = func8183;
                                    func8183.definitionLine = 1133;
                                    func8183.definitionModule = "ast";
                                    var func8197 = function(argcv) {    // method argumentsDo(_)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_action = arguments[curarg];
                                      curarg++;
                                      setModuleName("ast");
                                      setLineNumber(1142);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call8200 = callmethodChecked(this, "with", []);
                                      var block8201 = new GraceBlock(this, 1142, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block8201.real = function(var_part) {
                                        setLineNumber(1143);    // compilenode member
                                        // call case 6: other requests
                                        var call8204 = callmethodChecked(var_part, "args", []);
                                        var block8205 = new GraceBlock(this, 1143, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block8205.real = function(var_arg) {
                                          setLineNumber(1143);    // compilenode identifier
                                          // call case 6: other requests
                                          var call8207 = callmethodChecked(var_action, "apply(1)", [1], var_arg);
                                          return call8207;
                                        };
                                        // call case 5: prelude request
                                        var call8208 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call8204, block8205);
                                        return call8208;
                                      };
                                      // call case 5: prelude request
                                      var call8209 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call8200, block8201);
                                      return call8209;
                                    };
                                    func8197.paramCounts = [1];
                                    obj8107.methods["argumentsDo(1)"] = func8197;
                                    func8197.definitionLine = 1141;
                                    func8197.definitionModule = "ast";
                                    var func8210 = function(argcv) {    // method accept(_)from(_)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_visitor = arguments[curarg];
                                      curarg++;
                                      var var_as = arguments[curarg];
                                      curarg++;
                                      // Start argument checking
                                      curarg = 1;
                                      setLineNumber(1147);    // compilenode identifier
                                      if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                          throw new GraceExceptionPacket(TypeErrorObject,
                                              new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                  callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                      curarg++;
                                      curarg++;
                                      // End argument checking
                                      setModuleName("ast");
                                      var if8211 = GraceDone;
                                      setLineNumber(1148);    // compilenode identifier
                                      // call case 6: other requests
                                      var call8213 = callmethodChecked(var_visitor, "visitCall(1)up(1)", [1, 1], this, var_as);
                                      if (Grace_isTrue(call8213)) {
                                        setLineNumber(1149);    // compilenode identifier
                                        // call case 6: other requests
                                        var call8215 = callmethodChecked(var_as, "extend(1)", [1], this);
                                        var var_newChain = call8215;
                                        setLineNumber(1150);    // compilenode identifier
                                        // call case 6: other requests
                                        // call case 4: self request
                                        onSelf = true;
                                        var call8218 = callmethodChecked(this, "receiver", []);
                                        var call8219 = callmethodChecked(call8218, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                        setLineNumber(1151);    // compilenode member
                                        // call case 4: self request
                                        onSelf = true;
                                        var call8222 = callmethodChecked(this, "with", []);
                                        var block8223 = new GraceBlock(this, 1151, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block8223.real = function(var_part) {
                                          setLineNumber(1152);    // compilenode member
                                          // call case 6: other requests
                                          var call8226 = callmethodChecked(var_part, "args", []);
                                          var block8227 = new GraceBlock(this, 1152, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block8227.real = function(var_arg) {
                                            setLineNumber(1153);    // compilenode identifier
                                            // call case 6: other requests
                                            var call8229 = callmethodChecked(var_arg, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                            return call8229;
                                          };
                                          // call case 5: prelude request
                                          var call8230 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call8226, block8227);
                                          return call8230;
                                        };
                                        // call case 5: prelude request
                                        var call8231 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call8222, block8223);
                                        var if8232 = GraceDone;
                                        setLineNumber(1156);    // compilenode member
                                        // call case 4: self request
                                        onSelf = true;
                                        var call8234 = callmethodChecked(this, "generics", []);
                                        var opresult8237 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call8234);
                                        if (Grace_isTrue(opresult8237)) {
                                          setLineNumber(1157);    // compilenode block
                                          var block8239 = new GraceBlock(this, 1157, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block8239.real = function(var_each) {
                                            setLineNumber(1158);    // compilenode identifier
                                            // call case 6: other requests
                                            var call8241 = callmethodChecked(var_each, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                            return call8241;
                                          };
                                          // call case 6: other requests
                                          setLineNumber(1157);    // compilenode member
                                          // call case 4: self request
                                          onSelf = true;
                                          var call8243 = callmethodChecked(this, "generics", []);
                                          var call8244 = callmethodChecked(call8243, "do(1)", [1], block8239);
                                          if8232 = call8244;
                                        }
                                        if8211 = if8232;
                                      }
                                      return if8211;
                                    };
                                    func8210.paramTypes = [];
                                    func8210.paramTypes.push([]);
                                    func8210.paramTypes.push([]);
                                    func8210.paramCounts = [1, 1];
                                    obj8107.methods["accept(1)from(1)"] = func8210;
                                    func8210.definitionLine = 1147;
                                    func8210.definitionModule = "ast";
                                    var func8245 = function(argcv) {    // method map(_)ancestors(_)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_blk = arguments[curarg];
                                      curarg++;
                                      var var_as = arguments[curarg];
                                      curarg++;
                                      setModuleName("ast");
                                      setLineNumber(1164);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call8247 = callmethodChecked(this, "shallowCopy", []);
                                      var var_n = call8247;
                                      setLineNumber(1165);    // compilenode identifier
                                      // call case 6: other requests
                                      var call8249 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                      var var_newChain = call8249;
                                      setLineNumber(1166);    // compilenode identifier
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call8253 = callmethodChecked(this, "receiver", []);
                                      var call8254 = callmethodChecked(call8253, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
                                      // call case 6: other requests
                                      var call8255 = callmethodChecked(var_n, "receiver:=(1)", [1], call8254);
                                      setLineNumber(1167);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call8259 = callmethodChecked(this, "with", []);
                                      // call case 6: other requests
                                      // call case 6: other requests
                                      // call case 3: self.outer request
                                      var call8262 = callmethodChecked(superDepth, "outer", [0]);
                                      var call8263 = callmethodChecked(call8262, "outer", []);
                                      onSelf = true;
                                      var call8264 = callmethodChecked(call8263, "listMap(2)ancestors(1)", [2, 1], call8259, var_blk, var_newChain);
                                      // call case 6: other requests
                                      var call8265 = callmethodChecked(var_n, "with:=(1)", [1], call8264);
                                      setLineNumber(1168);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call8269 = callmethodChecked(this, "generics", []);
                                      // call case 6: other requests
                                      // call case 6: other requests
                                      // call case 3: self.outer request
                                      var call8272 = callmethodChecked(superDepth, "outer", [0]);
                                      var call8273 = callmethodChecked(call8272, "outer", []);
                                      onSelf = true;
                                      var call8274 = callmethodChecked(call8273, "maybeListMap(2)ancestors(1)", [2, 1], call8269, var_blk, var_newChain);
                                      // call case 6: other requests
                                      var call8275 = callmethodChecked(var_n, "generics:=(1)", [1], call8274);
                                      setLineNumber(1169);    // compilenode identifier
                                      // call case 6: other requests
                                      var call8277 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                      return call8277;
                                    };
                                    func8245.paramCounts = [1, 1];
                                    obj8107.methods["map(1)ancestors(1)"] = func8245;
                                    func8245.definitionLine = 1163;
                                    func8245.definitionModule = "ast";
                                    var func8278 = function(argcv) {    // method pretty(_)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_depth = arguments[curarg];
                                      curarg++;
                                      setModuleName("ast");
                                      setLineNumber(1172);    // compilenode string
                                      var string8279 = new GraceString("");
                                      var var_spc = string8279;
                                      setLineNumber(1173);    // compilenode num
                                      var opresult8283 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                                      var block8284 = new GraceBlock(this, 1173, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block8284.real = function(var_i) {
                                        setLineNumber(1174);    // compilenode string
                                        var string8285 = new GraceString("  ");
                                        var opresult8288 = callmethodChecked(var_spc, "++(1)", [1], string8285);
                                        var_spc = opresult8288;
                                        return GraceDone;
                                      };
                                      // call case 5: prelude request
                                      var call8289 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult8283, block8284);
                                      setLineNumber(1176);    // compilenode identifier
                                      // call case 1: super request
                                      var call8291 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                      var var_s = call8291;
                                      var if8292 = GraceDone;
                                      setLineNumber(1177);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call8294 = callmethodChecked(this, "isSelfRequest", []);
                                      if (Grace_isTrue(call8294)) {
                                        var string8295 = new GraceString(" on self\n");
                                        if8292 = string8295;
                                      } else {
                                        var string8296 = new GraceString("\n");
                                        if8292 = string8296;
                                      }
                                      var opresult8299 = callmethodChecked(var_s, "++(1)", [1], if8292);
                                      var_s = opresult8299;
                                      setLineNumber(1178);    // compilenode string
                                      var string8300 = new GraceString("\n");
                                      var opresult8305 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call8307 = callmethodChecked(this, "receiver", []);
                                      var call8308 = callmethodChecked(call8307, "pretty(1)", [1], opresult8305);
                                      var string8310 = new GraceString("Receiver: ");
                                      var opresult8312 = callmethodChecked(string8310, "++(1)", [1], call8308);
                                      var opresult8314 = callmethodChecked(opresult8312, "++(1)", [1], string8300);
                                      var opresult8318 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                      var opresult8320 = callmethodChecked(opresult8318, "++(1)", [1], opresult8314);
                                      var_s = opresult8320;
                                      setLineNumber(1179);    // compilenode string
                                      var string8321 = new GraceString("\n");
                                      // call case 4: self request
                                      onSelf = true;
                                      var call8324 = callmethodChecked(this, "nameString", []);
                                      var string8326 = new GraceString("Method Name: ");
                                      var opresult8328 = callmethodChecked(string8326, "++(1)", [1], call8324);
                                      var opresult8330 = callmethodChecked(opresult8328, "++(1)", [1], string8321);
                                      var opresult8334 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                      var opresult8336 = callmethodChecked(opresult8334, "++(1)", [1], opresult8330);
                                      var_s = opresult8336;
                                      var if8337 = GraceDone;
                                      setLineNumber(1180);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call8339 = callmethodChecked(this, "generics", []);
                                      var opresult8342 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call8339);
                                      if (Grace_isTrue(opresult8342)) {
                                        setLineNumber(1181);    // compilenode string
                                        var string8343 = new GraceString("  Generics:\n");
                                        var opresult8347 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                        var opresult8349 = callmethodChecked(opresult8347, "++(1)", [1], string8343);
                                        var_s = opresult8349;
                                        setLineNumber(1182);    // compilenode member
                                        // call case 4: self request
                                        onSelf = true;
                                        var call8352 = callmethodChecked(this, "generics", []);
                                        var block8353 = new GraceBlock(this, 1182, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block8353.real = function(var_g) {
                                          setLineNumber(1183);    // compilenode string
                                          var string8354 = new GraceString("\n");
                                          var opresult8359 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                          // call case 6: other requests
                                          var call8360 = callmethodChecked(var_g, "pretty(1)", [1], opresult8359);
                                          var string8362 = new GraceString("    ");
                                          var opresult8366 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                          var opresult8368 = callmethodChecked(opresult8366, "++(1)", [1], string8362);
                                          var opresult8370 = callmethodChecked(opresult8368, "++(1)", [1], call8360);
                                          var opresult8372 = callmethodChecked(opresult8370, "++(1)", [1], string8354);
                                          var_s = opresult8372;
                                          return GraceDone;
                                        };
                                        // call case 5: prelude request
                                        var call8373 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call8352, block8353);
                                        if8337 = call8373;
                                      }
                                      setLineNumber(1186);    // compilenode string
                                      var string8374 = new GraceString("Arguments:");
                                      var opresult8378 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                      var opresult8380 = callmethodChecked(opresult8378, "++(1)", [1], string8374);
                                      var_s = opresult8380;
                                      setLineNumber(1187);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call8383 = callmethodChecked(this, "with", []);
                                      var block8384 = new GraceBlock(this, 1187, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block8384.real = function(var_part) {
                                        setLineNumber(1188);    // compilenode member
                                        // call case 6: other requests
                                        var call8386 = callmethodChecked(var_part, "name", []);
                                        var string8388 = new GraceString("Part: ");
                                        var string8391 = new GraceString("\n  ");
                                        var opresult8394 = callmethodChecked(var_s, "++(1)", [1], string8391);
                                        var opresult8396 = callmethodChecked(opresult8394, "++(1)", [1], var_spc);
                                        var opresult8398 = callmethodChecked(opresult8396, "++(1)", [1], string8388);
                                        var opresult8400 = callmethodChecked(opresult8398, "++(1)", [1], call8386);
                                        var_s = opresult8400;
                                        setLineNumber(1189);    // compilenode member
                                        // call case 6: other requests
                                        var call8403 = callmethodChecked(var_part, "args", []);
                                        var block8404 = new GraceBlock(this, 1189, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block8404.real = function(var_arg) {
                                          setLineNumber(1190);    // compilenode identifier
                                          var opresult8408 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                          // call case 6: other requests
                                          var call8409 = callmethodChecked(var_arg, "pretty(1)", [1], opresult8408);
                                          var string8412 = new GraceString("\n      ");
                                          var opresult8415 = callmethodChecked(var_s, "++(1)", [1], string8412);
                                          var opresult8417 = callmethodChecked(opresult8415, "++(1)", [1], var_spc);
                                          var opresult8419 = callmethodChecked(opresult8417, "++(1)", [1], call8409);
                                          var_s = opresult8419;
                                          return GraceDone;
                                        };
                                        // call case 5: prelude request
                                        var call8420 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call8403, block8404);
                                        return call8420;
                                      };
                                      // call case 5: prelude request
                                      var call8421 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call8383, block8384);
                                      setLineNumber(1193);    // compilenode identifier
                                      return var_s;
                                    };
                                    func8278.paramCounts = [1];
                                    obj8107.methods["pretty(1)"] = func8278;
                                    func8278.definitionLine = 1171;
                                    func8278.definitionModule = "ast";
                                    var func8422 = function(argcv) {    // method toGrace(_)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_depth = arguments[curarg];
                                      curarg++;
                                      // Start argument checking
                                      curarg = 1;
                                      setLineNumber(1195);    // compilenode identifier
                                      if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                          throw new GraceExceptionPacket(TypeErrorObject,
                                              new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                  callmethod(var_Number, "asString", [0])._value + "."));
                                      curarg++;
                                      // End argument checking
                                      setModuleName("ast");
                                      setLineNumber(1196);    // compilenode string
                                      var string8423 = new GraceString("");
                                      var var_s = string8423;
                                      var if8424 = GraceDone;
                                      setLineNumber(1197);    // compilenode member
                                      // call case 6: other requests
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call8428 = callmethodChecked(this, "receiver", []);
                                      var call8429 = callmethodChecked(call8428, "isImplicit", []);
                                      var call8430 = callmethodChecked(call8429, "not", []);
                                      if (Grace_isTrue(call8430)) {
                                        var if8431 = GraceDone;
                                        setLineNumber(1198);    // compilenode member
                                        // call case 6: other requests
                                        // call case 4: self request
                                        onSelf = true;
                                        var call8434 = callmethodChecked(this, "receiver", []);
                                        var call8435 = callmethodChecked(call8434, "isSimple", []);
                                        if (Grace_isTrue(call8435)) {
                                          setLineNumber(1199);    // compilenode string
                                          var string8436 = new GraceString(".");
                                          var opresult8441 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                          // call case 6: other requests
                                          // call case 4: self request
                                          onSelf = true;
                                          var call8443 = callmethodChecked(this, "receiver", []);
                                          var call8444 = callmethodChecked(call8443, "toGrace(1)", [1], opresult8441);
                                          var string8446 = new GraceString("");
                                          var opresult8448 = callmethodChecked(string8446, "++(1)", [1], call8444);
                                          var opresult8450 = callmethodChecked(opresult8448, "++(1)", [1], string8436);
                                          var_s = opresult8450;
                                          if8431 = GraceDone;
                                        } else {
                                          setLineNumber(1201);    // compilenode string
                                          var string8451 = new GraceString(").");
                                          var opresult8456 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                          // call case 6: other requests
                                          // call case 4: self request
                                          onSelf = true;
                                          var call8458 = callmethodChecked(this, "receiver", []);
                                          var call8459 = callmethodChecked(call8458, "toGrace(1)", [1], opresult8456);
                                          var string8461 = new GraceString("(");
                                          var opresult8463 = callmethodChecked(string8461, "++(1)", [1], call8459);
                                          var opresult8465 = callmethodChecked(opresult8463, "++(1)", [1], string8451);
                                          var_s = opresult8465;
                                          if8431 = GraceDone;
                                        }
                                        if8424 = if8431;
                                      }
                                      setLineNumber(1204);    // compilenode block
                                      var block8467 = new GraceBlock(this, 1204, 1);
                                      setLineNumber(1);    // compilenode identifier
                                      block8467.real = function(var_part) {
                                        setLineNumber(1204);    // compilenode identifier
                                        var opresult8471 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                        // call case 6: other requests
                                        var call8472 = callmethodChecked(var_part, "toGrace(1)", [1], opresult8471);
                                        var opresult8475 = callmethodChecked(var_s, "++(1)", [1], call8472);
                                        var_s = opresult8475;
                                        return GraceDone;
                                      };
                                      setLineNumber(1205);    // compilenode block
                                      var block8476 = new GraceBlock(this, 1205, 0);
                                      block8476.real = function() {
                                        var string8477 = new GraceString(" ");
                                        var opresult8480 = callmethodChecked(var_s, "++(1)", [1], string8477);
                                        var_s = opresult8480;
                                        return GraceDone;
                                      };
                                      // call case 6: other requests
                                      setLineNumber(1204);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call8482 = callmethodChecked(this, "with", []);
                                      var call8483 = callmethodChecked(call8482, "do(1)separatedBy(1)", [1, 1], block8467, block8476);
                                      setLineNumber(1206);    // return value
                                      if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], var_s)))
                                          throw new GraceExceptionPacket(TypeErrorObject,
                                              new GraceString("result of method toGrace(_) does not have " + 
                                                  callmethod(var_String, "asString", [0])._value + "."));
                                      return var_s;
                                    };
                                    func8422.paramTypes = [];
                                    func8422.paramTypes.push([type_Number, "depth"]);
                                    func8422.paramCounts = [1];
                                    obj8107.methods["toGrace(1)"] = func8422;
                                    func8422.definitionLine = 1195;
                                    func8422.definitionModule = "ast";
                                    var func8484 = function(argcv) {    // method asIdentifier
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      setModuleName("ast");
                                      var if8485 = GraceDone;
                                      setLineNumber(1210);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call8487 = callmethodChecked(this, "scope", []);
                                      var opresult8490 = callmethodChecked(var_fakeSymbolTable, "==(1)", [1], call8487);
                                      if (Grace_isTrue(opresult8490)) {
                                        setLineNumber(1211);    // compilenode string
                                        var string8492 = new GraceString(" when scope was fake");
                                        // call case 4: self request
                                        onSelf = true;
                                        var call8495 = callmethodChecked(this, "pretty(1)", [1], new GraceNum(0));
                                        var string8497 = new GraceString("asIdentifier requested on ");
                                        var opresult8499 = callmethodChecked(string8497, "++(1)", [1], call8495);
                                        var opresult8501 = callmethodChecked(opresult8499, "++(1)", [1], string8492);
                                        // call case 6: other requests
                                        // call case 5: prelude request
                                        var call8503 = callmethodChecked(var_prelude, "ProgrammingError", []);
                                        var call8504 = callmethodChecked(call8503, "raise(1)", [1], opresult8501);
                                        if8485 = call8504;
                                      }
                                      setLineNumber(1213);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call8507 = callmethodChecked(this, "nameString", []);
                                      // call case 4: self request
                                      onSelf = true;
                                      var call8509 = callmethodChecked(this, "scope", []);
                                      // call case 6: other requests
                                      var call8510 = callmethodChecked(var_identifierNode, "new(2)scope(1)", [2, 1], call8507, GraceFalse, call8509);
                                      var var_resultNode = call8510;
                                      setLineNumber(1214);    // compilenode identifier
                                      // call case 6: other requests
                                      var call8512 = callmethodChecked(var_resultNode, "inRequest:=(1)", [1], GraceTrue);
                                      setLineNumber(1215);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call8515 = callmethodChecked(this, "line", []);
                                      // call case 6: other requests
                                      var call8516 = callmethodChecked(var_resultNode, "line:=(1)", [1], call8515);
                                      setLineNumber(1216);    // compilenode member
                                      // call case 4: self request
                                      onSelf = true;
                                      var call8519 = callmethodChecked(this, "linePos", []);
                                      // call case 6: other requests
                                      var call8520 = callmethodChecked(var_resultNode, "linePos:=(1)", [1], call8519);
                                      setLineNumber(1217);    // compilenode identifier
                                      return var_resultNode;
                                    };
                                    func8484.paramCounts = [0];
                                    obj8107.methods["asIdentifier"] = func8484;
                                    func8484.definitionLine = 1208;
                                    func8484.definitionModule = "ast";
                                    var func8521 = function(argcv) {    // method asString
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      setModuleName("ast");
                                      setLineNumber(1219);    // compilenode string
                                      var string8522 = new GraceString("");
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call8526 = callmethodChecked(this, "receiver", []);
                                      var call8527 = callmethodChecked(call8526, "pretty(1)", [1], new GraceNum(0));
                                      var string8529 = new GraceString("call ");
                                      var opresult8531 = callmethodChecked(string8529, "++(1)", [1], call8527);
                                      var opresult8533 = callmethodChecked(opresult8531, "++(1)", [1], string8522);
                                      return opresult8533;
                                    };
                                    func8521.paramCounts = [0];
                                    obj8107.methods["asString"] = func8521;
                                    func8521.definitionLine = 1219;
                                    func8521.definitionModule = "ast";
                                    var func8534 = function(argcv) {    // method shallowCopy
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      setModuleName("ast");
                                      setLineNumber(1221);    // compilenode identifier
                                      // call case 6: other requests
                                      // call case 4: self request
                                      onSelf = true;
                                      var call8538 = callmethodChecked(this, "receiver", []);
                                      // call case 4: self request
                                      onSelf = true;
                                      var call8540 = callmethodChecked(this, "with", []);
                                      // call case 6: other requests
                                      var call8541 = callmethodChecked(var_callNode, "new(2)", [2], call8538, call8540);
                                      var call8542 = callmethodChecked(call8541, "shallowCopyFieldsFrom(1)", [1], this);
                                      return call8542;
                                    };
                                    func8534.paramCounts = [0];
                                    obj8107.methods["shallowCopy"] = func8534;
                                    func8534.definitionLine = 1220;
                                    func8534.definitionModule = "ast";
                                    var func8543 = function(argcv) {    // method shallowCopyFieldsFrom(_)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_other = arguments[curarg];
                                      curarg++;
                                      setModuleName("ast");
                                      setLineNumber(1224);    // compilenode identifier
                                      // call case 1: super request
                                      var call8545 = callmethodsuper(this, "shallowCopyFieldsFrom(1)", [1], var_other);
                                      setLineNumber(1225);    // compilenode member
                                      // call case 6: other requests
                                      var call8548 = callmethodChecked(var_other, "isPattern", []);
                                      // call case 4: self request
                                      onSelf = true;
                                      var call8549 = callmethodChecked(this, "isPattern:=(1)", [1], call8548);
                                      setLineNumber(1226);    // compilenode member
                                      // call case 6: other requests
                                      var call8552 = callmethodChecked(var_other, "isSelfRequest", []);
                                      // call case 4: self request
                                      onSelf = true;
                                      var call8553 = callmethodChecked(this, "isSelfRequest:=(1)", [1], call8552);
                                      setLineNumber(1227);    // compilenode identifier
                                      return this;
                                    };
                                    func8543.paramCounts = [1];
                                    obj8107.methods["shallowCopyFieldsFrom(1)"] = func8543;
                                    func8543.definitionLine = 1223;
                                    func8543.definitionModule = "ast";
                                    var func8554 = function(argcv) {    // method statementName
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      setModuleName("ast");
                                      setLineNumber(1229);    // compilenode string
                                      var string8555 = new GraceString("request");
                                      return string8555;
                                    };
                                    func8554.paramCounts = [0];
                                    obj8107.methods["statementName"] = func8554;
                                    func8554.definitionLine = 1229;
                                    func8554.definitionModule = "ast";
                                    setLineNumber(1094);    // compilenode identifier
                                    // call case 6: other requests
                                    // call case 6: other requests
                                    // call case 3: self.outer request
                                    var call8559 = callmethodChecked(superDepth, "outer", [0]);
                                    var call8560 = callmethodChecked(call8559, "outer", []);
                                    var call8561 = callmethodChecked(call8560, "baseNode$object(1)", [0, 1], this);
                                    obj8107.superobj = call8561;
                                    if (call8561.data) obj8107.data = call8561.data;
                                    if (call8561.hasOwnProperty('_value'))
                                        obj8107._value = call8561._value;
                                    setLineNumber(1095);    // compilenode string
                                    var string8562 = new GraceString("call");
                                    obj8107.data["kind"] = string8562;
                                    var reader_ast_kind8563 = function() {
                                      return this.data["kind"];
                                    };
                                    reader_ast_kind8563.def = true;
                                    obj8107.methods["kind"] = reader_ast_kind8563;
                                    setLineNumber(1096);    // compilenode identifier
                                    obj8107.data["with"] = var_parts;
                                    var reader_ast_with8564 = function() {
                                      return this.data["with"];
                                    };
                                    obj8107.methods["with"] = reader_ast_with8564;
                                    obj8107.data["with"] = var_parts;
                                    var writer_ast_with8564 = function(argcv, o) {
                                      this.data["with"] = o;
                                      return GraceDone;
                                    };
                                    obj8107.methods["with:=(1)"] = writer_ast_with8564;
                                    obj8107.mutable = true;
                                    setLineNumber(1097);    // compilenode identifier
                                    obj8107.data["generics"] = GraceFalse;
                                    var reader_ast_generics8565 = function() {
                                      return this.data["generics"];
                                    };
                                    obj8107.methods["generics"] = reader_ast_generics8565;
                                    obj8107.data["generics"] = GraceFalse;
                                    var writer_ast_generics8565 = function(argcv, o) {
                                      this.data["generics"] = o;
                                      return GraceDone;
                                    };
                                    obj8107.methods["generics:=(1)"] = writer_ast_generics8565;
                                    obj8107.mutable = true;
                                    setLineNumber(1098);    // compilenode identifier
                                    obj8107.data["isPattern"] = GraceFalse;
                                    var reader_ast_isPattern8566 = function() {
                                      return this.data["isPattern"];
                                    };
                                    obj8107.methods["isPattern"] = reader_ast_isPattern8566;
                                    obj8107.data["isPattern"] = GraceFalse;
                                    var writer_ast_isPattern8566 = function(argcv, o) {
                                      this.data["isPattern"] = o;
                                      return GraceDone;
                                    };
                                    obj8107.methods["isPattern:=(1)"] = writer_ast_isPattern8566;
                                    obj8107.mutable = true;
                                    setLineNumber(1099);    // compilenode identifier
                                    obj8107.data["receiver"] = var_receiver__39__;
                                    var reader_ast_receiver8567 = function() {
                                      return this.data["receiver"];
                                    };
                                    obj8107.methods["receiver"] = reader_ast_receiver8567;
                                    obj8107.data["receiver"] = var_receiver__39__;
                                    var writer_ast_receiver8567 = function(argcv, o) {
                                      this.data["receiver"] = o;
                                      return GraceDone;
                                    };
                                    obj8107.methods["receiver:=(1)"] = writer_ast_receiver8567;
                                    obj8107.mutable = true;
                                    setLineNumber(1100);    // compilenode identifier
                                    obj8107.data["isSelfRequest"] = GraceFalse;
                                    var reader_ast_isSelfRequest8568 = function() {
                                      return this.data["isSelfRequest"];
                                    };
                                    obj8107.methods["isSelfRequest"] = reader_ast_isSelfRequest8568;
                                    obj8107.data["isSelfRequest"] = GraceFalse;
                                    var writer_ast_isSelfRequest8568 = function(argcv, o) {
                                      this.data["isSelfRequest"] = o;
                                      return GraceDone;
                                    };
                                    obj8107.methods["isSelfRequest:=(1)"] = writer_ast_isSelfRequest8568;
                                    obj8107.mutable = true;
                                    superDepth = origSuperDepth;
                                  };
                                  obj_init_8107.apply(obj8107, []);
                                  return obj8107;
                                };
                                func8106.paramCounts = [2];
                                obj8099.methods["new(2)"] = func8106;
                                func8106.definitionLine = 1089;
                                func8106.definitionModule = "ast";
                                  var func8569 = function(argcv) {    // method new(_,_)$object(_)
                                    var curarg = 1;
                                    var var_receiver__39__ = arguments[curarg];
                                    curarg++;
                                    var var_parts = arguments[curarg];
                                    curarg++;
                                    var inheritingObject = arguments[curarg++];
                                    // Start argument processing
                                    curarg = 1;
                                    curarg++;
                                    curarg++;
                                    // End argument processing
                                    setModuleName("ast");
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var obj8570 = Grace_allocObject(null, "new(2)");
                                    obj8570.definitionModule = "ast";
                                    obj8570.definitionLine = 1089;
                                    var inho8570 = inheritingObject;
                                    while (inho8570.superobj) inho8570 = inho8570.superobj;
                                    inho8570.superobj = obj8570;
                                    obj8570.data = inheritingObject.data;
                                    if (inheritingObject.hasOwnProperty('_value'))
                                      obj8570._value = inheritingObject._value;
                                    obj8570.outer = this;
                                    var reader_ast_outer8571 = function() {
                                      return this.outer;
                                    };
                                    obj8570.methods["outer"] = reader_ast_outer8571;
                                    var obj_init_8570 = function() {
                                      var origSuperDepth = superDepth;
                                      superDepth = obj8570;
                                      var func8572 = function(argcv) {    // method onSelf
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        setModuleName("ast");
                                        setLineNumber(1104);    // compilenode identifier
                                        // call case 4: self request
                                        onSelf = true;
                                        var call8574 = callmethodChecked(this, "isSelfRequest:=(1)", [1], GraceTrue);
                                        setLineNumber(1105);    // compilenode identifier
                                        return this;
                                      };
                                      func8572.paramCounts = [0];
                                      obj8570.methods["onSelf"] = func8572;
                                      func8572.definitionLine = 1102;
                                      func8572.definitionModule = "ast";
                                      var func8575 = function(argcv) {    // method nameString
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        setModuleName("ast");
                                        setLineNumber(1110);    // compilenode block
                                        var block8577 = new GraceBlock(this, 1110, 2);
                                        setLineNumber(1);    // compilenode identifier
                                        block8577.real = function(var_acc, var_each) {
                                          setLineNumber(1110);    // compilenode member
                                          // call case 6: other requests
                                          var call8579 = callmethodChecked(var_each, "nameString", []);
                                          var opresult8582 = callmethodChecked(var_acc, "++(1)", [1], call8579);
                                          return opresult8582;
                                        };
                                        var string8583 = new GraceString("");
                                        // call case 6: other requests
                                        // call case 4: self request
                                        onSelf = true;
                                        var call8585 = callmethodChecked(this, "with", []);
                                        var call8586 = callmethodChecked(call8585, "fold(1)startingWith(1)", [1, 1], block8577, string8583);
                                        return call8586;
                                      };
                                      func8575.paramCounts = [0];
                                      obj8570.methods["nameString"] = func8575;
                                      func8575.definitionLine = 1108;
                                      func8575.definitionModule = "ast";
                                      var func8587 = function(argcv) {    // method canonicalName
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        setModuleName("ast");
                                        setLineNumber(1115);    // compilenode block
                                        var block8589 = new GraceBlock(this, 1115, 2);
                                        setLineNumber(1);    // compilenode identifier
                                        block8589.real = function(var_acc, var_each) {
                                          setLineNumber(1115);    // compilenode member
                                          // call case 6: other requests
                                          var call8591 = callmethodChecked(var_each, "canonicalName", []);
                                          var opresult8594 = callmethodChecked(var_acc, "++(1)", [1], call8591);
                                          return opresult8594;
                                        };
                                        setLineNumber(1116);    // compilenode string
                                        var string8595 = new GraceString("");
                                        // call case 6: other requests
                                        setLineNumber(1115);    // compilenode member
                                        // call case 4: self request
                                        onSelf = true;
                                        var call8597 = callmethodChecked(this, "with", []);
                                        var call8598 = callmethodChecked(call8597, "fold(1)startingWith(1)", [1, 1], block8589, string8595);
                                        return call8598;
                                      };
                                      func8587.paramCounts = [0];
                                      obj8570.methods["canonicalName"] = func8587;
                                      func8587.definitionLine = 1113;
                                      func8587.definitionModule = "ast";
                                      var func8599 = function(argcv) {    // method isCall
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        setModuleName("ast");
                                        // isCall is a simple accessor - elide try ... catch
                                        setLineNumber(1119);    // compilenode identifier
                                        return GraceTrue;
                                      };
                                      func8599.paramCounts = [0];
                                      obj8570.methods["isCall"] = func8599;
                                      func8599.definitionLine = 1119;
                                      func8599.definitionModule = "ast";
                                      var func8600 = function(argcv) {    // method returnsObject
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        setModuleName("ast");
                                        var if8601 = GraceDone;
                                        setLineNumber(1124);    // compilenode string
                                        var string8602 = new GraceString("clone(1)");
                                        // call case 4: self request
                                        onSelf = true;
                                        var call8605 = callmethodChecked(this, "nameString", []);
                                        var opresult8607 = callmethodChecked(call8605, "==(1)", [1], string8602);
                                        setLineNumber(1123);    // compilenode member
                                        // call case 6: other requests
                                        // call case 4: self request
                                        onSelf = true;
                                        var call8611 = callmethodChecked(this, "receiver", []);
                                        var call8612 = callmethodChecked(call8611, "isPrelude", []);
                                        // call case 6: other requests
                                        // call case 4: self request
                                        onSelf = true;
                                        var call8616 = callmethodChecked(this, "receiver", []);
                                        var call8617 = callmethodChecked(call8616, "isImplicit", []);
                                        var opresult8619 = callmethodChecked(call8617, "||(1)", [1], call8612);
                                        var opresult8621 = callmethodChecked(opresult8619, "&&(1)", [1], opresult8607);
                                        if (Grace_isTrue(opresult8621)) {
                                          setLineNumber(1124);    // compilenode identifier
                                          return GraceTrue;
                                        }
                                        var if8622 = GraceDone;
                                        setLineNumber(1126);    // compilenode string
                                        var string8623 = new GraceString("copy");
                                        // call case 4: self request
                                        onSelf = true;
                                        var call8626 = callmethodChecked(this, "nameString", []);
                                        var opresult8628 = callmethodChecked(call8626, "==(1)", [1], string8623);
                                        setLineNumber(1125);    // compilenode member
                                        // call case 6: other requests
                                        // call case 4: self request
                                        onSelf = true;
                                        var call8632 = callmethodChecked(this, "receiver", []);
                                        var call8633 = callmethodChecked(call8632, "isSelf", []);
                                        // call case 6: other requests
                                        // call case 4: self request
                                        onSelf = true;
                                        var call8637 = callmethodChecked(this, "receiver", []);
                                        var call8638 = callmethodChecked(call8637, "isImplicit", []);
                                        var opresult8640 = callmethodChecked(call8638, "||(1)", [1], call8633);
                                        var opresult8642 = callmethodChecked(opresult8640, "&&(1)", [1], opresult8628);
                                        if (Grace_isTrue(opresult8642)) {
                                          setLineNumber(1126);    // compilenode identifier
                                          return GraceTrue;
                                        }
                                        setLineNumber(1127);    // compilenode identifier
                                        return GraceFalse;
                                      };
                                      func8600.paramCounts = [0];
                                      obj8570.methods["returnsObject"] = func8600;
                                      func8600.definitionLine = 1120;
                                      func8600.definitionModule = "ast";
                                      var func8643 = function(argcv) {    // method returnedObjectScope
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        setModuleName("ast");
                                        setLineNumber(1131);    // compilenode member
                                        // call case 4: self request
                                        onSelf = true;
                                        var call8645 = callmethodChecked(this, "scope", []);
                                        return call8645;
                                      };
                                      func8643.paramCounts = [0];
                                      obj8570.methods["returnedObjectScope"] = func8643;
                                      func8643.definitionLine = 1129;
                                      func8643.definitionModule = "ast";
                                      var func8646 = function(argcv) {    // method arguments
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        setModuleName("ast");
                                        setLineNumber(1134);    // compilenode array
                                        var array8647 = new PrimitiveGraceList([]);
                                        var var_result = array8647;
                                        setLineNumber(1135);    // compilenode member
                                        // call case 4: self request
                                        onSelf = true;
                                        var call8650 = callmethodChecked(this, "with", []);
                                        var block8651 = new GraceBlock(this, 1135, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block8651.real = function(var_part) {
                                          setLineNumber(1136);    // compilenode member
                                          // call case 6: other requests
                                          var call8654 = callmethodChecked(var_part, "args", []);
                                          var block8655 = new GraceBlock(this, 1136, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block8655.real = function(var_arg) {
                                            setLineNumber(1136);    // compilenode identifier
                                            // call case 6: other requests
                                            var call8657 = callmethodChecked(var_result, "push(1)", [1], var_arg);
                                            return call8657;
                                          };
                                          // call case 5: prelude request
                                          var call8658 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call8654, block8655);
                                          return call8658;
                                        };
                                        // call case 5: prelude request
                                        var call8659 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call8650, block8651);
                                        setLineNumber(1138);    // compilenode identifier
                                        return var_result;
                                      };
                                      func8646.paramCounts = [0];
                                      obj8570.methods["arguments"] = func8646;
                                      func8646.definitionLine = 1133;
                                      func8646.definitionModule = "ast";
                                      var func8660 = function(argcv) {    // method argumentsDo(_)
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        var var_action = arguments[curarg];
                                        curarg++;
                                        setModuleName("ast");
                                        setLineNumber(1142);    // compilenode member
                                        // call case 4: self request
                                        onSelf = true;
                                        var call8663 = callmethodChecked(this, "with", []);
                                        var block8664 = new GraceBlock(this, 1142, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block8664.real = function(var_part) {
                                          setLineNumber(1143);    // compilenode member
                                          // call case 6: other requests
                                          var call8667 = callmethodChecked(var_part, "args", []);
                                          var block8668 = new GraceBlock(this, 1143, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block8668.real = function(var_arg) {
                                            setLineNumber(1143);    // compilenode identifier
                                            // call case 6: other requests
                                            var call8670 = callmethodChecked(var_action, "apply(1)", [1], var_arg);
                                            return call8670;
                                          };
                                          // call case 5: prelude request
                                          var call8671 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call8667, block8668);
                                          return call8671;
                                        };
                                        // call case 5: prelude request
                                        var call8672 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call8663, block8664);
                                        return call8672;
                                      };
                                      func8660.paramCounts = [1];
                                      obj8570.methods["argumentsDo(1)"] = func8660;
                                      func8660.definitionLine = 1141;
                                      func8660.definitionModule = "ast";
                                      var func8673 = function(argcv) {    // method accept(_)from(_)
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        var var_visitor = arguments[curarg];
                                        curarg++;
                                        var var_as = arguments[curarg];
                                        curarg++;
                                        // Start argument checking
                                        curarg = 1;
                                        setLineNumber(1147);    // compilenode identifier
                                        if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                    callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                        curarg++;
                                        curarg++;
                                        // End argument checking
                                        setModuleName("ast");
                                        var if8674 = GraceDone;
                                        setLineNumber(1148);    // compilenode identifier
                                        // call case 6: other requests
                                        var call8676 = callmethodChecked(var_visitor, "visitCall(1)up(1)", [1, 1], this, var_as);
                                        if (Grace_isTrue(call8676)) {
                                          setLineNumber(1149);    // compilenode identifier
                                          // call case 6: other requests
                                          var call8678 = callmethodChecked(var_as, "extend(1)", [1], this);
                                          var var_newChain = call8678;
                                          setLineNumber(1150);    // compilenode identifier
                                          // call case 6: other requests
                                          // call case 4: self request
                                          onSelf = true;
                                          var call8681 = callmethodChecked(this, "receiver", []);
                                          var call8682 = callmethodChecked(call8681, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                          setLineNumber(1151);    // compilenode member
                                          // call case 4: self request
                                          onSelf = true;
                                          var call8685 = callmethodChecked(this, "with", []);
                                          var block8686 = new GraceBlock(this, 1151, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block8686.real = function(var_part) {
                                            setLineNumber(1152);    // compilenode member
                                            // call case 6: other requests
                                            var call8689 = callmethodChecked(var_part, "args", []);
                                            var block8690 = new GraceBlock(this, 1152, 1);
                                            setLineNumber(1);    // compilenode identifier
                                            block8690.real = function(var_arg) {
                                              setLineNumber(1153);    // compilenode identifier
                                              // call case 6: other requests
                                              var call8692 = callmethodChecked(var_arg, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                              return call8692;
                                            };
                                            // call case 5: prelude request
                                            var call8693 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call8689, block8690);
                                            return call8693;
                                          };
                                          // call case 5: prelude request
                                          var call8694 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call8685, block8686);
                                          var if8695 = GraceDone;
                                          setLineNumber(1156);    // compilenode member
                                          // call case 4: self request
                                          onSelf = true;
                                          var call8697 = callmethodChecked(this, "generics", []);
                                          var opresult8700 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call8697);
                                          if (Grace_isTrue(opresult8700)) {
                                            setLineNumber(1157);    // compilenode block
                                            var block8702 = new GraceBlock(this, 1157, 1);
                                            setLineNumber(1);    // compilenode identifier
                                            block8702.real = function(var_each) {
                                              setLineNumber(1158);    // compilenode identifier
                                              // call case 6: other requests
                                              var call8704 = callmethodChecked(var_each, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                              return call8704;
                                            };
                                            // call case 6: other requests
                                            setLineNumber(1157);    // compilenode member
                                            // call case 4: self request
                                            onSelf = true;
                                            var call8706 = callmethodChecked(this, "generics", []);
                                            var call8707 = callmethodChecked(call8706, "do(1)", [1], block8702);
                                            if8695 = call8707;
                                          }
                                          if8674 = if8695;
                                        }
                                        return if8674;
                                      };
                                      func8673.paramTypes = [];
                                      func8673.paramTypes.push([]);
                                      func8673.paramTypes.push([]);
                                      func8673.paramCounts = [1, 1];
                                      obj8570.methods["accept(1)from(1)"] = func8673;
                                      func8673.definitionLine = 1147;
                                      func8673.definitionModule = "ast";
                                      var func8708 = function(argcv) {    // method map(_)ancestors(_)
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        var var_blk = arguments[curarg];
                                        curarg++;
                                        var var_as = arguments[curarg];
                                        curarg++;
                                        setModuleName("ast");
                                        setLineNumber(1164);    // compilenode member
                                        // call case 4: self request
                                        onSelf = true;
                                        var call8710 = callmethodChecked(this, "shallowCopy", []);
                                        var var_n = call8710;
                                        setLineNumber(1165);    // compilenode identifier
                                        // call case 6: other requests
                                        var call8712 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                        var var_newChain = call8712;
                                        setLineNumber(1166);    // compilenode identifier
                                        // call case 6: other requests
                                        // call case 4: self request
                                        onSelf = true;
                                        var call8716 = callmethodChecked(this, "receiver", []);
                                        var call8717 = callmethodChecked(call8716, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
                                        // call case 6: other requests
                                        var call8718 = callmethodChecked(var_n, "receiver:=(1)", [1], call8717);
                                        setLineNumber(1167);    // compilenode member
                                        // call case 4: self request
                                        onSelf = true;
                                        var call8722 = callmethodChecked(this, "with", []);
                                        // call case 6: other requests
                                        // call case 6: other requests
                                        // call case 3: self.outer request
                                        var call8725 = callmethodChecked(superDepth, "outer", [0]);
                                        var call8726 = callmethodChecked(call8725, "outer", []);
                                        onSelf = true;
                                        var call8727 = callmethodChecked(call8726, "listMap(2)ancestors(1)", [2, 1], call8722, var_blk, var_newChain);
                                        // call case 6: other requests
                                        var call8728 = callmethodChecked(var_n, "with:=(1)", [1], call8727);
                                        setLineNumber(1168);    // compilenode member
                                        // call case 4: self request
                                        onSelf = true;
                                        var call8732 = callmethodChecked(this, "generics", []);
                                        // call case 6: other requests
                                        // call case 6: other requests
                                        // call case 3: self.outer request
                                        var call8735 = callmethodChecked(superDepth, "outer", [0]);
                                        var call8736 = callmethodChecked(call8735, "outer", []);
                                        onSelf = true;
                                        var call8737 = callmethodChecked(call8736, "maybeListMap(2)ancestors(1)", [2, 1], call8732, var_blk, var_newChain);
                                        // call case 6: other requests
                                        var call8738 = callmethodChecked(var_n, "generics:=(1)", [1], call8737);
                                        setLineNumber(1169);    // compilenode identifier
                                        // call case 6: other requests
                                        var call8740 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                        return call8740;
                                      };
                                      func8708.paramCounts = [1, 1];
                                      obj8570.methods["map(1)ancestors(1)"] = func8708;
                                      func8708.definitionLine = 1163;
                                      func8708.definitionModule = "ast";
                                      var func8741 = function(argcv) {    // method pretty(_)
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        var var_depth = arguments[curarg];
                                        curarg++;
                                        setModuleName("ast");
                                        setLineNumber(1172);    // compilenode string
                                        var string8742 = new GraceString("");
                                        var var_spc = string8742;
                                        setLineNumber(1173);    // compilenode num
                                        var opresult8746 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                                        var block8747 = new GraceBlock(this, 1173, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block8747.real = function(var_i) {
                                          setLineNumber(1174);    // compilenode string
                                          var string8748 = new GraceString("  ");
                                          var opresult8751 = callmethodChecked(var_spc, "++(1)", [1], string8748);
                                          var_spc = opresult8751;
                                          return GraceDone;
                                        };
                                        // call case 5: prelude request
                                        var call8752 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult8746, block8747);
                                        setLineNumber(1176);    // compilenode identifier
                                        // call case 1: super request
                                        var call8754 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                        var var_s = call8754;
                                        var if8755 = GraceDone;
                                        setLineNumber(1177);    // compilenode member
                                        // call case 4: self request
                                        onSelf = true;
                                        var call8757 = callmethodChecked(this, "isSelfRequest", []);
                                        if (Grace_isTrue(call8757)) {
                                          var string8758 = new GraceString(" on self\n");
                                          if8755 = string8758;
                                        } else {
                                          var string8759 = new GraceString("\n");
                                          if8755 = string8759;
                                        }
                                        var opresult8762 = callmethodChecked(var_s, "++(1)", [1], if8755);
                                        var_s = opresult8762;
                                        setLineNumber(1178);    // compilenode string
                                        var string8763 = new GraceString("\n");
                                        var opresult8768 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                        // call case 6: other requests
                                        // call case 4: self request
                                        onSelf = true;
                                        var call8770 = callmethodChecked(this, "receiver", []);
                                        var call8771 = callmethodChecked(call8770, "pretty(1)", [1], opresult8768);
                                        var string8773 = new GraceString("Receiver: ");
                                        var opresult8775 = callmethodChecked(string8773, "++(1)", [1], call8771);
                                        var opresult8777 = callmethodChecked(opresult8775, "++(1)", [1], string8763);
                                        var opresult8781 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                        var opresult8783 = callmethodChecked(opresult8781, "++(1)", [1], opresult8777);
                                        var_s = opresult8783;
                                        setLineNumber(1179);    // compilenode string
                                        var string8784 = new GraceString("\n");
                                        // call case 4: self request
                                        onSelf = true;
                                        var call8787 = callmethodChecked(this, "nameString", []);
                                        var string8789 = new GraceString("Method Name: ");
                                        var opresult8791 = callmethodChecked(string8789, "++(1)", [1], call8787);
                                        var opresult8793 = callmethodChecked(opresult8791, "++(1)", [1], string8784);
                                        var opresult8797 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                        var opresult8799 = callmethodChecked(opresult8797, "++(1)", [1], opresult8793);
                                        var_s = opresult8799;
                                        var if8800 = GraceDone;
                                        setLineNumber(1180);    // compilenode member
                                        // call case 4: self request
                                        onSelf = true;
                                        var call8802 = callmethodChecked(this, "generics", []);
                                        var opresult8805 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call8802);
                                        if (Grace_isTrue(opresult8805)) {
                                          setLineNumber(1181);    // compilenode string
                                          var string8806 = new GraceString("  Generics:\n");
                                          var opresult8810 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                          var opresult8812 = callmethodChecked(opresult8810, "++(1)", [1], string8806);
                                          var_s = opresult8812;
                                          setLineNumber(1182);    // compilenode member
                                          // call case 4: self request
                                          onSelf = true;
                                          var call8815 = callmethodChecked(this, "generics", []);
                                          var block8816 = new GraceBlock(this, 1182, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block8816.real = function(var_g) {
                                            setLineNumber(1183);    // compilenode string
                                            var string8817 = new GraceString("\n");
                                            var opresult8822 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                            // call case 6: other requests
                                            var call8823 = callmethodChecked(var_g, "pretty(1)", [1], opresult8822);
                                            var string8825 = new GraceString("    ");
                                            var opresult8829 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                            var opresult8831 = callmethodChecked(opresult8829, "++(1)", [1], string8825);
                                            var opresult8833 = callmethodChecked(opresult8831, "++(1)", [1], call8823);
                                            var opresult8835 = callmethodChecked(opresult8833, "++(1)", [1], string8817);
                                            var_s = opresult8835;
                                            return GraceDone;
                                          };
                                          // call case 5: prelude request
                                          var call8836 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call8815, block8816);
                                          if8800 = call8836;
                                        }
                                        setLineNumber(1186);    // compilenode string
                                        var string8837 = new GraceString("Arguments:");
                                        var opresult8841 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                        var opresult8843 = callmethodChecked(opresult8841, "++(1)", [1], string8837);
                                        var_s = opresult8843;
                                        setLineNumber(1187);    // compilenode member
                                        // call case 4: self request
                                        onSelf = true;
                                        var call8846 = callmethodChecked(this, "with", []);
                                        var block8847 = new GraceBlock(this, 1187, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block8847.real = function(var_part) {
                                          setLineNumber(1188);    // compilenode member
                                          // call case 6: other requests
                                          var call8849 = callmethodChecked(var_part, "name", []);
                                          var string8851 = new GraceString("Part: ");
                                          var string8854 = new GraceString("\n  ");
                                          var opresult8857 = callmethodChecked(var_s, "++(1)", [1], string8854);
                                          var opresult8859 = callmethodChecked(opresult8857, "++(1)", [1], var_spc);
                                          var opresult8861 = callmethodChecked(opresult8859, "++(1)", [1], string8851);
                                          var opresult8863 = callmethodChecked(opresult8861, "++(1)", [1], call8849);
                                          var_s = opresult8863;
                                          setLineNumber(1189);    // compilenode member
                                          // call case 6: other requests
                                          var call8866 = callmethodChecked(var_part, "args", []);
                                          var block8867 = new GraceBlock(this, 1189, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block8867.real = function(var_arg) {
                                            setLineNumber(1190);    // compilenode identifier
                                            var opresult8871 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                            // call case 6: other requests
                                            var call8872 = callmethodChecked(var_arg, "pretty(1)", [1], opresult8871);
                                            var string8875 = new GraceString("\n      ");
                                            var opresult8878 = callmethodChecked(var_s, "++(1)", [1], string8875);
                                            var opresult8880 = callmethodChecked(opresult8878, "++(1)", [1], var_spc);
                                            var opresult8882 = callmethodChecked(opresult8880, "++(1)", [1], call8872);
                                            var_s = opresult8882;
                                            return GraceDone;
                                          };
                                          // call case 5: prelude request
                                          var call8883 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call8866, block8867);
                                          return call8883;
                                        };
                                        // call case 5: prelude request
                                        var call8884 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call8846, block8847);
                                        setLineNumber(1193);    // compilenode identifier
                                        return var_s;
                                      };
                                      func8741.paramCounts = [1];
                                      obj8570.methods["pretty(1)"] = func8741;
                                      func8741.definitionLine = 1171;
                                      func8741.definitionModule = "ast";
                                      var func8885 = function(argcv) {    // method toGrace(_)
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        var var_depth = arguments[curarg];
                                        curarg++;
                                        // Start argument checking
                                        curarg = 1;
                                        setLineNumber(1195);    // compilenode identifier
                                        if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                    callmethod(var_Number, "asString", [0])._value + "."));
                                        curarg++;
                                        // End argument checking
                                        setModuleName("ast");
                                        setLineNumber(1196);    // compilenode string
                                        var string8886 = new GraceString("");
                                        var var_s = string8886;
                                        var if8887 = GraceDone;
                                        setLineNumber(1197);    // compilenode member
                                        // call case 6: other requests
                                        // call case 6: other requests
                                        // call case 4: self request
                                        onSelf = true;
                                        var call8891 = callmethodChecked(this, "receiver", []);
                                        var call8892 = callmethodChecked(call8891, "isImplicit", []);
                                        var call8893 = callmethodChecked(call8892, "not", []);
                                        if (Grace_isTrue(call8893)) {
                                          var if8894 = GraceDone;
                                          setLineNumber(1198);    // compilenode member
                                          // call case 6: other requests
                                          // call case 4: self request
                                          onSelf = true;
                                          var call8897 = callmethodChecked(this, "receiver", []);
                                          var call8898 = callmethodChecked(call8897, "isSimple", []);
                                          if (Grace_isTrue(call8898)) {
                                            setLineNumber(1199);    // compilenode string
                                            var string8899 = new GraceString(".");
                                            var opresult8904 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                            // call case 6: other requests
                                            // call case 4: self request
                                            onSelf = true;
                                            var call8906 = callmethodChecked(this, "receiver", []);
                                            var call8907 = callmethodChecked(call8906, "toGrace(1)", [1], opresult8904);
                                            var string8909 = new GraceString("");
                                            var opresult8911 = callmethodChecked(string8909, "++(1)", [1], call8907);
                                            var opresult8913 = callmethodChecked(opresult8911, "++(1)", [1], string8899);
                                            var_s = opresult8913;
                                            if8894 = GraceDone;
                                          } else {
                                            setLineNumber(1201);    // compilenode string
                                            var string8914 = new GraceString(").");
                                            var opresult8919 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                            // call case 6: other requests
                                            // call case 4: self request
                                            onSelf = true;
                                            var call8921 = callmethodChecked(this, "receiver", []);
                                            var call8922 = callmethodChecked(call8921, "toGrace(1)", [1], opresult8919);
                                            var string8924 = new GraceString("(");
                                            var opresult8926 = callmethodChecked(string8924, "++(1)", [1], call8922);
                                            var opresult8928 = callmethodChecked(opresult8926, "++(1)", [1], string8914);
                                            var_s = opresult8928;
                                            if8894 = GraceDone;
                                          }
                                          if8887 = if8894;
                                        }
                                        setLineNumber(1204);    // compilenode block
                                        var block8930 = new GraceBlock(this, 1204, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block8930.real = function(var_part) {
                                          setLineNumber(1204);    // compilenode identifier
                                          var opresult8934 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                          // call case 6: other requests
                                          var call8935 = callmethodChecked(var_part, "toGrace(1)", [1], opresult8934);
                                          var opresult8938 = callmethodChecked(var_s, "++(1)", [1], call8935);
                                          var_s = opresult8938;
                                          return GraceDone;
                                        };
                                        setLineNumber(1205);    // compilenode block
                                        var block8939 = new GraceBlock(this, 1205, 0);
                                        block8939.real = function() {
                                          var string8940 = new GraceString(" ");
                                          var opresult8943 = callmethodChecked(var_s, "++(1)", [1], string8940);
                                          var_s = opresult8943;
                                          return GraceDone;
                                        };
                                        // call case 6: other requests
                                        setLineNumber(1204);    // compilenode member
                                        // call case 4: self request
                                        onSelf = true;
                                        var call8945 = callmethodChecked(this, "with", []);
                                        var call8946 = callmethodChecked(call8945, "do(1)separatedBy(1)", [1, 1], block8930, block8939);
                                        setLineNumber(1206);    // return value
                                        if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], var_s)))
                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                new GraceString("result of method toGrace(_) does not have " + 
                                                    callmethod(var_String, "asString", [0])._value + "."));
                                        return var_s;
                                      };
                                      func8885.paramTypes = [];
                                      func8885.paramTypes.push([type_Number, "depth"]);
                                      func8885.paramCounts = [1];
                                      obj8570.methods["toGrace(1)"] = func8885;
                                      func8885.definitionLine = 1195;
                                      func8885.definitionModule = "ast";
                                      var func8947 = function(argcv) {    // method asIdentifier
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        setModuleName("ast");
                                        var if8948 = GraceDone;
                                        setLineNumber(1210);    // compilenode member
                                        // call case 4: self request
                                        onSelf = true;
                                        var call8950 = callmethodChecked(this, "scope", []);
                                        var opresult8953 = callmethodChecked(var_fakeSymbolTable, "==(1)", [1], call8950);
                                        if (Grace_isTrue(opresult8953)) {
                                          setLineNumber(1211);    // compilenode string
                                          var string8955 = new GraceString(" when scope was fake");
                                          // call case 4: self request
                                          onSelf = true;
                                          var call8958 = callmethodChecked(this, "pretty(1)", [1], new GraceNum(0));
                                          var string8960 = new GraceString("asIdentifier requested on ");
                                          var opresult8962 = callmethodChecked(string8960, "++(1)", [1], call8958);
                                          var opresult8964 = callmethodChecked(opresult8962, "++(1)", [1], string8955);
                                          // call case 6: other requests
                                          // call case 5: prelude request
                                          var call8966 = callmethodChecked(var_prelude, "ProgrammingError", []);
                                          var call8967 = callmethodChecked(call8966, "raise(1)", [1], opresult8964);
                                          if8948 = call8967;
                                        }
                                        setLineNumber(1213);    // compilenode member
                                        // call case 4: self request
                                        onSelf = true;
                                        var call8970 = callmethodChecked(this, "nameString", []);
                                        // call case 4: self request
                                        onSelf = true;
                                        var call8972 = callmethodChecked(this, "scope", []);
                                        // call case 6: other requests
                                        var call8973 = callmethodChecked(var_identifierNode, "new(2)scope(1)", [2, 1], call8970, GraceFalse, call8972);
                                        var var_resultNode = call8973;
                                        setLineNumber(1214);    // compilenode identifier
                                        // call case 6: other requests
                                        var call8975 = callmethodChecked(var_resultNode, "inRequest:=(1)", [1], GraceTrue);
                                        setLineNumber(1215);    // compilenode member
                                        // call case 4: self request
                                        onSelf = true;
                                        var call8978 = callmethodChecked(this, "line", []);
                                        // call case 6: other requests
                                        var call8979 = callmethodChecked(var_resultNode, "line:=(1)", [1], call8978);
                                        setLineNumber(1216);    // compilenode member
                                        // call case 4: self request
                                        onSelf = true;
                                        var call8982 = callmethodChecked(this, "linePos", []);
                                        // call case 6: other requests
                                        var call8983 = callmethodChecked(var_resultNode, "linePos:=(1)", [1], call8982);
                                        setLineNumber(1217);    // compilenode identifier
                                        return var_resultNode;
                                      };
                                      func8947.paramCounts = [0];
                                      obj8570.methods["asIdentifier"] = func8947;
                                      func8947.definitionLine = 1208;
                                      func8947.definitionModule = "ast";
                                      var func8984 = function(argcv) {    // method asString
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        setModuleName("ast");
                                        setLineNumber(1219);    // compilenode string
                                        var string8985 = new GraceString("");
                                        // call case 6: other requests
                                        // call case 4: self request
                                        onSelf = true;
                                        var call8989 = callmethodChecked(this, "receiver", []);
                                        var call8990 = callmethodChecked(call8989, "pretty(1)", [1], new GraceNum(0));
                                        var string8992 = new GraceString("call ");
                                        var opresult8994 = callmethodChecked(string8992, "++(1)", [1], call8990);
                                        var opresult8996 = callmethodChecked(opresult8994, "++(1)", [1], string8985);
                                        return opresult8996;
                                      };
                                      func8984.paramCounts = [0];
                                      obj8570.methods["asString"] = func8984;
                                      func8984.definitionLine = 1219;
                                      func8984.definitionModule = "ast";
                                      var func8997 = function(argcv) {    // method shallowCopy
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        setModuleName("ast");
                                        setLineNumber(1221);    // compilenode identifier
                                        // call case 6: other requests
                                        // call case 4: self request
                                        onSelf = true;
                                        var call9001 = callmethodChecked(this, "receiver", []);
                                        // call case 4: self request
                                        onSelf = true;
                                        var call9003 = callmethodChecked(this, "with", []);
                                        // call case 6: other requests
                                        var call9004 = callmethodChecked(var_callNode, "new(2)", [2], call9001, call9003);
                                        var call9005 = callmethodChecked(call9004, "shallowCopyFieldsFrom(1)", [1], this);
                                        return call9005;
                                      };
                                      func8997.paramCounts = [0];
                                      obj8570.methods["shallowCopy"] = func8997;
                                      func8997.definitionLine = 1220;
                                      func8997.definitionModule = "ast";
                                      var func9006 = function(argcv) {    // method shallowCopyFieldsFrom(_)
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        var var_other = arguments[curarg];
                                        curarg++;
                                        setModuleName("ast");
                                        setLineNumber(1224);    // compilenode identifier
                                        // call case 1: super request
                                        var call9008 = callmethodsuper(this, "shallowCopyFieldsFrom(1)", [1], var_other);
                                        setLineNumber(1225);    // compilenode member
                                        // call case 6: other requests
                                        var call9011 = callmethodChecked(var_other, "isPattern", []);
                                        // call case 4: self request
                                        onSelf = true;
                                        var call9012 = callmethodChecked(this, "isPattern:=(1)", [1], call9011);
                                        setLineNumber(1226);    // compilenode member
                                        // call case 6: other requests
                                        var call9015 = callmethodChecked(var_other, "isSelfRequest", []);
                                        // call case 4: self request
                                        onSelf = true;
                                        var call9016 = callmethodChecked(this, "isSelfRequest:=(1)", [1], call9015);
                                        setLineNumber(1227);    // compilenode identifier
                                        return this;
                                      };
                                      func9006.paramCounts = [1];
                                      obj8570.methods["shallowCopyFieldsFrom(1)"] = func9006;
                                      func9006.definitionLine = 1223;
                                      func9006.definitionModule = "ast";
                                      var func9017 = function(argcv) {    // method statementName
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        setModuleName("ast");
                                        setLineNumber(1229);    // compilenode string
                                        var string9018 = new GraceString("request");
                                        return string9018;
                                      };
                                      func9017.paramCounts = [0];
                                      obj8570.methods["statementName"] = func9017;
                                      func9017.definitionLine = 1229;
                                      func9017.definitionModule = "ast";
                                      setLineNumber(1094);    // compilenode identifier
                                      // call case 6: other requests
                                      // call case 6: other requests
                                      // call case 3: self.outer request
                                      var call9022 = callmethodChecked(superDepth, "outer", [0]);
                                      var call9023 = callmethodChecked(call9022, "outer", []);
                                      var call9024 = callmethodChecked(call9023, "baseNode$object(1)", [0, 1], this);
                                      obj8570.superobj = call9024;
                                      if (call9024.data) obj8570.data = call9024.data;
                                      if (call9024.hasOwnProperty('_value'))
                                          obj8570._value = call9024._value;
                                      setLineNumber(1095);    // compilenode string
                                      var string9025 = new GraceString("call");
                                      obj8570.data["kind"] = string9025;
                                      var reader_ast_kind9026 = function() {
                                        return this.data["kind"];
                                      };
                                      reader_ast_kind9026.def = true;
                                      obj8570.methods["kind"] = reader_ast_kind9026;
                                      setLineNumber(1096);    // compilenode identifier
                                      obj8570.data["with"] = var_parts;
                                      var reader_ast_with9027 = function() {
                                        return this.data["with"];
                                      };
                                      obj8570.methods["with"] = reader_ast_with9027;
                                      obj8570.data["with"] = var_parts;
                                      var writer_ast_with9027 = function(argcv, o) {
                                        this.data["with"] = o;
                                        return GraceDone;
                                      };
                                      obj8570.methods["with:=(1)"] = writer_ast_with9027;
                                      obj8570.mutable = true;
                                      setLineNumber(1097);    // compilenode identifier
                                      obj8570.data["generics"] = GraceFalse;
                                      var reader_ast_generics9028 = function() {
                                        return this.data["generics"];
                                      };
                                      obj8570.methods["generics"] = reader_ast_generics9028;
                                      obj8570.data["generics"] = GraceFalse;
                                      var writer_ast_generics9028 = function(argcv, o) {
                                        this.data["generics"] = o;
                                        return GraceDone;
                                      };
                                      obj8570.methods["generics:=(1)"] = writer_ast_generics9028;
                                      obj8570.mutable = true;
                                      setLineNumber(1098);    // compilenode identifier
                                      obj8570.data["isPattern"] = GraceFalse;
                                      var reader_ast_isPattern9029 = function() {
                                        return this.data["isPattern"];
                                      };
                                      obj8570.methods["isPattern"] = reader_ast_isPattern9029;
                                      obj8570.data["isPattern"] = GraceFalse;
                                      var writer_ast_isPattern9029 = function(argcv, o) {
                                        this.data["isPattern"] = o;
                                        return GraceDone;
                                      };
                                      obj8570.methods["isPattern:=(1)"] = writer_ast_isPattern9029;
                                      obj8570.mutable = true;
                                      setLineNumber(1099);    // compilenode identifier
                                      obj8570.data["receiver"] = var_receiver__39__;
                                      var reader_ast_receiver9030 = function() {
                                        return this.data["receiver"];
                                      };
                                      obj8570.methods["receiver"] = reader_ast_receiver9030;
                                      obj8570.data["receiver"] = var_receiver__39__;
                                      var writer_ast_receiver9030 = function(argcv, o) {
                                        this.data["receiver"] = o;
                                        return GraceDone;
                                      };
                                      obj8570.methods["receiver:=(1)"] = writer_ast_receiver9030;
                                      obj8570.mutable = true;
                                      setLineNumber(1100);    // compilenode identifier
                                      obj8570.data["isSelfRequest"] = GraceFalse;
                                      var reader_ast_isSelfRequest9031 = function() {
                                        return this.data["isSelfRequest"];
                                      };
                                      obj8570.methods["isSelfRequest"] = reader_ast_isSelfRequest9031;
                                      obj8570.data["isSelfRequest"] = GraceFalse;
                                      var writer_ast_isSelfRequest9031 = function(argcv, o) {
                                        this.data["isSelfRequest"] = o;
                                        return GraceDone;
                                      };
                                      obj8570.methods["isSelfRequest:=(1)"] = writer_ast_isSelfRequest9031;
                                      obj8570.mutable = true;
                                      superDepth = origSuperDepth;
                                    };
                                    obj_init_8570.apply(inheritingObject, []);
                                    return obj8570;
                                    };
                                    obj8099.methods["new(2)$object(1)"] = func8569;
                                  superDepth = origSuperDepth;
                                };
                                obj_init_8099.apply(obj8099, []);
                                var var_callNode = obj8099;
                                setLineNumber(1);    // compilenode method
                                var func9032 = function(argcv) {    // method callNode
                                  var returnTarget = invocationCount;
                                  invocationCount++;
                                  var curarg = 1;
                                  setModuleName("ast");
                                  // callNode is a simple accessor - elide try ... catch
                                  setLineNumber(1083);    // compilenode identifier
                                  return var_callNode;
                                };
                                func9032.paramCounts = [0];
                                this.methods["callNode"] = func9032;
                                func9032.definitionLine = 1;
                                func9032.definitionModule = "ast";
                                this.methods["callNode"].debug = "def";
                                setLineNumber(1232);    // compilenode object
                                var obj9033 = Grace_allocObject(GraceObject, "moduleNode");
                                obj9033.definitionModule = "ast";
                                obj9033.definitionLine = 1232;
                                obj9033.outer = this;
                                var reader_ast_outer9034 = function() {
                                  return this.outer;
                                };
                                obj9033.methods["outer"] = reader_ast_outer9034;
                                var obj_init_9033 = function() {
                                  var origSuperDepth = superDepth;
                                  superDepth = obj9033;
                                  var func9035 = function(argcv) {    // method body(_)named(_)scope(_)
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    var var_b = arguments[curarg];
                                    curarg++;
                                    var var_n = arguments[curarg];
                                    curarg++;
                                    var var_s = arguments[curarg];
                                    curarg++;
                                    setModuleName("ast");
                                    setLineNumber(1234);    // compilenode identifier
                                    // call case 4: self request
                                    onSelf = true;
                                    var call9037 = callmethodChecked(this, "body(1)", [1], var_b);
                                    var var_result = call9037;
                                    setLineNumber(1235);    // compilenode identifier
                                    // call case 6: other requests
                                    var call9039 = callmethodChecked(var_result, "name:=(1)", [1], var_n);
                                    setLineNumber(1236);    // compilenode identifier
                                    // call case 6: other requests
                                    var call9041 = callmethodChecked(var_result, "scope:=(1)", [1], var_s);
                                    setLineNumber(1237);    // compilenode identifier
                                    return var_result;
                                  };
                                  func9035.paramCounts = [1, 1, 1];
                                  obj9033.methods["body(1)named(1)scope(1)"] = func9035;
                                  func9035.definitionLine = 1233;
                                  func9035.definitionModule = "ast";
                                  var func9042 = function(argcv) {    // method body(_)named(_)
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    var var_b = arguments[curarg];
                                    curarg++;
                                    var var_n = arguments[curarg];
                                    curarg++;
                                    setModuleName("ast");
                                    setLineNumber(1240);    // compilenode identifier
                                    // call case 4: self request
                                    onSelf = true;
                                    var call9044 = callmethodChecked(this, "body(1)", [1], var_b);
                                    var var_result = call9044;
                                    setLineNumber(1241);    // compilenode identifier
                                    // call case 6: other requests
                                    var call9046 = callmethodChecked(var_result, "name:=(1)", [1], var_n);
                                    setLineNumber(1242);    // compilenode identifier
                                    return var_result;
                                  };
                                  func9042.paramCounts = [1, 1];
                                  obj9033.methods["body(1)named(1)"] = func9042;
                                  func9042.definitionLine = 1239;
                                  func9042.definitionModule = "ast";
                                  var func9047 = function(argcv) {    // method body(_)
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    var var_b = arguments[curarg];
                                    curarg++;
                                    setModuleName("ast");
                                    setLineNumber(1244);    // compilenode object
                                    var obj9048 = Grace_allocObject(null, "moduleNode.body(_)");
                                    obj9048.definitionModule = "ast";
                                    obj9048.definitionLine = 1244;
                                    obj9048.outer = this;
                                    var reader_ast_outer9049 = function() {
                                      return this.outer;
                                    };
                                    obj9048.methods["outer"] = reader_ast_outer9049;
                                    var obj_init_9048 = function() {
                                      var origSuperDepth = superDepth;
                                      superDepth = obj9048;
                                      var func9050 = function(argcv) {    // method isModule
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        setModuleName("ast");
                                        // isModule is a simple accessor - elide try ... catch
                                        setLineNumber(1252);    // compilenode identifier
                                        return GraceTrue;
                                      };
                                      func9050.paramCounts = [0];
                                      obj9048.methods["isModule"] = func9050;
                                      func9050.definitionLine = 1252;
                                      func9050.definitionModule = "ast";
                                      var func9051 = function(argcv) {    // method returnsObject
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        setModuleName("ast");
                                        // returnsObject is a simple accessor - elide try ... catch
                                        setLineNumber(1253);    // compilenode identifier
                                        return GraceFalse;
                                      };
                                      func9051.paramCounts = [0];
                                      obj9048.methods["returnsObject"] = func9051;
                                      func9051.definitionLine = 1253;
                                      func9051.definitionModule = "ast";
                                      var func9052 = function(argcv) {    // method externalsDo(_)
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        var var_action = arguments[curarg];
                                        curarg++;
                                        setModuleName("ast");
                                        setLineNumber(1255);    // compilenode block
                                        var block9054 = new GraceBlock(this, 1255, 1);
                                        setLineNumber(1);    // compilenode identifier
                                        block9054.real = function(var_o) {
                                          var if9055 = GraceDone;
                                          setLineNumber(1256);    // compilenode member
                                          // call case 6: other requests
                                          var call9057 = callmethodChecked(var_o, "isExternal", []);
                                          if (Grace_isTrue(call9057)) {
                                            // call case 6: other requests
                                            var call9059 = callmethodChecked(var_action, "apply(1)", [1], var_o);
                                            if9055 = call9059;
                                          }
                                          return if9055;
                                        };
                                        // call case 6: other requests
                                        setLineNumber(1255);    // compilenode member
                                        // call case 4: self request
                                        onSelf = true;
                                        var call9061 = callmethodChecked(this, "value", []);
                                        var call9062 = callmethodChecked(call9061, "do(1)", [1], block9054);
                                        return call9062;
                                      };
                                      func9052.paramCounts = [1];
                                      obj9048.methods["externalsDo(1)"] = func9052;
                                      func9052.definitionLine = 1254;
                                      func9052.definitionModule = "ast";
                                      var func9063 = function(argcv) {    // method accept(_)from(_)
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        var var_visitor = arguments[curarg];
                                        curarg++;
                                        var var_as = arguments[curarg];
                                        curarg++;
                                        // Start argument checking
                                        curarg = 1;
                                        setLineNumber(1259);    // compilenode identifier
                                        if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                    callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                        curarg++;
                                        curarg++;
                                        // End argument checking
                                        setModuleName("ast");
                                        var if9064 = GraceDone;
                                        setLineNumber(1260);    // compilenode identifier
                                        // call case 6: other requests
                                        var call9066 = callmethodChecked(var_visitor, "visitModule(1)up(1)", [1, 1], this, var_as);
                                        if (Grace_isTrue(call9066)) {
                                          setLineNumber(1261);    // compilenode identifier
                                          // call case 6: other requests
                                          var call9068 = callmethodChecked(var_as, "extend(1)", [1], this);
                                          var var_newChain = call9068;
                                          var if9069 = GraceDone;
                                          setLineNumber(1262);    // compilenode member
                                          // call case 4: self request
                                          onSelf = true;
                                          var call9071 = callmethodChecked(this, "superclass", []);
                                          var opresult9074 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call9071);
                                          if (Grace_isTrue(opresult9074)) {
                                            setLineNumber(1263);    // compilenode identifier
                                            // call case 6: other requests
                                            // call case 4: self request
                                            onSelf = true;
                                            var call9077 = callmethodChecked(this, "superclass", []);
                                            var call9078 = callmethodChecked(call9077, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                            if9069 = call9078;
                                          }
                                          setLineNumber(1265);    // compilenode member
                                          // call case 4: self request
                                          onSelf = true;
                                          var call9081 = callmethodChecked(this, "value", []);
                                          var block9082 = new GraceBlock(this, 1265, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block9082.real = function(var_x) {
                                            setLineNumber(1266);    // compilenode identifier
                                            // call case 6: other requests
                                            var call9084 = callmethodChecked(var_x, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                            return call9084;
                                          };
                                          // call case 5: prelude request
                                          var call9085 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call9081, block9082);
                                          if9064 = call9085;
                                        }
                                        return if9064;
                                      };
                                      func9063.paramTypes = [];
                                      func9063.paramTypes.push([]);
                                      func9063.paramTypes.push([]);
                                      func9063.paramCounts = [1, 1];
                                      obj9048.methods["accept(1)from(1)"] = func9063;
                                      func9063.definitionLine = 1259;
                                      func9063.definitionModule = "ast";
                                      var func9086 = function(argcv) {    // method shallowCopy
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        setModuleName("ast");
                                        setLineNumber(1271);    // compilenode identifier
                                        // call case 6: other requests
                                        // call case 6: other requests
                                        var call9089 = callmethodChecked(var_moduleNode, "body(1)", [1], var_emptySeq);
                                        var call9090 = callmethodChecked(call9089, "shallowCopyFieldsFrom(1)", [1], this);
                                        return call9090;
                                      };
                                      func9086.paramCounts = [0];
                                      obj9048.methods["shallowCopy"] = func9086;
                                      func9086.definitionLine = 1270;
                                      func9086.definitionModule = "ast";
                                      var func9091 = function(argcv) {    // method shallowCopyFieldsFrom(_)
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        var var_other = arguments[curarg];
                                        curarg++;
                                        setModuleName("ast");
                                        setLineNumber(1274);    // compilenode identifier
                                        // call case 1: super request
                                        var call9093 = callmethodsuper(this, "shallowCopyFieldsFrom(1)", [1], var_other);
                                        setLineNumber(1275);    // compilenode member
                                        // call case 6: other requests
                                        var call9096 = callmethodChecked(var_other, "imports", []);
                                        // call case 4: self request
                                        onSelf = true;
                                        var call9097 = callmethodChecked(this, "imports:=(1)", [1], call9096);
                                        setLineNumber(1276);    // compilenode identifier
                                        return this;
                                      };
                                      func9091.paramCounts = [1];
                                      obj9048.methods["shallowCopyFieldsFrom(1)"] = func9091;
                                      func9091.definitionLine = 1273;
                                      func9091.definitionModule = "ast";
                                      setLineNumber(1245);    // compilenode identifier
                                      // call case 6: other requests
                                      var call9099 = callmethodChecked(var_objectNode, "new(2)$object(1)", [2, 1], var_b, GraceFalse, this);
                                      obj9048.superobj = call9099;
                                      if (call9099.data) obj9048.data = call9099.data;
                                      if (call9099.hasOwnProperty('_value'))
                                          obj9048._value = call9099._value;
                                      setLineNumber(1246);    // compilenode string
                                      var string9100 = new GraceString("module");
                                      obj9048.data["kind"] = string9100;
                                      var reader_ast_kind9101 = function() {
                                        return this.data["kind"];
                                      };
                                      reader_ast_kind9101.def = true;
                                      obj9048.methods["kind"] = reader_ast_kind9101;
                                      setLineNumber(1247);    // compilenode member
                                      // call case 6: other requests
                                      var call9103 = callmethodChecked(var_util, "lines", []);
                                      obj9048.data["sourceLines"] = call9103;
                                      var reader_ast_sourceLines9104 = function() {
                                        return this.data["sourceLines"];
                                      };
                                      reader_ast_sourceLines9104.def = true;
                                      reader_ast_sourceLines9104.confidential = true;
                                      obj9048.methods["sourceLines"] = reader_ast_sourceLines9104;
                                      setLineNumber(1248);    // compilenode num
                                      // call case 4: self request
                                      onSelf = true;
                                      var call9106 = callmethodChecked(this, "line:=(1)", [1], new GraceNum(0));
                                      setLineNumber(1249);    // compilenode num
                                      // call case 4: self request
                                      onSelf = true;
                                      var call9108 = callmethodChecked(this, "linePos:=(1)", [1], new GraceNum(0));
                                      setLineNumber(1250);    // compilenode array
                                      var array9109 = new PrimitiveGraceList([]);
                                      obj9048.data["imports"] = array9109;
                                      var reader_ast_imports9110 = function() {
                                        return this.data["imports"];
                                      };
                                      obj9048.methods["imports"] = reader_ast_imports9110;
                                      obj9048.data["imports"] = array9109;
                                      var writer_ast_imports9110 = function(argcv, o) {
                                        this.data["imports"] = o;
                                        return GraceDone;
                                      };
                                      obj9048.methods["imports:=(1)"] = writer_ast_imports9110;
                                      obj9048.mutable = true;
                                      superDepth = origSuperDepth;
                                    };
                                    obj_init_9048.apply(obj9048, []);
                                    return obj9048;
                                  };
                                  func9047.paramCounts = [1];
                                  obj9033.methods["body(1)"] = func9047;
                                  func9047.definitionLine = 1244;
                                  func9047.definitionModule = "ast";
                                    var func9111 = function(argcv) {    // method body(_)$object(_)
                                      var curarg = 1;
                                      var var_b = arguments[curarg];
                                      curarg++;
                                      var inheritingObject = arguments[curarg++];
                                      // Start argument processing
                                      curarg = 1;
                                      curarg++;
                                      // End argument processing
                                      setModuleName("ast");
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var obj9112 = Grace_allocObject(null, "body(1)");
                                      obj9112.definitionModule = "ast";
                                      obj9112.definitionLine = 1244;
                                      var inho9112 = inheritingObject;
                                      while (inho9112.superobj) inho9112 = inho9112.superobj;
                                      inho9112.superobj = obj9112;
                                      obj9112.data = inheritingObject.data;
                                      if (inheritingObject.hasOwnProperty('_value'))
                                        obj9112._value = inheritingObject._value;
                                      obj9112.outer = this;
                                      var reader_ast_outer9113 = function() {
                                        return this.outer;
                                      };
                                      obj9112.methods["outer"] = reader_ast_outer9113;
                                      var obj_init_9112 = function() {
                                        var origSuperDepth = superDepth;
                                        superDepth = obj9112;
                                        var func9114 = function(argcv) {    // method isModule
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          setModuleName("ast");
                                          // isModule is a simple accessor - elide try ... catch
                                          setLineNumber(1252);    // compilenode identifier
                                          return GraceTrue;
                                        };
                                        func9114.paramCounts = [0];
                                        obj9112.methods["isModule"] = func9114;
                                        func9114.definitionLine = 1252;
                                        func9114.definitionModule = "ast";
                                        var func9115 = function(argcv) {    // method returnsObject
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          setModuleName("ast");
                                          // returnsObject is a simple accessor - elide try ... catch
                                          setLineNumber(1253);    // compilenode identifier
                                          return GraceFalse;
                                        };
                                        func9115.paramCounts = [0];
                                        obj9112.methods["returnsObject"] = func9115;
                                        func9115.definitionLine = 1253;
                                        func9115.definitionModule = "ast";
                                        var func9116 = function(argcv) {    // method externalsDo(_)
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          var var_action = arguments[curarg];
                                          curarg++;
                                          setModuleName("ast");
                                          setLineNumber(1255);    // compilenode block
                                          var block9118 = new GraceBlock(this, 1255, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block9118.real = function(var_o) {
                                            var if9119 = GraceDone;
                                            setLineNumber(1256);    // compilenode member
                                            // call case 6: other requests
                                            var call9121 = callmethodChecked(var_o, "isExternal", []);
                                            if (Grace_isTrue(call9121)) {
                                              // call case 6: other requests
                                              var call9123 = callmethodChecked(var_action, "apply(1)", [1], var_o);
                                              if9119 = call9123;
                                            }
                                            return if9119;
                                          };
                                          // call case 6: other requests
                                          setLineNumber(1255);    // compilenode member
                                          // call case 4: self request
                                          onSelf = true;
                                          var call9125 = callmethodChecked(this, "value", []);
                                          var call9126 = callmethodChecked(call9125, "do(1)", [1], block9118);
                                          return call9126;
                                        };
                                        func9116.paramCounts = [1];
                                        obj9112.methods["externalsDo(1)"] = func9116;
                                        func9116.definitionLine = 1254;
                                        func9116.definitionModule = "ast";
                                        var func9127 = function(argcv) {    // method accept(_)from(_)
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          var var_visitor = arguments[curarg];
                                          curarg++;
                                          var var_as = arguments[curarg];
                                          curarg++;
                                          // Start argument checking
                                          curarg = 1;
                                          setLineNumber(1259);    // compilenode identifier
                                          if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                  new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                      callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                          curarg++;
                                          curarg++;
                                          // End argument checking
                                          setModuleName("ast");
                                          var if9128 = GraceDone;
                                          setLineNumber(1260);    // compilenode identifier
                                          // call case 6: other requests
                                          var call9130 = callmethodChecked(var_visitor, "visitModule(1)up(1)", [1, 1], this, var_as);
                                          if (Grace_isTrue(call9130)) {
                                            setLineNumber(1261);    // compilenode identifier
                                            // call case 6: other requests
                                            var call9132 = callmethodChecked(var_as, "extend(1)", [1], this);
                                            var var_newChain = call9132;
                                            var if9133 = GraceDone;
                                            setLineNumber(1262);    // compilenode member
                                            // call case 4: self request
                                            onSelf = true;
                                            var call9135 = callmethodChecked(this, "superclass", []);
                                            var opresult9138 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call9135);
                                            if (Grace_isTrue(opresult9138)) {
                                              setLineNumber(1263);    // compilenode identifier
                                              // call case 6: other requests
                                              // call case 4: self request
                                              onSelf = true;
                                              var call9141 = callmethodChecked(this, "superclass", []);
                                              var call9142 = callmethodChecked(call9141, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                              if9133 = call9142;
                                            }
                                            setLineNumber(1265);    // compilenode member
                                            // call case 4: self request
                                            onSelf = true;
                                            var call9145 = callmethodChecked(this, "value", []);
                                            var block9146 = new GraceBlock(this, 1265, 1);
                                            setLineNumber(1);    // compilenode identifier
                                            block9146.real = function(var_x) {
                                              setLineNumber(1266);    // compilenode identifier
                                              // call case 6: other requests
                                              var call9148 = callmethodChecked(var_x, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                              return call9148;
                                            };
                                            // call case 5: prelude request
                                            var call9149 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call9145, block9146);
                                            if9128 = call9149;
                                          }
                                          return if9128;
                                        };
                                        func9127.paramTypes = [];
                                        func9127.paramTypes.push([]);
                                        func9127.paramTypes.push([]);
                                        func9127.paramCounts = [1, 1];
                                        obj9112.methods["accept(1)from(1)"] = func9127;
                                        func9127.definitionLine = 1259;
                                        func9127.definitionModule = "ast";
                                        var func9150 = function(argcv) {    // method shallowCopy
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          setModuleName("ast");
                                          setLineNumber(1271);    // compilenode identifier
                                          // call case 6: other requests
                                          // call case 6: other requests
                                          var call9153 = callmethodChecked(var_moduleNode, "body(1)", [1], var_emptySeq);
                                          var call9154 = callmethodChecked(call9153, "shallowCopyFieldsFrom(1)", [1], this);
                                          return call9154;
                                        };
                                        func9150.paramCounts = [0];
                                        obj9112.methods["shallowCopy"] = func9150;
                                        func9150.definitionLine = 1270;
                                        func9150.definitionModule = "ast";
                                        var func9155 = function(argcv) {    // method shallowCopyFieldsFrom(_)
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          var var_other = arguments[curarg];
                                          curarg++;
                                          setModuleName("ast");
                                          setLineNumber(1274);    // compilenode identifier
                                          // call case 1: super request
                                          var call9157 = callmethodsuper(this, "shallowCopyFieldsFrom(1)", [1], var_other);
                                          setLineNumber(1275);    // compilenode member
                                          // call case 6: other requests
                                          var call9160 = callmethodChecked(var_other, "imports", []);
                                          // call case 4: self request
                                          onSelf = true;
                                          var call9161 = callmethodChecked(this, "imports:=(1)", [1], call9160);
                                          setLineNumber(1276);    // compilenode identifier
                                          return this;
                                        };
                                        func9155.paramCounts = [1];
                                        obj9112.methods["shallowCopyFieldsFrom(1)"] = func9155;
                                        func9155.definitionLine = 1273;
                                        func9155.definitionModule = "ast";
                                        setLineNumber(1245);    // compilenode identifier
                                        // call case 6: other requests
                                        var call9163 = callmethodChecked(var_objectNode, "new(2)$object(1)", [2, 1], var_b, GraceFalse, this);
                                        obj9112.superobj = call9163;
                                        if (call9163.data) obj9112.data = call9163.data;
                                        if (call9163.hasOwnProperty('_value'))
                                            obj9112._value = call9163._value;
                                        setLineNumber(1246);    // compilenode string
                                        var string9164 = new GraceString("module");
                                        obj9112.data["kind"] = string9164;
                                        var reader_ast_kind9165 = function() {
                                          return this.data["kind"];
                                        };
                                        reader_ast_kind9165.def = true;
                                        obj9112.methods["kind"] = reader_ast_kind9165;
                                        setLineNumber(1247);    // compilenode member
                                        // call case 6: other requests
                                        var call9167 = callmethodChecked(var_util, "lines", []);
                                        obj9112.data["sourceLines"] = call9167;
                                        var reader_ast_sourceLines9168 = function() {
                                          return this.data["sourceLines"];
                                        };
                                        reader_ast_sourceLines9168.def = true;
                                        reader_ast_sourceLines9168.confidential = true;
                                        obj9112.methods["sourceLines"] = reader_ast_sourceLines9168;
                                        setLineNumber(1248);    // compilenode num
                                        // call case 4: self request
                                        onSelf = true;
                                        var call9170 = callmethodChecked(this, "line:=(1)", [1], new GraceNum(0));
                                        setLineNumber(1249);    // compilenode num
                                        // call case 4: self request
                                        onSelf = true;
                                        var call9172 = callmethodChecked(this, "linePos:=(1)", [1], new GraceNum(0));
                                        setLineNumber(1250);    // compilenode array
                                        var array9173 = new PrimitiveGraceList([]);
                                        obj9112.data["imports"] = array9173;
                                        var reader_ast_imports9174 = function() {
                                          return this.data["imports"];
                                        };
                                        obj9112.methods["imports"] = reader_ast_imports9174;
                                        obj9112.data["imports"] = array9173;
                                        var writer_ast_imports9174 = function(argcv, o) {
                                          this.data["imports"] = o;
                                          return GraceDone;
                                        };
                                        obj9112.methods["imports:=(1)"] = writer_ast_imports9174;
                                        obj9112.mutable = true;
                                        superDepth = origSuperDepth;
                                      };
                                      obj_init_9112.apply(inheritingObject, []);
                                      return obj9112;
                                      };
                                      obj9033.methods["body(1)$object(1)"] = func9111;
                                    superDepth = origSuperDepth;
                                  };
                                  obj_init_9033.apply(obj9033, []);
                                  var var_moduleNode = obj9033;
                                  setLineNumber(1);    // compilenode method
                                  var func9175 = function(argcv) {    // method moduleNode
                                    var returnTarget = invocationCount;
                                    invocationCount++;
                                    var curarg = 1;
                                    setModuleName("ast");
                                    // moduleNode is a simple accessor - elide try ... catch
                                    setLineNumber(1232);    // compilenode identifier
                                    return var_moduleNode;
                                  };
                                  func9175.paramCounts = [0];
                                  this.methods["moduleNode"] = func9175;
                                  func9175.definitionLine = 1;
                                  func9175.definitionModule = "ast";
                                  this.methods["moduleNode"].debug = "def";
                                  setLineNumber(1280);    // compilenode object
                                  var obj9176 = Grace_allocObject(GraceObject, "objectNode");
                                  obj9176.definitionModule = "ast";
                                  obj9176.definitionLine = 1280;
                                  obj9176.outer = this;
                                  var reader_ast_outer9177 = function() {
                                    return this.outer;
                                  };
                                  obj9176.methods["outer"] = reader_ast_outer9177;
                                  var obj_init_9176 = function() {
                                    var origSuperDepth = superDepth;
                                    superDepth = obj9176;
                                    var func9178 = function(argcv) {    // method body(_)named(_)scope(_)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_b = arguments[curarg];
                                      curarg++;
                                      var var_n = arguments[curarg];
                                      curarg++;
                                      var var_s = arguments[curarg];
                                      curarg++;
                                      setModuleName("ast");
                                      setLineNumber(1282);    // compilenode identifier
                                      // call case 4: self request
                                      onSelf = true;
                                      var call9180 = callmethodChecked(this, "new(2)", [2], var_b, GraceFalse);
                                      var var_result = call9180;
                                      setLineNumber(1283);    // compilenode identifier
                                      // call case 6: other requests
                                      var call9182 = callmethodChecked(var_result, "name:=(1)", [1], var_n);
                                      setLineNumber(1284);    // compilenode identifier
                                      // call case 6: other requests
                                      var call9184 = callmethodChecked(var_result, "scope:=(1)", [1], var_s);
                                      setLineNumber(1285);    // compilenode identifier
                                      return var_result;
                                    };
                                    func9178.paramCounts = [1, 1, 1];
                                    obj9176.methods["body(1)named(1)scope(1)"] = func9178;
                                    func9178.definitionLine = 1281;
                                    func9178.definitionModule = "ast";
                                    var func9185 = function(argcv) {    // method body(_)named(_)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_b = arguments[curarg];
                                      curarg++;
                                      var var_n = arguments[curarg];
                                      curarg++;
                                      setModuleName("ast");
                                      setLineNumber(1288);    // compilenode identifier
                                      // call case 4: self request
                                      onSelf = true;
                                      var call9187 = callmethodChecked(this, "body(1)named(1)scope(1)", [1, 1, 1], var_b, var_n, var_fakeSymbolTable);
                                      return call9187;
                                    };
                                    func9185.paramCounts = [1, 1];
                                    obj9176.methods["body(1)named(1)"] = func9185;
                                    func9185.definitionLine = 1287;
                                    func9185.definitionModule = "ast";
                                    var func9188 = function(argcv) {    // method new(_,_)
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      var var_b = arguments[curarg];
                                      curarg++;
                                      var var_superclass__39__ = arguments[curarg];
                                      curarg++;
                                      setModuleName("ast");
                                      setLineNumber(1290);    // compilenode object
                                      var obj9189 = Grace_allocObject(null, "objectNode.new(_,_)");
                                      obj9189.definitionModule = "ast";
                                      obj9189.definitionLine = 1290;
                                      obj9189.outer = this;
                                      var reader_ast_outer9190 = function() {
                                        return this.outer;
                                      };
                                      obj9189.methods["outer"] = reader_ast_outer9190;
                                      var obj_init_9189 = function() {
                                        var origSuperDepth = superDepth;
                                        superDepth = obj9189;
                                        var func9191 = function(argcv) {    // method description
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          setModuleName("ast");
                                          var if9192 = GraceDone;
                                          setLineNumber(1303);    // compilenode member
                                          // call case 4: self request
                                          onSelf = true;
                                          var call9194 = callmethodChecked(this, "isTrait", []);
                                          if (Grace_isTrue(call9194)) {
                                            setLineNumber(1304);    // compilenode string
                                            var string9195 = new GraceString(" (trait)");
                                            // call case 4: self request
                                            onSelf = true;
                                            var call9198 = callmethodChecked(this, "kind", []);
                                            var string9200 = new GraceString("");
                                            var opresult9202 = callmethodChecked(string9200, "++(1)", [1], call9198);
                                            var opresult9204 = callmethodChecked(opresult9202, "++(1)", [1], string9195);
                                            if9192 = opresult9204;
                                          } else {
                                            var if9205 = GraceDone;
                                            setLineNumber(1305);    // compilenode member
                                            // call case 4: self request
                                            onSelf = true;
                                            var call9207 = callmethodChecked(this, "inClass", []);
                                            if (Grace_isTrue(call9207)) {
                                              setLineNumber(1306);    // compilenode string
                                              var string9208 = new GraceString(" (class)");
                                              // call case 4: self request
                                              onSelf = true;
                                              var call9211 = callmethodChecked(this, "kind", []);
                                              var string9213 = new GraceString("");
                                              var opresult9215 = callmethodChecked(string9213, "++(1)", [1], call9211);
                                              var opresult9217 = callmethodChecked(opresult9215, "++(1)", [1], string9208);
                                              if9205 = opresult9217;
                                            } else {
                                              setLineNumber(1308);    // compilenode member
                                              // call case 4: self request
                                              onSelf = true;
                                              var call9219 = callmethodChecked(this, "kind", []);
                                              if9205 = call9219;
                                            }
                                            if9192 = if9205;
                                          }
                                          setLineNumber(1303);    // return value
                                          if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], if9192)))
                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                  new GraceString("result of method description does not have " + 
                                                      callmethod(var_String, "asString", [0])._value + "."));
                                          return if9192;
                                        };
                                        func9191.paramCounts = [0];
                                        obj9189.methods["description"] = func9191;
                                        func9191.definitionLine = 1302;
                                        func9191.definitionModule = "ast";
                                        var func9220 = function(argcv) {    // method isTrait
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          setModuleName("ast");
                                          var if9221 = GraceDone;
                                          setLineNumber(1314);    // compilenode member
                                          // call case 4: self request
                                          onSelf = true;
                                          var call9223 = callmethodChecked(this, "inTrait", []);
                                          if (Grace_isTrue(call9223)) {
                                            return GraceTrue;
                                          }
                                          var if9224 = GraceDone;
                                          setLineNumber(1315);    // compilenode member
                                          // call case 4: self request
                                          onSelf = true;
                                          var call9226 = callmethodChecked(this, "superclass", []);
                                          var opresult9229 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call9226);
                                          if (Grace_isTrue(opresult9229)) {
                                            return GraceFalse;
                                          }
                                          setLineNumber(1316);    // compilenode block
                                          var block9231 = new GraceBlock(this, 1316, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block9231.real = function(var_each) {
                                            var if9232 = GraceDone;
                                            setLineNumber(1317);    // compilenode member
                                            // call case 6: other requests
                                            // call case 6: other requests
                                            var call9235 = callmethodChecked(var_each, "isLegalInTrait", []);
                                            var call9236 = callmethodChecked(call9235, "not", []);
                                            if (Grace_isTrue(call9236)) {
                                              throw new ReturnException(GraceFalse, returnTarget);
                                            }
                                            return if9232;
                                          };
                                          // call case 6: other requests
                                          setLineNumber(1316);    // compilenode member
                                          // call case 4: self request
                                          onSelf = true;
                                          var call9238 = callmethodChecked(this, "value", []);
                                          var call9239 = callmethodChecked(call9238, "do(1)", [1], block9231);
                                          setLineNumber(1319);    // compilenode identifier
                                          return GraceTrue;
                                        };
                                        func9220.paramCounts = [0];
                                        obj9189.methods["isTrait"] = func9220;
                                        func9220.definitionLine = 1311;
                                        func9220.definitionModule = "ast";
                                        var func9240 = function(argcv) {    // method localNames
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          setModuleName("ast");
                                          var if9241 = GraceDone;
                                          setLineNumber(1325);    // compilenode member
                                          // call case 4: self request
                                          onSelf = true;
                                          var call9243 = callmethodChecked(this, "myLocalNames", []);
                                          var opresult9246 = callmethodChecked(GraceFalse, "==(1)", [1], call9243);
                                          if (Grace_isTrue(opresult9246)) {
                                            setLineNumber(1326);    // compilenode member
                                            // call case 5: prelude request
                                            var call9249 = callmethodChecked(var_prelude, "emptySet", []);
                                            // call case 4: self request
                                            onSelf = true;
                                            var call9250 = callmethodChecked(this, "myLocalNames:=(1)", [1], call9249);
                                            setLineNumber(1327);    // compilenode block
                                            var block9252 = new GraceBlock(this, 1327, 1);
                                            setLineNumber(1);    // compilenode identifier
                                            block9252.real = function(var_node) {
                                              var if9253 = GraceDone;
                                              setLineNumber(1328);    // compilenode member
                                              // call case 6: other requests
                                              var call9255 = callmethodChecked(var_node, "isMethod", []);
                                              // call case 6: other requests
                                              var call9258 = callmethodChecked(var_node, "isFieldDec", []);
                                              var opresult9260 = callmethodChecked(call9258, "||(1)", [1], call9255);
                                              if (Grace_isTrue(opresult9260)) {
                                                setLineNumber(1329);    // compilenode member
                                                // call case 6: other requests
                                                var call9263 = callmethodChecked(var_node, "nameString", []);
                                                // call case 6: other requests
                                                // call case 4: self request
                                                onSelf = true;
                                                var call9265 = callmethodChecked(this, "myLocalNames", []);
                                                var call9266 = callmethodChecked(call9265, "add(1)", [1], call9263);
                                                if9253 = call9266;
                                              }
                                              return if9253;
                                            };
                                            // call case 6: other requests
                                            setLineNumber(1327);    // compilenode member
                                            // call case 4: self request
                                            onSelf = true;
                                            var call9268 = callmethodChecked(this, "value", []);
                                            var call9269 = callmethodChecked(call9268, "do(1)", [1], block9252);
                                            if9241 = call9269;
                                          }
                                          setLineNumber(1333);    // compilenode member
                                          // call case 4: self request
                                          onSelf = true;
                                          var call9271 = callmethodChecked(this, "myLocalNames", []);
                                          setLineNumber(1322);    // compilenode member
                                          // call case 5: prelude request
                                          var call9273 = callmethodChecked(var_prelude, "Set", []);
                                          setLineNumber(1333);    // return value
                                          if (!Grace_isTrue(callmethod(call9273, "match(1)", [1], call9271)))
                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                  new GraceString("result of method localNames does not have " + 
                                                      callmethod(call9273, "asString", [0])._value + "."));
                                          return call9271;
                                        };
                                        func9240.paramCounts = [0];
                                        obj9189.methods["localNames"] = func9240;
                                        func9240.definitionLine = 1322;
                                        func9240.definitionModule = "ast";
                                        var func9274 = function(argcv) {    // method parentsDo(_)
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          var var_action = arguments[curarg];
                                          curarg++;
                                          setModuleName("ast");
                                          var if9275 = GraceDone;
                                          setLineNumber(1339);    // compilenode member
                                          // call case 4: self request
                                          onSelf = true;
                                          var call9277 = callmethodChecked(this, "superclass", []);
                                          var opresult9280 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call9277);
                                          if (Grace_isTrue(opresult9280)) {
                                            // call case 4: self request
                                            onSelf = true;
                                            var call9283 = callmethodChecked(this, "superclass", []);
                                            // call case 6: other requests
                                            var call9284 = callmethodChecked(var_action, "apply(1)", [1], call9283);
                                            if9275 = call9284;
                                          }
                                          setLineNumber(1340);    // compilenode block
                                          var block9286 = new GraceBlock(this, 1340, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block9286.real = function(var_t) {
                                            setLineNumber(1340);    // compilenode identifier
                                            // call case 6: other requests
                                            var call9288 = callmethodChecked(var_action, "apply(1)", [1], var_t);
                                            return call9288;
                                          };
                                          // call case 6: other requests
                                          // call case 4: self request
                                          onSelf = true;
                                          var call9290 = callmethodChecked(this, "usedTraits", []);
                                          var call9291 = callmethodChecked(call9290, "do(1)", [1], block9286);
                                          return call9291;
                                        };
                                        func9274.paramCounts = [1];
                                        obj9189.methods["parentsDo(1)"] = func9274;
                                        func9274.definitionLine = 1336;
                                        func9274.definitionModule = "ast";
                                        var func9292 = function(argcv) {    // method methodsDo(_)
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          var var_action = arguments[curarg];
                                          curarg++;
                                          setModuleName("ast");
                                          setLineNumber(1346);    // compilenode block
                                          var block9294 = new GraceBlock(this, 1346, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block9294.real = function(var_o) {
                                            var if9295 = GraceDone;
                                            setLineNumber(1347);    // compilenode member
                                            // call case 6: other requests
                                            var call9297 = callmethodChecked(var_o, "isMethod", []);
                                            if (Grace_isTrue(call9297)) {
                                              // call case 6: other requests
                                              var call9299 = callmethodChecked(var_action, "apply(1)", [1], var_o);
                                              if9295 = call9299;
                                            }
                                            return if9295;
                                          };
                                          // call case 6: other requests
                                          setLineNumber(1346);    // compilenode member
                                          // call case 4: self request
                                          onSelf = true;
                                          var call9301 = callmethodChecked(this, "value", []);
                                          var call9302 = callmethodChecked(call9301, "do(1)", [1], block9294);
                                          return call9302;
                                        };
                                        func9292.paramCounts = [1];
                                        obj9189.methods["methodsDo(1)"] = func9292;
                                        func9292.definitionLine = 1343;
                                        func9292.definitionModule = "ast";
                                        var func9303 = function(argcv) {    // method executableComponentsDo(_)
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          var var_action = arguments[curarg];
                                          curarg++;
                                          setModuleName("ast");
                                          setLineNumber(1354);    // compilenode block
                                          var block9305 = new GraceBlock(this, 1354, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block9305.real = function(var_o) {
                                            var if9306 = GraceDone;
                                            setLineNumber(1355);    // compilenode member
                                            // call case 6: other requests
                                            var call9308 = callmethodChecked(var_o, "isExecutable", []);
                                            if (Grace_isTrue(call9308)) {
                                              // call case 6: other requests
                                              var call9310 = callmethodChecked(var_action, "apply(1)", [1], var_o);
                                              if9306 = call9310;
                                            }
                                            return if9306;
                                          };
                                          // call case 6: other requests
                                          setLineNumber(1354);    // compilenode member
                                          // call case 4: self request
                                          onSelf = true;
                                          var call9312 = callmethodChecked(this, "value", []);
                                          var call9313 = callmethodChecked(call9312, "do(1)", [1], block9305);
                                          return call9313;
                                        };
                                        func9303.paramCounts = [1];
                                        obj9189.methods["executableComponentsDo(1)"] = func9303;
                                        func9303.definitionLine = 1351;
                                        func9303.definitionModule = "ast";
                                        var func9314 = function(argcv) {    // method scope:=(_)
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          var var_st = arguments[curarg];
                                          curarg++;
                                          setModuleName("ast");
                                          setLineNumber(1362);    // compilenode identifier
                                          // call case 4: self request
                                          onSelf = true;
                                          var call9316 = callmethodChecked(this, "symbolTable:=(1)", [1], var_st);
                                          setLineNumber(1363);    // compilenode identifier
                                          // call case 6: other requests
                                          var call9318 = callmethodChecked(var_st, "node:=(1)", [1], this);
                                          return call9318;
                                        };
                                        func9314.paramCounts = [1];
                                        obj9189.methods["scope:=(1)"] = func9314;
                                        func9314.definitionLine = 1359;
                                        func9314.definitionModule = "ast";
                                        var func9319 = function(argcv) {    // method body
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          setModuleName("ast");
                                          setLineNumber(1365);    // compilenode member
                                          // call case 4: self request
                                          onSelf = true;
                                          var call9321 = callmethodChecked(this, "value", []);
                                          return call9321;
                                        };
                                        func9319.paramCounts = [0];
                                        obj9189.methods["body"] = func9319;
                                        func9319.definitionLine = 1365;
                                        func9319.definitionModule = "ast";
                                        var func9322 = function(argcv) {    // method returnsObject
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          setModuleName("ast");
                                          // returnsObject is a simple accessor - elide try ... catch
                                          setLineNumber(1366);    // compilenode identifier
                                          return GraceTrue;
                                        };
                                        func9322.paramCounts = [0];
                                        obj9189.methods["returnsObject"] = func9322;
                                        func9322.definitionLine = 1366;
                                        func9322.definitionModule = "ast";
                                        var func9323 = function(argcv) {    // method returnedObjectScope
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          setModuleName("ast");
                                          setLineNumber(1367);    // compilenode member
                                          // call case 4: self request
                                          onSelf = true;
                                          var call9325 = callmethodChecked(this, "scope", []);
                                          return call9325;
                                        };
                                        func9323.paramCounts = [0];
                                        obj9189.methods["returnedObjectScope"] = func9323;
                                        func9323.definitionLine = 1367;
                                        func9323.definitionModule = "ast";
                                        var func9326 = function(argcv) {    // method canInherit
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          setModuleName("ast");
                                          setLineNumber(1368);    // compilenode member
                                          // call case 6: other requests
                                          // call case 4: self request
                                          onSelf = true;
                                          var call9329 = callmethodChecked(this, "inTrait", []);
                                          var call9330 = callmethodChecked(call9329, "not", []);
                                          return call9330;
                                        };
                                        func9326.paramCounts = [0];
                                        obj9189.methods["canInherit"] = func9326;
                                        func9326.definitionLine = 1368;
                                        func9326.definitionModule = "ast";
                                        var func9331 = function(argcv) {    // method canUse
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          setModuleName("ast");
                                          // canUse is a simple accessor - elide try ... catch
                                          setLineNumber(1369);    // compilenode identifier
                                          return GraceTrue;
                                        };
                                        func9331.paramCounts = [0];
                                        obj9189.methods["canUse"] = func9331;
                                        func9331.definitionLine = 1369;
                                        func9331.definitionModule = "ast";
                                        var func9332 = function(argcv) {    // method isObject
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          setModuleName("ast");
                                          // isObject is a simple accessor - elide try ... catch
                                          setLineNumber(1370);    // compilenode identifier
                                          return GraceTrue;
                                        };
                                        func9332.paramCounts = [0];
                                        obj9189.methods["isObject"] = func9332;
                                        func9332.definitionLine = 1370;
                                        func9332.definitionModule = "ast";
                                        var func9333 = function(argcv) {    // method accept(_)from(_)
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          var var_visitor = arguments[curarg];
                                          curarg++;
                                          var var_as = arguments[curarg];
                                          curarg++;
                                          // Start argument checking
                                          curarg = 1;
                                          setLineNumber(1371);    // compilenode identifier
                                          if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                  new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                      callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                          curarg++;
                                          curarg++;
                                          // End argument checking
                                          setModuleName("ast");
                                          var if9334 = GraceDone;
                                          setLineNumber(1372);    // compilenode identifier
                                          // call case 6: other requests
                                          var call9336 = callmethodChecked(var_visitor, "visitObject(1)up(1)", [1, 1], this, var_as);
                                          if (Grace_isTrue(call9336)) {
                                            setLineNumber(1373);    // compilenode identifier
                                            // call case 6: other requests
                                            var call9338 = callmethodChecked(var_as, "extend(1)", [1], this);
                                            var var_newChain = call9338;
                                            var if9339 = GraceDone;
                                            setLineNumber(1374);    // compilenode member
                                            // call case 4: self request
                                            onSelf = true;
                                            var call9341 = callmethodChecked(this, "superclass", []);
                                            var opresult9344 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call9341);
                                            if (Grace_isTrue(opresult9344)) {
                                              setLineNumber(1375);    // compilenode identifier
                                              // call case 6: other requests
                                              // call case 4: self request
                                              onSelf = true;
                                              var call9347 = callmethodChecked(this, "superclass", []);
                                              var call9348 = callmethodChecked(call9347, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                              if9339 = call9348;
                                            }
                                            setLineNumber(1377);    // compilenode block
                                            var block9350 = new GraceBlock(this, 1377, 1);
                                            setLineNumber(1);    // compilenode identifier
                                            block9350.real = function(var_t) {
                                              setLineNumber(1377);    // compilenode identifier
                                              // call case 6: other requests
                                              var call9352 = callmethodChecked(var_t, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                              return call9352;
                                            };
                                            // call case 6: other requests
                                            // call case 4: self request
                                            onSelf = true;
                                            var call9354 = callmethodChecked(this, "usedTraits", []);
                                            var call9355 = callmethodChecked(call9354, "do(1)", [1], block9350);
                                            setLineNumber(1378);    // compilenode block
                                            var block9357 = new GraceBlock(this, 1378, 1);
                                            setLineNumber(1);    // compilenode identifier
                                            block9357.real = function(var_x) {
                                              setLineNumber(1378);    // compilenode identifier
                                              // call case 6: other requests
                                              var call9359 = callmethodChecked(var_x, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                              return call9359;
                                            };
                                            // call case 6: other requests
                                            // call case 4: self request
                                            onSelf = true;
                                            var call9361 = callmethodChecked(this, "value", []);
                                            var call9362 = callmethodChecked(call9361, "do(1)", [1], block9357);
                                            if9334 = call9362;
                                          }
                                          return if9334;
                                        };
                                        func9333.paramTypes = [];
                                        func9333.paramTypes.push([]);
                                        func9333.paramTypes.push([]);
                                        func9333.paramCounts = [1, 1];
                                        obj9189.methods["accept(1)from(1)"] = func9333;
                                        func9333.definitionLine = 1371;
                                        func9333.definitionModule = "ast";
                                        var func9363 = function(argcv) {    // method nameString
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          setModuleName("ast");
                                          var if9364 = GraceDone;
                                          setLineNumber(1382);    // compilenode string
                                          var string9365 = new GraceString("object");
                                          // call case 4: self request
                                          onSelf = true;
                                          var call9368 = callmethodChecked(this, "name", []);
                                          var opresult9370 = callmethodChecked(call9368, "==(1)", [1], string9365);
                                          if (Grace_isTrue(opresult9370)) {
                                            setLineNumber(1383);    // compilenode string
                                            var string9371 = new GraceString("");
                                            // call case 4: self request
                                            onSelf = true;
                                            var call9374 = callmethodChecked(this, "line", []);
                                            var string9376 = new GraceString("object_on_line_");
                                            var opresult9378 = callmethodChecked(string9376, "++(1)", [1], call9374);
                                            var opresult9380 = callmethodChecked(opresult9378, "++(1)", [1], string9371);
                                            if9364 = opresult9380;
                                          } else {
                                            setLineNumber(1385);    // compilenode member
                                            // call case 4: self request
                                            onSelf = true;
                                            var call9382 = callmethodChecked(this, "name", []);
                                            if9364 = call9382;
                                          }
                                          return if9364;
                                        };
                                        func9363.paramCounts = [0];
                                        obj9189.methods["nameString"] = func9363;
                                        func9363.definitionLine = 1381;
                                        func9363.definitionModule = "ast";
                                        var func9383 = function(argcv) {    // method map(_)ancestors(_)
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          var var_blk = arguments[curarg];
                                          curarg++;
                                          var var_as = arguments[curarg];
                                          curarg++;
                                          setModuleName("ast");
                                          setLineNumber(1389);    // compilenode member
                                          // call case 4: self request
                                          onSelf = true;
                                          var call9385 = callmethodChecked(this, "shallowCopy", []);
                                          var var_n = call9385;
                                          setLineNumber(1390);    // compilenode identifier
                                          // call case 6: other requests
                                          var call9387 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                          var var_newChain = call9387;
                                          setLineNumber(1391);    // compilenode member
                                          // call case 4: self request
                                          onSelf = true;
                                          var call9391 = callmethodChecked(this, "value", []);
                                          // call case 6: other requests
                                          // call case 6: other requests
                                          // call case 3: self.outer request
                                          var call9394 = callmethodChecked(superDepth, "outer", [0]);
                                          var call9395 = callmethodChecked(call9394, "outer", []);
                                          onSelf = true;
                                          var call9396 = callmethodChecked(call9395, "listMap(2)ancestors(1)", [2, 1], call9391, var_blk, var_newChain);
                                          // call case 6: other requests
                                          var call9397 = callmethodChecked(var_n, "value:=(1)", [1], call9396);
                                          setLineNumber(1392);    // compilenode member
                                          // call case 4: self request
                                          onSelf = true;
                                          var call9401 = callmethodChecked(this, "superclass", []);
                                          // call case 6: other requests
                                          // call case 6: other requests
                                          // call case 3: self.outer request
                                          var call9404 = callmethodChecked(superDepth, "outer", [0]);
                                          var call9405 = callmethodChecked(call9404, "outer", []);
                                          onSelf = true;
                                          var call9406 = callmethodChecked(call9405, "maybeMap(2)ancestors(1)", [2, 1], call9401, var_blk, var_newChain);
                                          // call case 6: other requests
                                          var call9407 = callmethodChecked(var_n, "superclass:=(1)", [1], call9406);
                                          setLineNumber(1393);    // compilenode member
                                          // call case 4: self request
                                          onSelf = true;
                                          var call9411 = callmethodChecked(this, "usedTraits", []);
                                          // call case 6: other requests
                                          // call case 6: other requests
                                          // call case 3: self.outer request
                                          var call9414 = callmethodChecked(superDepth, "outer", [0]);
                                          var call9415 = callmethodChecked(call9414, "outer", []);
                                          onSelf = true;
                                          var call9416 = callmethodChecked(call9415, "listMap(2)ancestors(1)", [2, 1], call9411, var_blk, var_newChain);
                                          // call case 6: other requests
                                          var call9417 = callmethodChecked(var_n, "usedTraits:=(1)", [1], call9416);
                                          setLineNumber(1394);    // compilenode identifier
                                          // call case 6: other requests
                                          var call9419 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                          return call9419;
                                        };
                                        func9383.paramCounts = [1, 1];
                                        obj9189.methods["map(1)ancestors(1)"] = func9383;
                                        func9383.definitionLine = 1388;
                                        func9383.definitionModule = "ast";
                                        var func9420 = function(argcv) {    // method pretty(_)
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          var var_depth__39__ = arguments[curarg];
                                          curarg++;
                                          setModuleName("ast");
                                          setLineNumber(1397);    // compilenode identifier
                                          var var_depth = var_depth__39__;
                                          setLineNumber(1398);    // compilenode string
                                          var string9421 = new GraceString("");
                                          var var_spc = string9421;
                                          setLineNumber(1399);    // compilenode num
                                          var opresult9425 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                                          var block9426 = new GraceBlock(this, 1399, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block9426.real = function(var_i) {
                                            setLineNumber(1400);    // compilenode string
                                            var string9427 = new GraceString("  ");
                                            var opresult9430 = callmethodChecked(var_spc, "++(1)", [1], string9427);
                                            var_spc = opresult9430;
                                            return GraceDone;
                                          };
                                          // call case 5: prelude request
                                          var call9431 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult9425, block9426);
                                          setLineNumber(1402);    // compilenode identifier
                                          // call case 1: super request
                                          var call9433 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                          var var_s = call9433;
                                          setLineNumber(1403);    // compilenode string
                                          var string9434 = new GraceString("");
                                          // call case 4: self request
                                          onSelf = true;
                                          var call9437 = callmethodChecked(this, "name", []);
                                          var string9439 = new GraceString("Name: ");
                                          var string9442 = new GraceString("\n");
                                          var string9445 = new GraceString("");
                                          var opresult9447 = callmethodChecked(string9445, "++(1)", [1], var_s);
                                          var opresult9449 = callmethodChecked(opresult9447, "++(1)", [1], string9442);
                                          var opresult9451 = callmethodChecked(opresult9449, "++(1)", [1], var_spc);
                                          var opresult9453 = callmethodChecked(opresult9451, "++(1)", [1], string9439);
                                          var opresult9455 = callmethodChecked(opresult9453, "++(1)", [1], call9437);
                                          var opresult9457 = callmethodChecked(opresult9455, "++(1)", [1], string9434);
                                          var_s = opresult9457;
                                          var if9458 = GraceDone;
                                          setLineNumber(1404);    // compilenode member
                                          // call case 4: self request
                                          onSelf = true;
                                          var call9460 = callmethodChecked(this, "superclass", []);
                                          var opresult9463 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call9460);
                                          if (Grace_isTrue(opresult9463)) {
                                            setLineNumber(1406);    // compilenode identifier
                                            var opresult9467 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                            // call case 6: other requests
                                            // call case 4: self request
                                            onSelf = true;
                                            var call9469 = callmethodChecked(this, "superclass", []);
                                            var call9470 = callmethodChecked(call9469, "pretty(1)", [1], opresult9467);
                                            setLineNumber(1405);    // compilenode string
                                            var string9472 = new GraceString("Superclass: ");
                                            var string9475 = new GraceString("\n");
                                            var opresult9478 = callmethodChecked(var_s, "++(1)", [1], string9475);
                                            var opresult9480 = callmethodChecked(opresult9478, "++(1)", [1], var_spc);
                                            var opresult9482 = callmethodChecked(opresult9480, "++(1)", [1], string9472);
                                            var opresult9484 = callmethodChecked(opresult9482, "++(1)", [1], call9470);
                                            var_s = opresult9484;
                                            if9458 = GraceDone;
                                          }
                                          var if9485 = GraceDone;
                                          setLineNumber(1408);    // compilenode member
                                          // call case 6: other requests
                                          // call case 6: other requests
                                          // call case 4: self request
                                          onSelf = true;
                                          var call9489 = callmethodChecked(this, "usedTraits", []);
                                          var call9490 = callmethodChecked(call9489, "isEmpty", []);
                                          var call9491 = callmethodChecked(call9490, "not", []);
                                          if (Grace_isTrue(call9491)) {
                                            setLineNumber(1409);    // compilenode string
                                            var string9492 = new GraceString("Traits:");
                                            var string9495 = new GraceString("\n");
                                            var opresult9498 = callmethodChecked(var_s, "++(1)", [1], string9495);
                                            var opresult9500 = callmethodChecked(opresult9498, "++(1)", [1], var_spc);
                                            var opresult9502 = callmethodChecked(opresult9500, "++(1)", [1], string9492);
                                            var_s = opresult9502;
                                            setLineNumber(1410);    // compilenode block
                                            var block9504 = new GraceBlock(this, 1410, 1);
                                            setLineNumber(1);    // compilenode identifier
                                            block9504.real = function(var_t) {
                                              setLineNumber(1411);    // compilenode string
                                              var string9505 = new GraceString("");
                                              var opresult9510 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                              // call case 6: other requests
                                              var call9511 = callmethodChecked(var_t, "pretty(1)", [1], opresult9510);
                                              var string9513 = new GraceString("  ");
                                              var string9516 = new GraceString("\n");
                                              var string9519 = new GraceString("");
                                              var opresult9521 = callmethodChecked(string9519, "++(1)", [1], var_s);
                                              var opresult9523 = callmethodChecked(opresult9521, "++(1)", [1], string9516);
                                              var opresult9525 = callmethodChecked(opresult9523, "++(1)", [1], var_spc);
                                              var opresult9527 = callmethodChecked(opresult9525, "++(1)", [1], string9513);
                                              var opresult9529 = callmethodChecked(opresult9527, "++(1)", [1], call9511);
                                              var opresult9531 = callmethodChecked(opresult9529, "++(1)", [1], string9505);
                                              var_s = opresult9531;
                                              return GraceDone;
                                            };
                                            // call case 6: other requests
                                            setLineNumber(1410);    // compilenode member
                                            // call case 4: self request
                                            onSelf = true;
                                            var call9533 = callmethodChecked(this, "usedTraits", []);
                                            var call9534 = callmethodChecked(call9533, "do(1)", [1], block9504);
                                            if9485 = call9534;
                                          }
                                          setLineNumber(1414);    // compilenode block
                                          var block9536 = new GraceBlock(this, 1414, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block9536.real = function(var_x) {
                                            setLineNumber(1415);    // compilenode identifier
                                            var opresult9540 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                            // call case 6: other requests
                                            var call9541 = callmethodChecked(var_x, "pretty(1)", [1], opresult9540);
                                            var string9544 = new GraceString("\n");
                                            var opresult9547 = callmethodChecked(var_s, "++(1)", [1], string9544);
                                            var opresult9549 = callmethodChecked(opresult9547, "++(1)", [1], var_spc);
                                            var opresult9551 = callmethodChecked(opresult9549, "++(1)", [1], call9541);
                                            var_s = opresult9551;
                                            return GraceDone;
                                          };
                                          // call case 6: other requests
                                          setLineNumber(1414);    // compilenode member
                                          // call case 4: self request
                                          onSelf = true;
                                          var call9553 = callmethodChecked(this, "value", []);
                                          var call9554 = callmethodChecked(call9553, "do(1)", [1], block9536);
                                          setLineNumber(1417);    // compilenode identifier
                                          return var_s;
                                        };
                                        func9420.paramCounts = [1];
                                        obj9189.methods["pretty(1)"] = func9420;
                                        func9420.definitionLine = 1396;
                                        func9420.definitionModule = "ast";
                                        var func9555 = function(argcv) {    // method toGrace(_)
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          var var_depth = arguments[curarg];
                                          curarg++;
                                          // Start argument checking
                                          curarg = 1;
                                          setLineNumber(1419);    // compilenode identifier
                                          if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                  new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                      callmethod(var_Number, "asString", [0])._value + "."));
                                          curarg++;
                                          // End argument checking
                                          setModuleName("ast");
                                          setLineNumber(1420);    // compilenode string
                                          var string9556 = new GraceString("");
                                          var var_spc = string9556;
                                          setLineNumber(1421);    // compilenode identifier
                                          var diff9560 = callmethodChecked(var_depth, "-(1)", [1], new GraceNum(1));
                                          var opresult9563 = callmethodChecked(new GraceNum(0), "..(1)", [1], diff9560);
                                          var block9564 = new GraceBlock(this, 1421, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block9564.real = function(var_i) {
                                            setLineNumber(1422);    // compilenode string
                                            var string9565 = new GraceString("    ");
                                            var opresult9568 = callmethodChecked(var_spc, "++(1)", [1], string9565);
                                            var_spc = opresult9568;
                                            return GraceDone;
                                          };
                                          // call case 5: prelude request
                                          var call9569 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult9563, block9564);
                                          setLineNumber(1424);    // compilenode string
                                          var string9570 = new GraceString("object {");
                                          var var_s = string9570;
                                          var if9571 = GraceDone;
                                          setLineNumber(1425);    // compilenode member
                                          // call case 4: self request
                                          onSelf = true;
                                          var call9573 = callmethodChecked(this, "inTrait", []);
                                          if (Grace_isTrue(call9573)) {
                                            var string9574 = new GraceString("   // trait");
                                            var opresult9577 = callmethodChecked(var_s, "++(1)", [1], string9574);
                                            var_s = opresult9577;
                                            if9571 = GraceDone;
                                          }
                                          var if9578 = GraceDone;
                                          setLineNumber(1426);    // compilenode member
                                          // call case 4: self request
                                          onSelf = true;
                                          var call9580 = callmethodChecked(this, "inClass", []);
                                          if (Grace_isTrue(call9580)) {
                                            var string9581 = new GraceString("   // class");
                                            var opresult9584 = callmethodChecked(var_s, "++(1)", [1], string9581);
                                            var_s = opresult9584;
                                            if9578 = GraceDone;
                                          }
                                          var if9585 = GraceDone;
                                          setLineNumber(1427);    // compilenode member
                                          // call case 4: self request
                                          onSelf = true;
                                          var call9587 = callmethodChecked(this, "superclass", []);
                                          var opresult9590 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call9587);
                                          if (Grace_isTrue(opresult9590)) {
                                            setLineNumber(1428);    // compilenode identifier
                                            var opresult9594 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                            // call case 6: other requests
                                            // call case 4: self request
                                            onSelf = true;
                                            var call9596 = callmethodChecked(this, "superclass", []);
                                            var call9597 = callmethodChecked(call9596, "toGrace(1)", [1], opresult9594);
                                            var string9599 = new GraceString("\n");
                                            var opresult9602 = callmethodChecked(var_s, "++(1)", [1], string9599);
                                            var opresult9604 = callmethodChecked(opresult9602, "++(1)", [1], call9597);
                                            var_s = opresult9604;
                                            if9585 = GraceDone;
                                          }
                                          setLineNumber(1430);    // compilenode block
                                          var block9606 = new GraceBlock(this, 1430, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block9606.real = function(var_t) {
                                            setLineNumber(1430);    // compilenode identifier
                                            var opresult9610 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                            // call case 6: other requests
                                            var call9611 = callmethodChecked(var_t, "toGrace(1)", [1], opresult9610);
                                            var string9613 = new GraceString("\n");
                                            var opresult9616 = callmethodChecked(var_s, "++(1)", [1], string9613);
                                            var opresult9618 = callmethodChecked(opresult9616, "++(1)", [1], call9611);
                                            var_s = opresult9618;
                                            return GraceDone;
                                          };
                                          // call case 6: other requests
                                          // call case 4: self request
                                          onSelf = true;
                                          var call9620 = callmethodChecked(this, "usedTraits", []);
                                          var call9621 = callmethodChecked(call9620, "do(1)", [1], block9606);
                                          setLineNumber(1431);    // compilenode block
                                          var block9623 = new GraceBlock(this, 1431, 1);
                                          setLineNumber(1);    // compilenode identifier
                                          block9623.real = function(var_x) {
                                            setLineNumber(1432);    // compilenode identifier
                                            var opresult9627 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                            // call case 6: other requests
                                            var call9628 = callmethodChecked(var_x, "toGrace(1)", [1], opresult9627);
                                            var string9630 = new GraceString("    ");
                                            var string9633 = new GraceString("\n");
                                            var opresult9636 = callmethodChecked(var_s, "++(1)", [1], string9633);
                                            var opresult9638 = callmethodChecked(opresult9636, "++(1)", [1], var_spc);
                                            var opresult9640 = callmethodChecked(opresult9638, "++(1)", [1], string9630);
                                            var opresult9642 = callmethodChecked(opresult9640, "++(1)", [1], call9628);
                                            var_s = opresult9642;
                                            return GraceDone;
                                          };
                                          // call case 6: other requests
                                          setLineNumber(1431);    // compilenode member
                                          // call case 4: self request
                                          onSelf = true;
                                          var call9644 = callmethodChecked(this, "value", []);
                                          var call9645 = callmethodChecked(call9644, "do(1)", [1], block9623);
                                          setLineNumber(1434);    // compilenode string
                                          var string9646 = new GraceString("}");
                                          var string9649 = new GraceString("\n");
                                          var opresult9652 = callmethodChecked(var_s, "++(1)", [1], string9649);
                                          var opresult9654 = callmethodChecked(opresult9652, "++(1)", [1], var_spc);
                                          var opresult9656 = callmethodChecked(opresult9654, "++(1)", [1], string9646);
                                          var_s = opresult9656;
                                          setLineNumber(1435);    // return value
                                          if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], var_s)))
                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                  new GraceString("result of method toGrace(_) does not have " + 
                                                      callmethod(var_String, "asString", [0])._value + "."));
                                          return var_s;
                                        };
                                        func9555.paramTypes = [];
                                        func9555.paramTypes.push([type_Number, "depth"]);
                                        func9555.paramCounts = [1];
                                        obj9189.methods["toGrace(1)"] = func9555;
                                        func9555.definitionLine = 1419;
                                        func9555.definitionModule = "ast";
                                        var func9657 = function(argcv) {    // method shallowCopy
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          setModuleName("ast");
                                          setLineNumber(1438);    // compilenode identifier
                                          // call case 6: other requests
                                          // call case 6: other requests
                                          var call9660 = callmethodChecked(var_objectNode, "new(2)", [2], var_emptySeq, GraceFalse);
                                          var call9661 = callmethodChecked(call9660, "shallowCopyFieldsFrom(1)", [1], this);
                                          return call9661;
                                        };
                                        func9657.paramCounts = [0];
                                        obj9189.methods["shallowCopy"] = func9657;
                                        func9657.definitionLine = 1437;
                                        func9657.definitionModule = "ast";
                                        var func9662 = function(argcv) {    // method shallowCopyFieldsFrom(_)
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          var var_other = arguments[curarg];
                                          curarg++;
                                          setModuleName("ast");
                                          setLineNumber(1441);    // compilenode identifier
                                          // call case 1: super request
                                          var call9664 = callmethodsuper(this, "shallowCopyFieldsFrom(1)", [1], var_other);
                                          setLineNumber(1442);    // compilenode member
                                          // call case 6: other requests
                                          var call9667 = callmethodChecked(var_other, "name", []);
                                          // call case 4: self request
                                          onSelf = true;
                                          var call9668 = callmethodChecked(this, "name:=(1)", [1], call9667);
                                          setLineNumber(1443);    // compilenode member
                                          // call case 6: other requests
                                          var call9671 = callmethodChecked(var_other, "value", []);
                                          // call case 4: self request
                                          onSelf = true;
                                          var call9672 = callmethodChecked(this, "value:=(1)", [1], call9671);
                                          setLineNumber(1444);    // compilenode member
                                          // call case 6: other requests
                                          var call9675 = callmethodChecked(var_other, "superclass", []);
                                          // call case 4: self request
                                          onSelf = true;
                                          var call9676 = callmethodChecked(this, "superclass:=(1)", [1], call9675);
                                          setLineNumber(1445);    // compilenode member
                                          // call case 6: other requests
                                          var call9679 = callmethodChecked(var_other, "usedTraits", []);
                                          // call case 4: self request
                                          onSelf = true;
                                          var call9680 = callmethodChecked(this, "usedTraits:=(1)", [1], call9679);
                                          setLineNumber(1446);    // compilenode member
                                          // call case 6: other requests
                                          var call9683 = callmethodChecked(var_other, "inClass", []);
                                          // call case 4: self request
                                          onSelf = true;
                                          var call9684 = callmethodChecked(this, "inClass:=(1)", [1], call9683);
                                          setLineNumber(1447);    // compilenode member
                                          // call case 6: other requests
                                          var call9687 = callmethodChecked(var_other, "inTrait", []);
                                          // call case 4: self request
                                          onSelf = true;
                                          var call9688 = callmethodChecked(this, "inTrait:=(1)", [1], call9687);
                                          setLineNumber(1448);    // compilenode member
                                          // call case 6: other requests
                                          var call9691 = callmethodChecked(var_other, "annotations", []);
                                          // call case 4: self request
                                          onSelf = true;
                                          var call9692 = callmethodChecked(this, "annotations:=(1)", [1], call9691);
                                          setLineNumber(1449);    // compilenode identifier
                                          return this;
                                        };
                                        func9662.paramCounts = [1];
                                        obj9189.methods["shallowCopyFieldsFrom(1)"] = func9662;
                                        func9662.definitionLine = 1440;
                                        func9662.definitionModule = "ast";
                                        var func9693 = function(argcv) {    // method asString
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          setModuleName("ast");
                                          setLineNumber(1452);    // compilenode string
                                          var string9694 = new GraceString("");
                                          // call case 4: self request
                                          onSelf = true;
                                          var call9697 = callmethodChecked(this, "nameString", []);
                                          var string9699 = new GraceString("object ");
                                          var opresult9701 = callmethodChecked(string9699, "++(1)", [1], call9697);
                                          var opresult9703 = callmethodChecked(opresult9701, "++(1)", [1], string9694);
                                          return opresult9703;
                                        };
                                        func9693.paramCounts = [0];
                                        obj9189.methods["asString"] = func9693;
                                        func9693.definitionLine = 1451;
                                        func9693.definitionModule = "ast";
                                        setLineNumber(1291);    // compilenode identifier
                                        // call case 6: other requests
                                        // call case 6: other requests
                                        // call case 3: self.outer request
                                        var call9707 = callmethodChecked(superDepth, "outer", [0]);
                                        var call9708 = callmethodChecked(call9707, "outer", []);
                                        var call9709 = callmethodChecked(call9708, "baseNode$object(1)", [0, 1], this);
                                        obj9189.superobj = call9709;
                                        if (call9709.data) obj9189.data = call9709.data;
                                        if (call9709.hasOwnProperty('_value'))
                                            obj9189._value = call9709._value;
                                        setLineNumber(1292);    // compilenode string
                                        var string9710 = new GraceString("object");
                                        obj9189.data["kind"] = string9710;
                                        var reader_ast_kind9711 = function() {
                                          return this.data["kind"];
                                        };
                                        reader_ast_kind9711.def = true;
                                        obj9189.methods["kind"] = reader_ast_kind9711;
                                        setLineNumber(1293);    // compilenode identifier
                                        obj9189.data["value"] = var_b;
                                        var reader_ast_value9712 = function() {
                                          return this.data["value"];
                                        };
                                        obj9189.methods["value"] = reader_ast_value9712;
                                        obj9189.data["value"] = var_b;
                                        var writer_ast_value9712 = function(argcv, o) {
                                          this.data["value"] = o;
                                          return GraceDone;
                                        };
                                        obj9189.methods["value:=(1)"] = writer_ast_value9712;
                                        obj9189.mutable = true;
                                        setLineNumber(1294);    // compilenode identifier
                                        obj9189.data["superclass"] = var_superclass__39__;
                                        var reader_ast_superclass9713 = function() {
                                          return this.data["superclass"];
                                        };
                                        obj9189.methods["superclass"] = reader_ast_superclass9713;
                                        obj9189.data["superclass"] = var_superclass__39__;
                                        var writer_ast_superclass9713 = function(argcv, o) {
                                          this.data["superclass"] = o;
                                          return GraceDone;
                                        };
                                        obj9189.methods["superclass:=(1)"] = writer_ast_superclass9713;
                                        obj9189.mutable = true;
                                        setLineNumber(1295);    // compilenode array
                                        var array9714 = new PrimitiveGraceList([]);
                                        obj9189.data["usedTraits"] = array9714;
                                        var reader_ast_usedTraits9715 = function() {
                                          return this.data["usedTraits"];
                                        };
                                        obj9189.methods["usedTraits"] = reader_ast_usedTraits9715;
                                        obj9189.data["usedTraits"] = array9714;
                                        var writer_ast_usedTraits9715 = function(argcv, o) {
                                          this.data["usedTraits"] = o;
                                          return GraceDone;
                                        };
                                        obj9189.methods["usedTraits:=(1)"] = writer_ast_usedTraits9715;
                                        obj9189.mutable = true;
                                        setLineNumber(1296);    // compilenode string
                                        var string9716 = new GraceString("object");
                                        obj9189.data["name"] = string9716;
                                        var reader_ast_name9717 = function() {
                                          return this.data["name"];
                                        };
                                        obj9189.methods["name"] = reader_ast_name9717;
                                        obj9189.data["name"] = string9716;
                                        var writer_ast_name9717 = function(argcv, o) {
                                          this.data["name"] = o;
                                          return GraceDone;
                                        };
                                        obj9189.methods["name:=(1)"] = writer_ast_name9717;
                                        obj9189.mutable = true;
                                        setLineNumber(1297);    // compilenode identifier
                                        obj9189.data["inClass"] = GraceFalse;
                                        var reader_ast_inClass9718 = function() {
                                          return this.data["inClass"];
                                        };
                                        obj9189.methods["inClass"] = reader_ast_inClass9718;
                                        obj9189.data["inClass"] = GraceFalse;
                                        var writer_ast_inClass9718 = function(argcv, o) {
                                          this.data["inClass"] = o;
                                          return GraceDone;
                                        };
                                        obj9189.methods["inClass:=(1)"] = writer_ast_inClass9718;
                                        obj9189.mutable = true;
                                        setLineNumber(1298);    // compilenode identifier
                                        obj9189.data["inTrait"] = GraceFalse;
                                        var reader_ast_inTrait9719 = function() {
                                          return this.data["inTrait"];
                                        };
                                        obj9189.methods["inTrait"] = reader_ast_inTrait9719;
                                        obj9189.data["inTrait"] = GraceFalse;
                                        var writer_ast_inTrait9719 = function(argcv, o) {
                                          this.data["inTrait"] = o;
                                          return GraceDone;
                                        };
                                        obj9189.methods["inTrait:=(1)"] = writer_ast_inTrait9719;
                                        obj9189.mutable = true;
                                        setLineNumber(1299);    // compilenode identifier
                                        obj9189.data["myLocalNames"] = GraceFalse;
                                        var reader_ast_myLocalNames9720 = function() {
                                          return this.data["myLocalNames"];
                                        };
                                        obj9189.methods["myLocalNames"] = reader_ast_myLocalNames9720;
                                        obj9189.data["myLocalNames"] = GraceFalse;
                                        var writer_ast_myLocalNames9720 = function(argcv, o) {
                                          this.data["myLocalNames"] = o;
                                          return GraceDone;
                                        };
                                        obj9189.methods["myLocalNames:=(1)"] = writer_ast_myLocalNames9720;
                                        reader_ast_myLocalNames9720.confidential = true;
                                        writer_ast_myLocalNames9720.confidential = true;
                                        obj9189.mutable = true;
                                        setLineNumber(1300);    // compilenode array
                                        var array9721 = new PrimitiveGraceList([]);
                                        obj9189.data["annotations"] = array9721;
                                        var reader_ast_annotations9722 = function() {
                                          return this.data["annotations"];
                                        };
                                        obj9189.methods["annotations"] = reader_ast_annotations9722;
                                        obj9189.data["annotations"] = array9721;
                                        var writer_ast_annotations9722 = function(argcv, o) {
                                          this.data["annotations"] = o;
                                          return GraceDone;
                                        };
                                        obj9189.methods["annotations:=(1)"] = writer_ast_annotations9722;
                                        obj9189.mutable = true;
                                        superDepth = origSuperDepth;
                                      };
                                      obj_init_9189.apply(obj9189, []);
                                      return obj9189;
                                    };
                                    func9188.paramCounts = [2];
                                    obj9176.methods["new(2)"] = func9188;
                                    func9188.definitionLine = 1290;
                                    func9188.definitionModule = "ast";
                                      var func9723 = function(argcv) {    // method new(_,_)$object(_)
                                        var curarg = 1;
                                        var var_b = arguments[curarg];
                                        curarg++;
                                        var var_superclass__39__ = arguments[curarg];
                                        curarg++;
                                        var inheritingObject = arguments[curarg++];
                                        // Start argument processing
                                        curarg = 1;
                                        curarg++;
                                        curarg++;
                                        // End argument processing
                                        setModuleName("ast");
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var obj9724 = Grace_allocObject(null, "new(2)");
                                        obj9724.definitionModule = "ast";
                                        obj9724.definitionLine = 1290;
                                        var inho9724 = inheritingObject;
                                        while (inho9724.superobj) inho9724 = inho9724.superobj;
                                        inho9724.superobj = obj9724;
                                        obj9724.data = inheritingObject.data;
                                        if (inheritingObject.hasOwnProperty('_value'))
                                          obj9724._value = inheritingObject._value;
                                        obj9724.outer = this;
                                        var reader_ast_outer9725 = function() {
                                          return this.outer;
                                        };
                                        obj9724.methods["outer"] = reader_ast_outer9725;
                                        var obj_init_9724 = function() {
                                          var origSuperDepth = superDepth;
                                          superDepth = obj9724;
                                          var func9726 = function(argcv) {    // method description
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            setModuleName("ast");
                                            var if9727 = GraceDone;
                                            setLineNumber(1303);    // compilenode member
                                            // call case 4: self request
                                            onSelf = true;
                                            var call9729 = callmethodChecked(this, "isTrait", []);
                                            if (Grace_isTrue(call9729)) {
                                              setLineNumber(1304);    // compilenode string
                                              var string9730 = new GraceString(" (trait)");
                                              // call case 4: self request
                                              onSelf = true;
                                              var call9733 = callmethodChecked(this, "kind", []);
                                              var string9735 = new GraceString("");
                                              var opresult9737 = callmethodChecked(string9735, "++(1)", [1], call9733);
                                              var opresult9739 = callmethodChecked(opresult9737, "++(1)", [1], string9730);
                                              if9727 = opresult9739;
                                            } else {
                                              var if9740 = GraceDone;
                                              setLineNumber(1305);    // compilenode member
                                              // call case 4: self request
                                              onSelf = true;
                                              var call9742 = callmethodChecked(this, "inClass", []);
                                              if (Grace_isTrue(call9742)) {
                                                setLineNumber(1306);    // compilenode string
                                                var string9743 = new GraceString(" (class)");
                                                // call case 4: self request
                                                onSelf = true;
                                                var call9746 = callmethodChecked(this, "kind", []);
                                                var string9748 = new GraceString("");
                                                var opresult9750 = callmethodChecked(string9748, "++(1)", [1], call9746);
                                                var opresult9752 = callmethodChecked(opresult9750, "++(1)", [1], string9743);
                                                if9740 = opresult9752;
                                              } else {
                                                setLineNumber(1308);    // compilenode member
                                                // call case 4: self request
                                                onSelf = true;
                                                var call9754 = callmethodChecked(this, "kind", []);
                                                if9740 = call9754;
                                              }
                                              if9727 = if9740;
                                            }
                                            setLineNumber(1303);    // return value
                                            if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], if9727)))
                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                    new GraceString("result of method description does not have " + 
                                                        callmethod(var_String, "asString", [0])._value + "."));
                                            return if9727;
                                          };
                                          func9726.paramCounts = [0];
                                          obj9724.methods["description"] = func9726;
                                          func9726.definitionLine = 1302;
                                          func9726.definitionModule = "ast";
                                          var func9755 = function(argcv) {    // method isTrait
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            setModuleName("ast");
                                            var if9756 = GraceDone;
                                            setLineNumber(1314);    // compilenode member
                                            // call case 4: self request
                                            onSelf = true;
                                            var call9758 = callmethodChecked(this, "inTrait", []);
                                            if (Grace_isTrue(call9758)) {
                                              return GraceTrue;
                                            }
                                            var if9759 = GraceDone;
                                            setLineNumber(1315);    // compilenode member
                                            // call case 4: self request
                                            onSelf = true;
                                            var call9761 = callmethodChecked(this, "superclass", []);
                                            var opresult9764 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call9761);
                                            if (Grace_isTrue(opresult9764)) {
                                              return GraceFalse;
                                            }
                                            setLineNumber(1316);    // compilenode block
                                            var block9766 = new GraceBlock(this, 1316, 1);
                                            setLineNumber(1);    // compilenode identifier
                                            block9766.real = function(var_each) {
                                              var if9767 = GraceDone;
                                              setLineNumber(1317);    // compilenode member
                                              // call case 6: other requests
                                              // call case 6: other requests
                                              var call9770 = callmethodChecked(var_each, "isLegalInTrait", []);
                                              var call9771 = callmethodChecked(call9770, "not", []);
                                              if (Grace_isTrue(call9771)) {
                                                throw new ReturnException(GraceFalse, returnTarget);
                                              }
                                              return if9767;
                                            };
                                            // call case 6: other requests
                                            setLineNumber(1316);    // compilenode member
                                            // call case 4: self request
                                            onSelf = true;
                                            var call9773 = callmethodChecked(this, "value", []);
                                            var call9774 = callmethodChecked(call9773, "do(1)", [1], block9766);
                                            setLineNumber(1319);    // compilenode identifier
                                            return GraceTrue;
                                          };
                                          func9755.paramCounts = [0];
                                          obj9724.methods["isTrait"] = func9755;
                                          func9755.definitionLine = 1311;
                                          func9755.definitionModule = "ast";
                                          var func9775 = function(argcv) {    // method localNames
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            setModuleName("ast");
                                            var if9776 = GraceDone;
                                            setLineNumber(1325);    // compilenode member
                                            // call case 4: self request
                                            onSelf = true;
                                            var call9778 = callmethodChecked(this, "myLocalNames", []);
                                            var opresult9781 = callmethodChecked(GraceFalse, "==(1)", [1], call9778);
                                            if (Grace_isTrue(opresult9781)) {
                                              setLineNumber(1326);    // compilenode member
                                              // call case 5: prelude request
                                              var call9784 = callmethodChecked(var_prelude, "emptySet", []);
                                              // call case 4: self request
                                              onSelf = true;
                                              var call9785 = callmethodChecked(this, "myLocalNames:=(1)", [1], call9784);
                                              setLineNumber(1327);    // compilenode block
                                              var block9787 = new GraceBlock(this, 1327, 1);
                                              setLineNumber(1);    // compilenode identifier
                                              block9787.real = function(var_node) {
                                                var if9788 = GraceDone;
                                                setLineNumber(1328);    // compilenode member
                                                // call case 6: other requests
                                                var call9790 = callmethodChecked(var_node, "isMethod", []);
                                                // call case 6: other requests
                                                var call9793 = callmethodChecked(var_node, "isFieldDec", []);
                                                var opresult9795 = callmethodChecked(call9793, "||(1)", [1], call9790);
                                                if (Grace_isTrue(opresult9795)) {
                                                  setLineNumber(1329);    // compilenode member
                                                  // call case 6: other requests
                                                  var call9798 = callmethodChecked(var_node, "nameString", []);
                                                  // call case 6: other requests
                                                  // call case 4: self request
                                                  onSelf = true;
                                                  var call9800 = callmethodChecked(this, "myLocalNames", []);
                                                  var call9801 = callmethodChecked(call9800, "add(1)", [1], call9798);
                                                  if9788 = call9801;
                                                }
                                                return if9788;
                                              };
                                              // call case 6: other requests
                                              setLineNumber(1327);    // compilenode member
                                              // call case 4: self request
                                              onSelf = true;
                                              var call9803 = callmethodChecked(this, "value", []);
                                              var call9804 = callmethodChecked(call9803, "do(1)", [1], block9787);
                                              if9776 = call9804;
                                            }
                                            setLineNumber(1333);    // compilenode member
                                            // call case 4: self request
                                            onSelf = true;
                                            var call9806 = callmethodChecked(this, "myLocalNames", []);
                                            setLineNumber(1322);    // compilenode member
                                            // call case 5: prelude request
                                            var call9808 = callmethodChecked(var_prelude, "Set", []);
                                            setLineNumber(1333);    // return value
                                            if (!Grace_isTrue(callmethod(call9808, "match(1)", [1], call9806)))
                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                    new GraceString("result of method localNames does not have " + 
                                                        callmethod(call9808, "asString", [0])._value + "."));
                                            return call9806;
                                          };
                                          func9775.paramCounts = [0];
                                          obj9724.methods["localNames"] = func9775;
                                          func9775.definitionLine = 1322;
                                          func9775.definitionModule = "ast";
                                          var func9809 = function(argcv) {    // method parentsDo(_)
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            var var_action = arguments[curarg];
                                            curarg++;
                                            setModuleName("ast");
                                            var if9810 = GraceDone;
                                            setLineNumber(1339);    // compilenode member
                                            // call case 4: self request
                                            onSelf = true;
                                            var call9812 = callmethodChecked(this, "superclass", []);
                                            var opresult9815 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call9812);
                                            if (Grace_isTrue(opresult9815)) {
                                              // call case 4: self request
                                              onSelf = true;
                                              var call9818 = callmethodChecked(this, "superclass", []);
                                              // call case 6: other requests
                                              var call9819 = callmethodChecked(var_action, "apply(1)", [1], call9818);
                                              if9810 = call9819;
                                            }
                                            setLineNumber(1340);    // compilenode block
                                            var block9821 = new GraceBlock(this, 1340, 1);
                                            setLineNumber(1);    // compilenode identifier
                                            block9821.real = function(var_t) {
                                              setLineNumber(1340);    // compilenode identifier
                                              // call case 6: other requests
                                              var call9823 = callmethodChecked(var_action, "apply(1)", [1], var_t);
                                              return call9823;
                                            };
                                            // call case 6: other requests
                                            // call case 4: self request
                                            onSelf = true;
                                            var call9825 = callmethodChecked(this, "usedTraits", []);
                                            var call9826 = callmethodChecked(call9825, "do(1)", [1], block9821);
                                            return call9826;
                                          };
                                          func9809.paramCounts = [1];
                                          obj9724.methods["parentsDo(1)"] = func9809;
                                          func9809.definitionLine = 1336;
                                          func9809.definitionModule = "ast";
                                          var func9827 = function(argcv) {    // method methodsDo(_)
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            var var_action = arguments[curarg];
                                            curarg++;
                                            setModuleName("ast");
                                            setLineNumber(1346);    // compilenode block
                                            var block9829 = new GraceBlock(this, 1346, 1);
                                            setLineNumber(1);    // compilenode identifier
                                            block9829.real = function(var_o) {
                                              var if9830 = GraceDone;
                                              setLineNumber(1347);    // compilenode member
                                              // call case 6: other requests
                                              var call9832 = callmethodChecked(var_o, "isMethod", []);
                                              if (Grace_isTrue(call9832)) {
                                                // call case 6: other requests
                                                var call9834 = callmethodChecked(var_action, "apply(1)", [1], var_o);
                                                if9830 = call9834;
                                              }
                                              return if9830;
                                            };
                                            // call case 6: other requests
                                            setLineNumber(1346);    // compilenode member
                                            // call case 4: self request
                                            onSelf = true;
                                            var call9836 = callmethodChecked(this, "value", []);
                                            var call9837 = callmethodChecked(call9836, "do(1)", [1], block9829);
                                            return call9837;
                                          };
                                          func9827.paramCounts = [1];
                                          obj9724.methods["methodsDo(1)"] = func9827;
                                          func9827.definitionLine = 1343;
                                          func9827.definitionModule = "ast";
                                          var func9838 = function(argcv) {    // method executableComponentsDo(_)
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            var var_action = arguments[curarg];
                                            curarg++;
                                            setModuleName("ast");
                                            setLineNumber(1354);    // compilenode block
                                            var block9840 = new GraceBlock(this, 1354, 1);
                                            setLineNumber(1);    // compilenode identifier
                                            block9840.real = function(var_o) {
                                              var if9841 = GraceDone;
                                              setLineNumber(1355);    // compilenode member
                                              // call case 6: other requests
                                              var call9843 = callmethodChecked(var_o, "isExecutable", []);
                                              if (Grace_isTrue(call9843)) {
                                                // call case 6: other requests
                                                var call9845 = callmethodChecked(var_action, "apply(1)", [1], var_o);
                                                if9841 = call9845;
                                              }
                                              return if9841;
                                            };
                                            // call case 6: other requests
                                            setLineNumber(1354);    // compilenode member
                                            // call case 4: self request
                                            onSelf = true;
                                            var call9847 = callmethodChecked(this, "value", []);
                                            var call9848 = callmethodChecked(call9847, "do(1)", [1], block9840);
                                            return call9848;
                                          };
                                          func9838.paramCounts = [1];
                                          obj9724.methods["executableComponentsDo(1)"] = func9838;
                                          func9838.definitionLine = 1351;
                                          func9838.definitionModule = "ast";
                                          var func9849 = function(argcv) {    // method scope:=(_)
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            var var_st = arguments[curarg];
                                            curarg++;
                                            setModuleName("ast");
                                            setLineNumber(1362);    // compilenode identifier
                                            // call case 4: self request
                                            onSelf = true;
                                            var call9851 = callmethodChecked(this, "symbolTable:=(1)", [1], var_st);
                                            setLineNumber(1363);    // compilenode identifier
                                            // call case 6: other requests
                                            var call9853 = callmethodChecked(var_st, "node:=(1)", [1], this);
                                            return call9853;
                                          };
                                          func9849.paramCounts = [1];
                                          obj9724.methods["scope:=(1)"] = func9849;
                                          func9849.definitionLine = 1359;
                                          func9849.definitionModule = "ast";
                                          var func9854 = function(argcv) {    // method body
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            setModuleName("ast");
                                            setLineNumber(1365);    // compilenode member
                                            // call case 4: self request
                                            onSelf = true;
                                            var call9856 = callmethodChecked(this, "value", []);
                                            return call9856;
                                          };
                                          func9854.paramCounts = [0];
                                          obj9724.methods["body"] = func9854;
                                          func9854.definitionLine = 1365;
                                          func9854.definitionModule = "ast";
                                          var func9857 = function(argcv) {    // method returnsObject
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            setModuleName("ast");
                                            // returnsObject is a simple accessor - elide try ... catch
                                            setLineNumber(1366);    // compilenode identifier
                                            return GraceTrue;
                                          };
                                          func9857.paramCounts = [0];
                                          obj9724.methods["returnsObject"] = func9857;
                                          func9857.definitionLine = 1366;
                                          func9857.definitionModule = "ast";
                                          var func9858 = function(argcv) {    // method returnedObjectScope
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            setModuleName("ast");
                                            setLineNumber(1367);    // compilenode member
                                            // call case 4: self request
                                            onSelf = true;
                                            var call9860 = callmethodChecked(this, "scope", []);
                                            return call9860;
                                          };
                                          func9858.paramCounts = [0];
                                          obj9724.methods["returnedObjectScope"] = func9858;
                                          func9858.definitionLine = 1367;
                                          func9858.definitionModule = "ast";
                                          var func9861 = function(argcv) {    // method canInherit
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            setModuleName("ast");
                                            setLineNumber(1368);    // compilenode member
                                            // call case 6: other requests
                                            // call case 4: self request
                                            onSelf = true;
                                            var call9864 = callmethodChecked(this, "inTrait", []);
                                            var call9865 = callmethodChecked(call9864, "not", []);
                                            return call9865;
                                          };
                                          func9861.paramCounts = [0];
                                          obj9724.methods["canInherit"] = func9861;
                                          func9861.definitionLine = 1368;
                                          func9861.definitionModule = "ast";
                                          var func9866 = function(argcv) {    // method canUse
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            setModuleName("ast");
                                            // canUse is a simple accessor - elide try ... catch
                                            setLineNumber(1369);    // compilenode identifier
                                            return GraceTrue;
                                          };
                                          func9866.paramCounts = [0];
                                          obj9724.methods["canUse"] = func9866;
                                          func9866.definitionLine = 1369;
                                          func9866.definitionModule = "ast";
                                          var func9867 = function(argcv) {    // method isObject
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            setModuleName("ast");
                                            // isObject is a simple accessor - elide try ... catch
                                            setLineNumber(1370);    // compilenode identifier
                                            return GraceTrue;
                                          };
                                          func9867.paramCounts = [0];
                                          obj9724.methods["isObject"] = func9867;
                                          func9867.definitionLine = 1370;
                                          func9867.definitionModule = "ast";
                                          var func9868 = function(argcv) {    // method accept(_)from(_)
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            var var_visitor = arguments[curarg];
                                            curarg++;
                                            var var_as = arguments[curarg];
                                            curarg++;
                                            // Start argument checking
                                            curarg = 1;
                                            setLineNumber(1371);    // compilenode identifier
                                            if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                    new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                        callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                            curarg++;
                                            curarg++;
                                            // End argument checking
                                            setModuleName("ast");
                                            var if9869 = GraceDone;
                                            setLineNumber(1372);    // compilenode identifier
                                            // call case 6: other requests
                                            var call9871 = callmethodChecked(var_visitor, "visitObject(1)up(1)", [1, 1], this, var_as);
                                            if (Grace_isTrue(call9871)) {
                                              setLineNumber(1373);    // compilenode identifier
                                              // call case 6: other requests
                                              var call9873 = callmethodChecked(var_as, "extend(1)", [1], this);
                                              var var_newChain = call9873;
                                              var if9874 = GraceDone;
                                              setLineNumber(1374);    // compilenode member
                                              // call case 4: self request
                                              onSelf = true;
                                              var call9876 = callmethodChecked(this, "superclass", []);
                                              var opresult9879 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call9876);
                                              if (Grace_isTrue(opresult9879)) {
                                                setLineNumber(1375);    // compilenode identifier
                                                // call case 6: other requests
                                                // call case 4: self request
                                                onSelf = true;
                                                var call9882 = callmethodChecked(this, "superclass", []);
                                                var call9883 = callmethodChecked(call9882, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                if9874 = call9883;
                                              }
                                              setLineNumber(1377);    // compilenode block
                                              var block9885 = new GraceBlock(this, 1377, 1);
                                              setLineNumber(1);    // compilenode identifier
                                              block9885.real = function(var_t) {
                                                setLineNumber(1377);    // compilenode identifier
                                                // call case 6: other requests
                                                var call9887 = callmethodChecked(var_t, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                return call9887;
                                              };
                                              // call case 6: other requests
                                              // call case 4: self request
                                              onSelf = true;
                                              var call9889 = callmethodChecked(this, "usedTraits", []);
                                              var call9890 = callmethodChecked(call9889, "do(1)", [1], block9885);
                                              setLineNumber(1378);    // compilenode block
                                              var block9892 = new GraceBlock(this, 1378, 1);
                                              setLineNumber(1);    // compilenode identifier
                                              block9892.real = function(var_x) {
                                                setLineNumber(1378);    // compilenode identifier
                                                // call case 6: other requests
                                                var call9894 = callmethodChecked(var_x, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                return call9894;
                                              };
                                              // call case 6: other requests
                                              // call case 4: self request
                                              onSelf = true;
                                              var call9896 = callmethodChecked(this, "value", []);
                                              var call9897 = callmethodChecked(call9896, "do(1)", [1], block9892);
                                              if9869 = call9897;
                                            }
                                            return if9869;
                                          };
                                          func9868.paramTypes = [];
                                          func9868.paramTypes.push([]);
                                          func9868.paramTypes.push([]);
                                          func9868.paramCounts = [1, 1];
                                          obj9724.methods["accept(1)from(1)"] = func9868;
                                          func9868.definitionLine = 1371;
                                          func9868.definitionModule = "ast";
                                          var func9898 = function(argcv) {    // method nameString
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            setModuleName("ast");
                                            var if9899 = GraceDone;
                                            setLineNumber(1382);    // compilenode string
                                            var string9900 = new GraceString("object");
                                            // call case 4: self request
                                            onSelf = true;
                                            var call9903 = callmethodChecked(this, "name", []);
                                            var opresult9905 = callmethodChecked(call9903, "==(1)", [1], string9900);
                                            if (Grace_isTrue(opresult9905)) {
                                              setLineNumber(1383);    // compilenode string
                                              var string9906 = new GraceString("");
                                              // call case 4: self request
                                              onSelf = true;
                                              var call9909 = callmethodChecked(this, "line", []);
                                              var string9911 = new GraceString("object_on_line_");
                                              var opresult9913 = callmethodChecked(string9911, "++(1)", [1], call9909);
                                              var opresult9915 = callmethodChecked(opresult9913, "++(1)", [1], string9906);
                                              if9899 = opresult9915;
                                            } else {
                                              setLineNumber(1385);    // compilenode member
                                              // call case 4: self request
                                              onSelf = true;
                                              var call9917 = callmethodChecked(this, "name", []);
                                              if9899 = call9917;
                                            }
                                            return if9899;
                                          };
                                          func9898.paramCounts = [0];
                                          obj9724.methods["nameString"] = func9898;
                                          func9898.definitionLine = 1381;
                                          func9898.definitionModule = "ast";
                                          var func9918 = function(argcv) {    // method map(_)ancestors(_)
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            var var_blk = arguments[curarg];
                                            curarg++;
                                            var var_as = arguments[curarg];
                                            curarg++;
                                            setModuleName("ast");
                                            setLineNumber(1389);    // compilenode member
                                            // call case 4: self request
                                            onSelf = true;
                                            var call9920 = callmethodChecked(this, "shallowCopy", []);
                                            var var_n = call9920;
                                            setLineNumber(1390);    // compilenode identifier
                                            // call case 6: other requests
                                            var call9922 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                            var var_newChain = call9922;
                                            setLineNumber(1391);    // compilenode member
                                            // call case 4: self request
                                            onSelf = true;
                                            var call9926 = callmethodChecked(this, "value", []);
                                            // call case 6: other requests
                                            // call case 6: other requests
                                            // call case 3: self.outer request
                                            var call9929 = callmethodChecked(superDepth, "outer", [0]);
                                            var call9930 = callmethodChecked(call9929, "outer", []);
                                            onSelf = true;
                                            var call9931 = callmethodChecked(call9930, "listMap(2)ancestors(1)", [2, 1], call9926, var_blk, var_newChain);
                                            // call case 6: other requests
                                            var call9932 = callmethodChecked(var_n, "value:=(1)", [1], call9931);
                                            setLineNumber(1392);    // compilenode member
                                            // call case 4: self request
                                            onSelf = true;
                                            var call9936 = callmethodChecked(this, "superclass", []);
                                            // call case 6: other requests
                                            // call case 6: other requests
                                            // call case 3: self.outer request
                                            var call9939 = callmethodChecked(superDepth, "outer", [0]);
                                            var call9940 = callmethodChecked(call9939, "outer", []);
                                            onSelf = true;
                                            var call9941 = callmethodChecked(call9940, "maybeMap(2)ancestors(1)", [2, 1], call9936, var_blk, var_newChain);
                                            // call case 6: other requests
                                            var call9942 = callmethodChecked(var_n, "superclass:=(1)", [1], call9941);
                                            setLineNumber(1393);    // compilenode member
                                            // call case 4: self request
                                            onSelf = true;
                                            var call9946 = callmethodChecked(this, "usedTraits", []);
                                            // call case 6: other requests
                                            // call case 6: other requests
                                            // call case 3: self.outer request
                                            var call9949 = callmethodChecked(superDepth, "outer", [0]);
                                            var call9950 = callmethodChecked(call9949, "outer", []);
                                            onSelf = true;
                                            var call9951 = callmethodChecked(call9950, "listMap(2)ancestors(1)", [2, 1], call9946, var_blk, var_newChain);
                                            // call case 6: other requests
                                            var call9952 = callmethodChecked(var_n, "usedTraits:=(1)", [1], call9951);
                                            setLineNumber(1394);    // compilenode identifier
                                            // call case 6: other requests
                                            var call9954 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                            return call9954;
                                          };
                                          func9918.paramCounts = [1, 1];
                                          obj9724.methods["map(1)ancestors(1)"] = func9918;
                                          func9918.definitionLine = 1388;
                                          func9918.definitionModule = "ast";
                                          var func9955 = function(argcv) {    // method pretty(_)
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            var var_depth__39__ = arguments[curarg];
                                            curarg++;
                                            setModuleName("ast");
                                            setLineNumber(1397);    // compilenode identifier
                                            var var_depth = var_depth__39__;
                                            setLineNumber(1398);    // compilenode string
                                            var string9956 = new GraceString("");
                                            var var_spc = string9956;
                                            setLineNumber(1399);    // compilenode num
                                            var opresult9960 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                                            var block9961 = new GraceBlock(this, 1399, 1);
                                            setLineNumber(1);    // compilenode identifier
                                            block9961.real = function(var_i) {
                                              setLineNumber(1400);    // compilenode string
                                              var string9962 = new GraceString("  ");
                                              var opresult9965 = callmethodChecked(var_spc, "++(1)", [1], string9962);
                                              var_spc = opresult9965;
                                              return GraceDone;
                                            };
                                            // call case 5: prelude request
                                            var call9966 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult9960, block9961);
                                            setLineNumber(1402);    // compilenode identifier
                                            // call case 1: super request
                                            var call9968 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                            var var_s = call9968;
                                            setLineNumber(1403);    // compilenode string
                                            var string9969 = new GraceString("");
                                            // call case 4: self request
                                            onSelf = true;
                                            var call9972 = callmethodChecked(this, "name", []);
                                            var string9974 = new GraceString("Name: ");
                                            var string9977 = new GraceString("\n");
                                            var string9980 = new GraceString("");
                                            var opresult9982 = callmethodChecked(string9980, "++(1)", [1], var_s);
                                            var opresult9984 = callmethodChecked(opresult9982, "++(1)", [1], string9977);
                                            var opresult9986 = callmethodChecked(opresult9984, "++(1)", [1], var_spc);
                                            var opresult9988 = callmethodChecked(opresult9986, "++(1)", [1], string9974);
                                            var opresult9990 = callmethodChecked(opresult9988, "++(1)", [1], call9972);
                                            var opresult9992 = callmethodChecked(opresult9990, "++(1)", [1], string9969);
                                            var_s = opresult9992;
                                            var if9993 = GraceDone;
                                            setLineNumber(1404);    // compilenode member
                                            // call case 4: self request
                                            onSelf = true;
                                            var call9995 = callmethodChecked(this, "superclass", []);
                                            var opresult9998 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call9995);
                                            if (Grace_isTrue(opresult9998)) {
                                              setLineNumber(1406);    // compilenode identifier
                                              var opresult10002 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                              // call case 6: other requests
                                              // call case 4: self request
                                              onSelf = true;
                                              var call10004 = callmethodChecked(this, "superclass", []);
                                              var call10005 = callmethodChecked(call10004, "pretty(1)", [1], opresult10002);
                                              setLineNumber(1405);    // compilenode string
                                              var string10007 = new GraceString("Superclass: ");
                                              var string10010 = new GraceString("\n");
                                              var opresult10013 = callmethodChecked(var_s, "++(1)", [1], string10010);
                                              var opresult10015 = callmethodChecked(opresult10013, "++(1)", [1], var_spc);
                                              var opresult10017 = callmethodChecked(opresult10015, "++(1)", [1], string10007);
                                              var opresult10019 = callmethodChecked(opresult10017, "++(1)", [1], call10005);
                                              var_s = opresult10019;
                                              if9993 = GraceDone;
                                            }
                                            var if10020 = GraceDone;
                                            setLineNumber(1408);    // compilenode member
                                            // call case 6: other requests
                                            // call case 6: other requests
                                            // call case 4: self request
                                            onSelf = true;
                                            var call10024 = callmethodChecked(this, "usedTraits", []);
                                            var call10025 = callmethodChecked(call10024, "isEmpty", []);
                                            var call10026 = callmethodChecked(call10025, "not", []);
                                            if (Grace_isTrue(call10026)) {
                                              setLineNumber(1409);    // compilenode string
                                              var string10027 = new GraceString("Traits:");
                                              var string10030 = new GraceString("\n");
                                              var opresult10033 = callmethodChecked(var_s, "++(1)", [1], string10030);
                                              var opresult10035 = callmethodChecked(opresult10033, "++(1)", [1], var_spc);
                                              var opresult10037 = callmethodChecked(opresult10035, "++(1)", [1], string10027);
                                              var_s = opresult10037;
                                              setLineNumber(1410);    // compilenode block
                                              var block10039 = new GraceBlock(this, 1410, 1);
                                              setLineNumber(1);    // compilenode identifier
                                              block10039.real = function(var_t) {
                                                setLineNumber(1411);    // compilenode string
                                                var string10040 = new GraceString("");
                                                var opresult10045 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                                // call case 6: other requests
                                                var call10046 = callmethodChecked(var_t, "pretty(1)", [1], opresult10045);
                                                var string10048 = new GraceString("  ");
                                                var string10051 = new GraceString("\n");
                                                var string10054 = new GraceString("");
                                                var opresult10056 = callmethodChecked(string10054, "++(1)", [1], var_s);
                                                var opresult10058 = callmethodChecked(opresult10056, "++(1)", [1], string10051);
                                                var opresult10060 = callmethodChecked(opresult10058, "++(1)", [1], var_spc);
                                                var opresult10062 = callmethodChecked(opresult10060, "++(1)", [1], string10048);
                                                var opresult10064 = callmethodChecked(opresult10062, "++(1)", [1], call10046);
                                                var opresult10066 = callmethodChecked(opresult10064, "++(1)", [1], string10040);
                                                var_s = opresult10066;
                                                return GraceDone;
                                              };
                                              // call case 6: other requests
                                              setLineNumber(1410);    // compilenode member
                                              // call case 4: self request
                                              onSelf = true;
                                              var call10068 = callmethodChecked(this, "usedTraits", []);
                                              var call10069 = callmethodChecked(call10068, "do(1)", [1], block10039);
                                              if10020 = call10069;
                                            }
                                            setLineNumber(1414);    // compilenode block
                                            var block10071 = new GraceBlock(this, 1414, 1);
                                            setLineNumber(1);    // compilenode identifier
                                            block10071.real = function(var_x) {
                                              setLineNumber(1415);    // compilenode identifier
                                              var opresult10075 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                              // call case 6: other requests
                                              var call10076 = callmethodChecked(var_x, "pretty(1)", [1], opresult10075);
                                              var string10079 = new GraceString("\n");
                                              var opresult10082 = callmethodChecked(var_s, "++(1)", [1], string10079);
                                              var opresult10084 = callmethodChecked(opresult10082, "++(1)", [1], var_spc);
                                              var opresult10086 = callmethodChecked(opresult10084, "++(1)", [1], call10076);
                                              var_s = opresult10086;
                                              return GraceDone;
                                            };
                                            // call case 6: other requests
                                            setLineNumber(1414);    // compilenode member
                                            // call case 4: self request
                                            onSelf = true;
                                            var call10088 = callmethodChecked(this, "value", []);
                                            var call10089 = callmethodChecked(call10088, "do(1)", [1], block10071);
                                            setLineNumber(1417);    // compilenode identifier
                                            return var_s;
                                          };
                                          func9955.paramCounts = [1];
                                          obj9724.methods["pretty(1)"] = func9955;
                                          func9955.definitionLine = 1396;
                                          func9955.definitionModule = "ast";
                                          var func10090 = function(argcv) {    // method toGrace(_)
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            var var_depth = arguments[curarg];
                                            curarg++;
                                            // Start argument checking
                                            curarg = 1;
                                            setLineNumber(1419);    // compilenode identifier
                                            if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                    new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                        callmethod(var_Number, "asString", [0])._value + "."));
                                            curarg++;
                                            // End argument checking
                                            setModuleName("ast");
                                            setLineNumber(1420);    // compilenode string
                                            var string10091 = new GraceString("");
                                            var var_spc = string10091;
                                            setLineNumber(1421);    // compilenode identifier
                                            var diff10095 = callmethodChecked(var_depth, "-(1)", [1], new GraceNum(1));
                                            var opresult10098 = callmethodChecked(new GraceNum(0), "..(1)", [1], diff10095);
                                            var block10099 = new GraceBlock(this, 1421, 1);
                                            setLineNumber(1);    // compilenode identifier
                                            block10099.real = function(var_i) {
                                              setLineNumber(1422);    // compilenode string
                                              var string10100 = new GraceString("    ");
                                              var opresult10103 = callmethodChecked(var_spc, "++(1)", [1], string10100);
                                              var_spc = opresult10103;
                                              return GraceDone;
                                            };
                                            // call case 5: prelude request
                                            var call10104 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult10098, block10099);
                                            setLineNumber(1424);    // compilenode string
                                            var string10105 = new GraceString("object {");
                                            var var_s = string10105;
                                            var if10106 = GraceDone;
                                            setLineNumber(1425);    // compilenode member
                                            // call case 4: self request
                                            onSelf = true;
                                            var call10108 = callmethodChecked(this, "inTrait", []);
                                            if (Grace_isTrue(call10108)) {
                                              var string10109 = new GraceString("   // trait");
                                              var opresult10112 = callmethodChecked(var_s, "++(1)", [1], string10109);
                                              var_s = opresult10112;
                                              if10106 = GraceDone;
                                            }
                                            var if10113 = GraceDone;
                                            setLineNumber(1426);    // compilenode member
                                            // call case 4: self request
                                            onSelf = true;
                                            var call10115 = callmethodChecked(this, "inClass", []);
                                            if (Grace_isTrue(call10115)) {
                                              var string10116 = new GraceString("   // class");
                                              var opresult10119 = callmethodChecked(var_s, "++(1)", [1], string10116);
                                              var_s = opresult10119;
                                              if10113 = GraceDone;
                                            }
                                            var if10120 = GraceDone;
                                            setLineNumber(1427);    // compilenode member
                                            // call case 4: self request
                                            onSelf = true;
                                            var call10122 = callmethodChecked(this, "superclass", []);
                                            var opresult10125 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call10122);
                                            if (Grace_isTrue(opresult10125)) {
                                              setLineNumber(1428);    // compilenode identifier
                                              var opresult10129 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                              // call case 6: other requests
                                              // call case 4: self request
                                              onSelf = true;
                                              var call10131 = callmethodChecked(this, "superclass", []);
                                              var call10132 = callmethodChecked(call10131, "toGrace(1)", [1], opresult10129);
                                              var string10134 = new GraceString("\n");
                                              var opresult10137 = callmethodChecked(var_s, "++(1)", [1], string10134);
                                              var opresult10139 = callmethodChecked(opresult10137, "++(1)", [1], call10132);
                                              var_s = opresult10139;
                                              if10120 = GraceDone;
                                            }
                                            setLineNumber(1430);    // compilenode block
                                            var block10141 = new GraceBlock(this, 1430, 1);
                                            setLineNumber(1);    // compilenode identifier
                                            block10141.real = function(var_t) {
                                              setLineNumber(1430);    // compilenode identifier
                                              var opresult10145 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                              // call case 6: other requests
                                              var call10146 = callmethodChecked(var_t, "toGrace(1)", [1], opresult10145);
                                              var string10148 = new GraceString("\n");
                                              var opresult10151 = callmethodChecked(var_s, "++(1)", [1], string10148);
                                              var opresult10153 = callmethodChecked(opresult10151, "++(1)", [1], call10146);
                                              var_s = opresult10153;
                                              return GraceDone;
                                            };
                                            // call case 6: other requests
                                            // call case 4: self request
                                            onSelf = true;
                                            var call10155 = callmethodChecked(this, "usedTraits", []);
                                            var call10156 = callmethodChecked(call10155, "do(1)", [1], block10141);
                                            setLineNumber(1431);    // compilenode block
                                            var block10158 = new GraceBlock(this, 1431, 1);
                                            setLineNumber(1);    // compilenode identifier
                                            block10158.real = function(var_x) {
                                              setLineNumber(1432);    // compilenode identifier
                                              var opresult10162 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                              // call case 6: other requests
                                              var call10163 = callmethodChecked(var_x, "toGrace(1)", [1], opresult10162);
                                              var string10165 = new GraceString("    ");
                                              var string10168 = new GraceString("\n");
                                              var opresult10171 = callmethodChecked(var_s, "++(1)", [1], string10168);
                                              var opresult10173 = callmethodChecked(opresult10171, "++(1)", [1], var_spc);
                                              var opresult10175 = callmethodChecked(opresult10173, "++(1)", [1], string10165);
                                              var opresult10177 = callmethodChecked(opresult10175, "++(1)", [1], call10163);
                                              var_s = opresult10177;
                                              return GraceDone;
                                            };
                                            // call case 6: other requests
                                            setLineNumber(1431);    // compilenode member
                                            // call case 4: self request
                                            onSelf = true;
                                            var call10179 = callmethodChecked(this, "value", []);
                                            var call10180 = callmethodChecked(call10179, "do(1)", [1], block10158);
                                            setLineNumber(1434);    // compilenode string
                                            var string10181 = new GraceString("}");
                                            var string10184 = new GraceString("\n");
                                            var opresult10187 = callmethodChecked(var_s, "++(1)", [1], string10184);
                                            var opresult10189 = callmethodChecked(opresult10187, "++(1)", [1], var_spc);
                                            var opresult10191 = callmethodChecked(opresult10189, "++(1)", [1], string10181);
                                            var_s = opresult10191;
                                            setLineNumber(1435);    // return value
                                            if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], var_s)))
                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                    new GraceString("result of method toGrace(_) does not have " + 
                                                        callmethod(var_String, "asString", [0])._value + "."));
                                            return var_s;
                                          };
                                          func10090.paramTypes = [];
                                          func10090.paramTypes.push([type_Number, "depth"]);
                                          func10090.paramCounts = [1];
                                          obj9724.methods["toGrace(1)"] = func10090;
                                          func10090.definitionLine = 1419;
                                          func10090.definitionModule = "ast";
                                          var func10192 = function(argcv) {    // method shallowCopy
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            setModuleName("ast");
                                            setLineNumber(1438);    // compilenode identifier
                                            // call case 6: other requests
                                            // call case 6: other requests
                                            var call10195 = callmethodChecked(var_objectNode, "new(2)", [2], var_emptySeq, GraceFalse);
                                            var call10196 = callmethodChecked(call10195, "shallowCopyFieldsFrom(1)", [1], this);
                                            return call10196;
                                          };
                                          func10192.paramCounts = [0];
                                          obj9724.methods["shallowCopy"] = func10192;
                                          func10192.definitionLine = 1437;
                                          func10192.definitionModule = "ast";
                                          var func10197 = function(argcv) {    // method shallowCopyFieldsFrom(_)
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            var var_other = arguments[curarg];
                                            curarg++;
                                            setModuleName("ast");
                                            setLineNumber(1441);    // compilenode identifier
                                            // call case 1: super request
                                            var call10199 = callmethodsuper(this, "shallowCopyFieldsFrom(1)", [1], var_other);
                                            setLineNumber(1442);    // compilenode member
                                            // call case 6: other requests
                                            var call10202 = callmethodChecked(var_other, "name", []);
                                            // call case 4: self request
                                            onSelf = true;
                                            var call10203 = callmethodChecked(this, "name:=(1)", [1], call10202);
                                            setLineNumber(1443);    // compilenode member
                                            // call case 6: other requests
                                            var call10206 = callmethodChecked(var_other, "value", []);
                                            // call case 4: self request
                                            onSelf = true;
                                            var call10207 = callmethodChecked(this, "value:=(1)", [1], call10206);
                                            setLineNumber(1444);    // compilenode member
                                            // call case 6: other requests
                                            var call10210 = callmethodChecked(var_other, "superclass", []);
                                            // call case 4: self request
                                            onSelf = true;
                                            var call10211 = callmethodChecked(this, "superclass:=(1)", [1], call10210);
                                            setLineNumber(1445);    // compilenode member
                                            // call case 6: other requests
                                            var call10214 = callmethodChecked(var_other, "usedTraits", []);
                                            // call case 4: self request
                                            onSelf = true;
                                            var call10215 = callmethodChecked(this, "usedTraits:=(1)", [1], call10214);
                                            setLineNumber(1446);    // compilenode member
                                            // call case 6: other requests
                                            var call10218 = callmethodChecked(var_other, "inClass", []);
                                            // call case 4: self request
                                            onSelf = true;
                                            var call10219 = callmethodChecked(this, "inClass:=(1)", [1], call10218);
                                            setLineNumber(1447);    // compilenode member
                                            // call case 6: other requests
                                            var call10222 = callmethodChecked(var_other, "inTrait", []);
                                            // call case 4: self request
                                            onSelf = true;
                                            var call10223 = callmethodChecked(this, "inTrait:=(1)", [1], call10222);
                                            setLineNumber(1448);    // compilenode member
                                            // call case 6: other requests
                                            var call10226 = callmethodChecked(var_other, "annotations", []);
                                            // call case 4: self request
                                            onSelf = true;
                                            var call10227 = callmethodChecked(this, "annotations:=(1)", [1], call10226);
                                            setLineNumber(1449);    // compilenode identifier
                                            return this;
                                          };
                                          func10197.paramCounts = [1];
                                          obj9724.methods["shallowCopyFieldsFrom(1)"] = func10197;
                                          func10197.definitionLine = 1440;
                                          func10197.definitionModule = "ast";
                                          var func10228 = function(argcv) {    // method asString
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            setModuleName("ast");
                                            setLineNumber(1452);    // compilenode string
                                            var string10229 = new GraceString("");
                                            // call case 4: self request
                                            onSelf = true;
                                            var call10232 = callmethodChecked(this, "nameString", []);
                                            var string10234 = new GraceString("object ");
                                            var opresult10236 = callmethodChecked(string10234, "++(1)", [1], call10232);
                                            var opresult10238 = callmethodChecked(opresult10236, "++(1)", [1], string10229);
                                            return opresult10238;
                                          };
                                          func10228.paramCounts = [0];
                                          obj9724.methods["asString"] = func10228;
                                          func10228.definitionLine = 1451;
                                          func10228.definitionModule = "ast";
                                          setLineNumber(1291);    // compilenode identifier
                                          // call case 6: other requests
                                          // call case 6: other requests
                                          // call case 3: self.outer request
                                          var call10242 = callmethodChecked(superDepth, "outer", [0]);
                                          var call10243 = callmethodChecked(call10242, "outer", []);
                                          var call10244 = callmethodChecked(call10243, "baseNode$object(1)", [0, 1], this);
                                          obj9724.superobj = call10244;
                                          if (call10244.data) obj9724.data = call10244.data;
                                          if (call10244.hasOwnProperty('_value'))
                                              obj9724._value = call10244._value;
                                          setLineNumber(1292);    // compilenode string
                                          var string10245 = new GraceString("object");
                                          obj9724.data["kind"] = string10245;
                                          var reader_ast_kind10246 = function() {
                                            return this.data["kind"];
                                          };
                                          reader_ast_kind10246.def = true;
                                          obj9724.methods["kind"] = reader_ast_kind10246;
                                          setLineNumber(1293);    // compilenode identifier
                                          obj9724.data["value"] = var_b;
                                          var reader_ast_value10247 = function() {
                                            return this.data["value"];
                                          };
                                          obj9724.methods["value"] = reader_ast_value10247;
                                          obj9724.data["value"] = var_b;
                                          var writer_ast_value10247 = function(argcv, o) {
                                            this.data["value"] = o;
                                            return GraceDone;
                                          };
                                          obj9724.methods["value:=(1)"] = writer_ast_value10247;
                                          obj9724.mutable = true;
                                          setLineNumber(1294);    // compilenode identifier
                                          obj9724.data["superclass"] = var_superclass__39__;
                                          var reader_ast_superclass10248 = function() {
                                            return this.data["superclass"];
                                          };
                                          obj9724.methods["superclass"] = reader_ast_superclass10248;
                                          obj9724.data["superclass"] = var_superclass__39__;
                                          var writer_ast_superclass10248 = function(argcv, o) {
                                            this.data["superclass"] = o;
                                            return GraceDone;
                                          };
                                          obj9724.methods["superclass:=(1)"] = writer_ast_superclass10248;
                                          obj9724.mutable = true;
                                          setLineNumber(1295);    // compilenode array
                                          var array10249 = new PrimitiveGraceList([]);
                                          obj9724.data["usedTraits"] = array10249;
                                          var reader_ast_usedTraits10250 = function() {
                                            return this.data["usedTraits"];
                                          };
                                          obj9724.methods["usedTraits"] = reader_ast_usedTraits10250;
                                          obj9724.data["usedTraits"] = array10249;
                                          var writer_ast_usedTraits10250 = function(argcv, o) {
                                            this.data["usedTraits"] = o;
                                            return GraceDone;
                                          };
                                          obj9724.methods["usedTraits:=(1)"] = writer_ast_usedTraits10250;
                                          obj9724.mutable = true;
                                          setLineNumber(1296);    // compilenode string
                                          var string10251 = new GraceString("object");
                                          obj9724.data["name"] = string10251;
                                          var reader_ast_name10252 = function() {
                                            return this.data["name"];
                                          };
                                          obj9724.methods["name"] = reader_ast_name10252;
                                          obj9724.data["name"] = string10251;
                                          var writer_ast_name10252 = function(argcv, o) {
                                            this.data["name"] = o;
                                            return GraceDone;
                                          };
                                          obj9724.methods["name:=(1)"] = writer_ast_name10252;
                                          obj9724.mutable = true;
                                          setLineNumber(1297);    // compilenode identifier
                                          obj9724.data["inClass"] = GraceFalse;
                                          var reader_ast_inClass10253 = function() {
                                            return this.data["inClass"];
                                          };
                                          obj9724.methods["inClass"] = reader_ast_inClass10253;
                                          obj9724.data["inClass"] = GraceFalse;
                                          var writer_ast_inClass10253 = function(argcv, o) {
                                            this.data["inClass"] = o;
                                            return GraceDone;
                                          };
                                          obj9724.methods["inClass:=(1)"] = writer_ast_inClass10253;
                                          obj9724.mutable = true;
                                          setLineNumber(1298);    // compilenode identifier
                                          obj9724.data["inTrait"] = GraceFalse;
                                          var reader_ast_inTrait10254 = function() {
                                            return this.data["inTrait"];
                                          };
                                          obj9724.methods["inTrait"] = reader_ast_inTrait10254;
                                          obj9724.data["inTrait"] = GraceFalse;
                                          var writer_ast_inTrait10254 = function(argcv, o) {
                                            this.data["inTrait"] = o;
                                            return GraceDone;
                                          };
                                          obj9724.methods["inTrait:=(1)"] = writer_ast_inTrait10254;
                                          obj9724.mutable = true;
                                          setLineNumber(1299);    // compilenode identifier
                                          obj9724.data["myLocalNames"] = GraceFalse;
                                          var reader_ast_myLocalNames10255 = function() {
                                            return this.data["myLocalNames"];
                                          };
                                          obj9724.methods["myLocalNames"] = reader_ast_myLocalNames10255;
                                          obj9724.data["myLocalNames"] = GraceFalse;
                                          var writer_ast_myLocalNames10255 = function(argcv, o) {
                                            this.data["myLocalNames"] = o;
                                            return GraceDone;
                                          };
                                          obj9724.methods["myLocalNames:=(1)"] = writer_ast_myLocalNames10255;
                                          reader_ast_myLocalNames10255.confidential = true;
                                          writer_ast_myLocalNames10255.confidential = true;
                                          obj9724.mutable = true;
                                          setLineNumber(1300);    // compilenode array
                                          var array10256 = new PrimitiveGraceList([]);
                                          obj9724.data["annotations"] = array10256;
                                          var reader_ast_annotations10257 = function() {
                                            return this.data["annotations"];
                                          };
                                          obj9724.methods["annotations"] = reader_ast_annotations10257;
                                          obj9724.data["annotations"] = array10256;
                                          var writer_ast_annotations10257 = function(argcv, o) {
                                            this.data["annotations"] = o;
                                            return GraceDone;
                                          };
                                          obj9724.methods["annotations:=(1)"] = writer_ast_annotations10257;
                                          obj9724.mutable = true;
                                          superDepth = origSuperDepth;
                                        };
                                        obj_init_9724.apply(inheritingObject, []);
                                        return obj9724;
                                        };
                                        obj9176.methods["new(2)$object(1)"] = func9723;
                                      superDepth = origSuperDepth;
                                    };
                                    obj_init_9176.apply(obj9176, []);
                                    var var_objectNode = obj9176;
                                    setLineNumber(1);    // compilenode method
                                    var func10258 = function(argcv) {    // method objectNode
                                      var returnTarget = invocationCount;
                                      invocationCount++;
                                      var curarg = 1;
                                      setModuleName("ast");
                                      // objectNode is a simple accessor - elide try ... catch
                                      setLineNumber(1280);    // compilenode identifier
                                      return var_objectNode;
                                    };
                                    func10258.paramCounts = [0];
                                    this.methods["objectNode"] = func10258;
                                    func10258.definitionLine = 1;
                                    func10258.definitionModule = "ast";
                                    this.methods["objectNode"].debug = "def";
                                    setLineNumber(1456);    // compilenode object
                                    var obj10259 = Grace_allocObject(GraceObject, "arrayNode");
                                    obj10259.definitionModule = "ast";
                                    obj10259.definitionLine = 1456;
                                    obj10259.outer = this;
                                    var reader_ast_outer10260 = function() {
                                      return this.outer;
                                    };
                                    obj10259.methods["outer"] = reader_ast_outer10260;
                                    var obj_init_10259 = function() {
                                      var origSuperDepth = superDepth;
                                      superDepth = obj10259;
                                      var func10261 = function(argcv) {    // method new(_)
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        var var_values = arguments[curarg];
                                        curarg++;
                                        setModuleName("ast");
                                        setLineNumber(1457);    // compilenode object
                                        var obj10262 = Grace_allocObject(null, "arrayNode.new(_)");
                                        obj10262.definitionModule = "ast";
                                        obj10262.definitionLine = 1457;
                                        obj10262.outer = this;
                                        var reader_ast_outer10263 = function() {
                                          return this.outer;
                                        };
                                        obj10262.methods["outer"] = reader_ast_outer10263;
                                        var obj_init_10262 = function() {
                                          var origSuperDepth = superDepth;
                                          superDepth = obj10262;
                                          var func10264 = function(argcv) {    // method accept(_)from(_)
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            var var_visitor = arguments[curarg];
                                            curarg++;
                                            var var_as = arguments[curarg];
                                            curarg++;
                                            // Start argument checking
                                            curarg = 1;
                                            setLineNumber(1461);    // compilenode identifier
                                            if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                    new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                        callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                            curarg++;
                                            curarg++;
                                            // End argument checking
                                            setModuleName("ast");
                                            var if10265 = GraceDone;
                                            setLineNumber(1462);    // compilenode identifier
                                            // call case 6: other requests
                                            var call10267 = callmethodChecked(var_visitor, "visitArray(1)up(1)", [1, 1], this, var_as);
                                            if (Grace_isTrue(call10267)) {
                                              setLineNumber(1463);    // compilenode identifier
                                              // call case 6: other requests
                                              var call10269 = callmethodChecked(var_as, "extend(1)", [1], this);
                                              var var_newChain = call10269;
                                              setLineNumber(1464);    // compilenode member
                                              // call case 4: self request
                                              onSelf = true;
                                              var call10272 = callmethodChecked(this, "value", []);
                                              var block10273 = new GraceBlock(this, 1464, 1);
                                              setLineNumber(1);    // compilenode identifier
                                              block10273.real = function(var_ax) {
                                                setLineNumber(1465);    // compilenode identifier
                                                // call case 6: other requests
                                                var call10275 = callmethodChecked(var_ax, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                return call10275;
                                              };
                                              // call case 5: prelude request
                                              var call10276 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call10272, block10273);
                                              if10265 = call10276;
                                            }
                                            return if10265;
                                          };
                                          func10264.paramTypes = [];
                                          func10264.paramTypes.push([]);
                                          func10264.paramTypes.push([]);
                                          func10264.paramCounts = [1, 1];
                                          obj10262.methods["accept(1)from(1)"] = func10264;
                                          func10264.definitionLine = 1461;
                                          func10264.definitionModule = "ast";
                                          var func10277 = function(argcv) {    // method map(_)ancestors(_)
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            var var_blk = arguments[curarg];
                                            curarg++;
                                            var var_as = arguments[curarg];
                                            curarg++;
                                            setModuleName("ast");
                                            setLineNumber(1470);    // compilenode member
                                            // call case 4: self request
                                            onSelf = true;
                                            var call10279 = callmethodChecked(this, "shallowCopy", []);
                                            var var_n = call10279;
                                            setLineNumber(1471);    // compilenode identifier
                                            // call case 6: other requests
                                            var call10281 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                            var var_newChain = call10281;
                                            setLineNumber(1472);    // compilenode member
                                            // call case 4: self request
                                            onSelf = true;
                                            var call10285 = callmethodChecked(this, "value", []);
                                            // call case 6: other requests
                                            // call case 6: other requests
                                            // call case 3: self.outer request
                                            var call10288 = callmethodChecked(superDepth, "outer", [0]);
                                            var call10289 = callmethodChecked(call10288, "outer", []);
                                            onSelf = true;
                                            var call10290 = callmethodChecked(call10289, "listMap(2)ancestors(1)", [2, 1], call10285, var_blk, var_newChain);
                                            // call case 6: other requests
                                            var call10291 = callmethodChecked(var_n, "value:=(1)", [1], call10290);
                                            setLineNumber(1473);    // compilenode identifier
                                            // call case 6: other requests
                                            var call10293 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                            return call10293;
                                          };
                                          func10277.paramCounts = [1, 1];
                                          obj10262.methods["map(1)ancestors(1)"] = func10277;
                                          func10277.definitionLine = 1469;
                                          func10277.definitionModule = "ast";
                                          var func10294 = function(argcv) {    // method pretty(_)
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            var var_depth = arguments[curarg];
                                            curarg++;
                                            setModuleName("ast");
                                            setLineNumber(1476);    // compilenode string
                                            var string10295 = new GraceString("");
                                            var var_spc = string10295;
                                            setLineNumber(1477);    // compilenode num
                                            var opresult10299 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                                            var block10300 = new GraceBlock(this, 1477, 1);
                                            setLineNumber(1);    // compilenode identifier
                                            block10300.real = function(var_ai) {
                                              setLineNumber(1478);    // compilenode string
                                              var string10301 = new GraceString("  ");
                                              var opresult10304 = callmethodChecked(var_spc, "++(1)", [1], string10301);
                                              var_spc = opresult10304;
                                              return GraceDone;
                                            };
                                            // call case 5: prelude request
                                            var call10305 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult10299, block10300);
                                            setLineNumber(1480);    // compilenode identifier
                                            // call case 1: super request
                                            var call10307 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                            var var_s = call10307;
                                            setLineNumber(1481);    // compilenode member
                                            // call case 4: self request
                                            onSelf = true;
                                            var call10310 = callmethodChecked(this, "value", []);
                                            var block10311 = new GraceBlock(this, 1481, 1);
                                            setLineNumber(1);    // compilenode identifier
                                            block10311.real = function(var_ax) {
                                              setLineNumber(1482);    // compilenode identifier
                                              var opresult10315 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                              // call case 6: other requests
                                              var call10316 = callmethodChecked(var_ax, "pretty(1)", [1], opresult10315);
                                              var string10319 = new GraceString("\n");
                                              var opresult10322 = callmethodChecked(var_s, "++(1)", [1], string10319);
                                              var opresult10324 = callmethodChecked(opresult10322, "++(1)", [1], var_spc);
                                              var opresult10326 = callmethodChecked(opresult10324, "++(1)", [1], call10316);
                                              var_s = opresult10326;
                                              return GraceDone;
                                            };
                                            // call case 5: prelude request
                                            var call10327 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call10310, block10311);
                                            setLineNumber(1484);    // compilenode identifier
                                            return var_s;
                                          };
                                          func10294.paramCounts = [1];
                                          obj10262.methods["pretty(1)"] = func10294;
                                          func10294.definitionLine = 1475;
                                          func10294.definitionModule = "ast";
                                          var func10328 = function(argcv) {    // method toGrace(_)
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            var var_depth = arguments[curarg];
                                            curarg++;
                                            // Start argument checking
                                            curarg = 1;
                                            setLineNumber(1486);    // compilenode identifier
                                            if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                    new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                        callmethod(var_Number, "asString", [0])._value + "."));
                                            curarg++;
                                            // End argument checking
                                            setModuleName("ast");
                                            setLineNumber(1487);    // compilenode string
                                            var string10329 = new GraceString("[");
                                            var var_s = string10329;
                                            setLineNumber(1488);    // compilenode member
                                            // call case 6: other requests
                                            // call case 4: self request
                                            onSelf = true;
                                            var call10333 = callmethodChecked(this, "value", []);
                                            var call10334 = callmethodChecked(call10333, "indices", []);
                                            var block10335 = new GraceBlock(this, 1488, 1);
                                            setLineNumber(1);    // compilenode identifier
                                            block10335.real = function(var_i) {
                                              setLineNumber(1489);    // compilenode num
                                              // call case 6: other requests
                                              // call case 6: other requests
                                              // call case 4: self request
                                              onSelf = true;
                                              var call10339 = callmethodChecked(this, "value", []);
                                              var call10340 = callmethodChecked(call10339, "at(1)", [1], var_i);
                                              var call10341 = callmethodChecked(call10340, "toGrace(1)", [1], new GraceNum(0));
                                              var opresult10344 = callmethodChecked(var_s, "++(1)", [1], call10341);
                                              var_s = opresult10344;
                                              var if10345 = GraceDone;
                                              setLineNumber(1490);    // compilenode member
                                              // call case 6: other requests
                                              // call case 4: self request
                                              onSelf = true;
                                              var call10348 = callmethodChecked(this, "value", []);
                                              var call10349 = callmethodChecked(call10348, "size", []);
                                              var opresult10352 = callmethodChecked(var_i, "<(1)", [1], call10349);
                                              if (Grace_isTrue(opresult10352)) {
                                                setLineNumber(1491);    // compilenode string
                                                var string10353 = new GraceString(", ");
                                                var opresult10356 = callmethodChecked(var_s, "++(1)", [1], string10353);
                                                var_s = opresult10356;
                                                if10345 = GraceDone;
                                              }
                                              return if10345;
                                            };
                                            // call case 5: prelude request
                                            var call10357 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call10334, block10335);
                                            setLineNumber(1494);    // compilenode string
                                            var string10358 = new GraceString("]");
                                            var opresult10361 = callmethodChecked(var_s, "++(1)", [1], string10358);
                                            var_s = opresult10361;
                                            setLineNumber(1495);    // return value
                                            if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], var_s)))
                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                    new GraceString("result of method toGrace(_) does not have " + 
                                                        callmethod(var_String, "asString", [0])._value + "."));
                                            return var_s;
                                          };
                                          func10328.paramTypes = [];
                                          func10328.paramTypes.push([type_Number, "depth"]);
                                          func10328.paramCounts = [1];
                                          obj10262.methods["toGrace(1)"] = func10328;
                                          func10328.definitionLine = 1486;
                                          func10328.definitionModule = "ast";
                                          var func10362 = function(argcv) {    // method shallowCopy
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            setModuleName("ast");
                                            setLineNumber(1498);    // compilenode identifier
                                            // call case 6: other requests
                                            // call case 6: other requests
                                            var call10365 = callmethodChecked(var_arrayNode, "new(1)", [1], var_emptySeq);
                                            var call10366 = callmethodChecked(call10365, "shallowCopyFieldsFrom(1)", [1], this);
                                            return call10366;
                                          };
                                          func10362.paramCounts = [0];
                                          obj10262.methods["shallowCopy"] = func10362;
                                          func10362.definitionLine = 1497;
                                          func10362.definitionModule = "ast";
                                          setLineNumber(1458);    // compilenode identifier
                                          // call case 6: other requests
                                          // call case 6: other requests
                                          // call case 3: self.outer request
                                          var call10370 = callmethodChecked(superDepth, "outer", [0]);
                                          var call10371 = callmethodChecked(call10370, "outer", []);
                                          var call10372 = callmethodChecked(call10371, "baseNode$object(1)", [0, 1], this);
                                          obj10262.superobj = call10372;
                                          if (call10372.data) obj10262.data = call10372.data;
                                          if (call10372.hasOwnProperty('_value'))
                                              obj10262._value = call10372._value;
                                          setLineNumber(1459);    // compilenode string
                                          var string10373 = new GraceString("array");
                                          obj10262.data["kind"] = string10373;
                                          var reader_ast_kind10374 = function() {
                                            return this.data["kind"];
                                          };
                                          reader_ast_kind10374.def = true;
                                          obj10262.methods["kind"] = reader_ast_kind10374;
                                          setLineNumber(1460);    // compilenode identifier
                                          obj10262.data["value"] = var_values;
                                          var reader_ast_value10375 = function() {
                                            return this.data["value"];
                                          };
                                          obj10262.methods["value"] = reader_ast_value10375;
                                          obj10262.data["value"] = var_values;
                                          var writer_ast_value10375 = function(argcv, o) {
                                            this.data["value"] = o;
                                            return GraceDone;
                                          };
                                          obj10262.methods["value:=(1)"] = writer_ast_value10375;
                                          obj10262.mutable = true;
                                          superDepth = origSuperDepth;
                                        };
                                        obj_init_10262.apply(obj10262, []);
                                        return obj10262;
                                      };
                                      func10261.paramCounts = [1];
                                      obj10259.methods["new(1)"] = func10261;
                                      func10261.definitionLine = 1457;
                                      func10261.definitionModule = "ast";
                                        var func10376 = function(argcv) {    // method new(_)$object(_)
                                          var curarg = 1;
                                          var var_values = arguments[curarg];
                                          curarg++;
                                          var inheritingObject = arguments[curarg++];
                                          // Start argument processing
                                          curarg = 1;
                                          curarg++;
                                          // End argument processing
                                          setModuleName("ast");
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var obj10377 = Grace_allocObject(null, "new(1)");
                                          obj10377.definitionModule = "ast";
                                          obj10377.definitionLine = 1457;
                                          var inho10377 = inheritingObject;
                                          while (inho10377.superobj) inho10377 = inho10377.superobj;
                                          inho10377.superobj = obj10377;
                                          obj10377.data = inheritingObject.data;
                                          if (inheritingObject.hasOwnProperty('_value'))
                                            obj10377._value = inheritingObject._value;
                                          obj10377.outer = this;
                                          var reader_ast_outer10378 = function() {
                                            return this.outer;
                                          };
                                          obj10377.methods["outer"] = reader_ast_outer10378;
                                          var obj_init_10377 = function() {
                                            var origSuperDepth = superDepth;
                                            superDepth = obj10377;
                                            var func10379 = function(argcv) {    // method accept(_)from(_)
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              var var_visitor = arguments[curarg];
                                              curarg++;
                                              var var_as = arguments[curarg];
                                              curarg++;
                                              // Start argument checking
                                              curarg = 1;
                                              setLineNumber(1461);    // compilenode identifier
                                              if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                      new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                          callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                              curarg++;
                                              curarg++;
                                              // End argument checking
                                              setModuleName("ast");
                                              var if10380 = GraceDone;
                                              setLineNumber(1462);    // compilenode identifier
                                              // call case 6: other requests
                                              var call10382 = callmethodChecked(var_visitor, "visitArray(1)up(1)", [1, 1], this, var_as);
                                              if (Grace_isTrue(call10382)) {
                                                setLineNumber(1463);    // compilenode identifier
                                                // call case 6: other requests
                                                var call10384 = callmethodChecked(var_as, "extend(1)", [1], this);
                                                var var_newChain = call10384;
                                                setLineNumber(1464);    // compilenode member
                                                // call case 4: self request
                                                onSelf = true;
                                                var call10387 = callmethodChecked(this, "value", []);
                                                var block10388 = new GraceBlock(this, 1464, 1);
                                                setLineNumber(1);    // compilenode identifier
                                                block10388.real = function(var_ax) {
                                                  setLineNumber(1465);    // compilenode identifier
                                                  // call case 6: other requests
                                                  var call10390 = callmethodChecked(var_ax, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                  return call10390;
                                                };
                                                // call case 5: prelude request
                                                var call10391 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call10387, block10388);
                                                if10380 = call10391;
                                              }
                                              return if10380;
                                            };
                                            func10379.paramTypes = [];
                                            func10379.paramTypes.push([]);
                                            func10379.paramTypes.push([]);
                                            func10379.paramCounts = [1, 1];
                                            obj10377.methods["accept(1)from(1)"] = func10379;
                                            func10379.definitionLine = 1461;
                                            func10379.definitionModule = "ast";
                                            var func10392 = function(argcv) {    // method map(_)ancestors(_)
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              var var_blk = arguments[curarg];
                                              curarg++;
                                              var var_as = arguments[curarg];
                                              curarg++;
                                              setModuleName("ast");
                                              setLineNumber(1470);    // compilenode member
                                              // call case 4: self request
                                              onSelf = true;
                                              var call10394 = callmethodChecked(this, "shallowCopy", []);
                                              var var_n = call10394;
                                              setLineNumber(1471);    // compilenode identifier
                                              // call case 6: other requests
                                              var call10396 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                              var var_newChain = call10396;
                                              setLineNumber(1472);    // compilenode member
                                              // call case 4: self request
                                              onSelf = true;
                                              var call10400 = callmethodChecked(this, "value", []);
                                              // call case 6: other requests
                                              // call case 6: other requests
                                              // call case 3: self.outer request
                                              var call10403 = callmethodChecked(superDepth, "outer", [0]);
                                              var call10404 = callmethodChecked(call10403, "outer", []);
                                              onSelf = true;
                                              var call10405 = callmethodChecked(call10404, "listMap(2)ancestors(1)", [2, 1], call10400, var_blk, var_newChain);
                                              // call case 6: other requests
                                              var call10406 = callmethodChecked(var_n, "value:=(1)", [1], call10405);
                                              setLineNumber(1473);    // compilenode identifier
                                              // call case 6: other requests
                                              var call10408 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                              return call10408;
                                            };
                                            func10392.paramCounts = [1, 1];
                                            obj10377.methods["map(1)ancestors(1)"] = func10392;
                                            func10392.definitionLine = 1469;
                                            func10392.definitionModule = "ast";
                                            var func10409 = function(argcv) {    // method pretty(_)
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              var var_depth = arguments[curarg];
                                              curarg++;
                                              setModuleName("ast");
                                              setLineNumber(1476);    // compilenode string
                                              var string10410 = new GraceString("");
                                              var var_spc = string10410;
                                              setLineNumber(1477);    // compilenode num
                                              var opresult10414 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                                              var block10415 = new GraceBlock(this, 1477, 1);
                                              setLineNumber(1);    // compilenode identifier
                                              block10415.real = function(var_ai) {
                                                setLineNumber(1478);    // compilenode string
                                                var string10416 = new GraceString("  ");
                                                var opresult10419 = callmethodChecked(var_spc, "++(1)", [1], string10416);
                                                var_spc = opresult10419;
                                                return GraceDone;
                                              };
                                              // call case 5: prelude request
                                              var call10420 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult10414, block10415);
                                              setLineNumber(1480);    // compilenode identifier
                                              // call case 1: super request
                                              var call10422 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                              var var_s = call10422;
                                              setLineNumber(1481);    // compilenode member
                                              // call case 4: self request
                                              onSelf = true;
                                              var call10425 = callmethodChecked(this, "value", []);
                                              var block10426 = new GraceBlock(this, 1481, 1);
                                              setLineNumber(1);    // compilenode identifier
                                              block10426.real = function(var_ax) {
                                                setLineNumber(1482);    // compilenode identifier
                                                var opresult10430 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                                // call case 6: other requests
                                                var call10431 = callmethodChecked(var_ax, "pretty(1)", [1], opresult10430);
                                                var string10434 = new GraceString("\n");
                                                var opresult10437 = callmethodChecked(var_s, "++(1)", [1], string10434);
                                                var opresult10439 = callmethodChecked(opresult10437, "++(1)", [1], var_spc);
                                                var opresult10441 = callmethodChecked(opresult10439, "++(1)", [1], call10431);
                                                var_s = opresult10441;
                                                return GraceDone;
                                              };
                                              // call case 5: prelude request
                                              var call10442 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call10425, block10426);
                                              setLineNumber(1484);    // compilenode identifier
                                              return var_s;
                                            };
                                            func10409.paramCounts = [1];
                                            obj10377.methods["pretty(1)"] = func10409;
                                            func10409.definitionLine = 1475;
                                            func10409.definitionModule = "ast";
                                            var func10443 = function(argcv) {    // method toGrace(_)
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              var var_depth = arguments[curarg];
                                              curarg++;
                                              // Start argument checking
                                              curarg = 1;
                                              setLineNumber(1486);    // compilenode identifier
                                              if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                      new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                          callmethod(var_Number, "asString", [0])._value + "."));
                                              curarg++;
                                              // End argument checking
                                              setModuleName("ast");
                                              setLineNumber(1487);    // compilenode string
                                              var string10444 = new GraceString("[");
                                              var var_s = string10444;
                                              setLineNumber(1488);    // compilenode member
                                              // call case 6: other requests
                                              // call case 4: self request
                                              onSelf = true;
                                              var call10448 = callmethodChecked(this, "value", []);
                                              var call10449 = callmethodChecked(call10448, "indices", []);
                                              var block10450 = new GraceBlock(this, 1488, 1);
                                              setLineNumber(1);    // compilenode identifier
                                              block10450.real = function(var_i) {
                                                setLineNumber(1489);    // compilenode num
                                                // call case 6: other requests
                                                // call case 6: other requests
                                                // call case 4: self request
                                                onSelf = true;
                                                var call10454 = callmethodChecked(this, "value", []);
                                                var call10455 = callmethodChecked(call10454, "at(1)", [1], var_i);
                                                var call10456 = callmethodChecked(call10455, "toGrace(1)", [1], new GraceNum(0));
                                                var opresult10459 = callmethodChecked(var_s, "++(1)", [1], call10456);
                                                var_s = opresult10459;
                                                var if10460 = GraceDone;
                                                setLineNumber(1490);    // compilenode member
                                                // call case 6: other requests
                                                // call case 4: self request
                                                onSelf = true;
                                                var call10463 = callmethodChecked(this, "value", []);
                                                var call10464 = callmethodChecked(call10463, "size", []);
                                                var opresult10467 = callmethodChecked(var_i, "<(1)", [1], call10464);
                                                if (Grace_isTrue(opresult10467)) {
                                                  setLineNumber(1491);    // compilenode string
                                                  var string10468 = new GraceString(", ");
                                                  var opresult10471 = callmethodChecked(var_s, "++(1)", [1], string10468);
                                                  var_s = opresult10471;
                                                  if10460 = GraceDone;
                                                }
                                                return if10460;
                                              };
                                              // call case 5: prelude request
                                              var call10472 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call10449, block10450);
                                              setLineNumber(1494);    // compilenode string
                                              var string10473 = new GraceString("]");
                                              var opresult10476 = callmethodChecked(var_s, "++(1)", [1], string10473);
                                              var_s = opresult10476;
                                              setLineNumber(1495);    // return value
                                              if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], var_s)))
                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                      new GraceString("result of method toGrace(_) does not have " + 
                                                          callmethod(var_String, "asString", [0])._value + "."));
                                              return var_s;
                                            };
                                            func10443.paramTypes = [];
                                            func10443.paramTypes.push([type_Number, "depth"]);
                                            func10443.paramCounts = [1];
                                            obj10377.methods["toGrace(1)"] = func10443;
                                            func10443.definitionLine = 1486;
                                            func10443.definitionModule = "ast";
                                            var func10477 = function(argcv) {    // method shallowCopy
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              setModuleName("ast");
                                              setLineNumber(1498);    // compilenode identifier
                                              // call case 6: other requests
                                              // call case 6: other requests
                                              var call10480 = callmethodChecked(var_arrayNode, "new(1)", [1], var_emptySeq);
                                              var call10481 = callmethodChecked(call10480, "shallowCopyFieldsFrom(1)", [1], this);
                                              return call10481;
                                            };
                                            func10477.paramCounts = [0];
                                            obj10377.methods["shallowCopy"] = func10477;
                                            func10477.definitionLine = 1497;
                                            func10477.definitionModule = "ast";
                                            setLineNumber(1458);    // compilenode identifier
                                            // call case 6: other requests
                                            // call case 6: other requests
                                            // call case 3: self.outer request
                                            var call10485 = callmethodChecked(superDepth, "outer", [0]);
                                            var call10486 = callmethodChecked(call10485, "outer", []);
                                            var call10487 = callmethodChecked(call10486, "baseNode$object(1)", [0, 1], this);
                                            obj10377.superobj = call10487;
                                            if (call10487.data) obj10377.data = call10487.data;
                                            if (call10487.hasOwnProperty('_value'))
                                                obj10377._value = call10487._value;
                                            setLineNumber(1459);    // compilenode string
                                            var string10488 = new GraceString("array");
                                            obj10377.data["kind"] = string10488;
                                            var reader_ast_kind10489 = function() {
                                              return this.data["kind"];
                                            };
                                            reader_ast_kind10489.def = true;
                                            obj10377.methods["kind"] = reader_ast_kind10489;
                                            setLineNumber(1460);    // compilenode identifier
                                            obj10377.data["value"] = var_values;
                                            var reader_ast_value10490 = function() {
                                              return this.data["value"];
                                            };
                                            obj10377.methods["value"] = reader_ast_value10490;
                                            obj10377.data["value"] = var_values;
                                            var writer_ast_value10490 = function(argcv, o) {
                                              this.data["value"] = o;
                                              return GraceDone;
                                            };
                                            obj10377.methods["value:=(1)"] = writer_ast_value10490;
                                            obj10377.mutable = true;
                                            superDepth = origSuperDepth;
                                          };
                                          obj_init_10377.apply(inheritingObject, []);
                                          return obj10377;
                                          };
                                          obj10259.methods["new(1)$object(1)"] = func10376;
                                        superDepth = origSuperDepth;
                                      };
                                      obj_init_10259.apply(obj10259, []);
                                      var var_arrayNode = obj10259;
                                      setLineNumber(1);    // compilenode method
                                      var func10491 = function(argcv) {    // method arrayNode
                                        var returnTarget = invocationCount;
                                        invocationCount++;
                                        var curarg = 1;
                                        setModuleName("ast");
                                        // arrayNode is a simple accessor - elide try ... catch
                                        setLineNumber(1456);    // compilenode identifier
                                        return var_arrayNode;
                                      };
                                      func10491.paramCounts = [0];
                                      this.methods["arrayNode"] = func10491;
                                      func10491.definitionLine = 1;
                                      func10491.definitionModule = "ast";
                                      this.methods["arrayNode"].debug = "def";
                                      setLineNumber(1502);    // compilenode object
                                      var obj10492 = Grace_allocObject(GraceObject, "memberNode");
                                      obj10492.definitionModule = "ast";
                                      obj10492.definitionLine = 1502;
                                      obj10492.outer = this;
                                      var reader_ast_outer10493 = function() {
                                        return this.outer;
                                      };
                                      obj10492.methods["outer"] = reader_ast_outer10493;
                                      var obj_init_10492 = function() {
                                        var origSuperDepth = superDepth;
                                        superDepth = obj10492;
                                        var func10494 = function(argcv) {    // method new(_,_)scope(_)
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          var var_request = arguments[curarg];
                                          curarg++;
                                          var var_receiver = arguments[curarg];
                                          curarg++;
                                          var var_s = arguments[curarg];
                                          curarg++;
                                          setModuleName("ast");
                                          setLineNumber(1505);    // compilenode identifier
                                          // call case 4: self request
                                          onSelf = true;
                                          var call10496 = callmethodChecked(this, "new(2)", [2], var_request, var_receiver);
                                          var var_result = call10496;
                                          setLineNumber(1506);    // compilenode identifier
                                          // call case 6: other requests
                                          var call10498 = callmethodChecked(var_result, "scope:=(1)", [1], var_s);
                                          setLineNumber(1507);    // compilenode identifier
                                          return var_result;
                                        };
                                        func10494.paramCounts = [2, 1];
                                        obj10492.methods["new(2)scope(1)"] = func10494;
                                        func10494.definitionLine = 1503;
                                        func10494.definitionModule = "ast";
                                        var func10499 = function(argcv) {    // method new(_,_)
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          var var_request = arguments[curarg];
                                          curarg++;
                                          var var_receiver__39__ = arguments[curarg];
                                          curarg++;
                                          setModuleName("ast");
                                          setLineNumber(1509);    // compilenode object
                                          var obj10500 = Grace_allocObject(null, "memberNode.new(_,_)");
                                          obj10500.definitionModule = "ast";
                                          obj10500.definitionLine = 1509;
                                          obj10500.outer = this;
                                          var reader_ast_outer10501 = function() {
                                            return this.outer;
                                          };
                                          obj10500.methods["outer"] = reader_ast_outer10501;
                                          var obj_init_10500 = function() {
                                            var origSuperDepth = superDepth;
                                            superDepth = obj10500;
                                            var func10502 = function(argcv) {    // method onSelf
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              setModuleName("ast");
                                              setLineNumber(1519);    // compilenode identifier
                                              // call case 4: self request
                                              onSelf = true;
                                              var call10504 = callmethodChecked(this, "isSelfRequest:=(1)", [1], GraceTrue);
                                              setLineNumber(1520);    // compilenode identifier
                                              return this;
                                            };
                                            func10502.paramCounts = [0];
                                            obj10500.methods["onSelf"] = func10502;
                                            func10502.definitionLine = 1518;
                                            func10502.definitionModule = "ast";
                                            var func10505 = function(argcv) {    // method nameString
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              setModuleName("ast");
                                              setLineNumber(1522);    // compilenode member
                                              // call case 4: self request
                                              onSelf = true;
                                              var call10507 = callmethodChecked(this, "value", []);
                                              return call10507;
                                            };
                                            func10505.paramCounts = [0];
                                            obj10500.methods["nameString"] = func10505;
                                            func10505.definitionLine = 1522;
                                            func10505.definitionModule = "ast";
                                            var func10508 = function(argcv) {    // method canonicalName
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              setModuleName("ast");
                                              setLineNumber(1523);    // compilenode member
                                              // call case 4: self request
                                              onSelf = true;
                                              var call10510 = callmethodChecked(this, "value", []);
                                              return call10510;
                                            };
                                            func10508.paramCounts = [0];
                                            obj10500.methods["canonicalName"] = func10508;
                                            func10508.definitionLine = 1523;
                                            func10508.definitionModule = "ast";
                                            var func10511 = function(argcv) {    // method isMember
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              setModuleName("ast");
                                              // isMember is a simple accessor - elide try ... catch
                                              setLineNumber(1524);    // compilenode identifier
                                              return GraceTrue;
                                            };
                                            func10511.paramCounts = [0];
                                            obj10500.methods["isMember"] = func10511;
                                            func10511.definitionLine = 1524;
                                            func10511.definitionModule = "ast";
                                            var func10512 = function(argcv) {    // method isCall
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              setModuleName("ast");
                                              // isCall is a simple accessor - elide try ... catch
                                              setLineNumber(1525);    // compilenode identifier
                                              return GraceTrue;
                                            };
                                            func10512.paramCounts = [0];
                                            obj10500.methods["isCall"] = func10512;
                                            func10512.definitionLine = 1525;
                                            func10512.definitionModule = "ast";
                                            var func10513 = function(argcv) {    // method with
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              setModuleName("ast");
                                              // with is a simple accessor - elide try ... catch
                                              setLineNumber(1527);    // compilenode identifier
                                              return var_emptySeq;
                                            };
                                            func10513.paramCounts = [0];
                                            obj10500.methods["with"] = func10513;
                                            func10513.definitionLine = 1527;
                                            func10513.definitionModule = "ast";
                                            var func10514 = function(argcv) {    // method arguments
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              setModuleName("ast");
                                              // arguments is a simple accessor - elide try ... catch
                                              setLineNumber(1528);    // compilenode identifier
                                              return var_emptySeq;
                                            };
                                            func10514.paramCounts = [0];
                                            obj10500.methods["arguments"] = func10514;
                                            func10514.definitionLine = 1528;
                                            func10514.definitionModule = "ast";
                                            var func10515 = function(argcv) {    // method argumentsDo
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              setModuleName("ast");
                                              return GraceDone;
                                            };
                                            func10515.paramCounts = [0];
                                            obj10500.methods["argumentsDo"] = func10515;
                                            func10515.definitionLine = 1529;
                                            func10515.definitionModule = "ast";
                                            var func10516 = function(argcv) {    // method accept(_)from(_)
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              var var_visitor = arguments[curarg];
                                              curarg++;
                                              var var_as = arguments[curarg];
                                              curarg++;
                                              // Start argument checking
                                              curarg = 1;
                                              setLineNumber(1530);    // compilenode identifier
                                              if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                      new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                          callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                              curarg++;
                                              curarg++;
                                              // End argument checking
                                              setModuleName("ast");
                                              var if10517 = GraceDone;
                                              setLineNumber(1531);    // compilenode identifier
                                              // call case 6: other requests
                                              var call10519 = callmethodChecked(var_visitor, "visitMember(1)up(1)", [1, 1], this, var_as);
                                              if (Grace_isTrue(call10519)) {
                                                setLineNumber(1532);    // compilenode identifier
                                                // call case 6: other requests
                                                var call10521 = callmethodChecked(var_as, "extend(1)", [1], this);
                                                var var_newChain = call10521;
                                                var if10522 = GraceDone;
                                                setLineNumber(1533);    // compilenode member
                                                // call case 4: self request
                                                onSelf = true;
                                                var call10524 = callmethodChecked(this, "generics", []);
                                                var opresult10527 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call10524);
                                                if (Grace_isTrue(opresult10527)) {
                                                  setLineNumber(1534);    // compilenode block
                                                  var block10529 = new GraceBlock(this, 1534, 1);
                                                  setLineNumber(1);    // compilenode identifier
                                                  block10529.real = function(var_each) {
                                                    setLineNumber(1534);    // compilenode identifier
                                                    // call case 6: other requests
                                                    var call10531 = callmethodChecked(var_each, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                    return call10531;
                                                  };
                                                  // call case 6: other requests
                                                  // call case 4: self request
                                                  onSelf = true;
                                                  var call10533 = callmethodChecked(this, "generics", []);
                                                  var call10534 = callmethodChecked(call10533, "do(1)", [1], block10529);
                                                  if10522 = call10534;
                                                }
                                                setLineNumber(1536);    // compilenode identifier
                                                // call case 6: other requests
                                                // call case 4: self request
                                                onSelf = true;
                                                var call10537 = callmethodChecked(this, "receiver", []);
                                                var call10538 = callmethodChecked(call10537, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                if10517 = call10538;
                                              }
                                              return if10517;
                                            };
                                            func10516.paramTypes = [];
                                            func10516.paramTypes.push([]);
                                            func10516.paramTypes.push([]);
                                            func10516.paramCounts = [1, 1];
                                            obj10500.methods["accept(1)from(1)"] = func10516;
                                            func10516.definitionLine = 1530;
                                            func10516.definitionModule = "ast";
                                            var func10539 = function(argcv) {    // method map(_)ancestors(_)
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              var var_blk = arguments[curarg];
                                              curarg++;
                                              var var_as = arguments[curarg];
                                              curarg++;
                                              setModuleName("ast");
                                              setLineNumber(1540);    // compilenode member
                                              // call case 4: self request
                                              onSelf = true;
                                              var call10541 = callmethodChecked(this, "shallowCopy", []);
                                              var var_n = call10541;
                                              setLineNumber(1541);    // compilenode identifier
                                              // call case 6: other requests
                                              var call10543 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                              var var_newChain = call10543;
                                              setLineNumber(1542);    // compilenode identifier
                                              // call case 6: other requests
                                              // call case 4: self request
                                              onSelf = true;
                                              var call10547 = callmethodChecked(this, "receiver", []);
                                              var call10548 = callmethodChecked(call10547, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
                                              // call case 6: other requests
                                              var call10549 = callmethodChecked(var_n, "receiver:=(1)", [1], call10548);
                                              setLineNumber(1543);    // compilenode member
                                              // call case 4: self request
                                              onSelf = true;
                                              var call10553 = callmethodChecked(this, "generics", []);
                                              // call case 6: other requests
                                              // call case 6: other requests
                                              // call case 3: self.outer request
                                              var call10556 = callmethodChecked(superDepth, "outer", [0]);
                                              var call10557 = callmethodChecked(call10556, "outer", []);
                                              onSelf = true;
                                              var call10558 = callmethodChecked(call10557, "maybeListMap(2)ancestors(1)", [2, 1], call10553, var_blk, var_newChain);
                                              // call case 6: other requests
                                              var call10559 = callmethodChecked(var_n, "generics:=(1)", [1], call10558);
                                              setLineNumber(1544);    // compilenode identifier
                                              // call case 6: other requests
                                              var call10561 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                              return call10561;
                                            };
                                            func10539.paramCounts = [1, 1];
                                            obj10500.methods["map(1)ancestors(1)"] = func10539;
                                            func10539.definitionLine = 1539;
                                            func10539.definitionModule = "ast";
                                            var func10562 = function(argcv) {    // method pretty(_)
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              var var_depth = arguments[curarg];
                                              curarg++;
                                              setModuleName("ast");
                                              setLineNumber(1547);    // compilenode string
                                              var string10563 = new GraceString("");
                                              var var_spc = string10563;
                                              setLineNumber(1548);    // compilenode num
                                              var opresult10567 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                                              var block10568 = new GraceBlock(this, 1548, 1);
                                              setLineNumber(1);    // compilenode identifier
                                              block10568.real = function(var_i) {
                                                setLineNumber(1549);    // compilenode string
                                                var string10569 = new GraceString("  ");
                                                var opresult10572 = callmethodChecked(var_spc, "++(1)", [1], string10569);
                                                var_spc = opresult10572;
                                                return GraceDone;
                                              };
                                              // call case 5: prelude request
                                              var call10573 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult10567, block10568);
                                              setLineNumber(1551);    // compilenode identifier
                                              // call case 1: super request
                                              var call10575 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                              var var_s = call10575;
                                              var if10576 = GraceDone;
                                              setLineNumber(1552);    // compilenode member
                                              // call case 4: self request
                                              onSelf = true;
                                              var call10578 = callmethodChecked(this, "isSelfRequest", []);
                                              if (Grace_isTrue(call10578)) {
                                                var string10579 = new GraceString(" on self ");
                                                if10576 = string10579;
                                              } else {
                                                var string10580 = new GraceString(" ");
                                                if10576 = string10580;
                                              }
                                              var opresult10583 = callmethodChecked(var_s, "++(1)", [1], if10576);
                                              var_s = opresult10583;
                                              setLineNumber(1553);    // compilenode string
                                              var string10584 = new GraceString("\u203a\n");
                                              // call case 4: self request
                                              onSelf = true;
                                              var call10587 = callmethodChecked(this, "value", []);
                                              var string10589 = new GraceString("\u2039");
                                              var opresult10592 = callmethodChecked(var_s, "++(1)", [1], string10589);
                                              var opresult10594 = callmethodChecked(opresult10592, "++(1)", [1], call10587);
                                              var opresult10596 = callmethodChecked(opresult10594, "++(1)", [1], string10584);
                                              var_s = opresult10596;
                                              setLineNumber(1554);    // compilenode identifier
                                              // call case 6: other requests
                                              // call case 4: self request
                                              onSelf = true;
                                              var call10599 = callmethodChecked(this, "receiver", []);
                                              var call10600 = callmethodChecked(call10599, "pretty(1)", [1], var_depth);
                                              var opresult10604 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                              var opresult10606 = callmethodChecked(opresult10604, "++(1)", [1], call10600);
                                              var_s = opresult10606;
                                              var if10607 = GraceDone;
                                              setLineNumber(1555);    // compilenode member
                                              // call case 4: self request
                                              onSelf = true;
                                              var call10609 = callmethodChecked(this, "generics", []);
                                              var opresult10612 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call10609);
                                              if (Grace_isTrue(opresult10612)) {
                                                setLineNumber(1556);    // compilenode string
                                                var string10613 = new GraceString("  Generics:");
                                                var string10616 = new GraceString("\n");
                                                var opresult10619 = callmethodChecked(var_s, "++(1)", [1], string10616);
                                                var opresult10621 = callmethodChecked(opresult10619, "++(1)", [1], var_spc);
                                                var opresult10623 = callmethodChecked(opresult10621, "++(1)", [1], string10613);
                                                var_s = opresult10623;
                                                setLineNumber(1557);    // compilenode member
                                                // call case 4: self request
                                                onSelf = true;
                                                var call10626 = callmethodChecked(this, "generics", []);
                                                var block10627 = new GraceBlock(this, 1557, 1);
                                                setLineNumber(1);    // compilenode identifier
                                                block10627.real = function(var_g) {
                                                  setLineNumber(1558);    // compilenode num
                                                  // call case 6: other requests
                                                  var call10629 = callmethodChecked(var_g, "pretty(1)", [1], new GraceNum(0));
                                                  var string10631 = new GraceString("    ");
                                                  var string10634 = new GraceString("\n");
                                                  var opresult10637 = callmethodChecked(var_s, "++(1)", [1], string10634);
                                                  var opresult10639 = callmethodChecked(opresult10637, "++(1)", [1], var_spc);
                                                  var opresult10641 = callmethodChecked(opresult10639, "++(1)", [1], string10631);
                                                  var opresult10643 = callmethodChecked(opresult10641, "++(1)", [1], call10629);
                                                  var_s = opresult10643;
                                                  return GraceDone;
                                                };
                                                // call case 5: prelude request
                                                var call10644 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call10626, block10627);
                                                if10607 = call10644;
                                              }
                                              setLineNumber(1561);    // compilenode identifier
                                              return var_s;
                                            };
                                            func10562.paramCounts = [1];
                                            obj10500.methods["pretty(1)"] = func10562;
                                            func10562.definitionLine = 1546;
                                            func10562.definitionModule = "ast";
                                            var func10645 = function(argcv) {    // method toGrace(_)
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              var var_depth = arguments[curarg];
                                              curarg++;
                                              // Start argument checking
                                              curarg = 1;
                                              setLineNumber(1563);    // compilenode identifier
                                              if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                      new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                          callmethod(var_Number, "asString", [0])._value + "."));
                                              curarg++;
                                              // End argument checking
                                              setModuleName("ast");
                                              setLineNumber(1564);    // compilenode string
                                              var string10646 = new GraceString("");
                                              var var_s = string10646;
                                              var if10647 = GraceDone;
                                              setLineNumber(1565);    // compilenode string
                                              var string10648 = new GraceString("prefix");
                                              // call case 6: other requests
                                              // call case 4: self request
                                              onSelf = true;
                                              var call10652 = callmethodChecked(this, "value", []);
                                              var call10653 = callmethodChecked(call10652, "substringFrom(1)to(1)", [1, 1], new GraceNum(1), new GraceNum(6));
                                              var opresult10655 = callmethodChecked(call10653, "==(1)", [1], string10648);
                                              if (Grace_isTrue(opresult10655)) {
                                                setLineNumber(1566);    // compilenode member
                                                // call case 6: other requests
                                                // call case 4: self request
                                                onSelf = true;
                                                var call10659 = callmethodChecked(this, "value", []);
                                                var call10660 = callmethodChecked(call10659, "size", []);
                                                // call case 6: other requests
                                                // call case 4: self request
                                                onSelf = true;
                                                var call10662 = callmethodChecked(this, "value", []);
                                                var call10663 = callmethodChecked(call10662, "substringFrom(1)to(1)", [1, 1], new GraceNum(7), call10660);
                                                var_s = call10663;
                                                setLineNumber(1567);    // compilenode num
                                                // call case 6: other requests
                                                // call case 4: self request
                                                onSelf = true;
                                                var call10666 = callmethodChecked(this, "receiver", []);
                                                var call10667 = callmethodChecked(call10666, "toGrace(1)", [1], new GraceNum(0));
                                                var string10669 = new GraceString(" ");
                                                var opresult10672 = callmethodChecked(var_s, "++(1)", [1], string10669);
                                                var opresult10674 = callmethodChecked(opresult10672, "++(1)", [1], call10667);
                                                var_s = opresult10674;
                                                if10647 = GraceDone;
                                              } else {
                                                setLineNumber(1569);    // compilenode member
                                                // call case 4: self request
                                                onSelf = true;
                                                var call10676 = callmethodChecked(this, "value", []);
                                                var string10678 = new GraceString(".");
                                                // call case 6: other requests
                                                // call case 4: self request
                                                onSelf = true;
                                                var call10682 = callmethodChecked(this, "receiver", []);
                                                var call10683 = callmethodChecked(call10682, "toGrace(1)", [1], var_depth);
                                                var opresult10685 = callmethodChecked(call10683, "++(1)", [1], string10678);
                                                var opresult10687 = callmethodChecked(opresult10685, "++(1)", [1], call10676);
                                                var_s = opresult10687;
                                                if10647 = GraceDone;
                                              }
                                              var if10688 = GraceDone;
                                              setLineNumber(1571);    // compilenode member
                                              // call case 4: self request
                                              onSelf = true;
                                              var call10690 = callmethodChecked(this, "generics", []);
                                              var opresult10693 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call10690);
                                              if (Grace_isTrue(opresult10693)) {
                                                setLineNumber(1572);    // compilenode string
                                                var string10694 = new GraceString("<");
                                                var opresult10697 = callmethodChecked(var_s, "++(1)", [1], string10694);
                                                var_s = opresult10697;
                                                setLineNumber(1573);    // compilenode member
                                                // call case 6: other requests
                                                // call case 4: self request
                                                onSelf = true;
                                                var call10702 = callmethodChecked(this, "generics", []);
                                                var call10703 = callmethodChecked(call10702, "size", []);
                                                var diff10705 = callmethodChecked(call10703, "-(1)", [1], new GraceNum(1));
                                                var opresult10708 = callmethodChecked(new GraceNum(1), "..(1)", [1], diff10705);
                                                var block10709 = new GraceBlock(this, 1573, 1);
                                                setLineNumber(1);    // compilenode identifier
                                                block10709.real = function(var_ix) {
                                                  setLineNumber(1574);    // compilenode identifier
                                                  var opresult10713 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                                  // call case 6: other requests
                                                  // call case 6: other requests
                                                  // call case 4: self request
                                                  onSelf = true;
                                                  var call10716 = callmethodChecked(this, "generics", []);
                                                  var call10717 = callmethodChecked(call10716, "at(1)", [1], var_ix);
                                                  var call10718 = callmethodChecked(call10717, "toGrace(1)", [1], opresult10713);
                                                  var opresult10721 = callmethodChecked(var_s, "++(1)", [1], call10718);
                                                  var_s = opresult10721;
                                                  return GraceDone;
                                                };
                                                // call case 5: prelude request
                                                var call10722 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult10708, block10709);
                                                setLineNumber(1576);    // compilenode string
                                                var string10723 = new GraceString(">");
                                                var opresult10728 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                                // call case 6: other requests
                                                // call case 6: other requests
                                                // call case 4: self request
                                                onSelf = true;
                                                var call10731 = callmethodChecked(this, "generics", []);
                                                var call10732 = callmethodChecked(call10731, "last", []);
                                                var call10733 = callmethodChecked(call10732, "toGrace(1)", [1], opresult10728);
                                                var opresult10736 = callmethodChecked(var_s, "++(1)", [1], call10733);
                                                var opresult10738 = callmethodChecked(opresult10736, "++(1)", [1], string10723);
                                                var_s = opresult10738;
                                                if10688 = GraceDone;
                                              }
                                              setLineNumber(1578);    // return value
                                              if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], var_s)))
                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                      new GraceString("result of method toGrace(_) does not have " + 
                                                          callmethod(var_String, "asString", [0])._value + "."));
                                              return var_s;
                                            };
                                            func10645.paramTypes = [];
                                            func10645.paramTypes.push([type_Number, "depth"]);
                                            func10645.paramCounts = [1];
                                            obj10500.methods["toGrace(1)"] = func10645;
                                            func10645.definitionLine = 1563;
                                            func10645.definitionModule = "ast";
                                            var func10739 = function(argcv) {    // method asString
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              setModuleName("ast");
                                              setLineNumber(1580);    // compilenode string
                                              var string10740 = new GraceString("");
                                              // call case 4: self request
                                              onSelf = true;
                                              var call10743 = callmethodChecked(this, "value", []);
                                              var string10745 = new GraceString(".");
                                              // call case 4: self request
                                              onSelf = true;
                                              var call10748 = callmethodChecked(this, "receiver", []);
                                              var string10750 = new GraceString("");
                                              var opresult10752 = callmethodChecked(string10750, "++(1)", [1], call10748);
                                              var opresult10754 = callmethodChecked(opresult10752, "++(1)", [1], string10745);
                                              var opresult10756 = callmethodChecked(opresult10754, "++(1)", [1], call10743);
                                              var opresult10758 = callmethodChecked(opresult10756, "++(1)", [1], string10740);
                                              return opresult10758;
                                            };
                                            func10739.paramCounts = [0];
                                            obj10500.methods["asString"] = func10739;
                                            func10739.definitionLine = 1580;
                                            func10739.definitionModule = "ast";
                                            var func10759 = function(argcv) {    // method asIdentifier
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              setModuleName("ast");
                                              var if10760 = GraceDone;
                                              setLineNumber(1583);    // compilenode member
                                              // call case 4: self request
                                              onSelf = true;
                                              var call10762 = callmethodChecked(this, "scope", []);
                                              var opresult10765 = callmethodChecked(var_fakeSymbolTable, "==(1)", [1], call10762);
                                              if (Grace_isTrue(opresult10765)) {
                                                setLineNumber(1584);    // compilenode string
                                                var string10767 = new GraceString(" when scope was fake");
                                                // call case 4: self request
                                                onSelf = true;
                                                var call10770 = callmethodChecked(this, "pretty(1)", [1], new GraceNum(0));
                                                var string10772 = new GraceString("asIdentifier requested on ");
                                                var opresult10774 = callmethodChecked(string10772, "++(1)", [1], call10770);
                                                var opresult10776 = callmethodChecked(opresult10774, "++(1)", [1], string10767);
                                                // call case 6: other requests
                                                // call case 5: prelude request
                                                var call10778 = callmethodChecked(var_prelude, "ProgrammingError", []);
                                                var call10779 = callmethodChecked(call10778, "raise(1)", [1], opresult10776);
                                                if10760 = call10779;
                                              }
                                              setLineNumber(1586);    // compilenode member
                                              // call case 4: self request
                                              onSelf = true;
                                              var call10782 = callmethodChecked(this, "value", []);
                                              // call case 4: self request
                                              onSelf = true;
                                              var call10784 = callmethodChecked(this, "scope", []);
                                              // call case 6: other requests
                                              var call10785 = callmethodChecked(var_identifierNode, "new(2)scope(1)", [2, 1], call10782, GraceFalse, call10784);
                                              var var_resultNode = call10785;
                                              setLineNumber(1587);    // compilenode identifier
                                              // call case 6: other requests
                                              var call10787 = callmethodChecked(var_resultNode, "inRequest:=(1)", [1], GraceTrue);
                                              setLineNumber(1588);    // compilenode member
                                              // call case 4: self request
                                              onSelf = true;
                                              var call10790 = callmethodChecked(this, "line", []);
                                              // call case 6: other requests
                                              var call10791 = callmethodChecked(var_resultNode, "line:=(1)", [1], call10790);
                                              setLineNumber(1589);    // compilenode member
                                              // call case 4: self request
                                              onSelf = true;
                                              var call10794 = callmethodChecked(this, "linePos", []);
                                              // call case 6: other requests
                                              var call10795 = callmethodChecked(var_resultNode, "linePos:=(1)", [1], call10794);
                                              setLineNumber(1590);    // compilenode identifier
                                              return var_resultNode;
                                            };
                                            func10759.paramCounts = [0];
                                            obj10500.methods["asIdentifier"] = func10759;
                                            func10759.definitionLine = 1581;
                                            func10759.definitionModule = "ast";
                                            var func10796 = function(argcv) {    // method shallowCopy
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              setModuleName("ast");
                                              setLineNumber(1593);    // compilenode identifier
                                              // call case 6: other requests
                                              // call case 4: self request
                                              onSelf = true;
                                              var call10800 = callmethodChecked(this, "nameString", []);
                                              // call case 4: self request
                                              onSelf = true;
                                              var call10802 = callmethodChecked(this, "receiver", []);
                                              // call case 6: other requests
                                              var call10803 = callmethodChecked(var_memberNode, "new(2)", [2], call10800, call10802);
                                              var call10804 = callmethodChecked(call10803, "shallowCopyFieldsFrom(1)", [1], this);
                                              return call10804;
                                            };
                                            func10796.paramCounts = [0];
                                            obj10500.methods["shallowCopy"] = func10796;
                                            func10796.definitionLine = 1592;
                                            func10796.definitionModule = "ast";
                                            var func10805 = function(argcv) {    // method statementName
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              setModuleName("ast");
                                              setLineNumber(1595);    // compilenode string
                                              var string10806 = new GraceString("expression");
                                              return string10806;
                                            };
                                            func10805.paramCounts = [0];
                                            obj10500.methods["statementName"] = func10805;
                                            func10805.definitionLine = 1595;
                                            func10805.definitionModule = "ast";
                                            var func10807 = function(argcv) {    // method shallowCopyFieldsFrom(_)
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              var var_other = arguments[curarg];
                                              curarg++;
                                              setModuleName("ast");
                                              setLineNumber(1597);    // compilenode identifier
                                              // call case 1: super request
                                              var call10809 = callmethodsuper(this, "shallowCopyFieldsFrom(1)", [1], var_other);
                                              setLineNumber(1598);    // compilenode member
                                              // call case 6: other requests
                                              var call10812 = callmethodChecked(var_other, "generics", []);
                                              // call case 4: self request
                                              onSelf = true;
                                              var call10813 = callmethodChecked(this, "generics:=(1)", [1], call10812);
                                              setLineNumber(1599);    // compilenode member
                                              // call case 6: other requests
                                              var call10816 = callmethodChecked(var_other, "isSelfRequest", []);
                                              // call case 4: self request
                                              onSelf = true;
                                              var call10817 = callmethodChecked(this, "isSelfRequest:=(1)", [1], call10816);
                                              setLineNumber(1600);    // compilenode identifier
                                              return this;
                                            };
                                            func10807.paramCounts = [1];
                                            obj10500.methods["shallowCopyFieldsFrom(1)"] = func10807;
                                            func10807.definitionLine = 1596;
                                            func10807.definitionModule = "ast";
                                            setLineNumber(1511);    // compilenode identifier
                                            // call case 6: other requests
                                            // call case 6: other requests
                                            // call case 3: self.outer request
                                            var call10821 = callmethodChecked(superDepth, "outer", [0]);
                                            var call10822 = callmethodChecked(call10821, "outer", []);
                                            var call10823 = callmethodChecked(call10822, "baseNode$object(1)", [0, 1], this);
                                            obj10500.superobj = call10823;
                                            if (call10823.data) obj10500.data = call10823.data;
                                            if (call10823.hasOwnProperty('_value'))
                                                obj10500._value = call10823._value;
                                            setLineNumber(1512);    // compilenode string
                                            var string10824 = new GraceString("member");
                                            obj10500.data["kind"] = string10824;
                                            var reader_ast_kind10825 = function() {
                                              return this.data["kind"];
                                            };
                                            reader_ast_kind10825.def = true;
                                            obj10500.methods["kind"] = reader_ast_kind10825;
                                            setLineNumber(1513);    // compilenode identifier
                                            obj10500.data["value"] = var_request;
                                            var reader_ast_value10826 = function() {
                                              return this.data["value"];
                                            };
                                            obj10500.methods["value"] = reader_ast_value10826;
                                            obj10500.data["value"] = var_request;
                                            var writer_ast_value10826 = function(argcv, o) {
                                              this.data["value"] = o;
                                              return GraceDone;
                                            };
                                            obj10500.methods["value:=(1)"] = writer_ast_value10826;
                                            obj10500.mutable = true;
                                            setLineNumber(1514);    // compilenode identifier
                                            obj10500.data["receiver"] = var_receiver__39__;
                                            var reader_ast_receiver10827 = function() {
                                              return this.data["receiver"];
                                            };
                                            obj10500.methods["receiver"] = reader_ast_receiver10827;
                                            obj10500.data["receiver"] = var_receiver__39__;
                                            var writer_ast_receiver10827 = function(argcv, o) {
                                              this.data["receiver"] = o;
                                              return GraceDone;
                                            };
                                            obj10500.methods["receiver:=(1)"] = writer_ast_receiver10827;
                                            obj10500.mutable = true;
                                            setLineNumber(1515);    // compilenode identifier
                                            obj10500.data["generics"] = GraceFalse;
                                            var reader_ast_generics10828 = function() {
                                              return this.data["generics"];
                                            };
                                            obj10500.methods["generics"] = reader_ast_generics10828;
                                            obj10500.data["generics"] = GraceFalse;
                                            var writer_ast_generics10828 = function(argcv, o) {
                                              this.data["generics"] = o;
                                              return GraceDone;
                                            };
                                            obj10500.methods["generics:=(1)"] = writer_ast_generics10828;
                                            obj10500.mutable = true;
                                            setLineNumber(1516);    // compilenode identifier
                                            obj10500.data["isSelfRequest"] = GraceFalse;
                                            var reader_ast_isSelfRequest10829 = function() {
                                              return this.data["isSelfRequest"];
                                            };
                                            obj10500.methods["isSelfRequest"] = reader_ast_isSelfRequest10829;
                                            obj10500.data["isSelfRequest"] = GraceFalse;
                                            var writer_ast_isSelfRequest10829 = function(argcv, o) {
                                              this.data["isSelfRequest"] = o;
                                              return GraceDone;
                                            };
                                            obj10500.methods["isSelfRequest:=(1)"] = writer_ast_isSelfRequest10829;
                                            obj10500.mutable = true;
                                            superDepth = origSuperDepth;
                                          };
                                          obj_init_10500.apply(obj10500, []);
                                          return obj10500;
                                        };
                                        func10499.paramCounts = [2];
                                        obj10492.methods["new(2)"] = func10499;
                                        func10499.definitionLine = 1509;
                                        func10499.definitionModule = "ast";
                                          var func10830 = function(argcv) {    // method new(_,_)$object(_)
                                            var curarg = 1;
                                            var var_request = arguments[curarg];
                                            curarg++;
                                            var var_receiver__39__ = arguments[curarg];
                                            curarg++;
                                            var inheritingObject = arguments[curarg++];
                                            // Start argument processing
                                            curarg = 1;
                                            curarg++;
                                            curarg++;
                                            // End argument processing
                                            setModuleName("ast");
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var obj10831 = Grace_allocObject(null, "new(2)");
                                            obj10831.definitionModule = "ast";
                                            obj10831.definitionLine = 1509;
                                            var inho10831 = inheritingObject;
                                            while (inho10831.superobj) inho10831 = inho10831.superobj;
                                            inho10831.superobj = obj10831;
                                            obj10831.data = inheritingObject.data;
                                            if (inheritingObject.hasOwnProperty('_value'))
                                              obj10831._value = inheritingObject._value;
                                            obj10831.outer = this;
                                            var reader_ast_outer10832 = function() {
                                              return this.outer;
                                            };
                                            obj10831.methods["outer"] = reader_ast_outer10832;
                                            var obj_init_10831 = function() {
                                              var origSuperDepth = superDepth;
                                              superDepth = obj10831;
                                              var func10833 = function(argcv) {    // method onSelf
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                setModuleName("ast");
                                                setLineNumber(1519);    // compilenode identifier
                                                // call case 4: self request
                                                onSelf = true;
                                                var call10835 = callmethodChecked(this, "isSelfRequest:=(1)", [1], GraceTrue);
                                                setLineNumber(1520);    // compilenode identifier
                                                return this;
                                              };
                                              func10833.paramCounts = [0];
                                              obj10831.methods["onSelf"] = func10833;
                                              func10833.definitionLine = 1518;
                                              func10833.definitionModule = "ast";
                                              var func10836 = function(argcv) {    // method nameString
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                setModuleName("ast");
                                                setLineNumber(1522);    // compilenode member
                                                // call case 4: self request
                                                onSelf = true;
                                                var call10838 = callmethodChecked(this, "value", []);
                                                return call10838;
                                              };
                                              func10836.paramCounts = [0];
                                              obj10831.methods["nameString"] = func10836;
                                              func10836.definitionLine = 1522;
                                              func10836.definitionModule = "ast";
                                              var func10839 = function(argcv) {    // method canonicalName
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                setModuleName("ast");
                                                setLineNumber(1523);    // compilenode member
                                                // call case 4: self request
                                                onSelf = true;
                                                var call10841 = callmethodChecked(this, "value", []);
                                                return call10841;
                                              };
                                              func10839.paramCounts = [0];
                                              obj10831.methods["canonicalName"] = func10839;
                                              func10839.definitionLine = 1523;
                                              func10839.definitionModule = "ast";
                                              var func10842 = function(argcv) {    // method isMember
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                setModuleName("ast");
                                                // isMember is a simple accessor - elide try ... catch
                                                setLineNumber(1524);    // compilenode identifier
                                                return GraceTrue;
                                              };
                                              func10842.paramCounts = [0];
                                              obj10831.methods["isMember"] = func10842;
                                              func10842.definitionLine = 1524;
                                              func10842.definitionModule = "ast";
                                              var func10843 = function(argcv) {    // method isCall
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                setModuleName("ast");
                                                // isCall is a simple accessor - elide try ... catch
                                                setLineNumber(1525);    // compilenode identifier
                                                return GraceTrue;
                                              };
                                              func10843.paramCounts = [0];
                                              obj10831.methods["isCall"] = func10843;
                                              func10843.definitionLine = 1525;
                                              func10843.definitionModule = "ast";
                                              var func10844 = function(argcv) {    // method with
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                setModuleName("ast");
                                                // with is a simple accessor - elide try ... catch
                                                setLineNumber(1527);    // compilenode identifier
                                                return var_emptySeq;
                                              };
                                              func10844.paramCounts = [0];
                                              obj10831.methods["with"] = func10844;
                                              func10844.definitionLine = 1527;
                                              func10844.definitionModule = "ast";
                                              var func10845 = function(argcv) {    // method arguments
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                setModuleName("ast");
                                                // arguments is a simple accessor - elide try ... catch
                                                setLineNumber(1528);    // compilenode identifier
                                                return var_emptySeq;
                                              };
                                              func10845.paramCounts = [0];
                                              obj10831.methods["arguments"] = func10845;
                                              func10845.definitionLine = 1528;
                                              func10845.definitionModule = "ast";
                                              var func10846 = function(argcv) {    // method argumentsDo
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                setModuleName("ast");
                                                return GraceDone;
                                              };
                                              func10846.paramCounts = [0];
                                              obj10831.methods["argumentsDo"] = func10846;
                                              func10846.definitionLine = 1529;
                                              func10846.definitionModule = "ast";
                                              var func10847 = function(argcv) {    // method accept(_)from(_)
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                var var_visitor = arguments[curarg];
                                                curarg++;
                                                var var_as = arguments[curarg];
                                                curarg++;
                                                // Start argument checking
                                                curarg = 1;
                                                setLineNumber(1530);    // compilenode identifier
                                                if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                        new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                            callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                curarg++;
                                                curarg++;
                                                // End argument checking
                                                setModuleName("ast");
                                                var if10848 = GraceDone;
                                                setLineNumber(1531);    // compilenode identifier
                                                // call case 6: other requests
                                                var call10850 = callmethodChecked(var_visitor, "visitMember(1)up(1)", [1, 1], this, var_as);
                                                if (Grace_isTrue(call10850)) {
                                                  setLineNumber(1532);    // compilenode identifier
                                                  // call case 6: other requests
                                                  var call10852 = callmethodChecked(var_as, "extend(1)", [1], this);
                                                  var var_newChain = call10852;
                                                  var if10853 = GraceDone;
                                                  setLineNumber(1533);    // compilenode member
                                                  // call case 4: self request
                                                  onSelf = true;
                                                  var call10855 = callmethodChecked(this, "generics", []);
                                                  var opresult10858 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call10855);
                                                  if (Grace_isTrue(opresult10858)) {
                                                    setLineNumber(1534);    // compilenode block
                                                    var block10860 = new GraceBlock(this, 1534, 1);
                                                    setLineNumber(1);    // compilenode identifier
                                                    block10860.real = function(var_each) {
                                                      setLineNumber(1534);    // compilenode identifier
                                                      // call case 6: other requests
                                                      var call10862 = callmethodChecked(var_each, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                      return call10862;
                                                    };
                                                    // call case 6: other requests
                                                    // call case 4: self request
                                                    onSelf = true;
                                                    var call10864 = callmethodChecked(this, "generics", []);
                                                    var call10865 = callmethodChecked(call10864, "do(1)", [1], block10860);
                                                    if10853 = call10865;
                                                  }
                                                  setLineNumber(1536);    // compilenode identifier
                                                  // call case 6: other requests
                                                  // call case 4: self request
                                                  onSelf = true;
                                                  var call10868 = callmethodChecked(this, "receiver", []);
                                                  var call10869 = callmethodChecked(call10868, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                  if10848 = call10869;
                                                }
                                                return if10848;
                                              };
                                              func10847.paramTypes = [];
                                              func10847.paramTypes.push([]);
                                              func10847.paramTypes.push([]);
                                              func10847.paramCounts = [1, 1];
                                              obj10831.methods["accept(1)from(1)"] = func10847;
                                              func10847.definitionLine = 1530;
                                              func10847.definitionModule = "ast";
                                              var func10870 = function(argcv) {    // method map(_)ancestors(_)
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                var var_blk = arguments[curarg];
                                                curarg++;
                                                var var_as = arguments[curarg];
                                                curarg++;
                                                setModuleName("ast");
                                                setLineNumber(1540);    // compilenode member
                                                // call case 4: self request
                                                onSelf = true;
                                                var call10872 = callmethodChecked(this, "shallowCopy", []);
                                                var var_n = call10872;
                                                setLineNumber(1541);    // compilenode identifier
                                                // call case 6: other requests
                                                var call10874 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                                var var_newChain = call10874;
                                                setLineNumber(1542);    // compilenode identifier
                                                // call case 6: other requests
                                                // call case 4: self request
                                                onSelf = true;
                                                var call10878 = callmethodChecked(this, "receiver", []);
                                                var call10879 = callmethodChecked(call10878, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
                                                // call case 6: other requests
                                                var call10880 = callmethodChecked(var_n, "receiver:=(1)", [1], call10879);
                                                setLineNumber(1543);    // compilenode member
                                                // call case 4: self request
                                                onSelf = true;
                                                var call10884 = callmethodChecked(this, "generics", []);
                                                // call case 6: other requests
                                                // call case 6: other requests
                                                // call case 3: self.outer request
                                                var call10887 = callmethodChecked(superDepth, "outer", [0]);
                                                var call10888 = callmethodChecked(call10887, "outer", []);
                                                onSelf = true;
                                                var call10889 = callmethodChecked(call10888, "maybeListMap(2)ancestors(1)", [2, 1], call10884, var_blk, var_newChain);
                                                // call case 6: other requests
                                                var call10890 = callmethodChecked(var_n, "generics:=(1)", [1], call10889);
                                                setLineNumber(1544);    // compilenode identifier
                                                // call case 6: other requests
                                                var call10892 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                                return call10892;
                                              };
                                              func10870.paramCounts = [1, 1];
                                              obj10831.methods["map(1)ancestors(1)"] = func10870;
                                              func10870.definitionLine = 1539;
                                              func10870.definitionModule = "ast";
                                              var func10893 = function(argcv) {    // method pretty(_)
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                var var_depth = arguments[curarg];
                                                curarg++;
                                                setModuleName("ast");
                                                setLineNumber(1547);    // compilenode string
                                                var string10894 = new GraceString("");
                                                var var_spc = string10894;
                                                setLineNumber(1548);    // compilenode num
                                                var opresult10898 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                                                var block10899 = new GraceBlock(this, 1548, 1);
                                                setLineNumber(1);    // compilenode identifier
                                                block10899.real = function(var_i) {
                                                  setLineNumber(1549);    // compilenode string
                                                  var string10900 = new GraceString("  ");
                                                  var opresult10903 = callmethodChecked(var_spc, "++(1)", [1], string10900);
                                                  var_spc = opresult10903;
                                                  return GraceDone;
                                                };
                                                // call case 5: prelude request
                                                var call10904 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult10898, block10899);
                                                setLineNumber(1551);    // compilenode identifier
                                                // call case 1: super request
                                                var call10906 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                                var var_s = call10906;
                                                var if10907 = GraceDone;
                                                setLineNumber(1552);    // compilenode member
                                                // call case 4: self request
                                                onSelf = true;
                                                var call10909 = callmethodChecked(this, "isSelfRequest", []);
                                                if (Grace_isTrue(call10909)) {
                                                  var string10910 = new GraceString(" on self ");
                                                  if10907 = string10910;
                                                } else {
                                                  var string10911 = new GraceString(" ");
                                                  if10907 = string10911;
                                                }
                                                var opresult10914 = callmethodChecked(var_s, "++(1)", [1], if10907);
                                                var_s = opresult10914;
                                                setLineNumber(1553);    // compilenode string
                                                var string10915 = new GraceString("\u203a\n");
                                                // call case 4: self request
                                                onSelf = true;
                                                var call10918 = callmethodChecked(this, "value", []);
                                                var string10920 = new GraceString("\u2039");
                                                var opresult10923 = callmethodChecked(var_s, "++(1)", [1], string10920);
                                                var opresult10925 = callmethodChecked(opresult10923, "++(1)", [1], call10918);
                                                var opresult10927 = callmethodChecked(opresult10925, "++(1)", [1], string10915);
                                                var_s = opresult10927;
                                                setLineNumber(1554);    // compilenode identifier
                                                // call case 6: other requests
                                                // call case 4: self request
                                                onSelf = true;
                                                var call10930 = callmethodChecked(this, "receiver", []);
                                                var call10931 = callmethodChecked(call10930, "pretty(1)", [1], var_depth);
                                                var opresult10935 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                                var opresult10937 = callmethodChecked(opresult10935, "++(1)", [1], call10931);
                                                var_s = opresult10937;
                                                var if10938 = GraceDone;
                                                setLineNumber(1555);    // compilenode member
                                                // call case 4: self request
                                                onSelf = true;
                                                var call10940 = callmethodChecked(this, "generics", []);
                                                var opresult10943 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call10940);
                                                if (Grace_isTrue(opresult10943)) {
                                                  setLineNumber(1556);    // compilenode string
                                                  var string10944 = new GraceString("  Generics:");
                                                  var string10947 = new GraceString("\n");
                                                  var opresult10950 = callmethodChecked(var_s, "++(1)", [1], string10947);
                                                  var opresult10952 = callmethodChecked(opresult10950, "++(1)", [1], var_spc);
                                                  var opresult10954 = callmethodChecked(opresult10952, "++(1)", [1], string10944);
                                                  var_s = opresult10954;
                                                  setLineNumber(1557);    // compilenode member
                                                  // call case 4: self request
                                                  onSelf = true;
                                                  var call10957 = callmethodChecked(this, "generics", []);
                                                  var block10958 = new GraceBlock(this, 1557, 1);
                                                  setLineNumber(1);    // compilenode identifier
                                                  block10958.real = function(var_g) {
                                                    setLineNumber(1558);    // compilenode num
                                                    // call case 6: other requests
                                                    var call10960 = callmethodChecked(var_g, "pretty(1)", [1], new GraceNum(0));
                                                    var string10962 = new GraceString("    ");
                                                    var string10965 = new GraceString("\n");
                                                    var opresult10968 = callmethodChecked(var_s, "++(1)", [1], string10965);
                                                    var opresult10970 = callmethodChecked(opresult10968, "++(1)", [1], var_spc);
                                                    var opresult10972 = callmethodChecked(opresult10970, "++(1)", [1], string10962);
                                                    var opresult10974 = callmethodChecked(opresult10972, "++(1)", [1], call10960);
                                                    var_s = opresult10974;
                                                    return GraceDone;
                                                  };
                                                  // call case 5: prelude request
                                                  var call10975 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call10957, block10958);
                                                  if10938 = call10975;
                                                }
                                                setLineNumber(1561);    // compilenode identifier
                                                return var_s;
                                              };
                                              func10893.paramCounts = [1];
                                              obj10831.methods["pretty(1)"] = func10893;
                                              func10893.definitionLine = 1546;
                                              func10893.definitionModule = "ast";
                                              var func10976 = function(argcv) {    // method toGrace(_)
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                var var_depth = arguments[curarg];
                                                curarg++;
                                                // Start argument checking
                                                curarg = 1;
                                                setLineNumber(1563);    // compilenode identifier
                                                if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                        new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                            callmethod(var_Number, "asString", [0])._value + "."));
                                                curarg++;
                                                // End argument checking
                                                setModuleName("ast");
                                                setLineNumber(1564);    // compilenode string
                                                var string10977 = new GraceString("");
                                                var var_s = string10977;
                                                var if10978 = GraceDone;
                                                setLineNumber(1565);    // compilenode string
                                                var string10979 = new GraceString("prefix");
                                                // call case 6: other requests
                                                // call case 4: self request
                                                onSelf = true;
                                                var call10983 = callmethodChecked(this, "value", []);
                                                var call10984 = callmethodChecked(call10983, "substringFrom(1)to(1)", [1, 1], new GraceNum(1), new GraceNum(6));
                                                var opresult10986 = callmethodChecked(call10984, "==(1)", [1], string10979);
                                                if (Grace_isTrue(opresult10986)) {
                                                  setLineNumber(1566);    // compilenode member
                                                  // call case 6: other requests
                                                  // call case 4: self request
                                                  onSelf = true;
                                                  var call10990 = callmethodChecked(this, "value", []);
                                                  var call10991 = callmethodChecked(call10990, "size", []);
                                                  // call case 6: other requests
                                                  // call case 4: self request
                                                  onSelf = true;
                                                  var call10993 = callmethodChecked(this, "value", []);
                                                  var call10994 = callmethodChecked(call10993, "substringFrom(1)to(1)", [1, 1], new GraceNum(7), call10991);
                                                  var_s = call10994;
                                                  setLineNumber(1567);    // compilenode num
                                                  // call case 6: other requests
                                                  // call case 4: self request
                                                  onSelf = true;
                                                  var call10997 = callmethodChecked(this, "receiver", []);
                                                  var call10998 = callmethodChecked(call10997, "toGrace(1)", [1], new GraceNum(0));
                                                  var string11000 = new GraceString(" ");
                                                  var opresult11003 = callmethodChecked(var_s, "++(1)", [1], string11000);
                                                  var opresult11005 = callmethodChecked(opresult11003, "++(1)", [1], call10998);
                                                  var_s = opresult11005;
                                                  if10978 = GraceDone;
                                                } else {
                                                  setLineNumber(1569);    // compilenode member
                                                  // call case 4: self request
                                                  onSelf = true;
                                                  var call11007 = callmethodChecked(this, "value", []);
                                                  var string11009 = new GraceString(".");
                                                  // call case 6: other requests
                                                  // call case 4: self request
                                                  onSelf = true;
                                                  var call11013 = callmethodChecked(this, "receiver", []);
                                                  var call11014 = callmethodChecked(call11013, "toGrace(1)", [1], var_depth);
                                                  var opresult11016 = callmethodChecked(call11014, "++(1)", [1], string11009);
                                                  var opresult11018 = callmethodChecked(opresult11016, "++(1)", [1], call11007);
                                                  var_s = opresult11018;
                                                  if10978 = GraceDone;
                                                }
                                                var if11019 = GraceDone;
                                                setLineNumber(1571);    // compilenode member
                                                // call case 4: self request
                                                onSelf = true;
                                                var call11021 = callmethodChecked(this, "generics", []);
                                                var opresult11024 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call11021);
                                                if (Grace_isTrue(opresult11024)) {
                                                  setLineNumber(1572);    // compilenode string
                                                  var string11025 = new GraceString("<");
                                                  var opresult11028 = callmethodChecked(var_s, "++(1)", [1], string11025);
                                                  var_s = opresult11028;
                                                  setLineNumber(1573);    // compilenode member
                                                  // call case 6: other requests
                                                  // call case 4: self request
                                                  onSelf = true;
                                                  var call11033 = callmethodChecked(this, "generics", []);
                                                  var call11034 = callmethodChecked(call11033, "size", []);
                                                  var diff11036 = callmethodChecked(call11034, "-(1)", [1], new GraceNum(1));
                                                  var opresult11039 = callmethodChecked(new GraceNum(1), "..(1)", [1], diff11036);
                                                  var block11040 = new GraceBlock(this, 1573, 1);
                                                  setLineNumber(1);    // compilenode identifier
                                                  block11040.real = function(var_ix) {
                                                    setLineNumber(1574);    // compilenode identifier
                                                    var opresult11044 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                                    // call case 6: other requests
                                                    // call case 6: other requests
                                                    // call case 4: self request
                                                    onSelf = true;
                                                    var call11047 = callmethodChecked(this, "generics", []);
                                                    var call11048 = callmethodChecked(call11047, "at(1)", [1], var_ix);
                                                    var call11049 = callmethodChecked(call11048, "toGrace(1)", [1], opresult11044);
                                                    var opresult11052 = callmethodChecked(var_s, "++(1)", [1], call11049);
                                                    var_s = opresult11052;
                                                    return GraceDone;
                                                  };
                                                  // call case 5: prelude request
                                                  var call11053 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult11039, block11040);
                                                  setLineNumber(1576);    // compilenode string
                                                  var string11054 = new GraceString(">");
                                                  var opresult11059 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                                  // call case 6: other requests
                                                  // call case 6: other requests
                                                  // call case 4: self request
                                                  onSelf = true;
                                                  var call11062 = callmethodChecked(this, "generics", []);
                                                  var call11063 = callmethodChecked(call11062, "last", []);
                                                  var call11064 = callmethodChecked(call11063, "toGrace(1)", [1], opresult11059);
                                                  var opresult11067 = callmethodChecked(var_s, "++(1)", [1], call11064);
                                                  var opresult11069 = callmethodChecked(opresult11067, "++(1)", [1], string11054);
                                                  var_s = opresult11069;
                                                  if11019 = GraceDone;
                                                }
                                                setLineNumber(1578);    // return value
                                                if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], var_s)))
                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                        new GraceString("result of method toGrace(_) does not have " + 
                                                            callmethod(var_String, "asString", [0])._value + "."));
                                                return var_s;
                                              };
                                              func10976.paramTypes = [];
                                              func10976.paramTypes.push([type_Number, "depth"]);
                                              func10976.paramCounts = [1];
                                              obj10831.methods["toGrace(1)"] = func10976;
                                              func10976.definitionLine = 1563;
                                              func10976.definitionModule = "ast";
                                              var func11070 = function(argcv) {    // method asString
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                setModuleName("ast");
                                                setLineNumber(1580);    // compilenode string
                                                var string11071 = new GraceString("");
                                                // call case 4: self request
                                                onSelf = true;
                                                var call11074 = callmethodChecked(this, "value", []);
                                                var string11076 = new GraceString(".");
                                                // call case 4: self request
                                                onSelf = true;
                                                var call11079 = callmethodChecked(this, "receiver", []);
                                                var string11081 = new GraceString("");
                                                var opresult11083 = callmethodChecked(string11081, "++(1)", [1], call11079);
                                                var opresult11085 = callmethodChecked(opresult11083, "++(1)", [1], string11076);
                                                var opresult11087 = callmethodChecked(opresult11085, "++(1)", [1], call11074);
                                                var opresult11089 = callmethodChecked(opresult11087, "++(1)", [1], string11071);
                                                return opresult11089;
                                              };
                                              func11070.paramCounts = [0];
                                              obj10831.methods["asString"] = func11070;
                                              func11070.definitionLine = 1580;
                                              func11070.definitionModule = "ast";
                                              var func11090 = function(argcv) {    // method asIdentifier
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                setModuleName("ast");
                                                var if11091 = GraceDone;
                                                setLineNumber(1583);    // compilenode member
                                                // call case 4: self request
                                                onSelf = true;
                                                var call11093 = callmethodChecked(this, "scope", []);
                                                var opresult11096 = callmethodChecked(var_fakeSymbolTable, "==(1)", [1], call11093);
                                                if (Grace_isTrue(opresult11096)) {
                                                  setLineNumber(1584);    // compilenode string
                                                  var string11098 = new GraceString(" when scope was fake");
                                                  // call case 4: self request
                                                  onSelf = true;
                                                  var call11101 = callmethodChecked(this, "pretty(1)", [1], new GraceNum(0));
                                                  var string11103 = new GraceString("asIdentifier requested on ");
                                                  var opresult11105 = callmethodChecked(string11103, "++(1)", [1], call11101);
                                                  var opresult11107 = callmethodChecked(opresult11105, "++(1)", [1], string11098);
                                                  // call case 6: other requests
                                                  // call case 5: prelude request
                                                  var call11109 = callmethodChecked(var_prelude, "ProgrammingError", []);
                                                  var call11110 = callmethodChecked(call11109, "raise(1)", [1], opresult11107);
                                                  if11091 = call11110;
                                                }
                                                setLineNumber(1586);    // compilenode member
                                                // call case 4: self request
                                                onSelf = true;
                                                var call11113 = callmethodChecked(this, "value", []);
                                                // call case 4: self request
                                                onSelf = true;
                                                var call11115 = callmethodChecked(this, "scope", []);
                                                // call case 6: other requests
                                                var call11116 = callmethodChecked(var_identifierNode, "new(2)scope(1)", [2, 1], call11113, GraceFalse, call11115);
                                                var var_resultNode = call11116;
                                                setLineNumber(1587);    // compilenode identifier
                                                // call case 6: other requests
                                                var call11118 = callmethodChecked(var_resultNode, "inRequest:=(1)", [1], GraceTrue);
                                                setLineNumber(1588);    // compilenode member
                                                // call case 4: self request
                                                onSelf = true;
                                                var call11121 = callmethodChecked(this, "line", []);
                                                // call case 6: other requests
                                                var call11122 = callmethodChecked(var_resultNode, "line:=(1)", [1], call11121);
                                                setLineNumber(1589);    // compilenode member
                                                // call case 4: self request
                                                onSelf = true;
                                                var call11125 = callmethodChecked(this, "linePos", []);
                                                // call case 6: other requests
                                                var call11126 = callmethodChecked(var_resultNode, "linePos:=(1)", [1], call11125);
                                                setLineNumber(1590);    // compilenode identifier
                                                return var_resultNode;
                                              };
                                              func11090.paramCounts = [0];
                                              obj10831.methods["asIdentifier"] = func11090;
                                              func11090.definitionLine = 1581;
                                              func11090.definitionModule = "ast";
                                              var func11127 = function(argcv) {    // method shallowCopy
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                setModuleName("ast");
                                                setLineNumber(1593);    // compilenode identifier
                                                // call case 6: other requests
                                                // call case 4: self request
                                                onSelf = true;
                                                var call11131 = callmethodChecked(this, "nameString", []);
                                                // call case 4: self request
                                                onSelf = true;
                                                var call11133 = callmethodChecked(this, "receiver", []);
                                                // call case 6: other requests
                                                var call11134 = callmethodChecked(var_memberNode, "new(2)", [2], call11131, call11133);
                                                var call11135 = callmethodChecked(call11134, "shallowCopyFieldsFrom(1)", [1], this);
                                                return call11135;
                                              };
                                              func11127.paramCounts = [0];
                                              obj10831.methods["shallowCopy"] = func11127;
                                              func11127.definitionLine = 1592;
                                              func11127.definitionModule = "ast";
                                              var func11136 = function(argcv) {    // method statementName
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                setModuleName("ast");
                                                setLineNumber(1595);    // compilenode string
                                                var string11137 = new GraceString("expression");
                                                return string11137;
                                              };
                                              func11136.paramCounts = [0];
                                              obj10831.methods["statementName"] = func11136;
                                              func11136.definitionLine = 1595;
                                              func11136.definitionModule = "ast";
                                              var func11138 = function(argcv) {    // method shallowCopyFieldsFrom(_)
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                var var_other = arguments[curarg];
                                                curarg++;
                                                setModuleName("ast");
                                                setLineNumber(1597);    // compilenode identifier
                                                // call case 1: super request
                                                var call11140 = callmethodsuper(this, "shallowCopyFieldsFrom(1)", [1], var_other);
                                                setLineNumber(1598);    // compilenode member
                                                // call case 6: other requests
                                                var call11143 = callmethodChecked(var_other, "generics", []);
                                                // call case 4: self request
                                                onSelf = true;
                                                var call11144 = callmethodChecked(this, "generics:=(1)", [1], call11143);
                                                setLineNumber(1599);    // compilenode member
                                                // call case 6: other requests
                                                var call11147 = callmethodChecked(var_other, "isSelfRequest", []);
                                                // call case 4: self request
                                                onSelf = true;
                                                var call11148 = callmethodChecked(this, "isSelfRequest:=(1)", [1], call11147);
                                                setLineNumber(1600);    // compilenode identifier
                                                return this;
                                              };
                                              func11138.paramCounts = [1];
                                              obj10831.methods["shallowCopyFieldsFrom(1)"] = func11138;
                                              func11138.definitionLine = 1596;
                                              func11138.definitionModule = "ast";
                                              setLineNumber(1511);    // compilenode identifier
                                              // call case 6: other requests
                                              // call case 6: other requests
                                              // call case 3: self.outer request
                                              var call11152 = callmethodChecked(superDepth, "outer", [0]);
                                              var call11153 = callmethodChecked(call11152, "outer", []);
                                              var call11154 = callmethodChecked(call11153, "baseNode$object(1)", [0, 1], this);
                                              obj10831.superobj = call11154;
                                              if (call11154.data) obj10831.data = call11154.data;
                                              if (call11154.hasOwnProperty('_value'))
                                                  obj10831._value = call11154._value;
                                              setLineNumber(1512);    // compilenode string
                                              var string11155 = new GraceString("member");
                                              obj10831.data["kind"] = string11155;
                                              var reader_ast_kind11156 = function() {
                                                return this.data["kind"];
                                              };
                                              reader_ast_kind11156.def = true;
                                              obj10831.methods["kind"] = reader_ast_kind11156;
                                              setLineNumber(1513);    // compilenode identifier
                                              obj10831.data["value"] = var_request;
                                              var reader_ast_value11157 = function() {
                                                return this.data["value"];
                                              };
                                              obj10831.methods["value"] = reader_ast_value11157;
                                              obj10831.data["value"] = var_request;
                                              var writer_ast_value11157 = function(argcv, o) {
                                                this.data["value"] = o;
                                                return GraceDone;
                                              };
                                              obj10831.methods["value:=(1)"] = writer_ast_value11157;
                                              obj10831.mutable = true;
                                              setLineNumber(1514);    // compilenode identifier
                                              obj10831.data["receiver"] = var_receiver__39__;
                                              var reader_ast_receiver11158 = function() {
                                                return this.data["receiver"];
                                              };
                                              obj10831.methods["receiver"] = reader_ast_receiver11158;
                                              obj10831.data["receiver"] = var_receiver__39__;
                                              var writer_ast_receiver11158 = function(argcv, o) {
                                                this.data["receiver"] = o;
                                                return GraceDone;
                                              };
                                              obj10831.methods["receiver:=(1)"] = writer_ast_receiver11158;
                                              obj10831.mutable = true;
                                              setLineNumber(1515);    // compilenode identifier
                                              obj10831.data["generics"] = GraceFalse;
                                              var reader_ast_generics11159 = function() {
                                                return this.data["generics"];
                                              };
                                              obj10831.methods["generics"] = reader_ast_generics11159;
                                              obj10831.data["generics"] = GraceFalse;
                                              var writer_ast_generics11159 = function(argcv, o) {
                                                this.data["generics"] = o;
                                                return GraceDone;
                                              };
                                              obj10831.methods["generics:=(1)"] = writer_ast_generics11159;
                                              obj10831.mutable = true;
                                              setLineNumber(1516);    // compilenode identifier
                                              obj10831.data["isSelfRequest"] = GraceFalse;
                                              var reader_ast_isSelfRequest11160 = function() {
                                                return this.data["isSelfRequest"];
                                              };
                                              obj10831.methods["isSelfRequest"] = reader_ast_isSelfRequest11160;
                                              obj10831.data["isSelfRequest"] = GraceFalse;
                                              var writer_ast_isSelfRequest11160 = function(argcv, o) {
                                                this.data["isSelfRequest"] = o;
                                                return GraceDone;
                                              };
                                              obj10831.methods["isSelfRequest:=(1)"] = writer_ast_isSelfRequest11160;
                                              obj10831.mutable = true;
                                              superDepth = origSuperDepth;
                                            };
                                            obj_init_10831.apply(inheritingObject, []);
                                            return obj10831;
                                            };
                                            obj10492.methods["new(2)$object(1)"] = func10830;
                                          superDepth = origSuperDepth;
                                        };
                                        obj_init_10492.apply(obj10492, []);
                                        var var_memberNode = obj10492;
                                        setLineNumber(1);    // compilenode method
                                        var func11161 = function(argcv) {    // method memberNode
                                          var returnTarget = invocationCount;
                                          invocationCount++;
                                          var curarg = 1;
                                          setModuleName("ast");
                                          // memberNode is a simple accessor - elide try ... catch
                                          setLineNumber(1502);    // compilenode identifier
                                          return var_memberNode;
                                        };
                                        func11161.paramCounts = [0];
                                        this.methods["memberNode"] = func11161;
                                        func11161.definitionLine = 1;
                                        func11161.definitionModule = "ast";
                                        this.methods["memberNode"].debug = "def";
                                        setLineNumber(1604);    // compilenode object
                                        var obj11162 = Grace_allocObject(GraceObject, "genericNode");
                                        obj11162.definitionModule = "ast";
                                        obj11162.definitionLine = 1604;
                                        obj11162.outer = this;
                                        var reader_ast_outer11163 = function() {
                                          return this.outer;
                                        };
                                        obj11162.methods["outer"] = reader_ast_outer11163;
                                        var obj_init_11162 = function() {
                                          var origSuperDepth = superDepth;
                                          superDepth = obj11162;
                                          var func11164 = function(argcv) {    // method new(_,_)
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            var var_base = arguments[curarg];
                                            curarg++;
                                            var var_arguments = arguments[curarg];
                                            curarg++;
                                            setModuleName("ast");
                                            setLineNumber(1605);    // compilenode object
                                            var obj11165 = Grace_allocObject(null, "genericNode.new(_,_)");
                                            obj11165.definitionModule = "ast";
                                            obj11165.definitionLine = 1605;
                                            obj11165.outer = this;
                                            var reader_ast_outer11166 = function() {
                                              return this.outer;
                                            };
                                            obj11165.methods["outer"] = reader_ast_outer11166;
                                            var obj_init_11165 = function() {
                                              var origSuperDepth = superDepth;
                                              superDepth = obj11165;
                                              var func11167 = function(argcv) {    // method nameString
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                setModuleName("ast");
                                                setLineNumber(1613);    // compilenode member
                                                // call case 6: other requests
                                                // call case 4: self request
                                                onSelf = true;
                                                var call11170 = callmethodChecked(this, "value", []);
                                                var call11171 = callmethodChecked(call11170, "nameString", []);
                                                return call11171;
                                              };
                                              func11167.paramCounts = [0];
                                              obj11165.methods["nameString"] = func11167;
                                              func11167.definitionLine = 1613;
                                              func11167.definitionModule = "ast";
                                              var func11172 = function(argcv) {    // method asString
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                setModuleName("ast");
                                                setLineNumber(1614);    // compilenode num
                                                // call case 4: self request
                                                onSelf = true;
                                                var call11174 = callmethodChecked(this, "toGrace(1)", [1], new GraceNum(0));
                                                return call11174;
                                              };
                                              func11172.paramCounts = [0];
                                              obj11165.methods["asString"] = func11172;
                                              func11172.definitionLine = 1614;
                                              func11172.definitionModule = "ast";
                                              var func11175 = function(argcv) {    // method accept(_)from(_)
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                var var_visitor = arguments[curarg];
                                                curarg++;
                                                var var_as = arguments[curarg];
                                                curarg++;
                                                // Start argument checking
                                                curarg = 1;
                                                setLineNumber(1615);    // compilenode identifier
                                                if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                        new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                            callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                curarg++;
                                                curarg++;
                                                // End argument checking
                                                setModuleName("ast");
                                                var if11176 = GraceDone;
                                                setLineNumber(1616);    // compilenode identifier
                                                // call case 6: other requests
                                                var call11178 = callmethodChecked(var_visitor, "visitGeneric(1)up(1)", [1, 1], this, var_as);
                                                if (Grace_isTrue(call11178)) {
                                                  setLineNumber(1617);    // compilenode identifier
                                                  // call case 6: other requests
                                                  var call11180 = callmethodChecked(var_as, "extend(1)", [1], this);
                                                  var var_newChain = call11180;
                                                  setLineNumber(1618);    // compilenode identifier
                                                  // call case 6: other requests
                                                  // call case 4: self request
                                                  onSelf = true;
                                                  var call11183 = callmethodChecked(this, "value", []);
                                                  var call11184 = callmethodChecked(call11183, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                  setLineNumber(1619);    // compilenode member
                                                  // call case 4: self request
                                                  onSelf = true;
                                                  var call11187 = callmethodChecked(this, "args", []);
                                                  var block11188 = new GraceBlock(this, 1619, 1);
                                                  setLineNumber(1);    // compilenode identifier
                                                  block11188.real = function(var_p) {
                                                    setLineNumber(1620);    // compilenode identifier
                                                    // call case 6: other requests
                                                    var call11190 = callmethodChecked(var_p, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                    return call11190;
                                                  };
                                                  // call case 5: prelude request
                                                  var call11191 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call11187, block11188);
                                                  if11176 = call11191;
                                                }
                                                return if11176;
                                              };
                                              func11175.paramTypes = [];
                                              func11175.paramTypes.push([]);
                                              func11175.paramTypes.push([]);
                                              func11175.paramCounts = [1, 1];
                                              obj11165.methods["accept(1)from(1)"] = func11175;
                                              func11175.definitionLine = 1615;
                                              func11175.definitionModule = "ast";
                                              var func11192 = function(argcv) {    // method map(_)ancestors(_)
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                var var_blk = arguments[curarg];
                                                curarg++;
                                                var var_as = arguments[curarg];
                                                curarg++;
                                                setModuleName("ast");
                                                setLineNumber(1625);    // compilenode member
                                                // call case 4: self request
                                                onSelf = true;
                                                var call11194 = callmethodChecked(this, "shallowCopy", []);
                                                var var_n = call11194;
                                                setLineNumber(1626);    // compilenode identifier
                                                // call case 6: other requests
                                                var call11196 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                                var var_newChain = call11196;
                                                setLineNumber(1627);    // compilenode identifier
                                                // call case 6: other requests
                                                // call case 4: self request
                                                onSelf = true;
                                                var call11200 = callmethodChecked(this, "value", []);
                                                var call11201 = callmethodChecked(call11200, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
                                                // call case 6: other requests
                                                var call11202 = callmethodChecked(var_n, "value:=(1)", [1], call11201);
                                                setLineNumber(1628);    // compilenode member
                                                // call case 4: self request
                                                onSelf = true;
                                                var call11206 = callmethodChecked(this, "args", []);
                                                // call case 6: other requests
                                                // call case 6: other requests
                                                // call case 3: self.outer request
                                                var call11209 = callmethodChecked(superDepth, "outer", [0]);
                                                var call11210 = callmethodChecked(call11209, "outer", []);
                                                onSelf = true;
                                                var call11211 = callmethodChecked(call11210, "listMap(2)ancestors(1)", [2, 1], call11206, var_blk, var_newChain);
                                                // call case 6: other requests
                                                var call11212 = callmethodChecked(var_n, "args:=(1)", [1], call11211);
                                                setLineNumber(1629);    // compilenode identifier
                                                // call case 6: other requests
                                                var call11214 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                                return call11214;
                                              };
                                              func11192.paramCounts = [1, 1];
                                              obj11165.methods["map(1)ancestors(1)"] = func11192;
                                              func11192.definitionLine = 1624;
                                              func11192.definitionModule = "ast";
                                              var func11215 = function(argcv) {    // method pretty(_)
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                var var_depth = arguments[curarg];
                                                curarg++;
                                                setModuleName("ast");
                                                setLineNumber(1632);    // compilenode string
                                                var string11216 = new GraceString(")<");
                                                // call case 6: other requests
                                                // call case 4: self request
                                                onSelf = true;
                                                var call11220 = callmethodChecked(this, "value", []);
                                                var call11221 = callmethodChecked(call11220, "pretty(1)", [1], var_depth);
                                                var string11223 = new GraceString("(");
                                                // call case 1: super request
                                                var call11226 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                                var string11228 = new GraceString("");
                                                var opresult11230 = callmethodChecked(string11228, "++(1)", [1], call11226);
                                                var opresult11232 = callmethodChecked(opresult11230, "++(1)", [1], string11223);
                                                var opresult11234 = callmethodChecked(opresult11232, "++(1)", [1], call11221);
                                                var opresult11236 = callmethodChecked(opresult11234, "++(1)", [1], string11216);
                                                var var_s = opresult11236;
                                                setLineNumber(1633);    // compilenode block
                                                var block11238 = new GraceBlock(this, 1633, 1);
                                                setLineNumber(1);    // compilenode identifier
                                                block11238.real = function(var_each) {
                                                  setLineNumber(1633);    // compilenode identifier
                                                  var opresult11242 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                                  // call case 6: other requests
                                                  var call11243 = callmethodChecked(var_each, "pretty(1)", [1], opresult11242);
                                                  var opresult11246 = callmethodChecked(var_s, "++(1)", [1], call11243);
                                                  var_s = opresult11246;
                                                  return GraceDone;
                                                };
                                                setLineNumber(1634);    // compilenode block
                                                var block11247 = new GraceBlock(this, 1634, 0);
                                                block11247.real = function() {
                                                  var string11248 = new GraceString(", ");
                                                  var opresult11251 = callmethodChecked(var_s, "++(1)", [1], string11248);
                                                  var_s = opresult11251;
                                                  return GraceDone;
                                                };
                                                // call case 6: other requests
                                                setLineNumber(1633);    // compilenode member
                                                // call case 4: self request
                                                onSelf = true;
                                                var call11253 = callmethodChecked(this, "args", []);
                                                var call11254 = callmethodChecked(call11253, "do(1)separatedBy(1)", [1, 1], block11238, block11247);
                                                setLineNumber(1635);    // compilenode string
                                                var string11255 = new GraceString(">");
                                                var opresult11258 = callmethodChecked(var_s, "++(1)", [1], string11255);
                                                return opresult11258;
                                              };
                                              func11215.paramCounts = [1];
                                              obj11165.methods["pretty(1)"] = func11215;
                                              func11215.definitionLine = 1631;
                                              func11215.definitionModule = "ast";
                                              var func11259 = function(argcv) {    // method toGrace(_)
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                var var_depth = arguments[curarg];
                                                curarg++;
                                                // Start argument checking
                                                curarg = 1;
                                                setLineNumber(1637);    // compilenode identifier
                                                if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                        new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                            callmethod(var_Number, "asString", [0])._value + "."));
                                                curarg++;
                                                // End argument checking
                                                setModuleName("ast");
                                                setLineNumber(1638);    // compilenode string
                                                var string11260 = new GraceString("<");
                                                // call case 4: self request
                                                onSelf = true;
                                                var call11263 = callmethodChecked(this, "nameString", []);
                                                var opresult11265 = callmethodChecked(call11263, "++(1)", [1], string11260);
                                                var var_s = opresult11265;
                                                setLineNumber(1639);    // compilenode block
                                                var block11267 = new GraceBlock(this, 1639, 1);
                                                setLineNumber(1);    // compilenode identifier
                                                block11267.real = function(var_each) {
                                                  setLineNumber(1639);    // compilenode num
                                                  // call case 6: other requests
                                                  var call11269 = callmethodChecked(var_each, "toGrace(1)", [1], new GraceNum(0));
                                                  var opresult11272 = callmethodChecked(var_s, "++(1)", [1], call11269);
                                                  var_s = opresult11272;
                                                  return GraceDone;
                                                };
                                                setLineNumber(1640);    // compilenode block
                                                var block11273 = new GraceBlock(this, 1640, 0);
                                                block11273.real = function() {
                                                  var string11274 = new GraceString(", ");
                                                  var opresult11277 = callmethodChecked(var_s, "++(1)", [1], string11274);
                                                  var_s = opresult11277;
                                                  return GraceDone;
                                                };
                                                // call case 6: other requests
                                                setLineNumber(1639);    // compilenode member
                                                // call case 4: self request
                                                onSelf = true;
                                                var call11279 = callmethodChecked(this, "args", []);
                                                var call11280 = callmethodChecked(call11279, "do(1)separatedBy(1)", [1, 1], block11267, block11273);
                                                setLineNumber(1641);    // compilenode string
                                                var string11281 = new GraceString(">");
                                                var opresult11284 = callmethodChecked(var_s, "++(1)", [1], string11281);
                                                if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], opresult11284)))
                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                        new GraceString("result of method toGrace(_) does not have " + 
                                                            callmethod(var_String, "asString", [0])._value + "."));
                                                return opresult11284;
                                              };
                                              func11259.paramTypes = [];
                                              func11259.paramTypes.push([type_Number, "depth"]);
                                              func11259.paramCounts = [1];
                                              obj11165.methods["toGrace(1)"] = func11259;
                                              func11259.definitionLine = 1637;
                                              func11259.definitionModule = "ast";
                                              var func11285 = function(argcv) {    // method shallowCopy
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                setModuleName("ast");
                                                setLineNumber(1644);    // compilenode identifier
                                                // call case 6: other requests
                                                // call case 4: self request
                                                onSelf = true;
                                                var call11289 = callmethodChecked(this, "value", []);
                                                // call case 4: self request
                                                onSelf = true;
                                                var call11291 = callmethodChecked(this, "args", []);
                                                // call case 6: other requests
                                                var call11292 = callmethodChecked(var_genericNode, "new(2)", [2], call11289, call11291);
                                                var call11293 = callmethodChecked(call11292, "shallowCopyFieldsFrom(1)", [1], this);
                                                return call11293;
                                              };
                                              func11285.paramCounts = [0];
                                              obj11165.methods["shallowCopy"] = func11285;
                                              func11285.definitionLine = 1643;
                                              func11285.definitionModule = "ast";
                                              setLineNumber(1607);    // compilenode identifier
                                              // call case 6: other requests
                                              // call case 6: other requests
                                              // call case 3: self.outer request
                                              var call11297 = callmethodChecked(superDepth, "outer", [0]);
                                              var call11298 = callmethodChecked(call11297, "outer", []);
                                              var call11299 = callmethodChecked(call11298, "baseNode$object(1)", [0, 1], this);
                                              obj11165.superobj = call11299;
                                              if (call11299.data) obj11165.data = call11299.data;
                                              if (call11299.hasOwnProperty('_value'))
                                                  obj11165._value = call11299._value;
                                              setLineNumber(1608);    // compilenode string
                                              var string11300 = new GraceString("generic");
                                              obj11165.data["kind"] = string11300;
                                              var reader_ast_kind11301 = function() {
                                                return this.data["kind"];
                                              };
                                              reader_ast_kind11301.def = true;
                                              obj11165.methods["kind"] = reader_ast_kind11301;
                                              setLineNumber(1609);    // compilenode identifier
                                              obj11165.data["value"] = var_base;
                                              var reader_ast_value11302 = function() {
                                                return this.data["value"];
                                              };
                                              obj11165.methods["value"] = reader_ast_value11302;
                                              obj11165.data["value"] = var_base;
                                              var writer_ast_value11302 = function(argcv, o) {
                                                this.data["value"] = o;
                                                return GraceDone;
                                              };
                                              obj11165.methods["value:=(1)"] = writer_ast_value11302;
                                              obj11165.mutable = true;
                                              setLineNumber(1612);    // compilenode identifier
                                              obj11165.data["args"] = var_arguments;
                                              var reader_ast_args11303 = function() {
                                                return this.data["args"];
                                              };
                                              obj11165.methods["args"] = reader_ast_args11303;
                                              obj11165.data["args"] = var_arguments;
                                              var writer_ast_args11303 = function(argcv, o) {
                                                this.data["args"] = o;
                                                return GraceDone;
                                              };
                                              obj11165.methods["args:=(1)"] = writer_ast_args11303;
                                              obj11165.mutable = true;
                                              superDepth = origSuperDepth;
                                            };
                                            obj_init_11165.apply(obj11165, []);
                                            return obj11165;
                                          };
                                          func11164.paramCounts = [2];
                                          obj11162.methods["new(2)"] = func11164;
                                          func11164.definitionLine = 1605;
                                          func11164.definitionModule = "ast";
                                            var func11304 = function(argcv) {    // method new(_,_)$object(_)
                                              var curarg = 1;
                                              var var_base = arguments[curarg];
                                              curarg++;
                                              var var_arguments = arguments[curarg];
                                              curarg++;
                                              var inheritingObject = arguments[curarg++];
                                              // Start argument processing
                                              curarg = 1;
                                              curarg++;
                                              curarg++;
                                              // End argument processing
                                              setModuleName("ast");
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var obj11305 = Grace_allocObject(null, "new(2)");
                                              obj11305.definitionModule = "ast";
                                              obj11305.definitionLine = 1605;
                                              var inho11305 = inheritingObject;
                                              while (inho11305.superobj) inho11305 = inho11305.superobj;
                                              inho11305.superobj = obj11305;
                                              obj11305.data = inheritingObject.data;
                                              if (inheritingObject.hasOwnProperty('_value'))
                                                obj11305._value = inheritingObject._value;
                                              obj11305.outer = this;
                                              var reader_ast_outer11306 = function() {
                                                return this.outer;
                                              };
                                              obj11305.methods["outer"] = reader_ast_outer11306;
                                              var obj_init_11305 = function() {
                                                var origSuperDepth = superDepth;
                                                superDepth = obj11305;
                                                var func11307 = function(argcv) {    // method nameString
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  setModuleName("ast");
                                                  setLineNumber(1613);    // compilenode member
                                                  // call case 6: other requests
                                                  // call case 4: self request
                                                  onSelf = true;
                                                  var call11310 = callmethodChecked(this, "value", []);
                                                  var call11311 = callmethodChecked(call11310, "nameString", []);
                                                  return call11311;
                                                };
                                                func11307.paramCounts = [0];
                                                obj11305.methods["nameString"] = func11307;
                                                func11307.definitionLine = 1613;
                                                func11307.definitionModule = "ast";
                                                var func11312 = function(argcv) {    // method asString
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  setModuleName("ast");
                                                  setLineNumber(1614);    // compilenode num
                                                  // call case 4: self request
                                                  onSelf = true;
                                                  var call11314 = callmethodChecked(this, "toGrace(1)", [1], new GraceNum(0));
                                                  return call11314;
                                                };
                                                func11312.paramCounts = [0];
                                                obj11305.methods["asString"] = func11312;
                                                func11312.definitionLine = 1614;
                                                func11312.definitionModule = "ast";
                                                var func11315 = function(argcv) {    // method accept(_)from(_)
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  var var_visitor = arguments[curarg];
                                                  curarg++;
                                                  var var_as = arguments[curarg];
                                                  curarg++;
                                                  // Start argument checking
                                                  curarg = 1;
                                                  setLineNumber(1615);    // compilenode identifier
                                                  if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                              callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                  curarg++;
                                                  curarg++;
                                                  // End argument checking
                                                  setModuleName("ast");
                                                  var if11316 = GraceDone;
                                                  setLineNumber(1616);    // compilenode identifier
                                                  // call case 6: other requests
                                                  var call11318 = callmethodChecked(var_visitor, "visitGeneric(1)up(1)", [1, 1], this, var_as);
                                                  if (Grace_isTrue(call11318)) {
                                                    setLineNumber(1617);    // compilenode identifier
                                                    // call case 6: other requests
                                                    var call11320 = callmethodChecked(var_as, "extend(1)", [1], this);
                                                    var var_newChain = call11320;
                                                    setLineNumber(1618);    // compilenode identifier
                                                    // call case 6: other requests
                                                    // call case 4: self request
                                                    onSelf = true;
                                                    var call11323 = callmethodChecked(this, "value", []);
                                                    var call11324 = callmethodChecked(call11323, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                    setLineNumber(1619);    // compilenode member
                                                    // call case 4: self request
                                                    onSelf = true;
                                                    var call11327 = callmethodChecked(this, "args", []);
                                                    var block11328 = new GraceBlock(this, 1619, 1);
                                                    setLineNumber(1);    // compilenode identifier
                                                    block11328.real = function(var_p) {
                                                      setLineNumber(1620);    // compilenode identifier
                                                      // call case 6: other requests
                                                      var call11330 = callmethodChecked(var_p, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                      return call11330;
                                                    };
                                                    // call case 5: prelude request
                                                    var call11331 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call11327, block11328);
                                                    if11316 = call11331;
                                                  }
                                                  return if11316;
                                                };
                                                func11315.paramTypes = [];
                                                func11315.paramTypes.push([]);
                                                func11315.paramTypes.push([]);
                                                func11315.paramCounts = [1, 1];
                                                obj11305.methods["accept(1)from(1)"] = func11315;
                                                func11315.definitionLine = 1615;
                                                func11315.definitionModule = "ast";
                                                var func11332 = function(argcv) {    // method map(_)ancestors(_)
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  var var_blk = arguments[curarg];
                                                  curarg++;
                                                  var var_as = arguments[curarg];
                                                  curarg++;
                                                  setModuleName("ast");
                                                  setLineNumber(1625);    // compilenode member
                                                  // call case 4: self request
                                                  onSelf = true;
                                                  var call11334 = callmethodChecked(this, "shallowCopy", []);
                                                  var var_n = call11334;
                                                  setLineNumber(1626);    // compilenode identifier
                                                  // call case 6: other requests
                                                  var call11336 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                                  var var_newChain = call11336;
                                                  setLineNumber(1627);    // compilenode identifier
                                                  // call case 6: other requests
                                                  // call case 4: self request
                                                  onSelf = true;
                                                  var call11340 = callmethodChecked(this, "value", []);
                                                  var call11341 = callmethodChecked(call11340, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
                                                  // call case 6: other requests
                                                  var call11342 = callmethodChecked(var_n, "value:=(1)", [1], call11341);
                                                  setLineNumber(1628);    // compilenode member
                                                  // call case 4: self request
                                                  onSelf = true;
                                                  var call11346 = callmethodChecked(this, "args", []);
                                                  // call case 6: other requests
                                                  // call case 6: other requests
                                                  // call case 3: self.outer request
                                                  var call11349 = callmethodChecked(superDepth, "outer", [0]);
                                                  var call11350 = callmethodChecked(call11349, "outer", []);
                                                  onSelf = true;
                                                  var call11351 = callmethodChecked(call11350, "listMap(2)ancestors(1)", [2, 1], call11346, var_blk, var_newChain);
                                                  // call case 6: other requests
                                                  var call11352 = callmethodChecked(var_n, "args:=(1)", [1], call11351);
                                                  setLineNumber(1629);    // compilenode identifier
                                                  // call case 6: other requests
                                                  var call11354 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                                  return call11354;
                                                };
                                                func11332.paramCounts = [1, 1];
                                                obj11305.methods["map(1)ancestors(1)"] = func11332;
                                                func11332.definitionLine = 1624;
                                                func11332.definitionModule = "ast";
                                                var func11355 = function(argcv) {    // method pretty(_)
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  var var_depth = arguments[curarg];
                                                  curarg++;
                                                  setModuleName("ast");
                                                  setLineNumber(1632);    // compilenode string
                                                  var string11356 = new GraceString(")<");
                                                  // call case 6: other requests
                                                  // call case 4: self request
                                                  onSelf = true;
                                                  var call11360 = callmethodChecked(this, "value", []);
                                                  var call11361 = callmethodChecked(call11360, "pretty(1)", [1], var_depth);
                                                  var string11363 = new GraceString("(");
                                                  // call case 1: super request
                                                  var call11366 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                                  var string11368 = new GraceString("");
                                                  var opresult11370 = callmethodChecked(string11368, "++(1)", [1], call11366);
                                                  var opresult11372 = callmethodChecked(opresult11370, "++(1)", [1], string11363);
                                                  var opresult11374 = callmethodChecked(opresult11372, "++(1)", [1], call11361);
                                                  var opresult11376 = callmethodChecked(opresult11374, "++(1)", [1], string11356);
                                                  var var_s = opresult11376;
                                                  setLineNumber(1633);    // compilenode block
                                                  var block11378 = new GraceBlock(this, 1633, 1);
                                                  setLineNumber(1);    // compilenode identifier
                                                  block11378.real = function(var_each) {
                                                    setLineNumber(1633);    // compilenode identifier
                                                    var opresult11382 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                                    // call case 6: other requests
                                                    var call11383 = callmethodChecked(var_each, "pretty(1)", [1], opresult11382);
                                                    var opresult11386 = callmethodChecked(var_s, "++(1)", [1], call11383);
                                                    var_s = opresult11386;
                                                    return GraceDone;
                                                  };
                                                  setLineNumber(1634);    // compilenode block
                                                  var block11387 = new GraceBlock(this, 1634, 0);
                                                  block11387.real = function() {
                                                    var string11388 = new GraceString(", ");
                                                    var opresult11391 = callmethodChecked(var_s, "++(1)", [1], string11388);
                                                    var_s = opresult11391;
                                                    return GraceDone;
                                                  };
                                                  // call case 6: other requests
                                                  setLineNumber(1633);    // compilenode member
                                                  // call case 4: self request
                                                  onSelf = true;
                                                  var call11393 = callmethodChecked(this, "args", []);
                                                  var call11394 = callmethodChecked(call11393, "do(1)separatedBy(1)", [1, 1], block11378, block11387);
                                                  setLineNumber(1635);    // compilenode string
                                                  var string11395 = new GraceString(">");
                                                  var opresult11398 = callmethodChecked(var_s, "++(1)", [1], string11395);
                                                  return opresult11398;
                                                };
                                                func11355.paramCounts = [1];
                                                obj11305.methods["pretty(1)"] = func11355;
                                                func11355.definitionLine = 1631;
                                                func11355.definitionModule = "ast";
                                                var func11399 = function(argcv) {    // method toGrace(_)
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  var var_depth = arguments[curarg];
                                                  curarg++;
                                                  // Start argument checking
                                                  curarg = 1;
                                                  setLineNumber(1637);    // compilenode identifier
                                                  if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                              callmethod(var_Number, "asString", [0])._value + "."));
                                                  curarg++;
                                                  // End argument checking
                                                  setModuleName("ast");
                                                  setLineNumber(1638);    // compilenode string
                                                  var string11400 = new GraceString("<");
                                                  // call case 4: self request
                                                  onSelf = true;
                                                  var call11403 = callmethodChecked(this, "nameString", []);
                                                  var opresult11405 = callmethodChecked(call11403, "++(1)", [1], string11400);
                                                  var var_s = opresult11405;
                                                  setLineNumber(1639);    // compilenode block
                                                  var block11407 = new GraceBlock(this, 1639, 1);
                                                  setLineNumber(1);    // compilenode identifier
                                                  block11407.real = function(var_each) {
                                                    setLineNumber(1639);    // compilenode num
                                                    // call case 6: other requests
                                                    var call11409 = callmethodChecked(var_each, "toGrace(1)", [1], new GraceNum(0));
                                                    var opresult11412 = callmethodChecked(var_s, "++(1)", [1], call11409);
                                                    var_s = opresult11412;
                                                    return GraceDone;
                                                  };
                                                  setLineNumber(1640);    // compilenode block
                                                  var block11413 = new GraceBlock(this, 1640, 0);
                                                  block11413.real = function() {
                                                    var string11414 = new GraceString(", ");
                                                    var opresult11417 = callmethodChecked(var_s, "++(1)", [1], string11414);
                                                    var_s = opresult11417;
                                                    return GraceDone;
                                                  };
                                                  // call case 6: other requests
                                                  setLineNumber(1639);    // compilenode member
                                                  // call case 4: self request
                                                  onSelf = true;
                                                  var call11419 = callmethodChecked(this, "args", []);
                                                  var call11420 = callmethodChecked(call11419, "do(1)separatedBy(1)", [1, 1], block11407, block11413);
                                                  setLineNumber(1641);    // compilenode string
                                                  var string11421 = new GraceString(">");
                                                  var opresult11424 = callmethodChecked(var_s, "++(1)", [1], string11421);
                                                  if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], opresult11424)))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("result of method toGrace(_) does not have " + 
                                                              callmethod(var_String, "asString", [0])._value + "."));
                                                  return opresult11424;
                                                };
                                                func11399.paramTypes = [];
                                                func11399.paramTypes.push([type_Number, "depth"]);
                                                func11399.paramCounts = [1];
                                                obj11305.methods["toGrace(1)"] = func11399;
                                                func11399.definitionLine = 1637;
                                                func11399.definitionModule = "ast";
                                                var func11425 = function(argcv) {    // method shallowCopy
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  setModuleName("ast");
                                                  setLineNumber(1644);    // compilenode identifier
                                                  // call case 6: other requests
                                                  // call case 4: self request
                                                  onSelf = true;
                                                  var call11429 = callmethodChecked(this, "value", []);
                                                  // call case 4: self request
                                                  onSelf = true;
                                                  var call11431 = callmethodChecked(this, "args", []);
                                                  // call case 6: other requests
                                                  var call11432 = callmethodChecked(var_genericNode, "new(2)", [2], call11429, call11431);
                                                  var call11433 = callmethodChecked(call11432, "shallowCopyFieldsFrom(1)", [1], this);
                                                  return call11433;
                                                };
                                                func11425.paramCounts = [0];
                                                obj11305.methods["shallowCopy"] = func11425;
                                                func11425.definitionLine = 1643;
                                                func11425.definitionModule = "ast";
                                                setLineNumber(1607);    // compilenode identifier
                                                // call case 6: other requests
                                                // call case 6: other requests
                                                // call case 3: self.outer request
                                                var call11437 = callmethodChecked(superDepth, "outer", [0]);
                                                var call11438 = callmethodChecked(call11437, "outer", []);
                                                var call11439 = callmethodChecked(call11438, "baseNode$object(1)", [0, 1], this);
                                                obj11305.superobj = call11439;
                                                if (call11439.data) obj11305.data = call11439.data;
                                                if (call11439.hasOwnProperty('_value'))
                                                    obj11305._value = call11439._value;
                                                setLineNumber(1608);    // compilenode string
                                                var string11440 = new GraceString("generic");
                                                obj11305.data["kind"] = string11440;
                                                var reader_ast_kind11441 = function() {
                                                  return this.data["kind"];
                                                };
                                                reader_ast_kind11441.def = true;
                                                obj11305.methods["kind"] = reader_ast_kind11441;
                                                setLineNumber(1609);    // compilenode identifier
                                                obj11305.data["value"] = var_base;
                                                var reader_ast_value11442 = function() {
                                                  return this.data["value"];
                                                };
                                                obj11305.methods["value"] = reader_ast_value11442;
                                                obj11305.data["value"] = var_base;
                                                var writer_ast_value11442 = function(argcv, o) {
                                                  this.data["value"] = o;
                                                  return GraceDone;
                                                };
                                                obj11305.methods["value:=(1)"] = writer_ast_value11442;
                                                obj11305.mutable = true;
                                                setLineNumber(1612);    // compilenode identifier
                                                obj11305.data["args"] = var_arguments;
                                                var reader_ast_args11443 = function() {
                                                  return this.data["args"];
                                                };
                                                obj11305.methods["args"] = reader_ast_args11443;
                                                obj11305.data["args"] = var_arguments;
                                                var writer_ast_args11443 = function(argcv, o) {
                                                  this.data["args"] = o;
                                                  return GraceDone;
                                                };
                                                obj11305.methods["args:=(1)"] = writer_ast_args11443;
                                                obj11305.mutable = true;
                                                superDepth = origSuperDepth;
                                              };
                                              obj_init_11305.apply(inheritingObject, []);
                                              return obj11305;
                                              };
                                              obj11162.methods["new(2)$object(1)"] = func11304;
                                            superDepth = origSuperDepth;
                                          };
                                          obj_init_11162.apply(obj11162, []);
                                          var var_genericNode = obj11162;
                                          setLineNumber(1);    // compilenode method
                                          var func11444 = function(argcv) {    // method genericNode
                                            var returnTarget = invocationCount;
                                            invocationCount++;
                                            var curarg = 1;
                                            setModuleName("ast");
                                            // genericNode is a simple accessor - elide try ... catch
                                            setLineNumber(1604);    // compilenode identifier
                                            return var_genericNode;
                                          };
                                          func11444.paramCounts = [0];
                                          this.methods["genericNode"] = func11444;
                                          func11444.definitionLine = 1;
                                          func11444.definitionModule = "ast";
                                          this.methods["genericNode"].debug = "def";
                                          setLineNumber(1649);    // compilenode object
                                          var obj11445 = Grace_allocObject(GraceObject, "typeParametersNode");
                                          obj11445.definitionModule = "ast";
                                          obj11445.definitionLine = 1649;
                                          obj11445.outer = this;
                                          var reader_ast_outer11446 = function() {
                                            return this.outer;
                                          };
                                          obj11445.methods["outer"] = reader_ast_outer11446;
                                          var obj_init_11445 = function() {
                                            var origSuperDepth = superDepth;
                                            superDepth = obj11445;
                                            var func11447 = function(argcv) {    // method new(_)
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              var var_params__39__ = arguments[curarg];
                                              curarg++;
                                              setModuleName("ast");
                                              setLineNumber(1650);    // compilenode object
                                              var obj11448 = Grace_allocObject(null, "typeParametersNode.new(_)");
                                              obj11448.definitionModule = "ast";
                                              obj11448.definitionLine = 1650;
                                              obj11448.outer = this;
                                              var reader_ast_outer11449 = function() {
                                                return this.outer;
                                              };
                                              obj11448.methods["outer"] = reader_ast_outer11449;
                                              var obj_init_11448 = function() {
                                                var origSuperDepth = superDepth;
                                                superDepth = obj11448;
                                                var func11450 = function(argcv) {    // method asString
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  setModuleName("ast");
                                                  setLineNumber(1654);    // compilenode num
                                                  // call case 4: self request
                                                  onSelf = true;
                                                  var call11452 = callmethodChecked(this, "toGrace(1)", [1], new GraceNum(0));
                                                  return call11452;
                                                };
                                                func11450.paramCounts = [0];
                                                obj11448.methods["asString"] = func11450;
                                                func11450.definitionLine = 1654;
                                                func11450.definitionModule = "ast";
                                                var func11453 = function(argcv) {    // method declarationKindWithAncestors(_)
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  var var_as = arguments[curarg];
                                                  curarg++;
                                                  setModuleName("ast");
                                                  setLineNumber(1655);    // compilenode member
                                                  // call case 6: other requests
                                                  var call11455 = callmethodChecked(var_k, "typeparam", []);
                                                  return call11455;
                                                };
                                                func11453.paramCounts = [1];
                                                obj11448.methods["declarationKindWithAncestors(1)"] = func11453;
                                                func11453.definitionLine = 1655;
                                                func11453.definitionModule = "ast";
                                                var func11456 = function(argcv) {    // method accept(_)from(_)
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  var var_visitor = arguments[curarg];
                                                  curarg++;
                                                  var var_as = arguments[curarg];
                                                  curarg++;
                                                  // Start argument checking
                                                  curarg = 1;
                                                  setLineNumber(1657);    // compilenode identifier
                                                  if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                              callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                  curarg++;
                                                  curarg++;
                                                  // End argument checking
                                                  setModuleName("ast");
                                                  var if11457 = GraceDone;
                                                  setLineNumber(1658);    // compilenode identifier
                                                  // call case 6: other requests
                                                  var call11459 = callmethodChecked(var_visitor, "visitTypeParameters(1)up(1)", [1, 1], this, var_as);
                                                  if (Grace_isTrue(call11459)) {
                                                    setLineNumber(1659);    // compilenode identifier
                                                    // call case 6: other requests
                                                    var call11461 = callmethodChecked(var_as, "extend(1)", [1], this);
                                                    var var_newChain = call11461;
                                                    setLineNumber(1660);    // compilenode block
                                                    var block11463 = new GraceBlock(this, 1660, 1);
                                                    setLineNumber(1);    // compilenode identifier
                                                    block11463.real = function(var_p) {
                                                      setLineNumber(1661);    // compilenode identifier
                                                      // call case 6: other requests
                                                      var call11465 = callmethodChecked(var_p, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                      return call11465;
                                                    };
                                                    // call case 6: other requests
                                                    setLineNumber(1660);    // compilenode member
                                                    // call case 4: self request
                                                    onSelf = true;
                                                    var call11467 = callmethodChecked(this, "params", []);
                                                    var call11468 = callmethodChecked(call11467, "do(1)", [1], block11463);
                                                    if11457 = call11468;
                                                  }
                                                  return if11457;
                                                };
                                                func11456.paramTypes = [];
                                                func11456.paramTypes.push([]);
                                                func11456.paramTypes.push([]);
                                                func11456.paramCounts = [1, 1];
                                                obj11448.methods["accept(1)from(1)"] = func11456;
                                                func11456.definitionLine = 1657;
                                                func11456.definitionModule = "ast";
                                                var func11469 = function(argcv) {    // method do(_)
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  var var_blk = arguments[curarg];
                                                  curarg++;
                                                  setModuleName("ast");
                                                  setLineNumber(1666);    // compilenode identifier
                                                  // call case 6: other requests
                                                  // call case 4: self request
                                                  onSelf = true;
                                                  var call11472 = callmethodChecked(this, "params", []);
                                                  var call11473 = callmethodChecked(call11472, "do(1)", [1], var_blk);
                                                  return call11473;
                                                };
                                                func11469.paramCounts = [1];
                                                obj11448.methods["do(1)"] = func11469;
                                                func11469.definitionLine = 1665;
                                                func11469.definitionModule = "ast";
                                                var func11474 = function(argcv) {    // method size
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  setModuleName("ast");
                                                  setLineNumber(1668);    // compilenode member
                                                  // call case 6: other requests
                                                  // call case 4: self request
                                                  onSelf = true;
                                                  var call11477 = callmethodChecked(this, "params", []);
                                                  var call11478 = callmethodChecked(call11477, "size", []);
                                                  return call11478;
                                                };
                                                func11474.paramCounts = [0];
                                                obj11448.methods["size"] = func11474;
                                                func11474.definitionLine = 1668;
                                                func11474.definitionModule = "ast";
                                                var func11479 = function(argcv) {    // method map(_)ancestors(_)
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  var var_blk = arguments[curarg];
                                                  curarg++;
                                                  var var_as = arguments[curarg];
                                                  curarg++;
                                                  setModuleName("ast");
                                                  setLineNumber(1670);    // compilenode member
                                                  // call case 4: self request
                                                  onSelf = true;
                                                  var call11481 = callmethodChecked(this, "shallowCopy", []);
                                                  var var_n = call11481;
                                                  setLineNumber(1671);    // compilenode identifier
                                                  // call case 6: other requests
                                                  var call11483 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                                  var var_newChain = call11483;
                                                  setLineNumber(1672);    // compilenode member
                                                  // call case 4: self request
                                                  onSelf = true;
                                                  var call11487 = callmethodChecked(this, "params", []);
                                                  // call case 6: other requests
                                                  // call case 6: other requests
                                                  // call case 3: self.outer request
                                                  var call11490 = callmethodChecked(superDepth, "outer", [0]);
                                                  var call11491 = callmethodChecked(call11490, "outer", []);
                                                  onSelf = true;
                                                  var call11492 = callmethodChecked(call11491, "listMap(2)ancestors(1)", [2, 1], call11487, var_blk, var_newChain);
                                                  // call case 6: other requests
                                                  var call11493 = callmethodChecked(var_n, "params:=(1)", [1], call11492);
                                                  setLineNumber(1673);    // compilenode identifier
                                                  // call case 6: other requests
                                                  var call11495 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                                  return call11495;
                                                };
                                                func11479.paramCounts = [1, 1];
                                                obj11448.methods["map(1)ancestors(1)"] = func11479;
                                                func11479.definitionLine = 1669;
                                                func11479.definitionModule = "ast";
                                                var func11496 = function(argcv) {    // method pretty(_)
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  var var_depth = arguments[curarg];
                                                  curarg++;
                                                  setModuleName("ast");
                                                  setLineNumber(1676);    // compilenode string
                                                  var string11497 = new GraceString("");
                                                  var var_spc = string11497;
                                                  setLineNumber(1677);    // compilenode num
                                                  var opresult11501 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                                                  var block11502 = new GraceBlock(this, 1677, 1);
                                                  setLineNumber(1);    // compilenode identifier
                                                  block11502.real = function(var_i) {
                                                    setLineNumber(1678);    // compilenode string
                                                    var string11503 = new GraceString("  ");
                                                    var opresult11506 = callmethodChecked(var_spc, "++(1)", [1], string11503);
                                                    var_spc = opresult11506;
                                                    return GraceDone;
                                                  };
                                                  // call case 5: prelude request
                                                  var call11507 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult11501, block11502);
                                                  setLineNumber(1680);    // compilenode string
                                                  var string11508 = new GraceString("<");
                                                  // call case 1: super request
                                                  var call11511 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                                  var opresult11514 = callmethodChecked(var_spc, "++(1)", [1], call11511);
                                                  var opresult11516 = callmethodChecked(opresult11514, "++(1)", [1], string11508);
                                                  var var_s = opresult11516;
                                                  setLineNumber(1681);    // compilenode block
                                                  var block11518 = new GraceBlock(this, 1681, 1);
                                                  setLineNumber(1);    // compilenode identifier
                                                  block11518.real = function(var_each) {
                                                    setLineNumber(1681);    // compilenode identifier
                                                    var opresult11522 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                                    // call case 6: other requests
                                                    var call11523 = callmethodChecked(var_each, "pretty(1)", [1], opresult11522);
                                                    var opresult11526 = callmethodChecked(var_s, "++(1)", [1], call11523);
                                                    var_s = opresult11526;
                                                    return GraceDone;
                                                  };
                                                  setLineNumber(1682);    // compilenode block
                                                  var block11527 = new GraceBlock(this, 1682, 0);
                                                  block11527.real = function() {
                                                    var string11528 = new GraceString(", ");
                                                    var opresult11531 = callmethodChecked(var_s, "++(1)", [1], string11528);
                                                    var_s = opresult11531;
                                                    return GraceDone;
                                                  };
                                                  // call case 6: other requests
                                                  setLineNumber(1681);    // compilenode member
                                                  // call case 4: self request
                                                  onSelf = true;
                                                  var call11533 = callmethodChecked(this, "params", []);
                                                  var call11534 = callmethodChecked(call11533, "do(1)separatedBy(1)", [1, 1], block11518, block11527);
                                                  setLineNumber(1683);    // compilenode string
                                                  var string11535 = new GraceString(">");
                                                  var opresult11538 = callmethodChecked(var_s, "++(1)", [1], string11535);
                                                  return opresult11538;
                                                };
                                                func11496.paramCounts = [1];
                                                obj11448.methods["pretty(1)"] = func11496;
                                                func11496.definitionLine = 1675;
                                                func11496.definitionModule = "ast";
                                                var func11539 = function(argcv) {    // method toGrace(_)
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  var var_depth = arguments[curarg];
                                                  curarg++;
                                                  // Start argument checking
                                                  curarg = 1;
                                                  setLineNumber(1685);    // compilenode identifier
                                                  if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                              callmethod(var_Number, "asString", [0])._value + "."));
                                                  curarg++;
                                                  // End argument checking
                                                  setModuleName("ast");
                                                  setLineNumber(1686);    // compilenode string
                                                  var string11540 = new GraceString("<");
                                                  var var_s = string11540;
                                                  setLineNumber(1687);    // compilenode block
                                                  var block11542 = new GraceBlock(this, 1687, 1);
                                                  setLineNumber(1);    // compilenode identifier
                                                  block11542.real = function(var_each) {
                                                    setLineNumber(1687);    // compilenode string
                                                    var string11543 = new GraceString("");
                                                    // call case 6: other requests
                                                    var call11546 = callmethodChecked(var_each, "toGrace(1)", [1], var_depth);
                                                    var string11548 = new GraceString("");
                                                    var string11551 = new GraceString("");
                                                    var opresult11553 = callmethodChecked(string11551, "++(1)", [1], var_s);
                                                    var opresult11555 = callmethodChecked(opresult11553, "++(1)", [1], string11548);
                                                    var opresult11557 = callmethodChecked(opresult11555, "++(1)", [1], call11546);
                                                    var opresult11559 = callmethodChecked(opresult11557, "++(1)", [1], string11543);
                                                    var_s = opresult11559;
                                                    return GraceDone;
                                                  };
                                                  setLineNumber(1688);    // compilenode block
                                                  var block11560 = new GraceBlock(this, 1688, 0);
                                                  block11560.real = function() {
                                                    var string11561 = new GraceString(", ");
                                                    var opresult11564 = callmethodChecked(var_s, "++(1)", [1], string11561);
                                                    var_s = opresult11564;
                                                    return GraceDone;
                                                  };
                                                  // call case 6: other requests
                                                  setLineNumber(1687);    // compilenode member
                                                  // call case 4: self request
                                                  onSelf = true;
                                                  var call11566 = callmethodChecked(this, "params", []);
                                                  var call11567 = callmethodChecked(call11566, "do(1)separatedBy(1)", [1, 1], block11542, block11560);
                                                  setLineNumber(1689);    // compilenode string
                                                  var string11568 = new GraceString(">");
                                                  var opresult11571 = callmethodChecked(var_s, "++(1)", [1], string11568);
                                                  if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], opresult11571)))
                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                          new GraceString("result of method toGrace(_) does not have " + 
                                                              callmethod(var_String, "asString", [0])._value + "."));
                                                  return opresult11571;
                                                };
                                                func11539.paramTypes = [];
                                                func11539.paramTypes.push([type_Number, "depth"]);
                                                func11539.paramCounts = [1];
                                                obj11448.methods["toGrace(1)"] = func11539;
                                                func11539.definitionLine = 1685;
                                                func11539.definitionModule = "ast";
                                                var func11572 = function(argcv) {    // method shallowCopy
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  setModuleName("ast");
                                                  setLineNumber(1692);    // compilenode identifier
                                                  // call case 6: other requests
                                                  // call case 6: other requests
                                                  var call11575 = callmethodChecked(var_typeParametersNode, "new(1)", [1], var_emptySeq);
                                                  var call11576 = callmethodChecked(call11575, "shallowCopyFieldsFrom(1)", [1], this);
                                                  return call11576;
                                                };
                                                func11572.paramCounts = [0];
                                                obj11448.methods["shallowCopy"] = func11572;
                                                func11572.definitionLine = 1691;
                                                func11572.definitionModule = "ast";
                                                setLineNumber(1651);    // compilenode identifier
                                                // call case 6: other requests
                                                // call case 6: other requests
                                                // call case 3: self.outer request
                                                var call11580 = callmethodChecked(superDepth, "outer", [0]);
                                                var call11581 = callmethodChecked(call11580, "outer", []);
                                                var call11582 = callmethodChecked(call11581, "baseNode$object(1)", [0, 1], this);
                                                obj11448.superobj = call11582;
                                                if (call11582.data) obj11448.data = call11582.data;
                                                if (call11582.hasOwnProperty('_value'))
                                                    obj11448._value = call11582._value;
                                                setLineNumber(1652);    // compilenode string
                                                var string11583 = new GraceString("typeparams");
                                                obj11448.data["kind"] = string11583;
                                                var reader_ast_kind11584 = function() {
                                                  return this.data["kind"];
                                                };
                                                reader_ast_kind11584.def = true;
                                                obj11448.methods["kind"] = reader_ast_kind11584;
                                                setLineNumber(1653);    // compilenode identifier
                                                obj11448.data["params"] = var_params__39__;
                                                var reader_ast_params11585 = function() {
                                                  return this.data["params"];
                                                };
                                                obj11448.methods["params"] = reader_ast_params11585;
                                                obj11448.data["params"] = var_params__39__;
                                                var writer_ast_params11585 = function(argcv, o) {
                                                  this.data["params"] = o;
                                                  return GraceDone;
                                                };
                                                obj11448.methods["params:=(1)"] = writer_ast_params11585;
                                                obj11448.mutable = true;
                                                superDepth = origSuperDepth;
                                              };
                                              obj_init_11448.apply(obj11448, []);
                                              return obj11448;
                                            };
                                            func11447.paramCounts = [1];
                                            obj11445.methods["new(1)"] = func11447;
                                            func11447.definitionLine = 1650;
                                            func11447.definitionModule = "ast";
                                              var func11586 = function(argcv) {    // method new(_)$object(_)
                                                var curarg = 1;
                                                var var_params__39__ = arguments[curarg];
                                                curarg++;
                                                var inheritingObject = arguments[curarg++];
                                                // Start argument processing
                                                curarg = 1;
                                                curarg++;
                                                // End argument processing
                                                setModuleName("ast");
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var obj11587 = Grace_allocObject(null, "new(1)");
                                                obj11587.definitionModule = "ast";
                                                obj11587.definitionLine = 1650;
                                                var inho11587 = inheritingObject;
                                                while (inho11587.superobj) inho11587 = inho11587.superobj;
                                                inho11587.superobj = obj11587;
                                                obj11587.data = inheritingObject.data;
                                                if (inheritingObject.hasOwnProperty('_value'))
                                                  obj11587._value = inheritingObject._value;
                                                obj11587.outer = this;
                                                var reader_ast_outer11588 = function() {
                                                  return this.outer;
                                                };
                                                obj11587.methods["outer"] = reader_ast_outer11588;
                                                var obj_init_11587 = function() {
                                                  var origSuperDepth = superDepth;
                                                  superDepth = obj11587;
                                                  var func11589 = function(argcv) {    // method asString
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    setModuleName("ast");
                                                    setLineNumber(1654);    // compilenode num
                                                    // call case 4: self request
                                                    onSelf = true;
                                                    var call11591 = callmethodChecked(this, "toGrace(1)", [1], new GraceNum(0));
                                                    return call11591;
                                                  };
                                                  func11589.paramCounts = [0];
                                                  obj11587.methods["asString"] = func11589;
                                                  func11589.definitionLine = 1654;
                                                  func11589.definitionModule = "ast";
                                                  var func11592 = function(argcv) {    // method declarationKindWithAncestors(_)
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    var var_as = arguments[curarg];
                                                    curarg++;
                                                    setModuleName("ast");
                                                    setLineNumber(1655);    // compilenode member
                                                    // call case 6: other requests
                                                    var call11594 = callmethodChecked(var_k, "typeparam", []);
                                                    return call11594;
                                                  };
                                                  func11592.paramCounts = [1];
                                                  obj11587.methods["declarationKindWithAncestors(1)"] = func11592;
                                                  func11592.definitionLine = 1655;
                                                  func11592.definitionModule = "ast";
                                                  var func11595 = function(argcv) {    // method accept(_)from(_)
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    var var_visitor = arguments[curarg];
                                                    curarg++;
                                                    var var_as = arguments[curarg];
                                                    curarg++;
                                                    // Start argument checking
                                                    curarg = 1;
                                                    setLineNumber(1657);    // compilenode identifier
                                                    if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                    curarg++;
                                                    curarg++;
                                                    // End argument checking
                                                    setModuleName("ast");
                                                    var if11596 = GraceDone;
                                                    setLineNumber(1658);    // compilenode identifier
                                                    // call case 6: other requests
                                                    var call11598 = callmethodChecked(var_visitor, "visitTypeParameters(1)up(1)", [1, 1], this, var_as);
                                                    if (Grace_isTrue(call11598)) {
                                                      setLineNumber(1659);    // compilenode identifier
                                                      // call case 6: other requests
                                                      var call11600 = callmethodChecked(var_as, "extend(1)", [1], this);
                                                      var var_newChain = call11600;
                                                      setLineNumber(1660);    // compilenode block
                                                      var block11602 = new GraceBlock(this, 1660, 1);
                                                      setLineNumber(1);    // compilenode identifier
                                                      block11602.real = function(var_p) {
                                                        setLineNumber(1661);    // compilenode identifier
                                                        // call case 6: other requests
                                                        var call11604 = callmethodChecked(var_p, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                        return call11604;
                                                      };
                                                      // call case 6: other requests
                                                      setLineNumber(1660);    // compilenode member
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call11606 = callmethodChecked(this, "params", []);
                                                      var call11607 = callmethodChecked(call11606, "do(1)", [1], block11602);
                                                      if11596 = call11607;
                                                    }
                                                    return if11596;
                                                  };
                                                  func11595.paramTypes = [];
                                                  func11595.paramTypes.push([]);
                                                  func11595.paramTypes.push([]);
                                                  func11595.paramCounts = [1, 1];
                                                  obj11587.methods["accept(1)from(1)"] = func11595;
                                                  func11595.definitionLine = 1657;
                                                  func11595.definitionModule = "ast";
                                                  var func11608 = function(argcv) {    // method do(_)
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    var var_blk = arguments[curarg];
                                                    curarg++;
                                                    setModuleName("ast");
                                                    setLineNumber(1666);    // compilenode identifier
                                                    // call case 6: other requests
                                                    // call case 4: self request
                                                    onSelf = true;
                                                    var call11611 = callmethodChecked(this, "params", []);
                                                    var call11612 = callmethodChecked(call11611, "do(1)", [1], var_blk);
                                                    return call11612;
                                                  };
                                                  func11608.paramCounts = [1];
                                                  obj11587.methods["do(1)"] = func11608;
                                                  func11608.definitionLine = 1665;
                                                  func11608.definitionModule = "ast";
                                                  var func11613 = function(argcv) {    // method size
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    setModuleName("ast");
                                                    setLineNumber(1668);    // compilenode member
                                                    // call case 6: other requests
                                                    // call case 4: self request
                                                    onSelf = true;
                                                    var call11616 = callmethodChecked(this, "params", []);
                                                    var call11617 = callmethodChecked(call11616, "size", []);
                                                    return call11617;
                                                  };
                                                  func11613.paramCounts = [0];
                                                  obj11587.methods["size"] = func11613;
                                                  func11613.definitionLine = 1668;
                                                  func11613.definitionModule = "ast";
                                                  var func11618 = function(argcv) {    // method map(_)ancestors(_)
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    var var_blk = arguments[curarg];
                                                    curarg++;
                                                    var var_as = arguments[curarg];
                                                    curarg++;
                                                    setModuleName("ast");
                                                    setLineNumber(1670);    // compilenode member
                                                    // call case 4: self request
                                                    onSelf = true;
                                                    var call11620 = callmethodChecked(this, "shallowCopy", []);
                                                    var var_n = call11620;
                                                    setLineNumber(1671);    // compilenode identifier
                                                    // call case 6: other requests
                                                    var call11622 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                                    var var_newChain = call11622;
                                                    setLineNumber(1672);    // compilenode member
                                                    // call case 4: self request
                                                    onSelf = true;
                                                    var call11626 = callmethodChecked(this, "params", []);
                                                    // call case 6: other requests
                                                    // call case 6: other requests
                                                    // call case 3: self.outer request
                                                    var call11629 = callmethodChecked(superDepth, "outer", [0]);
                                                    var call11630 = callmethodChecked(call11629, "outer", []);
                                                    onSelf = true;
                                                    var call11631 = callmethodChecked(call11630, "listMap(2)ancestors(1)", [2, 1], call11626, var_blk, var_newChain);
                                                    // call case 6: other requests
                                                    var call11632 = callmethodChecked(var_n, "params:=(1)", [1], call11631);
                                                    setLineNumber(1673);    // compilenode identifier
                                                    // call case 6: other requests
                                                    var call11634 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                                    return call11634;
                                                  };
                                                  func11618.paramCounts = [1, 1];
                                                  obj11587.methods["map(1)ancestors(1)"] = func11618;
                                                  func11618.definitionLine = 1669;
                                                  func11618.definitionModule = "ast";
                                                  var func11635 = function(argcv) {    // method pretty(_)
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    var var_depth = arguments[curarg];
                                                    curarg++;
                                                    setModuleName("ast");
                                                    setLineNumber(1676);    // compilenode string
                                                    var string11636 = new GraceString("");
                                                    var var_spc = string11636;
                                                    setLineNumber(1677);    // compilenode num
                                                    var opresult11640 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                                                    var block11641 = new GraceBlock(this, 1677, 1);
                                                    setLineNumber(1);    // compilenode identifier
                                                    block11641.real = function(var_i) {
                                                      setLineNumber(1678);    // compilenode string
                                                      var string11642 = new GraceString("  ");
                                                      var opresult11645 = callmethodChecked(var_spc, "++(1)", [1], string11642);
                                                      var_spc = opresult11645;
                                                      return GraceDone;
                                                    };
                                                    // call case 5: prelude request
                                                    var call11646 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult11640, block11641);
                                                    setLineNumber(1680);    // compilenode string
                                                    var string11647 = new GraceString("<");
                                                    // call case 1: super request
                                                    var call11650 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                                    var opresult11653 = callmethodChecked(var_spc, "++(1)", [1], call11650);
                                                    var opresult11655 = callmethodChecked(opresult11653, "++(1)", [1], string11647);
                                                    var var_s = opresult11655;
                                                    setLineNumber(1681);    // compilenode block
                                                    var block11657 = new GraceBlock(this, 1681, 1);
                                                    setLineNumber(1);    // compilenode identifier
                                                    block11657.real = function(var_each) {
                                                      setLineNumber(1681);    // compilenode identifier
                                                      var opresult11661 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                                      // call case 6: other requests
                                                      var call11662 = callmethodChecked(var_each, "pretty(1)", [1], opresult11661);
                                                      var opresult11665 = callmethodChecked(var_s, "++(1)", [1], call11662);
                                                      var_s = opresult11665;
                                                      return GraceDone;
                                                    };
                                                    setLineNumber(1682);    // compilenode block
                                                    var block11666 = new GraceBlock(this, 1682, 0);
                                                    block11666.real = function() {
                                                      var string11667 = new GraceString(", ");
                                                      var opresult11670 = callmethodChecked(var_s, "++(1)", [1], string11667);
                                                      var_s = opresult11670;
                                                      return GraceDone;
                                                    };
                                                    // call case 6: other requests
                                                    setLineNumber(1681);    // compilenode member
                                                    // call case 4: self request
                                                    onSelf = true;
                                                    var call11672 = callmethodChecked(this, "params", []);
                                                    var call11673 = callmethodChecked(call11672, "do(1)separatedBy(1)", [1, 1], block11657, block11666);
                                                    setLineNumber(1683);    // compilenode string
                                                    var string11674 = new GraceString(">");
                                                    var opresult11677 = callmethodChecked(var_s, "++(1)", [1], string11674);
                                                    return opresult11677;
                                                  };
                                                  func11635.paramCounts = [1];
                                                  obj11587.methods["pretty(1)"] = func11635;
                                                  func11635.definitionLine = 1675;
                                                  func11635.definitionModule = "ast";
                                                  var func11678 = function(argcv) {    // method toGrace(_)
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    var var_depth = arguments[curarg];
                                                    curarg++;
                                                    // Start argument checking
                                                    curarg = 1;
                                                    setLineNumber(1685);    // compilenode identifier
                                                    if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                callmethod(var_Number, "asString", [0])._value + "."));
                                                    curarg++;
                                                    // End argument checking
                                                    setModuleName("ast");
                                                    setLineNumber(1686);    // compilenode string
                                                    var string11679 = new GraceString("<");
                                                    var var_s = string11679;
                                                    setLineNumber(1687);    // compilenode block
                                                    var block11681 = new GraceBlock(this, 1687, 1);
                                                    setLineNumber(1);    // compilenode identifier
                                                    block11681.real = function(var_each) {
                                                      setLineNumber(1687);    // compilenode string
                                                      var string11682 = new GraceString("");
                                                      // call case 6: other requests
                                                      var call11685 = callmethodChecked(var_each, "toGrace(1)", [1], var_depth);
                                                      var string11687 = new GraceString("");
                                                      var string11690 = new GraceString("");
                                                      var opresult11692 = callmethodChecked(string11690, "++(1)", [1], var_s);
                                                      var opresult11694 = callmethodChecked(opresult11692, "++(1)", [1], string11687);
                                                      var opresult11696 = callmethodChecked(opresult11694, "++(1)", [1], call11685);
                                                      var opresult11698 = callmethodChecked(opresult11696, "++(1)", [1], string11682);
                                                      var_s = opresult11698;
                                                      return GraceDone;
                                                    };
                                                    setLineNumber(1688);    // compilenode block
                                                    var block11699 = new GraceBlock(this, 1688, 0);
                                                    block11699.real = function() {
                                                      var string11700 = new GraceString(", ");
                                                      var opresult11703 = callmethodChecked(var_s, "++(1)", [1], string11700);
                                                      var_s = opresult11703;
                                                      return GraceDone;
                                                    };
                                                    // call case 6: other requests
                                                    setLineNumber(1687);    // compilenode member
                                                    // call case 4: self request
                                                    onSelf = true;
                                                    var call11705 = callmethodChecked(this, "params", []);
                                                    var call11706 = callmethodChecked(call11705, "do(1)separatedBy(1)", [1, 1], block11681, block11699);
                                                    setLineNumber(1689);    // compilenode string
                                                    var string11707 = new GraceString(">");
                                                    var opresult11710 = callmethodChecked(var_s, "++(1)", [1], string11707);
                                                    if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], opresult11710)))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("result of method toGrace(_) does not have " + 
                                                                callmethod(var_String, "asString", [0])._value + "."));
                                                    return opresult11710;
                                                  };
                                                  func11678.paramTypes = [];
                                                  func11678.paramTypes.push([type_Number, "depth"]);
                                                  func11678.paramCounts = [1];
                                                  obj11587.methods["toGrace(1)"] = func11678;
                                                  func11678.definitionLine = 1685;
                                                  func11678.definitionModule = "ast";
                                                  var func11711 = function(argcv) {    // method shallowCopy
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    setModuleName("ast");
                                                    setLineNumber(1692);    // compilenode identifier
                                                    // call case 6: other requests
                                                    // call case 6: other requests
                                                    var call11714 = callmethodChecked(var_typeParametersNode, "new(1)", [1], var_emptySeq);
                                                    var call11715 = callmethodChecked(call11714, "shallowCopyFieldsFrom(1)", [1], this);
                                                    return call11715;
                                                  };
                                                  func11711.paramCounts = [0];
                                                  obj11587.methods["shallowCopy"] = func11711;
                                                  func11711.definitionLine = 1691;
                                                  func11711.definitionModule = "ast";
                                                  setLineNumber(1651);    // compilenode identifier
                                                  // call case 6: other requests
                                                  // call case 6: other requests
                                                  // call case 3: self.outer request
                                                  var call11719 = callmethodChecked(superDepth, "outer", [0]);
                                                  var call11720 = callmethodChecked(call11719, "outer", []);
                                                  var call11721 = callmethodChecked(call11720, "baseNode$object(1)", [0, 1], this);
                                                  obj11587.superobj = call11721;
                                                  if (call11721.data) obj11587.data = call11721.data;
                                                  if (call11721.hasOwnProperty('_value'))
                                                      obj11587._value = call11721._value;
                                                  setLineNumber(1652);    // compilenode string
                                                  var string11722 = new GraceString("typeparams");
                                                  obj11587.data["kind"] = string11722;
                                                  var reader_ast_kind11723 = function() {
                                                    return this.data["kind"];
                                                  };
                                                  reader_ast_kind11723.def = true;
                                                  obj11587.methods["kind"] = reader_ast_kind11723;
                                                  setLineNumber(1653);    // compilenode identifier
                                                  obj11587.data["params"] = var_params__39__;
                                                  var reader_ast_params11724 = function() {
                                                    return this.data["params"];
                                                  };
                                                  obj11587.methods["params"] = reader_ast_params11724;
                                                  obj11587.data["params"] = var_params__39__;
                                                  var writer_ast_params11724 = function(argcv, o) {
                                                    this.data["params"] = o;
                                                    return GraceDone;
                                                  };
                                                  obj11587.methods["params:=(1)"] = writer_ast_params11724;
                                                  obj11587.mutable = true;
                                                  superDepth = origSuperDepth;
                                                };
                                                obj_init_11587.apply(inheritingObject, []);
                                                return obj11587;
                                                };
                                                obj11445.methods["new(1)$object(1)"] = func11586;
                                              superDepth = origSuperDepth;
                                            };
                                            obj_init_11445.apply(obj11445, []);
                                            var var_typeParametersNode = obj11445;
                                            setLineNumber(1);    // compilenode method
                                            var func11725 = function(argcv) {    // method typeParametersNode
                                              var returnTarget = invocationCount;
                                              invocationCount++;
                                              var curarg = 1;
                                              setModuleName("ast");
                                              // typeParametersNode is a simple accessor - elide try ... catch
                                              setLineNumber(1649);    // compilenode identifier
                                              return var_typeParametersNode;
                                            };
                                            func11725.paramCounts = [0];
                                            this.methods["typeParametersNode"] = func11725;
                                            func11725.definitionLine = 1;
                                            func11725.definitionModule = "ast";
                                            this.methods["typeParametersNode"].debug = "def";
                                            setLineNumber(1696);    // compilenode object
                                            var obj11726 = Grace_allocObject(GraceObject, "identifierNode");
                                            obj11726.definitionModule = "ast";
                                            obj11726.definitionLine = 1696;
                                            obj11726.outer = this;
                                            var reader_ast_outer11727 = function() {
                                              return this.outer;
                                            };
                                            obj11726.methods["outer"] = reader_ast_outer11727;
                                            var obj_init_11726 = function() {
                                              var origSuperDepth = superDepth;
                                              superDepth = obj11726;
                                              var func11728 = function(argcv) {    // method new(_,_)scope(_)
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                var var_name = arguments[curarg];
                                                curarg++;
                                                var var_dtype = arguments[curarg];
                                                curarg++;
                                                var var_s = arguments[curarg];
                                                curarg++;
                                                setModuleName("ast");
                                                setLineNumber(1699);    // compilenode identifier
                                                // call case 4: self request
                                                onSelf = true;
                                                var call11730 = callmethodChecked(this, "new(2)", [2], var_name, var_dtype);
                                                var var_result = call11730;
                                                setLineNumber(1700);    // compilenode identifier
                                                // call case 6: other requests
                                                var call11732 = callmethodChecked(var_result, "scope:=(1)", [1], var_s);
                                                setLineNumber(1701);    // compilenode identifier
                                                return var_result;
                                              };
                                              func11728.paramCounts = [2, 1];
                                              obj11726.methods["new(2)scope(1)"] = func11728;
                                              func11728.definitionLine = 1698;
                                              func11728.definitionModule = "ast";
                                              var func11733 = function(argcv) {    // method new(_,_)
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                var var_name = arguments[curarg];
                                                curarg++;
                                                var var_dtype__39__ = arguments[curarg];
                                                curarg++;
                                                setModuleName("ast");
                                                setLineNumber(1704);    // compilenode object
                                                var obj11734 = Grace_allocObject(null, "identifierNode.new(_,_)");
                                                obj11734.definitionModule = "ast";
                                                obj11734.definitionLine = 1704;
                                                obj11734.outer = this;
                                                var reader_ast_outer11735 = function() {
                                                  return this.outer;
                                                };
                                                obj11734.methods["outer"] = reader_ast_outer11735;
                                                var obj_init_11734 = function() {
                                                  var origSuperDepth = superDepth;
                                                  superDepth = obj11734;
                                                  var func11736 = function(argcv) {    // method nameString
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    setModuleName("ast");
                                                    setLineNumber(1716);    // compilenode member
                                                    // call case 4: self request
                                                    onSelf = true;
                                                    var call11738 = callmethodChecked(this, "value", []);
                                                    return call11738;
                                                  };
                                                  func11736.paramCounts = [0];
                                                  obj11734.methods["nameString"] = func11736;
                                                  func11736.definitionLine = 1716;
                                                  func11736.definitionModule = "ast";
                                                  var func11739 = function(argcv) {    // method canonicalName
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    setModuleName("ast");
                                                    setLineNumber(1717);    // compilenode member
                                                    // call case 4: self request
                                                    onSelf = true;
                                                    var call11741 = callmethodChecked(this, "value", []);
                                                    return call11741;
                                                  };
                                                  func11739.paramCounts = [0];
                                                  obj11734.methods["canonicalName"] = func11739;
                                                  func11739.definitionLine = 1717;
                                                  func11739.definitionModule = "ast";
                                                  var func11742 = function(argcv) {    // method quoted
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    setModuleName("ast");
                                                    setLineNumber(1718);    // compilenode member
                                                    // call case 6: other requests
                                                    // call case 4: self request
                                                    onSelf = true;
                                                    var call11745 = callmethodChecked(this, "value", []);
                                                    var call11746 = callmethodChecked(call11745, "quoted", []);
                                                    return call11746;
                                                  };
                                                  func11742.paramCounts = [0];
                                                  obj11734.methods["quoted"] = func11742;
                                                  func11742.definitionLine = 1718;
                                                  func11742.definitionModule = "ast";
                                                  var func11747 = function(argcv) {    // method isIdentifier
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    setModuleName("ast");
                                                    // isIdentifier is a simple accessor - elide try ... catch
                                                    setLineNumber(1719);    // compilenode identifier
                                                    return GraceTrue;
                                                  };
                                                  func11747.paramCounts = [0];
                                                  obj11734.methods["isIdentifier"] = func11747;
                                                  func11747.definitionLine = 1719;
                                                  func11747.definitionModule = "ast";
                                                  var func11748 = function(argcv) {    // method isSelf
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    setModuleName("ast");
                                                    setLineNumber(1721);    // compilenode member
                                                    // call case 4: self request
                                                    onSelf = true;
                                                    var call11750 = callmethodChecked(this, "value", []);
                                                    var string11752 = new GraceString("self");
                                                    var opresult11754 = callmethodChecked(string11752, "==(1)", [1], call11750);
                                                    return opresult11754;
                                                  };
                                                  func11748.paramCounts = [0];
                                                  obj11734.methods["isSelf"] = func11748;
                                                  func11748.definitionLine = 1721;
                                                  func11748.definitionModule = "ast";
                                                  var func11755 = function(argcv) {    // method isSuper
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    setModuleName("ast");
                                                    setLineNumber(1722);    // compilenode member
                                                    // call case 4: self request
                                                    onSelf = true;
                                                    var call11757 = callmethodChecked(this, "value", []);
                                                    var string11759 = new GraceString("super");
                                                    var opresult11761 = callmethodChecked(string11759, "==(1)", [1], call11757);
                                                    return opresult11761;
                                                  };
                                                  func11755.paramCounts = [0];
                                                  obj11734.methods["isSuper"] = func11755;
                                                  func11755.definitionLine = 1722;
                                                  func11755.definitionModule = "ast";
                                                  var func11762 = function(argcv) {    // method isPrelude
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    setModuleName("ast");
                                                    setLineNumber(1723);    // compilenode member
                                                    // call case 4: self request
                                                    onSelf = true;
                                                    var call11764 = callmethodChecked(this, "value", []);
                                                    var string11766 = new GraceString("prelude");
                                                    var opresult11768 = callmethodChecked(string11766, "==(1)", [1], call11764);
                                                    return opresult11768;
                                                  };
                                                  func11762.paramCounts = [0];
                                                  obj11734.methods["isPrelude"] = func11762;
                                                  func11762.definitionLine = 1723;
                                                  func11762.definitionModule = "ast";
                                                  var func11769 = function(argcv) {    // method isOuter
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    setModuleName("ast");
                                                    setLineNumber(1724);    // compilenode member
                                                    // call case 4: self request
                                                    onSelf = true;
                                                    var call11771 = callmethodChecked(this, "value", []);
                                                    var string11773 = new GraceString("outer");
                                                    var opresult11775 = callmethodChecked(string11773, "==(1)", [1], call11771);
                                                    return opresult11775;
                                                  };
                                                  func11769.paramCounts = [0];
                                                  obj11734.methods["isOuter"] = func11769;
                                                  func11769.definitionLine = 1724;
                                                  func11769.definitionModule = "ast";
                                                  var func11776 = function(argcv) {    // method isAppliedOccurenceOfIdentifier
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    setModuleName("ast");
                                                    var if11777 = GraceDone;
                                                    setLineNumber(1727);    // compilenode member
                                                    // call case 4: self request
                                                    onSelf = true;
                                                    var call11779 = callmethodChecked(this, "wildcard", []);
                                                    if (Grace_isTrue(call11779)) {
                                                      setLineNumber(1728);    // compilenode identifier
                                                      if11777 = GraceFalse;
                                                    } else {
                                                      setLineNumber(1730);    // compilenode member
                                                      // call case 6: other requests
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call11782 = callmethodChecked(this, "isBindingOccurrence", []);
                                                      var call11783 = callmethodChecked(call11782, "not", []);
                                                      if11777 = call11783;
                                                    }
                                                    return if11777;
                                                  };
                                                  func11776.paramCounts = [0];
                                                  obj11734.methods["isAppliedOccurenceOfIdentifier"] = func11776;
                                                  func11776.definitionLine = 1726;
                                                  func11776.definitionModule = "ast";
                                                  var func11784 = function(argcv) {    // method declarationKindWithAncestors(_)
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    var var_as = arguments[curarg];
                                                    curarg++;
                                                    setModuleName("ast");
                                                    setLineNumber(1734);    // compilenode identifier
                                                    // call case 6: other requests
                                                    // call case 6: other requests
                                                    var call11787 = callmethodChecked(var_as, "parent", []);
                                                    var call11788 = callmethodChecked(call11787, "declarationKindWithAncestors(1)", [1], var_as);
                                                    return call11788;
                                                  };
                                                  func11784.paramCounts = [1];
                                                  obj11734.methods["declarationKindWithAncestors(1)"] = func11784;
                                                  func11784.definitionLine = 1733;
                                                  func11784.definitionModule = "ast";
                                                  var func11789 = function(argcv) {    // method inTypePositionWithAncestors(_)
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    var var_as = arguments[curarg];
                                                    curarg++;
                                                    setModuleName("ast");
                                                    var if11790 = GraceDone;
                                                    setLineNumber(1740);    // compilenode member
                                                    // call case 6: other requests
                                                    var call11792 = callmethodChecked(var_as, "isEmpty", []);
                                                    if (Grace_isTrue(call11792)) {
                                                      return GraceFalse;
                                                    }
                                                    setLineNumber(1741);    // compilenode identifier
                                                    // call case 6: other requests
                                                    // call case 6: other requests
                                                    var call11795 = callmethodChecked(var_as, "parent", []);
                                                    var call11796 = callmethodChecked(call11795, "usesAsType(1)", [1], this);
                                                    return call11796;
                                                  };
                                                  func11789.paramCounts = [1];
                                                  obj11734.methods["inTypePositionWithAncestors(1)"] = func11789;
                                                  func11789.definitionLine = 1736;
                                                  func11789.definitionModule = "ast";
                                                  var func11797 = function(argcv) {    // method usesAsType(_)
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    var var_aNode = arguments[curarg];
                                                    curarg++;
                                                    setModuleName("ast");
                                                    setLineNumber(1744);    // compilenode member
                                                    // call case 4: self request
                                                    onSelf = true;
                                                    var call11799 = callmethodChecked(this, "dtype", []);
                                                    var opresult11802 = callmethodChecked(var_aNode, "==(1)", [1], call11799);
                                                    return opresult11802;
                                                  };
                                                  func11797.paramCounts = [1];
                                                  obj11734.methods["usesAsType(1)"] = func11797;
                                                  func11797.definitionLine = 1743;
                                                  func11797.definitionModule = "ast";
                                                  var func11803 = function(argcv) {    // method accept(_)from(_)
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    var var_visitor = arguments[curarg];
                                                    curarg++;
                                                    var var_as = arguments[curarg];
                                                    curarg++;
                                                    // Start argument checking
                                                    curarg = 1;
                                                    setLineNumber(1746);    // compilenode identifier
                                                    if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                    curarg++;
                                                    curarg++;
                                                    // End argument checking
                                                    setModuleName("ast");
                                                    var if11804 = GraceDone;
                                                    setLineNumber(1747);    // compilenode identifier
                                                    // call case 6: other requests
                                                    var call11806 = callmethodChecked(var_visitor, "visitIdentifier(1)up(1)", [1, 1], this, var_as);
                                                    if (Grace_isTrue(call11806)) {
                                                      setLineNumber(1748);    // compilenode identifier
                                                      // call case 6: other requests
                                                      var call11808 = callmethodChecked(var_as, "extend(1)", [1], this);
                                                      var var_newChain = call11808;
                                                      var if11809 = GraceDone;
                                                      setLineNumber(1749);    // compilenode member
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call11811 = callmethodChecked(this, "dtype", []);
                                                      var opresult11814 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call11811);
                                                      if (Grace_isTrue(opresult11814)) {
                                                        setLineNumber(1750);    // compilenode identifier
                                                        // call case 6: other requests
                                                        // call case 4: self request
                                                        onSelf = true;
                                                        var call11817 = callmethodChecked(this, "dtype", []);
                                                        var call11818 = callmethodChecked(call11817, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                        if11809 = call11818;
                                                      }
                                                      if11804 = if11809;
                                                    }
                                                    return if11804;
                                                  };
                                                  func11803.paramTypes = [];
                                                  func11803.paramTypes.push([]);
                                                  func11803.paramTypes.push([]);
                                                  func11803.paramCounts = [1, 1];
                                                  obj11734.methods["accept(1)from(1)"] = func11803;
                                                  func11803.definitionLine = 1746;
                                                  func11803.definitionModule = "ast";
                                                  var func11819 = function(argcv) {    // method map(_)ancestors(_)
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    var var_blk = arguments[curarg];
                                                    curarg++;
                                                    var var_as = arguments[curarg];
                                                    curarg++;
                                                    setModuleName("ast");
                                                    setLineNumber(1755);    // compilenode member
                                                    // call case 4: self request
                                                    onSelf = true;
                                                    var call11821 = callmethodChecked(this, "shallowCopy", []);
                                                    var var_n = call11821;
                                                    setLineNumber(1756);    // compilenode identifier
                                                    // call case 6: other requests
                                                    var call11823 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                                    var var_newChain = call11823;
                                                    setLineNumber(1757);    // compilenode member
                                                    // call case 4: self request
                                                    onSelf = true;
                                                    var call11827 = callmethodChecked(this, "dtype", []);
                                                    // call case 6: other requests
                                                    // call case 6: other requests
                                                    // call case 3: self.outer request
                                                    var call11830 = callmethodChecked(superDepth, "outer", [0]);
                                                    var call11831 = callmethodChecked(call11830, "outer", []);
                                                    onSelf = true;
                                                    var call11832 = callmethodChecked(call11831, "maybeMap(2)ancestors(1)", [2, 1], call11827, var_blk, var_newChain);
                                                    // call case 6: other requests
                                                    var call11833 = callmethodChecked(var_n, "dtype:=(1)", [1], call11832);
                                                    setLineNumber(1758);    // compilenode identifier
                                                    // call case 6: other requests
                                                    var call11835 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                                    return call11835;
                                                  };
                                                  func11819.paramCounts = [1, 1];
                                                  obj11734.methods["map(1)ancestors(1)"] = func11819;
                                                  func11819.definitionLine = 1754;
                                                  func11819.definitionModule = "ast";
                                                  var func11836 = function(argcv) {    // method pretty(_)
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    var var_depth = arguments[curarg];
                                                    curarg++;
                                                    setModuleName("ast");
                                                    setLineNumber(1761);    // compilenode string
                                                    var string11837 = new GraceString("");
                                                    var var_spc = string11837;
                                                    setLineNumber(1762);    // compilenode num
                                                    var opresult11841 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                                                    var block11842 = new GraceBlock(this, 1762, 1);
                                                    setLineNumber(1);    // compilenode identifier
                                                    block11842.real = function(var_i) {
                                                      setLineNumber(1763);    // compilenode string
                                                      var string11843 = new GraceString("  ");
                                                      var opresult11846 = callmethodChecked(var_spc, "++(1)", [1], string11843);
                                                      var_spc = opresult11846;
                                                      return GraceDone;
                                                    };
                                                    // call case 5: prelude request
                                                    var call11847 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult11841, block11842);
                                                    setLineNumber(1765);    // compilenode identifier
                                                    // call case 1: super request
                                                    var call11849 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                                    var var_s = call11849;
                                                    var if11850 = GraceDone;
                                                    setLineNumber(1766);    // compilenode member
                                                    // call case 4: self request
                                                    onSelf = true;
                                                    var call11852 = callmethodChecked(this, "wildcard", []);
                                                    if (Grace_isTrue(call11852)) {
                                                      setLineNumber(1767);    // compilenode string
                                                      var string11853 = new GraceString(" Wildcard");
                                                      var opresult11856 = callmethodChecked(var_s, "++(1)", [1], string11853);
                                                      var_s = opresult11856;
                                                      if11850 = GraceDone;
                                                    } else {
                                                      var if11857 = GraceDone;
                                                      setLineNumber(1768);    // compilenode member
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call11859 = callmethodChecked(this, "isBindingOccurrence", []);
                                                      if (Grace_isTrue(call11859)) {
                                                        setLineNumber(1769);    // compilenode string
                                                        var string11860 = new GraceString("\u203a");
                                                        // call case 4: self request
                                                        onSelf = true;
                                                        var call11863 = callmethodChecked(this, "value", []);
                                                        var string11865 = new GraceString("Binding\u2039");
                                                        var opresult11867 = callmethodChecked(string11865, "++(1)", [1], call11863);
                                                        var opresult11869 = callmethodChecked(opresult11867, "++(1)", [1], string11860);
                                                        var opresult11872 = callmethodChecked(var_s, "++(1)", [1], opresult11869);
                                                        var_s = opresult11872;
                                                        if11857 = GraceDone;
                                                      } else {
                                                        setLineNumber(1771);    // compilenode string
                                                        var string11873 = new GraceString("\u203a");
                                                        // call case 4: self request
                                                        onSelf = true;
                                                        var call11876 = callmethodChecked(this, "value", []);
                                                        var string11878 = new GraceString("\u2039");
                                                        var opresult11880 = callmethodChecked(string11878, "++(1)", [1], call11876);
                                                        var opresult11882 = callmethodChecked(opresult11880, "++(1)", [1], string11873);
                                                        var opresult11885 = callmethodChecked(var_s, "++(1)", [1], opresult11882);
                                                        var_s = opresult11885;
                                                        if11857 = GraceDone;
                                                      }
                                                      if11850 = if11857;
                                                    }
                                                    var if11886 = GraceDone;
                                                    setLineNumber(1773);    // compilenode member
                                                    // call case 4: self request
                                                    onSelf = true;
                                                    var call11888 = callmethodChecked(this, "dtype", []);
                                                    var opresult11891 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call11888);
                                                    if (Grace_isTrue(opresult11891)) {
                                                      setLineNumber(1774);    // compilenode string
                                                      var string11892 = new GraceString("  Type: ");
                                                      var string11895 = new GraceString("\n");
                                                      var opresult11898 = callmethodChecked(var_s, "++(1)", [1], string11895);
                                                      var opresult11900 = callmethodChecked(opresult11898, "++(1)", [1], var_spc);
                                                      var opresult11902 = callmethodChecked(opresult11900, "++(1)", [1], string11892);
                                                      var_s = opresult11902;
                                                      setLineNumber(1775);    // compilenode identifier
                                                      var opresult11906 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                                      // call case 6: other requests
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call11908 = callmethodChecked(this, "dtype", []);
                                                      var call11909 = callmethodChecked(call11908, "pretty(1)", [1], opresult11906);
                                                      var opresult11912 = callmethodChecked(var_s, "++(1)", [1], call11909);
                                                      var_s = opresult11912;
                                                      if11886 = GraceDone;
                                                    }
                                                    var if11913 = GraceDone;
                                                    setLineNumber(1777);    // compilenode member
                                                    // call case 4: self request
                                                    onSelf = true;
                                                    var call11915 = callmethodChecked(this, "generics", []);
                                                    var opresult11918 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call11915);
                                                    if (Grace_isTrue(opresult11918)) {
                                                      setLineNumber(1778);    // compilenode string
                                                      var string11919 = new GraceString("Generics:");
                                                      var string11922 = new GraceString("\n");
                                                      var opresult11925 = callmethodChecked(var_s, "++(1)", [1], string11922);
                                                      var opresult11927 = callmethodChecked(opresult11925, "++(1)", [1], var_spc);
                                                      var opresult11929 = callmethodChecked(opresult11927, "++(1)", [1], string11919);
                                                      var_s = opresult11929;
                                                      setLineNumber(1779);    // compilenode member
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call11932 = callmethodChecked(this, "generics", []);
                                                      var block11933 = new GraceBlock(this, 1779, 1);
                                                      setLineNumber(1);    // compilenode identifier
                                                      block11933.real = function(var_g) {
                                                        setLineNumber(1780);    // compilenode identifier
                                                        var opresult11937 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                                        // call case 6: other requests
                                                        var call11938 = callmethodChecked(var_g, "pretty(1)", [1], opresult11937);
                                                        var string11940 = new GraceString("  ");
                                                        var string11943 = new GraceString("\n");
                                                        var opresult11946 = callmethodChecked(var_s, "++(1)", [1], string11943);
                                                        var opresult11948 = callmethodChecked(opresult11946, "++(1)", [1], var_spc);
                                                        var opresult11950 = callmethodChecked(opresult11948, "++(1)", [1], string11940);
                                                        var opresult11952 = callmethodChecked(opresult11950, "++(1)", [1], call11938);
                                                        var_s = opresult11952;
                                                        return GraceDone;
                                                      };
                                                      // call case 5: prelude request
                                                      var call11953 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call11932, block11933);
                                                      if11913 = call11953;
                                                    }
                                                    setLineNumber(1783);    // compilenode identifier
                                                    return var_s;
                                                  };
                                                  func11836.paramCounts = [1];
                                                  obj11734.methods["pretty(1)"] = func11836;
                                                  func11836.definitionLine = 1760;
                                                  func11836.definitionModule = "ast";
                                                  var func11954 = function(argcv) {    // method toGrace(_)
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    var var_depth = arguments[curarg];
                                                    curarg++;
                                                    // Start argument checking
                                                    curarg = 1;
                                                    setLineNumber(1785);    // compilenode identifier
                                                    if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                callmethod(var_Number, "asString", [0])._value + "."));
                                                    curarg++;
                                                    // End argument checking
                                                    setModuleName("ast");
                                                    setLineNumber(1786);    // compilenode vardec
                                                    var var_s;
                                                    var if11955 = GraceDone;
                                                    setLineNumber(1787);    // compilenode member
                                                    // call case 4: self request
                                                    onSelf = true;
                                                    var call11957 = callmethodChecked(this, "wildcard", []);
                                                    if (Grace_isTrue(call11957)) {
                                                      setLineNumber(1788);    // compilenode string
                                                      var string11958 = new GraceString("_");
                                                      var_s = string11958;
                                                      if11955 = GraceDone;
                                                    } else {
                                                      setLineNumber(1790);    // compilenode member
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call11960 = callmethodChecked(this, "value", []);
                                                      var_s = call11960;
                                                      if11955 = GraceDone;
                                                    }
                                                    var if11961 = GraceDone;
                                                    setLineNumber(1792);    // compilenode member
                                                    // call case 4: self request
                                                    onSelf = true;
                                                    var call11963 = callmethodChecked(this, "dtype", []);
                                                    var opresult11966 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call11963);
                                                    if (Grace_isTrue(opresult11966)) {
                                                      setLineNumber(1793);    // compilenode identifier
                                                      var opresult11970 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                                      // call case 6: other requests
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call11972 = callmethodChecked(this, "dtype", []);
                                                      var call11973 = callmethodChecked(call11972, "toGrace(1)", [1], opresult11970);
                                                      var string11975 = new GraceString(" : ");
                                                      var opresult11978 = callmethodChecked(var_s, "++(1)", [1], string11975);
                                                      var opresult11980 = callmethodChecked(opresult11978, "++(1)", [1], call11973);
                                                      var_s = opresult11980;
                                                      if11961 = GraceDone;
                                                    }
                                                    var if11981 = GraceDone;
                                                    setLineNumber(1795);    // compilenode member
                                                    // call case 4: self request
                                                    onSelf = true;
                                                    var call11983 = callmethodChecked(this, "generics", []);
                                                    var opresult11986 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call11983);
                                                    if (Grace_isTrue(opresult11986)) {
                                                      setLineNumber(1796);    // compilenode string
                                                      var string11987 = new GraceString("<");
                                                      var opresult11990 = callmethodChecked(var_s, "++(1)", [1], string11987);
                                                      var_s = opresult11990;
                                                      setLineNumber(1797);    // compilenode member
                                                      // call case 6: other requests
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call11995 = callmethodChecked(this, "generics", []);
                                                      var call11996 = callmethodChecked(call11995, "size", []);
                                                      var diff11998 = callmethodChecked(call11996, "-(1)", [1], new GraceNum(1));
                                                      var opresult12001 = callmethodChecked(new GraceNum(1), "..(1)", [1], diff11998);
                                                      var block12002 = new GraceBlock(this, 1797, 1);
                                                      setLineNumber(1);    // compilenode identifier
                                                      block12002.real = function(var_ix) {
                                                        setLineNumber(1798);    // compilenode identifier
                                                        var opresult12006 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                                        // call case 6: other requests
                                                        // call case 6: other requests
                                                        // call case 4: self request
                                                        onSelf = true;
                                                        var call12009 = callmethodChecked(this, "generics", []);
                                                        var call12010 = callmethodChecked(call12009, "at(1)", [1], var_ix);
                                                        var call12011 = callmethodChecked(call12010, "toGrace(1)", [1], opresult12006);
                                                        var opresult12014 = callmethodChecked(var_s, "++(1)", [1], call12011);
                                                        var_s = opresult12014;
                                                        return GraceDone;
                                                      };
                                                      // call case 5: prelude request
                                                      var call12015 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult12001, block12002);
                                                      setLineNumber(1800);    // compilenode string
                                                      var string12016 = new GraceString(">");
                                                      var opresult12021 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                                      // call case 6: other requests
                                                      // call case 6: other requests
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call12024 = callmethodChecked(this, "generics", []);
                                                      var call12025 = callmethodChecked(call12024, "last", []);
                                                      var call12026 = callmethodChecked(call12025, "toGrace(1)", [1], opresult12021);
                                                      var opresult12029 = callmethodChecked(var_s, "++(1)", [1], call12026);
                                                      var opresult12031 = callmethodChecked(opresult12029, "++(1)", [1], string12016);
                                                      var_s = opresult12031;
                                                      if11981 = GraceDone;
                                                    }
                                                    setLineNumber(1802);    // return value
                                                    if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], var_s)))
                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                            new GraceString("result of method toGrace(_) does not have " + 
                                                                callmethod(var_String, "asString", [0])._value + "."));
                                                    return var_s;
                                                  };
                                                  func11954.paramTypes = [];
                                                  func11954.paramTypes.push([type_Number, "depth"]);
                                                  func11954.paramCounts = [1];
                                                  obj11734.methods["toGrace(1)"] = func11954;
                                                  func11954.definitionLine = 1785;
                                                  func11954.definitionModule = "ast";
                                                  var func12032 = function(argcv) {    // method asString
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    setModuleName("ast");
                                                    var if12033 = GraceDone;
                                                    setLineNumber(1806);    // compilenode member
                                                    // call case 4: self request
                                                    onSelf = true;
                                                    var call12035 = callmethodChecked(this, "isBindingOccurrence", []);
                                                    if (Grace_isTrue(call12035)) {
                                                      setLineNumber(1807);    // compilenode string
                                                      var string12036 = new GraceString("\u203a");
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call12039 = callmethodChecked(this, "value", []);
                                                      var string12041 = new GraceString("identifierBinding\u2039");
                                                      var opresult12043 = callmethodChecked(string12041, "++(1)", [1], call12039);
                                                      var opresult12045 = callmethodChecked(opresult12043, "++(1)", [1], string12036);
                                                      if12033 = opresult12045;
                                                    } else {
                                                      setLineNumber(1809);    // compilenode string
                                                      var string12046 = new GraceString("\u203a");
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call12049 = callmethodChecked(this, "value", []);
                                                      var string12051 = new GraceString("identifier\u2039");
                                                      var opresult12053 = callmethodChecked(string12051, "++(1)", [1], call12049);
                                                      var opresult12055 = callmethodChecked(opresult12053, "++(1)", [1], string12046);
                                                      if12033 = opresult12055;
                                                    }
                                                    return if12033;
                                                  };
                                                  func12032.paramCounts = [0];
                                                  obj11734.methods["asString"] = func12032;
                                                  func12032.definitionLine = 1805;
                                                  func12032.definitionModule = "ast";
                                                  var func12056 = function(argcv) {    // method shallowCopy
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    setModuleName("ast");
                                                    setLineNumber(1813);    // compilenode identifier
                                                    // call case 6: other requests
                                                    // call case 4: self request
                                                    onSelf = true;
                                                    var call12060 = callmethodChecked(this, "value", []);
                                                    // call case 6: other requests
                                                    var call12061 = callmethodChecked(var_identifierNode, "new(2)", [2], call12060, GraceFalse);
                                                    var call12062 = callmethodChecked(call12061, "shallowCopyFieldsFrom(1)", [1], this);
                                                    return call12062;
                                                  };
                                                  func12056.paramCounts = [0];
                                                  obj11734.methods["shallowCopy"] = func12056;
                                                  func12056.definitionLine = 1812;
                                                  func12056.definitionModule = "ast";
                                                  var func12063 = function(argcv) {    // method shallowCopyFieldsFrom(_)
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    var var_other = arguments[curarg];
                                                    curarg++;
                                                    setModuleName("ast");
                                                    setLineNumber(1816);    // compilenode identifier
                                                    // call case 1: super request
                                                    var call12065 = callmethodsuper(this, "shallowCopyFieldsFrom(1)", [1], var_other);
                                                    setLineNumber(1817);    // compilenode member
                                                    // call case 6: other requests
                                                    var call12068 = callmethodChecked(var_other, "wildcard", []);
                                                    // call case 4: self request
                                                    onSelf = true;
                                                    var call12069 = callmethodChecked(this, "wildcard:=(1)", [1], call12068);
                                                    setLineNumber(1818);    // compilenode member
                                                    // call case 6: other requests
                                                    var call12072 = callmethodChecked(var_other, "isBindingOccurrence", []);
                                                    // call case 4: self request
                                                    onSelf = true;
                                                    var call12073 = callmethodChecked(this, "isBindingOccurrence:=(1)", [1], call12072);
                                                    setLineNumber(1819);    // compilenode member
                                                    // call case 6: other requests
                                                    var call12076 = callmethodChecked(var_other, "isDeclaredByParent", []);
                                                    // call case 4: self request
                                                    onSelf = true;
                                                    var call12077 = callmethodChecked(this, "isDeclaredByParent:=(1)", [1], call12076);
                                                    setLineNumber(1820);    // compilenode member
                                                    // call case 6: other requests
                                                    var call12080 = callmethodChecked(var_other, "isAssigned", []);
                                                    // call case 4: self request
                                                    onSelf = true;
                                                    var call12081 = callmethodChecked(this, "isAssigned:=(1)", [1], call12080);
                                                    setLineNumber(1821);    // compilenode member
                                                    // call case 6: other requests
                                                    var call12084 = callmethodChecked(var_other, "inRequest", []);
                                                    // call case 4: self request
                                                    onSelf = true;
                                                    var call12085 = callmethodChecked(this, "inRequest:=(1)", [1], call12084);
                                                    setLineNumber(1822);    // compilenode identifier
                                                    return this;
                                                  };
                                                  func12063.paramCounts = [1];
                                                  obj11734.methods["shallowCopyFieldsFrom(1)"] = func12063;
                                                  func12063.definitionLine = 1815;
                                                  func12063.definitionModule = "ast";
                                                  var func12086 = function(argcv) {    // method statementName
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    setModuleName("ast");
                                                    setLineNumber(1824);    // compilenode string
                                                    var string12087 = new GraceString("expression");
                                                    return string12087;
                                                  };
                                                  func12086.paramCounts = [0];
                                                  obj11734.methods["statementName"] = func12086;
                                                  func12086.definitionLine = 1824;
                                                  func12086.definitionModule = "ast";
                                                  setLineNumber(1705);    // compilenode identifier
                                                  // call case 6: other requests
                                                  // call case 6: other requests
                                                  // call case 3: self.outer request
                                                  var call12091 = callmethodChecked(superDepth, "outer", [0]);
                                                  var call12092 = callmethodChecked(call12091, "outer", []);
                                                  var call12093 = callmethodChecked(call12092, "baseNode$object(1)", [0, 1], this);
                                                  obj11734.superobj = call12093;
                                                  if (call12093.data) obj11734.data = call12093.data;
                                                  if (call12093.hasOwnProperty('_value'))
                                                      obj11734._value = call12093._value;
                                                  setLineNumber(1706);    // compilenode string
                                                  var string12094 = new GraceString("identifier");
                                                  obj11734.data["kind"] = string12094;
                                                  var reader_ast_kind12095 = function() {
                                                    return this.data["kind"];
                                                  };
                                                  reader_ast_kind12095.def = true;
                                                  obj11734.methods["kind"] = reader_ast_kind12095;
                                                  setLineNumber(1707);    // compilenode identifier
                                                  obj11734.data["value"] = var_name;
                                                  var reader_ast_value12096 = function() {
                                                    return this.data["value"];
                                                  };
                                                  obj11734.methods["value"] = reader_ast_value12096;
                                                  obj11734.data["value"] = var_name;
                                                  var writer_ast_value12096 = function(argcv, o) {
                                                    this.data["value"] = o;
                                                    return GraceDone;
                                                  };
                                                  obj11734.methods["value:=(1)"] = writer_ast_value12096;
                                                  obj11734.mutable = true;
                                                  setLineNumber(1708);    // compilenode identifier
                                                  obj11734.data["wildcard"] = GraceFalse;
                                                  var reader_ast_wildcard12097 = function() {
                                                    return this.data["wildcard"];
                                                  };
                                                  obj11734.methods["wildcard"] = reader_ast_wildcard12097;
                                                  obj11734.data["wildcard"] = GraceFalse;
                                                  var writer_ast_wildcard12097 = function(argcv, o) {
                                                    this.data["wildcard"] = o;
                                                    return GraceDone;
                                                  };
                                                  obj11734.methods["wildcard:=(1)"] = writer_ast_wildcard12097;
                                                  obj11734.mutable = true;
                                                  setLineNumber(1709);    // compilenode identifier
                                                  obj11734.data["dtype"] = var_dtype__39__;
                                                  var reader_ast_dtype12098 = function() {
                                                    return this.data["dtype"];
                                                  };
                                                  obj11734.methods["dtype"] = reader_ast_dtype12098;
                                                  obj11734.data["dtype"] = var_dtype__39__;
                                                  var writer_ast_dtype12098 = function(argcv, o) {
                                                    this.data["dtype"] = o;
                                                    return GraceDone;
                                                  };
                                                  obj11734.methods["dtype:=(1)"] = writer_ast_dtype12098;
                                                  obj11734.mutable = true;
                                                  setLineNumber(1710);    // compilenode identifier
                                                  obj11734.data["isBindingOccurrence"] = GraceFalse;
                                                  var reader_ast_isBindingOccurrence12099 = function() {
                                                    return this.data["isBindingOccurrence"];
                                                  };
                                                  obj11734.methods["isBindingOccurrence"] = reader_ast_isBindingOccurrence12099;
                                                  obj11734.data["isBindingOccurrence"] = GraceFalse;
                                                  var writer_ast_isBindingOccurrence12099 = function(argcv, o) {
                                                    this.data["isBindingOccurrence"] = o;
                                                    return GraceDone;
                                                  };
                                                  obj11734.methods["isBindingOccurrence:=(1)"] = writer_ast_isBindingOccurrence12099;
                                                  obj11734.mutable = true;
                                                  setLineNumber(1711);    // compilenode identifier
                                                  obj11734.data["isAssigned"] = GraceFalse;
                                                  var reader_ast_isAssigned12100 = function() {
                                                    return this.data["isAssigned"];
                                                  };
                                                  obj11734.methods["isAssigned"] = reader_ast_isAssigned12100;
                                                  obj11734.data["isAssigned"] = GraceFalse;
                                                  var writer_ast_isAssigned12100 = function(argcv, o) {
                                                    this.data["isAssigned"] = o;
                                                    return GraceDone;
                                                  };
                                                  obj11734.methods["isAssigned:=(1)"] = writer_ast_isAssigned12100;
                                                  obj11734.mutable = true;
                                                  setLineNumber(1712);    // compilenode identifier
                                                  obj11734.data["inRequest"] = GraceFalse;
                                                  var reader_ast_inRequest12101 = function() {
                                                    return this.data["inRequest"];
                                                  };
                                                  obj11734.methods["inRequest"] = reader_ast_inRequest12101;
                                                  obj11734.data["inRequest"] = GraceFalse;
                                                  var writer_ast_inRequest12101 = function(argcv, o) {
                                                    this.data["inRequest"] = o;
                                                    return GraceDone;
                                                  };
                                                  obj11734.methods["inRequest:=(1)"] = writer_ast_inRequest12101;
                                                  obj11734.mutable = true;
                                                  setLineNumber(1713);    // compilenode identifier
                                                  obj11734.data["generics"] = GraceFalse;
                                                  var reader_ast_generics12102 = function() {
                                                    return this.data["generics"];
                                                  };
                                                  obj11734.methods["generics"] = reader_ast_generics12102;
                                                  obj11734.data["generics"] = GraceFalse;
                                                  var writer_ast_generics12102 = function(argcv, o) {
                                                    this.data["generics"] = o;
                                                    return GraceDone;
                                                  };
                                                  obj11734.methods["generics:=(1)"] = writer_ast_generics12102;
                                                  obj11734.mutable = true;
                                                  setLineNumber(1714);    // compilenode identifier
                                                  obj11734.data["isDeclaredByParent"] = GraceFalse;
                                                  var reader_ast_isDeclaredByParent12103 = function() {
                                                    return this.data["isDeclaredByParent"];
                                                  };
                                                  obj11734.methods["isDeclaredByParent"] = reader_ast_isDeclaredByParent12103;
                                                  obj11734.data["isDeclaredByParent"] = GraceFalse;
                                                  var writer_ast_isDeclaredByParent12103 = function(argcv, o) {
                                                    this.data["isDeclaredByParent"] = o;
                                                    return GraceDone;
                                                  };
                                                  obj11734.methods["isDeclaredByParent:=(1)"] = writer_ast_isDeclaredByParent12103;
                                                  obj11734.mutable = true;
                                                  superDepth = origSuperDepth;
                                                };
                                                obj_init_11734.apply(obj11734, []);
                                                return obj11734;
                                              };
                                              func11733.paramCounts = [2];
                                              obj11726.methods["new(2)"] = func11733;
                                              func11733.definitionLine = 1704;
                                              func11733.definitionModule = "ast";
                                                var func12104 = function(argcv) {    // method new(_,_)$object(_)
                                                  var curarg = 1;
                                                  var var_name = arguments[curarg];
                                                  curarg++;
                                                  var var_dtype__39__ = arguments[curarg];
                                                  curarg++;
                                                  var inheritingObject = arguments[curarg++];
                                                  // Start argument processing
                                                  curarg = 1;
                                                  curarg++;
                                                  curarg++;
                                                  // End argument processing
                                                  setModuleName("ast");
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var obj12105 = Grace_allocObject(null, "new(2)");
                                                  obj12105.definitionModule = "ast";
                                                  obj12105.definitionLine = 1704;
                                                  var inho12105 = inheritingObject;
                                                  while (inho12105.superobj) inho12105 = inho12105.superobj;
                                                  inho12105.superobj = obj12105;
                                                  obj12105.data = inheritingObject.data;
                                                  if (inheritingObject.hasOwnProperty('_value'))
                                                    obj12105._value = inheritingObject._value;
                                                  obj12105.outer = this;
                                                  var reader_ast_outer12106 = function() {
                                                    return this.outer;
                                                  };
                                                  obj12105.methods["outer"] = reader_ast_outer12106;
                                                  var obj_init_12105 = function() {
                                                    var origSuperDepth = superDepth;
                                                    superDepth = obj12105;
                                                    var func12107 = function(argcv) {    // method nameString
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      setModuleName("ast");
                                                      setLineNumber(1716);    // compilenode member
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call12109 = callmethodChecked(this, "value", []);
                                                      return call12109;
                                                    };
                                                    func12107.paramCounts = [0];
                                                    obj12105.methods["nameString"] = func12107;
                                                    func12107.definitionLine = 1716;
                                                    func12107.definitionModule = "ast";
                                                    var func12110 = function(argcv) {    // method canonicalName
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      setModuleName("ast");
                                                      setLineNumber(1717);    // compilenode member
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call12112 = callmethodChecked(this, "value", []);
                                                      return call12112;
                                                    };
                                                    func12110.paramCounts = [0];
                                                    obj12105.methods["canonicalName"] = func12110;
                                                    func12110.definitionLine = 1717;
                                                    func12110.definitionModule = "ast";
                                                    var func12113 = function(argcv) {    // method quoted
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      setModuleName("ast");
                                                      setLineNumber(1718);    // compilenode member
                                                      // call case 6: other requests
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call12116 = callmethodChecked(this, "value", []);
                                                      var call12117 = callmethodChecked(call12116, "quoted", []);
                                                      return call12117;
                                                    };
                                                    func12113.paramCounts = [0];
                                                    obj12105.methods["quoted"] = func12113;
                                                    func12113.definitionLine = 1718;
                                                    func12113.definitionModule = "ast";
                                                    var func12118 = function(argcv) {    // method isIdentifier
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      setModuleName("ast");
                                                      // isIdentifier is a simple accessor - elide try ... catch
                                                      setLineNumber(1719);    // compilenode identifier
                                                      return GraceTrue;
                                                    };
                                                    func12118.paramCounts = [0];
                                                    obj12105.methods["isIdentifier"] = func12118;
                                                    func12118.definitionLine = 1719;
                                                    func12118.definitionModule = "ast";
                                                    var func12119 = function(argcv) {    // method isSelf
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      setModuleName("ast");
                                                      setLineNumber(1721);    // compilenode member
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call12121 = callmethodChecked(this, "value", []);
                                                      var string12123 = new GraceString("self");
                                                      var opresult12125 = callmethodChecked(string12123, "==(1)", [1], call12121);
                                                      return opresult12125;
                                                    };
                                                    func12119.paramCounts = [0];
                                                    obj12105.methods["isSelf"] = func12119;
                                                    func12119.definitionLine = 1721;
                                                    func12119.definitionModule = "ast";
                                                    var func12126 = function(argcv) {    // method isSuper
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      setModuleName("ast");
                                                      setLineNumber(1722);    // compilenode member
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call12128 = callmethodChecked(this, "value", []);
                                                      var string12130 = new GraceString("super");
                                                      var opresult12132 = callmethodChecked(string12130, "==(1)", [1], call12128);
                                                      return opresult12132;
                                                    };
                                                    func12126.paramCounts = [0];
                                                    obj12105.methods["isSuper"] = func12126;
                                                    func12126.definitionLine = 1722;
                                                    func12126.definitionModule = "ast";
                                                    var func12133 = function(argcv) {    // method isPrelude
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      setModuleName("ast");
                                                      setLineNumber(1723);    // compilenode member
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call12135 = callmethodChecked(this, "value", []);
                                                      var string12137 = new GraceString("prelude");
                                                      var opresult12139 = callmethodChecked(string12137, "==(1)", [1], call12135);
                                                      return opresult12139;
                                                    };
                                                    func12133.paramCounts = [0];
                                                    obj12105.methods["isPrelude"] = func12133;
                                                    func12133.definitionLine = 1723;
                                                    func12133.definitionModule = "ast";
                                                    var func12140 = function(argcv) {    // method isOuter
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      setModuleName("ast");
                                                      setLineNumber(1724);    // compilenode member
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call12142 = callmethodChecked(this, "value", []);
                                                      var string12144 = new GraceString("outer");
                                                      var opresult12146 = callmethodChecked(string12144, "==(1)", [1], call12142);
                                                      return opresult12146;
                                                    };
                                                    func12140.paramCounts = [0];
                                                    obj12105.methods["isOuter"] = func12140;
                                                    func12140.definitionLine = 1724;
                                                    func12140.definitionModule = "ast";
                                                    var func12147 = function(argcv) {    // method isAppliedOccurenceOfIdentifier
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      setModuleName("ast");
                                                      var if12148 = GraceDone;
                                                      setLineNumber(1727);    // compilenode member
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call12150 = callmethodChecked(this, "wildcard", []);
                                                      if (Grace_isTrue(call12150)) {
                                                        setLineNumber(1728);    // compilenode identifier
                                                        if12148 = GraceFalse;
                                                      } else {
                                                        setLineNumber(1730);    // compilenode member
                                                        // call case 6: other requests
                                                        // call case 4: self request
                                                        onSelf = true;
                                                        var call12153 = callmethodChecked(this, "isBindingOccurrence", []);
                                                        var call12154 = callmethodChecked(call12153, "not", []);
                                                        if12148 = call12154;
                                                      }
                                                      return if12148;
                                                    };
                                                    func12147.paramCounts = [0];
                                                    obj12105.methods["isAppliedOccurenceOfIdentifier"] = func12147;
                                                    func12147.definitionLine = 1726;
                                                    func12147.definitionModule = "ast";
                                                    var func12155 = function(argcv) {    // method declarationKindWithAncestors(_)
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      var var_as = arguments[curarg];
                                                      curarg++;
                                                      setModuleName("ast");
                                                      setLineNumber(1734);    // compilenode identifier
                                                      // call case 6: other requests
                                                      // call case 6: other requests
                                                      var call12158 = callmethodChecked(var_as, "parent", []);
                                                      var call12159 = callmethodChecked(call12158, "declarationKindWithAncestors(1)", [1], var_as);
                                                      return call12159;
                                                    };
                                                    func12155.paramCounts = [1];
                                                    obj12105.methods["declarationKindWithAncestors(1)"] = func12155;
                                                    func12155.definitionLine = 1733;
                                                    func12155.definitionModule = "ast";
                                                    var func12160 = function(argcv) {    // method inTypePositionWithAncestors(_)
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      var var_as = arguments[curarg];
                                                      curarg++;
                                                      setModuleName("ast");
                                                      var if12161 = GraceDone;
                                                      setLineNumber(1740);    // compilenode member
                                                      // call case 6: other requests
                                                      var call12163 = callmethodChecked(var_as, "isEmpty", []);
                                                      if (Grace_isTrue(call12163)) {
                                                        return GraceFalse;
                                                      }
                                                      setLineNumber(1741);    // compilenode identifier
                                                      // call case 6: other requests
                                                      // call case 6: other requests
                                                      var call12166 = callmethodChecked(var_as, "parent", []);
                                                      var call12167 = callmethodChecked(call12166, "usesAsType(1)", [1], this);
                                                      return call12167;
                                                    };
                                                    func12160.paramCounts = [1];
                                                    obj12105.methods["inTypePositionWithAncestors(1)"] = func12160;
                                                    func12160.definitionLine = 1736;
                                                    func12160.definitionModule = "ast";
                                                    var func12168 = function(argcv) {    // method usesAsType(_)
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      var var_aNode = arguments[curarg];
                                                      curarg++;
                                                      setModuleName("ast");
                                                      setLineNumber(1744);    // compilenode member
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call12170 = callmethodChecked(this, "dtype", []);
                                                      var opresult12173 = callmethodChecked(var_aNode, "==(1)", [1], call12170);
                                                      return opresult12173;
                                                    };
                                                    func12168.paramCounts = [1];
                                                    obj12105.methods["usesAsType(1)"] = func12168;
                                                    func12168.definitionLine = 1743;
                                                    func12168.definitionModule = "ast";
                                                    var func12174 = function(argcv) {    // method accept(_)from(_)
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      var var_visitor = arguments[curarg];
                                                      curarg++;
                                                      var var_as = arguments[curarg];
                                                      curarg++;
                                                      // Start argument checking
                                                      curarg = 1;
                                                      setLineNumber(1746);    // compilenode identifier
                                                      if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                  callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                      curarg++;
                                                      curarg++;
                                                      // End argument checking
                                                      setModuleName("ast");
                                                      var if12175 = GraceDone;
                                                      setLineNumber(1747);    // compilenode identifier
                                                      // call case 6: other requests
                                                      var call12177 = callmethodChecked(var_visitor, "visitIdentifier(1)up(1)", [1, 1], this, var_as);
                                                      if (Grace_isTrue(call12177)) {
                                                        setLineNumber(1748);    // compilenode identifier
                                                        // call case 6: other requests
                                                        var call12179 = callmethodChecked(var_as, "extend(1)", [1], this);
                                                        var var_newChain = call12179;
                                                        var if12180 = GraceDone;
                                                        setLineNumber(1749);    // compilenode member
                                                        // call case 4: self request
                                                        onSelf = true;
                                                        var call12182 = callmethodChecked(this, "dtype", []);
                                                        var opresult12185 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call12182);
                                                        if (Grace_isTrue(opresult12185)) {
                                                          setLineNumber(1750);    // compilenode identifier
                                                          // call case 6: other requests
                                                          // call case 4: self request
                                                          onSelf = true;
                                                          var call12188 = callmethodChecked(this, "dtype", []);
                                                          var call12189 = callmethodChecked(call12188, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                          if12180 = call12189;
                                                        }
                                                        if12175 = if12180;
                                                      }
                                                      return if12175;
                                                    };
                                                    func12174.paramTypes = [];
                                                    func12174.paramTypes.push([]);
                                                    func12174.paramTypes.push([]);
                                                    func12174.paramCounts = [1, 1];
                                                    obj12105.methods["accept(1)from(1)"] = func12174;
                                                    func12174.definitionLine = 1746;
                                                    func12174.definitionModule = "ast";
                                                    var func12190 = function(argcv) {    // method map(_)ancestors(_)
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      var var_blk = arguments[curarg];
                                                      curarg++;
                                                      var var_as = arguments[curarg];
                                                      curarg++;
                                                      setModuleName("ast");
                                                      setLineNumber(1755);    // compilenode member
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call12192 = callmethodChecked(this, "shallowCopy", []);
                                                      var var_n = call12192;
                                                      setLineNumber(1756);    // compilenode identifier
                                                      // call case 6: other requests
                                                      var call12194 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                                      var var_newChain = call12194;
                                                      setLineNumber(1757);    // compilenode member
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call12198 = callmethodChecked(this, "dtype", []);
                                                      // call case 6: other requests
                                                      // call case 6: other requests
                                                      // call case 3: self.outer request
                                                      var call12201 = callmethodChecked(superDepth, "outer", [0]);
                                                      var call12202 = callmethodChecked(call12201, "outer", []);
                                                      onSelf = true;
                                                      var call12203 = callmethodChecked(call12202, "maybeMap(2)ancestors(1)", [2, 1], call12198, var_blk, var_newChain);
                                                      // call case 6: other requests
                                                      var call12204 = callmethodChecked(var_n, "dtype:=(1)", [1], call12203);
                                                      setLineNumber(1758);    // compilenode identifier
                                                      // call case 6: other requests
                                                      var call12206 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                                      return call12206;
                                                    };
                                                    func12190.paramCounts = [1, 1];
                                                    obj12105.methods["map(1)ancestors(1)"] = func12190;
                                                    func12190.definitionLine = 1754;
                                                    func12190.definitionModule = "ast";
                                                    var func12207 = function(argcv) {    // method pretty(_)
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      var var_depth = arguments[curarg];
                                                      curarg++;
                                                      setModuleName("ast");
                                                      setLineNumber(1761);    // compilenode string
                                                      var string12208 = new GraceString("");
                                                      var var_spc = string12208;
                                                      setLineNumber(1762);    // compilenode num
                                                      var opresult12212 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                                                      var block12213 = new GraceBlock(this, 1762, 1);
                                                      setLineNumber(1);    // compilenode identifier
                                                      block12213.real = function(var_i) {
                                                        setLineNumber(1763);    // compilenode string
                                                        var string12214 = new GraceString("  ");
                                                        var opresult12217 = callmethodChecked(var_spc, "++(1)", [1], string12214);
                                                        var_spc = opresult12217;
                                                        return GraceDone;
                                                      };
                                                      // call case 5: prelude request
                                                      var call12218 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult12212, block12213);
                                                      setLineNumber(1765);    // compilenode identifier
                                                      // call case 1: super request
                                                      var call12220 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                                      var var_s = call12220;
                                                      var if12221 = GraceDone;
                                                      setLineNumber(1766);    // compilenode member
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call12223 = callmethodChecked(this, "wildcard", []);
                                                      if (Grace_isTrue(call12223)) {
                                                        setLineNumber(1767);    // compilenode string
                                                        var string12224 = new GraceString(" Wildcard");
                                                        var opresult12227 = callmethodChecked(var_s, "++(1)", [1], string12224);
                                                        var_s = opresult12227;
                                                        if12221 = GraceDone;
                                                      } else {
                                                        var if12228 = GraceDone;
                                                        setLineNumber(1768);    // compilenode member
                                                        // call case 4: self request
                                                        onSelf = true;
                                                        var call12230 = callmethodChecked(this, "isBindingOccurrence", []);
                                                        if (Grace_isTrue(call12230)) {
                                                          setLineNumber(1769);    // compilenode string
                                                          var string12231 = new GraceString("\u203a");
                                                          // call case 4: self request
                                                          onSelf = true;
                                                          var call12234 = callmethodChecked(this, "value", []);
                                                          var string12236 = new GraceString("Binding\u2039");
                                                          var opresult12238 = callmethodChecked(string12236, "++(1)", [1], call12234);
                                                          var opresult12240 = callmethodChecked(opresult12238, "++(1)", [1], string12231);
                                                          var opresult12243 = callmethodChecked(var_s, "++(1)", [1], opresult12240);
                                                          var_s = opresult12243;
                                                          if12228 = GraceDone;
                                                        } else {
                                                          setLineNumber(1771);    // compilenode string
                                                          var string12244 = new GraceString("\u203a");
                                                          // call case 4: self request
                                                          onSelf = true;
                                                          var call12247 = callmethodChecked(this, "value", []);
                                                          var string12249 = new GraceString("\u2039");
                                                          var opresult12251 = callmethodChecked(string12249, "++(1)", [1], call12247);
                                                          var opresult12253 = callmethodChecked(opresult12251, "++(1)", [1], string12244);
                                                          var opresult12256 = callmethodChecked(var_s, "++(1)", [1], opresult12253);
                                                          var_s = opresult12256;
                                                          if12228 = GraceDone;
                                                        }
                                                        if12221 = if12228;
                                                      }
                                                      var if12257 = GraceDone;
                                                      setLineNumber(1773);    // compilenode member
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call12259 = callmethodChecked(this, "dtype", []);
                                                      var opresult12262 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call12259);
                                                      if (Grace_isTrue(opresult12262)) {
                                                        setLineNumber(1774);    // compilenode string
                                                        var string12263 = new GraceString("  Type: ");
                                                        var string12266 = new GraceString("\n");
                                                        var opresult12269 = callmethodChecked(var_s, "++(1)", [1], string12266);
                                                        var opresult12271 = callmethodChecked(opresult12269, "++(1)", [1], var_spc);
                                                        var opresult12273 = callmethodChecked(opresult12271, "++(1)", [1], string12263);
                                                        var_s = opresult12273;
                                                        setLineNumber(1775);    // compilenode identifier
                                                        var opresult12277 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                                        // call case 6: other requests
                                                        // call case 4: self request
                                                        onSelf = true;
                                                        var call12279 = callmethodChecked(this, "dtype", []);
                                                        var call12280 = callmethodChecked(call12279, "pretty(1)", [1], opresult12277);
                                                        var opresult12283 = callmethodChecked(var_s, "++(1)", [1], call12280);
                                                        var_s = opresult12283;
                                                        if12257 = GraceDone;
                                                      }
                                                      var if12284 = GraceDone;
                                                      setLineNumber(1777);    // compilenode member
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call12286 = callmethodChecked(this, "generics", []);
                                                      var opresult12289 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call12286);
                                                      if (Grace_isTrue(opresult12289)) {
                                                        setLineNumber(1778);    // compilenode string
                                                        var string12290 = new GraceString("Generics:");
                                                        var string12293 = new GraceString("\n");
                                                        var opresult12296 = callmethodChecked(var_s, "++(1)", [1], string12293);
                                                        var opresult12298 = callmethodChecked(opresult12296, "++(1)", [1], var_spc);
                                                        var opresult12300 = callmethodChecked(opresult12298, "++(1)", [1], string12290);
                                                        var_s = opresult12300;
                                                        setLineNumber(1779);    // compilenode member
                                                        // call case 4: self request
                                                        onSelf = true;
                                                        var call12303 = callmethodChecked(this, "generics", []);
                                                        var block12304 = new GraceBlock(this, 1779, 1);
                                                        setLineNumber(1);    // compilenode identifier
                                                        block12304.real = function(var_g) {
                                                          setLineNumber(1780);    // compilenode identifier
                                                          var opresult12308 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                                          // call case 6: other requests
                                                          var call12309 = callmethodChecked(var_g, "pretty(1)", [1], opresult12308);
                                                          var string12311 = new GraceString("  ");
                                                          var string12314 = new GraceString("\n");
                                                          var opresult12317 = callmethodChecked(var_s, "++(1)", [1], string12314);
                                                          var opresult12319 = callmethodChecked(opresult12317, "++(1)", [1], var_spc);
                                                          var opresult12321 = callmethodChecked(opresult12319, "++(1)", [1], string12311);
                                                          var opresult12323 = callmethodChecked(opresult12321, "++(1)", [1], call12309);
                                                          var_s = opresult12323;
                                                          return GraceDone;
                                                        };
                                                        // call case 5: prelude request
                                                        var call12324 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call12303, block12304);
                                                        if12284 = call12324;
                                                      }
                                                      setLineNumber(1783);    // compilenode identifier
                                                      return var_s;
                                                    };
                                                    func12207.paramCounts = [1];
                                                    obj12105.methods["pretty(1)"] = func12207;
                                                    func12207.definitionLine = 1760;
                                                    func12207.definitionModule = "ast";
                                                    var func12325 = function(argcv) {    // method toGrace(_)
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      var var_depth = arguments[curarg];
                                                      curarg++;
                                                      // Start argument checking
                                                      curarg = 1;
                                                      setLineNumber(1785);    // compilenode identifier
                                                      if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                  callmethod(var_Number, "asString", [0])._value + "."));
                                                      curarg++;
                                                      // End argument checking
                                                      setModuleName("ast");
                                                      setLineNumber(1786);    // compilenode vardec
                                                      var var_s;
                                                      var if12326 = GraceDone;
                                                      setLineNumber(1787);    // compilenode member
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call12328 = callmethodChecked(this, "wildcard", []);
                                                      if (Grace_isTrue(call12328)) {
                                                        setLineNumber(1788);    // compilenode string
                                                        var string12329 = new GraceString("_");
                                                        var_s = string12329;
                                                        if12326 = GraceDone;
                                                      } else {
                                                        setLineNumber(1790);    // compilenode member
                                                        // call case 4: self request
                                                        onSelf = true;
                                                        var call12331 = callmethodChecked(this, "value", []);
                                                        var_s = call12331;
                                                        if12326 = GraceDone;
                                                      }
                                                      var if12332 = GraceDone;
                                                      setLineNumber(1792);    // compilenode member
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call12334 = callmethodChecked(this, "dtype", []);
                                                      var opresult12337 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call12334);
                                                      if (Grace_isTrue(opresult12337)) {
                                                        setLineNumber(1793);    // compilenode identifier
                                                        var opresult12341 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                                        // call case 6: other requests
                                                        // call case 4: self request
                                                        onSelf = true;
                                                        var call12343 = callmethodChecked(this, "dtype", []);
                                                        var call12344 = callmethodChecked(call12343, "toGrace(1)", [1], opresult12341);
                                                        var string12346 = new GraceString(" : ");
                                                        var opresult12349 = callmethodChecked(var_s, "++(1)", [1], string12346);
                                                        var opresult12351 = callmethodChecked(opresult12349, "++(1)", [1], call12344);
                                                        var_s = opresult12351;
                                                        if12332 = GraceDone;
                                                      }
                                                      var if12352 = GraceDone;
                                                      setLineNumber(1795);    // compilenode member
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call12354 = callmethodChecked(this, "generics", []);
                                                      var opresult12357 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call12354);
                                                      if (Grace_isTrue(opresult12357)) {
                                                        setLineNumber(1796);    // compilenode string
                                                        var string12358 = new GraceString("<");
                                                        var opresult12361 = callmethodChecked(var_s, "++(1)", [1], string12358);
                                                        var_s = opresult12361;
                                                        setLineNumber(1797);    // compilenode member
                                                        // call case 6: other requests
                                                        // call case 4: self request
                                                        onSelf = true;
                                                        var call12366 = callmethodChecked(this, "generics", []);
                                                        var call12367 = callmethodChecked(call12366, "size", []);
                                                        var diff12369 = callmethodChecked(call12367, "-(1)", [1], new GraceNum(1));
                                                        var opresult12372 = callmethodChecked(new GraceNum(1), "..(1)", [1], diff12369);
                                                        var block12373 = new GraceBlock(this, 1797, 1);
                                                        setLineNumber(1);    // compilenode identifier
                                                        block12373.real = function(var_ix) {
                                                          setLineNumber(1798);    // compilenode identifier
                                                          var opresult12377 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                                          // call case 6: other requests
                                                          // call case 6: other requests
                                                          // call case 4: self request
                                                          onSelf = true;
                                                          var call12380 = callmethodChecked(this, "generics", []);
                                                          var call12381 = callmethodChecked(call12380, "at(1)", [1], var_ix);
                                                          var call12382 = callmethodChecked(call12381, "toGrace(1)", [1], opresult12377);
                                                          var opresult12385 = callmethodChecked(var_s, "++(1)", [1], call12382);
                                                          var_s = opresult12385;
                                                          return GraceDone;
                                                        };
                                                        // call case 5: prelude request
                                                        var call12386 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult12372, block12373);
                                                        setLineNumber(1800);    // compilenode string
                                                        var string12387 = new GraceString(">");
                                                        var opresult12392 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                                        // call case 6: other requests
                                                        // call case 6: other requests
                                                        // call case 4: self request
                                                        onSelf = true;
                                                        var call12395 = callmethodChecked(this, "generics", []);
                                                        var call12396 = callmethodChecked(call12395, "last", []);
                                                        var call12397 = callmethodChecked(call12396, "toGrace(1)", [1], opresult12392);
                                                        var opresult12400 = callmethodChecked(var_s, "++(1)", [1], call12397);
                                                        var opresult12402 = callmethodChecked(opresult12400, "++(1)", [1], string12387);
                                                        var_s = opresult12402;
                                                        if12352 = GraceDone;
                                                      }
                                                      setLineNumber(1802);    // return value
                                                      if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], var_s)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("result of method toGrace(_) does not have " + 
                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                      return var_s;
                                                    };
                                                    func12325.paramTypes = [];
                                                    func12325.paramTypes.push([type_Number, "depth"]);
                                                    func12325.paramCounts = [1];
                                                    obj12105.methods["toGrace(1)"] = func12325;
                                                    func12325.definitionLine = 1785;
                                                    func12325.definitionModule = "ast";
                                                    var func12403 = function(argcv) {    // method asString
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      setModuleName("ast");
                                                      var if12404 = GraceDone;
                                                      setLineNumber(1806);    // compilenode member
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call12406 = callmethodChecked(this, "isBindingOccurrence", []);
                                                      if (Grace_isTrue(call12406)) {
                                                        setLineNumber(1807);    // compilenode string
                                                        var string12407 = new GraceString("\u203a");
                                                        // call case 4: self request
                                                        onSelf = true;
                                                        var call12410 = callmethodChecked(this, "value", []);
                                                        var string12412 = new GraceString("identifierBinding\u2039");
                                                        var opresult12414 = callmethodChecked(string12412, "++(1)", [1], call12410);
                                                        var opresult12416 = callmethodChecked(opresult12414, "++(1)", [1], string12407);
                                                        if12404 = opresult12416;
                                                      } else {
                                                        setLineNumber(1809);    // compilenode string
                                                        var string12417 = new GraceString("\u203a");
                                                        // call case 4: self request
                                                        onSelf = true;
                                                        var call12420 = callmethodChecked(this, "value", []);
                                                        var string12422 = new GraceString("identifier\u2039");
                                                        var opresult12424 = callmethodChecked(string12422, "++(1)", [1], call12420);
                                                        var opresult12426 = callmethodChecked(opresult12424, "++(1)", [1], string12417);
                                                        if12404 = opresult12426;
                                                      }
                                                      return if12404;
                                                    };
                                                    func12403.paramCounts = [0];
                                                    obj12105.methods["asString"] = func12403;
                                                    func12403.definitionLine = 1805;
                                                    func12403.definitionModule = "ast";
                                                    var func12427 = function(argcv) {    // method shallowCopy
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      setModuleName("ast");
                                                      setLineNumber(1813);    // compilenode identifier
                                                      // call case 6: other requests
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call12431 = callmethodChecked(this, "value", []);
                                                      // call case 6: other requests
                                                      var call12432 = callmethodChecked(var_identifierNode, "new(2)", [2], call12431, GraceFalse);
                                                      var call12433 = callmethodChecked(call12432, "shallowCopyFieldsFrom(1)", [1], this);
                                                      return call12433;
                                                    };
                                                    func12427.paramCounts = [0];
                                                    obj12105.methods["shallowCopy"] = func12427;
                                                    func12427.definitionLine = 1812;
                                                    func12427.definitionModule = "ast";
                                                    var func12434 = function(argcv) {    // method shallowCopyFieldsFrom(_)
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      var var_other = arguments[curarg];
                                                      curarg++;
                                                      setModuleName("ast");
                                                      setLineNumber(1816);    // compilenode identifier
                                                      // call case 1: super request
                                                      var call12436 = callmethodsuper(this, "shallowCopyFieldsFrom(1)", [1], var_other);
                                                      setLineNumber(1817);    // compilenode member
                                                      // call case 6: other requests
                                                      var call12439 = callmethodChecked(var_other, "wildcard", []);
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call12440 = callmethodChecked(this, "wildcard:=(1)", [1], call12439);
                                                      setLineNumber(1818);    // compilenode member
                                                      // call case 6: other requests
                                                      var call12443 = callmethodChecked(var_other, "isBindingOccurrence", []);
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call12444 = callmethodChecked(this, "isBindingOccurrence:=(1)", [1], call12443);
                                                      setLineNumber(1819);    // compilenode member
                                                      // call case 6: other requests
                                                      var call12447 = callmethodChecked(var_other, "isDeclaredByParent", []);
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call12448 = callmethodChecked(this, "isDeclaredByParent:=(1)", [1], call12447);
                                                      setLineNumber(1820);    // compilenode member
                                                      // call case 6: other requests
                                                      var call12451 = callmethodChecked(var_other, "isAssigned", []);
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call12452 = callmethodChecked(this, "isAssigned:=(1)", [1], call12451);
                                                      setLineNumber(1821);    // compilenode member
                                                      // call case 6: other requests
                                                      var call12455 = callmethodChecked(var_other, "inRequest", []);
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call12456 = callmethodChecked(this, "inRequest:=(1)", [1], call12455);
                                                      setLineNumber(1822);    // compilenode identifier
                                                      return this;
                                                    };
                                                    func12434.paramCounts = [1];
                                                    obj12105.methods["shallowCopyFieldsFrom(1)"] = func12434;
                                                    func12434.definitionLine = 1815;
                                                    func12434.definitionModule = "ast";
                                                    var func12457 = function(argcv) {    // method statementName
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      setModuleName("ast");
                                                      setLineNumber(1824);    // compilenode string
                                                      var string12458 = new GraceString("expression");
                                                      return string12458;
                                                    };
                                                    func12457.paramCounts = [0];
                                                    obj12105.methods["statementName"] = func12457;
                                                    func12457.definitionLine = 1824;
                                                    func12457.definitionModule = "ast";
                                                    setLineNumber(1705);    // compilenode identifier
                                                    // call case 6: other requests
                                                    // call case 6: other requests
                                                    // call case 3: self.outer request
                                                    var call12462 = callmethodChecked(superDepth, "outer", [0]);
                                                    var call12463 = callmethodChecked(call12462, "outer", []);
                                                    var call12464 = callmethodChecked(call12463, "baseNode$object(1)", [0, 1], this);
                                                    obj12105.superobj = call12464;
                                                    if (call12464.data) obj12105.data = call12464.data;
                                                    if (call12464.hasOwnProperty('_value'))
                                                        obj12105._value = call12464._value;
                                                    setLineNumber(1706);    // compilenode string
                                                    var string12465 = new GraceString("identifier");
                                                    obj12105.data["kind"] = string12465;
                                                    var reader_ast_kind12466 = function() {
                                                      return this.data["kind"];
                                                    };
                                                    reader_ast_kind12466.def = true;
                                                    obj12105.methods["kind"] = reader_ast_kind12466;
                                                    setLineNumber(1707);    // compilenode identifier
                                                    obj12105.data["value"] = var_name;
                                                    var reader_ast_value12467 = function() {
                                                      return this.data["value"];
                                                    };
                                                    obj12105.methods["value"] = reader_ast_value12467;
                                                    obj12105.data["value"] = var_name;
                                                    var writer_ast_value12467 = function(argcv, o) {
                                                      this.data["value"] = o;
                                                      return GraceDone;
                                                    };
                                                    obj12105.methods["value:=(1)"] = writer_ast_value12467;
                                                    obj12105.mutable = true;
                                                    setLineNumber(1708);    // compilenode identifier
                                                    obj12105.data["wildcard"] = GraceFalse;
                                                    var reader_ast_wildcard12468 = function() {
                                                      return this.data["wildcard"];
                                                    };
                                                    obj12105.methods["wildcard"] = reader_ast_wildcard12468;
                                                    obj12105.data["wildcard"] = GraceFalse;
                                                    var writer_ast_wildcard12468 = function(argcv, o) {
                                                      this.data["wildcard"] = o;
                                                      return GraceDone;
                                                    };
                                                    obj12105.methods["wildcard:=(1)"] = writer_ast_wildcard12468;
                                                    obj12105.mutable = true;
                                                    setLineNumber(1709);    // compilenode identifier
                                                    obj12105.data["dtype"] = var_dtype__39__;
                                                    var reader_ast_dtype12469 = function() {
                                                      return this.data["dtype"];
                                                    };
                                                    obj12105.methods["dtype"] = reader_ast_dtype12469;
                                                    obj12105.data["dtype"] = var_dtype__39__;
                                                    var writer_ast_dtype12469 = function(argcv, o) {
                                                      this.data["dtype"] = o;
                                                      return GraceDone;
                                                    };
                                                    obj12105.methods["dtype:=(1)"] = writer_ast_dtype12469;
                                                    obj12105.mutable = true;
                                                    setLineNumber(1710);    // compilenode identifier
                                                    obj12105.data["isBindingOccurrence"] = GraceFalse;
                                                    var reader_ast_isBindingOccurrence12470 = function() {
                                                      return this.data["isBindingOccurrence"];
                                                    };
                                                    obj12105.methods["isBindingOccurrence"] = reader_ast_isBindingOccurrence12470;
                                                    obj12105.data["isBindingOccurrence"] = GraceFalse;
                                                    var writer_ast_isBindingOccurrence12470 = function(argcv, o) {
                                                      this.data["isBindingOccurrence"] = o;
                                                      return GraceDone;
                                                    };
                                                    obj12105.methods["isBindingOccurrence:=(1)"] = writer_ast_isBindingOccurrence12470;
                                                    obj12105.mutable = true;
                                                    setLineNumber(1711);    // compilenode identifier
                                                    obj12105.data["isAssigned"] = GraceFalse;
                                                    var reader_ast_isAssigned12471 = function() {
                                                      return this.data["isAssigned"];
                                                    };
                                                    obj12105.methods["isAssigned"] = reader_ast_isAssigned12471;
                                                    obj12105.data["isAssigned"] = GraceFalse;
                                                    var writer_ast_isAssigned12471 = function(argcv, o) {
                                                      this.data["isAssigned"] = o;
                                                      return GraceDone;
                                                    };
                                                    obj12105.methods["isAssigned:=(1)"] = writer_ast_isAssigned12471;
                                                    obj12105.mutable = true;
                                                    setLineNumber(1712);    // compilenode identifier
                                                    obj12105.data["inRequest"] = GraceFalse;
                                                    var reader_ast_inRequest12472 = function() {
                                                      return this.data["inRequest"];
                                                    };
                                                    obj12105.methods["inRequest"] = reader_ast_inRequest12472;
                                                    obj12105.data["inRequest"] = GraceFalse;
                                                    var writer_ast_inRequest12472 = function(argcv, o) {
                                                      this.data["inRequest"] = o;
                                                      return GraceDone;
                                                    };
                                                    obj12105.methods["inRequest:=(1)"] = writer_ast_inRequest12472;
                                                    obj12105.mutable = true;
                                                    setLineNumber(1713);    // compilenode identifier
                                                    obj12105.data["generics"] = GraceFalse;
                                                    var reader_ast_generics12473 = function() {
                                                      return this.data["generics"];
                                                    };
                                                    obj12105.methods["generics"] = reader_ast_generics12473;
                                                    obj12105.data["generics"] = GraceFalse;
                                                    var writer_ast_generics12473 = function(argcv, o) {
                                                      this.data["generics"] = o;
                                                      return GraceDone;
                                                    };
                                                    obj12105.methods["generics:=(1)"] = writer_ast_generics12473;
                                                    obj12105.mutable = true;
                                                    setLineNumber(1714);    // compilenode identifier
                                                    obj12105.data["isDeclaredByParent"] = GraceFalse;
                                                    var reader_ast_isDeclaredByParent12474 = function() {
                                                      return this.data["isDeclaredByParent"];
                                                    };
                                                    obj12105.methods["isDeclaredByParent"] = reader_ast_isDeclaredByParent12474;
                                                    obj12105.data["isDeclaredByParent"] = GraceFalse;
                                                    var writer_ast_isDeclaredByParent12474 = function(argcv, o) {
                                                      this.data["isDeclaredByParent"] = o;
                                                      return GraceDone;
                                                    };
                                                    obj12105.methods["isDeclaredByParent:=(1)"] = writer_ast_isDeclaredByParent12474;
                                                    obj12105.mutable = true;
                                                    superDepth = origSuperDepth;
                                                  };
                                                  obj_init_12105.apply(inheritingObject, []);
                                                  return obj12105;
                                                  };
                                                  obj11726.methods["new(2)$object(1)"] = func12104;
                                                superDepth = origSuperDepth;
                                              };
                                              obj_init_11726.apply(obj11726, []);
                                              var var_identifierNode = obj11726;
                                              setLineNumber(1);    // compilenode method
                                              var func12475 = function(argcv) {    // method identifierNode
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                setModuleName("ast");
                                                // identifierNode is a simple accessor - elide try ... catch
                                                setLineNumber(1696);    // compilenode identifier
                                                return var_identifierNode;
                                              };
                                              func12475.paramCounts = [0];
                                              this.methods["identifierNode"] = func12475;
                                              func12475.definitionLine = 1;
                                              func12475.definitionModule = "ast";
                                              this.methods["identifierNode"].debug = "def";
                                              setLineNumber(1828);    // compilenode string
                                              var string12477 = new GraceString("Type");
                                              // call case 6: other requests
                                              var call12478 = callmethodChecked(var_identifierNode, "new(2)", [2], string12477, GraceFalse);
                                              var var_typeType = call12478;
                                              setLineNumber(1);    // compilenode method
                                              var func12479 = function(argcv) {    // method typeType
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                setModuleName("ast");
                                                // typeType is a simple accessor - elide try ... catch
                                                setLineNumber(1828);    // compilenode identifier
                                                return var_typeType;
                                              };
                                              func12479.paramCounts = [0];
                                              this.methods["typeType"] = func12479;
                                              func12479.definitionLine = 1;
                                              func12479.definitionModule = "ast";
                                              this.methods["typeType"].debug = "def";
                                              setLineNumber(1829);    // compilenode string
                                              var string12481 = new GraceString("Unknown");
                                              // call case 6: other requests
                                              var call12482 = callmethodChecked(var_identifierNode, "new(2)", [2], string12481, var_typeType);
                                              var var_unknownType = call12482;
                                              setLineNumber(1);    // compilenode method
                                              var func12483 = function(argcv) {    // method unknownType
                                                var returnTarget = invocationCount;
                                                invocationCount++;
                                                var curarg = 1;
                                                setModuleName("ast");
                                                // unknownType is a simple accessor - elide try ... catch
                                                setLineNumber(1829);    // compilenode identifier
                                                return var_unknownType;
                                              };
                                              func12483.paramCounts = [0];
                                              this.methods["unknownType"] = func12483;
                                              func12483.definitionLine = 1;
                                              func12483.definitionModule = "ast";
                                              this.methods["unknownType"].debug = "def";
                                              setLineNumber(1831);    // compilenode object
                                              var obj12484 = Grace_allocObject(GraceObject, "stringNode");
                                              obj12484.definitionModule = "ast";
                                              obj12484.definitionLine = 1831;
                                              obj12484.outer = this;
                                              var reader_ast_outer12485 = function() {
                                                return this.outer;
                                              };
                                              obj12484.methods["outer"] = reader_ast_outer12485;
                                              var obj_init_12484 = function() {
                                                var origSuperDepth = superDepth;
                                                superDepth = obj12484;
                                                var func12486 = function(argcv) {    // method new(_)scope(_)
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  var var_v = arguments[curarg];
                                                  curarg++;
                                                  var var_s = arguments[curarg];
                                                  curarg++;
                                                  setModuleName("ast");
                                                  setLineNumber(1833);    // compilenode identifier
                                                  // call case 4: self request
                                                  onSelf = true;
                                                  var call12488 = callmethodChecked(this, "new(1)", [1], var_v);
                                                  var var_result = call12488;
                                                  setLineNumber(1834);    // compilenode identifier
                                                  // call case 6: other requests
                                                  var call12490 = callmethodChecked(var_result, "scope:=(1)", [1], var_s);
                                                  setLineNumber(1835);    // compilenode identifier
                                                  return var_result;
                                                };
                                                func12486.paramCounts = [1, 1];
                                                obj12484.methods["new(1)scope(1)"] = func12486;
                                                func12486.definitionLine = 1832;
                                                func12486.definitionModule = "ast";
                                                var func12491 = function(argcv) {    // method new(_)
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  var var_v = arguments[curarg];
                                                  curarg++;
                                                  setModuleName("ast");
                                                  setLineNumber(1838);    // compilenode object
                                                  var obj12492 = Grace_allocObject(null, "stringNode.new(_)");
                                                  obj12492.definitionModule = "ast";
                                                  obj12492.definitionLine = 1838;
                                                  obj12492.outer = this;
                                                  var reader_ast_outer12493 = function() {
                                                    return this.outer;
                                                  };
                                                  obj12492.methods["outer"] = reader_ast_outer12493;
                                                  var obj_init_12492 = function() {
                                                    var origSuperDepth = superDepth;
                                                    superDepth = obj12492;
                                                    var func12494 = function(argcv) {    // method accept(_)from(_)
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      var var_visitor = arguments[curarg];
                                                      curarg++;
                                                      var var_as = arguments[curarg];
                                                      curarg++;
                                                      // Start argument checking
                                                      curarg = 1;
                                                      setLineNumber(1842);    // compilenode identifier
                                                      if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                  callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                      curarg++;
                                                      curarg++;
                                                      // End argument checking
                                                      setModuleName("ast");
                                                      setLineNumber(1843);    // compilenode identifier
                                                      // call case 6: other requests
                                                      var call12496 = callmethodChecked(var_visitor, "visitString(1)up(1)", [1, 1], this, var_as);
                                                      return call12496;
                                                    };
                                                    func12494.paramTypes = [];
                                                    func12494.paramTypes.push([]);
                                                    func12494.paramTypes.push([]);
                                                    func12494.paramCounts = [1, 1];
                                                    obj12492.methods["accept(1)from(1)"] = func12494;
                                                    func12494.definitionLine = 1842;
                                                    func12494.definitionModule = "ast";
                                                    var func12497 = function(argcv) {    // method map(_)ancestors(_)
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      var var_blk = arguments[curarg];
                                                      curarg++;
                                                      var var_as = arguments[curarg];
                                                      curarg++;
                                                      setModuleName("ast");
                                                      setLineNumber(1846);    // compilenode member
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call12499 = callmethodChecked(this, "shallowCopy", []);
                                                      var var_n = call12499;
                                                      setLineNumber(1847);    // compilenode identifier
                                                      // call case 6: other requests
                                                      var call12501 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                                      var var_newChain = call12501;
                                                      setLineNumber(1848);    // compilenode identifier
                                                      // call case 6: other requests
                                                      var call12503 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                                      return call12503;
                                                    };
                                                    func12497.paramCounts = [1, 1];
                                                    obj12492.methods["map(1)ancestors(1)"] = func12497;
                                                    func12497.definitionLine = 1845;
                                                    func12497.definitionModule = "ast";
                                                    var func12504 = function(argcv) {    // method pretty(_)
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      var var_depth = arguments[curarg];
                                                      curarg++;
                                                      setModuleName("ast");
                                                      setLineNumber(1851);    // compilenode string
                                                      var string12505 = new GraceString(")");
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call12508 = callmethodChecked(this, "value", []);
                                                      var string12510 = new GraceString("(");
                                                      // call case 1: super request
                                                      var call12513 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                                      var string12515 = new GraceString("");
                                                      var opresult12517 = callmethodChecked(string12515, "++(1)", [1], call12513);
                                                      var opresult12519 = callmethodChecked(opresult12517, "++(1)", [1], string12510);
                                                      var opresult12521 = callmethodChecked(opresult12519, "++(1)", [1], call12508);
                                                      var opresult12523 = callmethodChecked(opresult12521, "++(1)", [1], string12505);
                                                      return opresult12523;
                                                    };
                                                    func12504.paramCounts = [1];
                                                    obj12492.methods["pretty(1)"] = func12504;
                                                    func12504.definitionLine = 1850;
                                                    func12504.definitionModule = "ast";
                                                    var func12524 = function(argcv) {    // method toGrace(_)
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      var var_depth = arguments[curarg];
                                                      curarg++;
                                                      // Start argument checking
                                                      curarg = 1;
                                                      setLineNumber(1853);    // compilenode identifier
                                                      if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                  callmethod(var_Number, "asString", [0])._value + "."));
                                                      curarg++;
                                                      // End argument checking
                                                      setModuleName("ast");
                                                      setLineNumber(1854);    // compilenode string
                                                      var string12525 = new GraceString("\"");
                                                      var var_q = string12525;
                                                      setLineNumber(1855);    // compilenode member
                                                      // call case 6: other requests
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call12529 = callmethodChecked(this, "value", []);
                                                      var call12530 = callmethodChecked(call12529, "quoted", []);
                                                      var opresult12533 = callmethodChecked(var_q, "++(1)", [1], call12530);
                                                      var opresult12535 = callmethodChecked(opresult12533, "++(1)", [1], var_q);
                                                      if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], opresult12535)))
                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                              new GraceString("result of method toGrace(_) does not have " + 
                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                      return opresult12535;
                                                    };
                                                    func12524.paramTypes = [];
                                                    func12524.paramTypes.push([type_Number, "depth"]);
                                                    func12524.paramCounts = [1];
                                                    obj12492.methods["toGrace(1)"] = func12524;
                                                    func12524.definitionLine = 1853;
                                                    func12524.definitionModule = "ast";
                                                    var func12536 = function(argcv) {    // method asString
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      setModuleName("ast");
                                                      setLineNumber(1857);    // compilenode string
                                                      var string12537 = new GraceString("");
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call12540 = callmethodChecked(this, "toGrace(1)", [1], new GraceNum(0));
                                                      var string12542 = new GraceString("string ");
                                                      var opresult12544 = callmethodChecked(string12542, "++(1)", [1], call12540);
                                                      var opresult12546 = callmethodChecked(opresult12544, "++(1)", [1], string12537);
                                                      return opresult12546;
                                                    };
                                                    func12536.paramCounts = [0];
                                                    obj12492.methods["asString"] = func12536;
                                                    func12536.definitionLine = 1857;
                                                    func12536.definitionModule = "ast";
                                                    var func12547 = function(argcv) {    // method shallowCopy
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      setModuleName("ast");
                                                      setLineNumber(1859);    // compilenode identifier
                                                      // call case 6: other requests
                                                      // call case 4: self request
                                                      onSelf = true;
                                                      var call12551 = callmethodChecked(this, "value", []);
                                                      // call case 6: other requests
                                                      var call12552 = callmethodChecked(var_stringNode, "new(1)", [1], call12551);
                                                      var call12553 = callmethodChecked(call12552, "shallowCopyFieldsFrom(1)", [1], this);
                                                      return call12553;
                                                    };
                                                    func12547.paramCounts = [0];
                                                    obj12492.methods["shallowCopy"] = func12547;
                                                    func12547.definitionLine = 1858;
                                                    func12547.definitionModule = "ast";
                                                    var func12554 = function(argcv) {    // method statementName
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      setModuleName("ast");
                                                      setLineNumber(1861);    // compilenode string
                                                      var string12555 = new GraceString("expression");
                                                      return string12555;
                                                    };
                                                    func12554.paramCounts = [0];
                                                    obj12492.methods["statementName"] = func12554;
                                                    func12554.definitionLine = 1861;
                                                    func12554.definitionModule = "ast";
                                                    var func12556 = function(argcv) {    // method isDelimited
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      setModuleName("ast");
                                                      // isDelimited is a simple accessor - elide try ... catch
                                                      setLineNumber(1862);    // compilenode identifier
                                                      return GraceTrue;
                                                    };
                                                    func12556.paramCounts = [0];
                                                    obj12492.methods["isDelimited"] = func12556;
                                                    func12556.definitionLine = 1862;
                                                    func12556.definitionModule = "ast";
                                                    setLineNumber(1839);    // compilenode identifier
                                                    // call case 6: other requests
                                                    // call case 6: other requests
                                                    // call case 3: self.outer request
                                                    var call12560 = callmethodChecked(superDepth, "outer", [0]);
                                                    var call12561 = callmethodChecked(call12560, "outer", []);
                                                    var call12562 = callmethodChecked(call12561, "baseNode$object(1)", [0, 1], this);
                                                    obj12492.superobj = call12562;
                                                    if (call12562.data) obj12492.data = call12562.data;
                                                    if (call12562.hasOwnProperty('_value'))
                                                        obj12492._value = call12562._value;
                                                    setLineNumber(1840);    // compilenode string
                                                    var string12563 = new GraceString("string");
                                                    obj12492.data["kind"] = string12563;
                                                    var reader_ast_kind12564 = function() {
                                                      return this.data["kind"];
                                                    };
                                                    reader_ast_kind12564.def = true;
                                                    obj12492.methods["kind"] = reader_ast_kind12564;
                                                    setLineNumber(1841);    // compilenode identifier
                                                    obj12492.data["value"] = var_v;
                                                    var reader_ast_value12565 = function() {
                                                      return this.data["value"];
                                                    };
                                                    obj12492.methods["value"] = reader_ast_value12565;
                                                    obj12492.data["value"] = var_v;
                                                    var writer_ast_value12565 = function(argcv, o) {
                                                      this.data["value"] = o;
                                                      return GraceDone;
                                                    };
                                                    obj12492.methods["value:=(1)"] = writer_ast_value12565;
                                                    obj12492.mutable = true;
                                                    superDepth = origSuperDepth;
                                                  };
                                                  obj_init_12492.apply(obj12492, []);
                                                  return obj12492;
                                                };
                                                func12491.paramCounts = [1];
                                                obj12484.methods["new(1)"] = func12491;
                                                func12491.definitionLine = 1838;
                                                func12491.definitionModule = "ast";
                                                  var func12566 = function(argcv) {    // method new(_)$object(_)
                                                    var curarg = 1;
                                                    var var_v = arguments[curarg];
                                                    curarg++;
                                                    var inheritingObject = arguments[curarg++];
                                                    // Start argument processing
                                                    curarg = 1;
                                                    curarg++;
                                                    // End argument processing
                                                    setModuleName("ast");
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var obj12567 = Grace_allocObject(null, "new(1)");
                                                    obj12567.definitionModule = "ast";
                                                    obj12567.definitionLine = 1838;
                                                    var inho12567 = inheritingObject;
                                                    while (inho12567.superobj) inho12567 = inho12567.superobj;
                                                    inho12567.superobj = obj12567;
                                                    obj12567.data = inheritingObject.data;
                                                    if (inheritingObject.hasOwnProperty('_value'))
                                                      obj12567._value = inheritingObject._value;
                                                    obj12567.outer = this;
                                                    var reader_ast_outer12568 = function() {
                                                      return this.outer;
                                                    };
                                                    obj12567.methods["outer"] = reader_ast_outer12568;
                                                    var obj_init_12567 = function() {
                                                      var origSuperDepth = superDepth;
                                                      superDepth = obj12567;
                                                      var func12569 = function(argcv) {    // method accept(_)from(_)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_visitor = arguments[curarg];
                                                        curarg++;
                                                        var var_as = arguments[curarg];
                                                        curarg++;
                                                        // Start argument checking
                                                        curarg = 1;
                                                        setLineNumber(1842);    // compilenode identifier
                                                        if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                    callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                        curarg++;
                                                        curarg++;
                                                        // End argument checking
                                                        setModuleName("ast");
                                                        setLineNumber(1843);    // compilenode identifier
                                                        // call case 6: other requests
                                                        var call12571 = callmethodChecked(var_visitor, "visitString(1)up(1)", [1, 1], this, var_as);
                                                        return call12571;
                                                      };
                                                      func12569.paramTypes = [];
                                                      func12569.paramTypes.push([]);
                                                      func12569.paramTypes.push([]);
                                                      func12569.paramCounts = [1, 1];
                                                      obj12567.methods["accept(1)from(1)"] = func12569;
                                                      func12569.definitionLine = 1842;
                                                      func12569.definitionModule = "ast";
                                                      var func12572 = function(argcv) {    // method map(_)ancestors(_)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_blk = arguments[curarg];
                                                        curarg++;
                                                        var var_as = arguments[curarg];
                                                        curarg++;
                                                        setModuleName("ast");
                                                        setLineNumber(1846);    // compilenode member
                                                        // call case 4: self request
                                                        onSelf = true;
                                                        var call12574 = callmethodChecked(this, "shallowCopy", []);
                                                        var var_n = call12574;
                                                        setLineNumber(1847);    // compilenode identifier
                                                        // call case 6: other requests
                                                        var call12576 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                                        var var_newChain = call12576;
                                                        setLineNumber(1848);    // compilenode identifier
                                                        // call case 6: other requests
                                                        var call12578 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                                        return call12578;
                                                      };
                                                      func12572.paramCounts = [1, 1];
                                                      obj12567.methods["map(1)ancestors(1)"] = func12572;
                                                      func12572.definitionLine = 1845;
                                                      func12572.definitionModule = "ast";
                                                      var func12579 = function(argcv) {    // method pretty(_)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_depth = arguments[curarg];
                                                        curarg++;
                                                        setModuleName("ast");
                                                        setLineNumber(1851);    // compilenode string
                                                        var string12580 = new GraceString(")");
                                                        // call case 4: self request
                                                        onSelf = true;
                                                        var call12583 = callmethodChecked(this, "value", []);
                                                        var string12585 = new GraceString("(");
                                                        // call case 1: super request
                                                        var call12588 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                                        var string12590 = new GraceString("");
                                                        var opresult12592 = callmethodChecked(string12590, "++(1)", [1], call12588);
                                                        var opresult12594 = callmethodChecked(opresult12592, "++(1)", [1], string12585);
                                                        var opresult12596 = callmethodChecked(opresult12594, "++(1)", [1], call12583);
                                                        var opresult12598 = callmethodChecked(opresult12596, "++(1)", [1], string12580);
                                                        return opresult12598;
                                                      };
                                                      func12579.paramCounts = [1];
                                                      obj12567.methods["pretty(1)"] = func12579;
                                                      func12579.definitionLine = 1850;
                                                      func12579.definitionModule = "ast";
                                                      var func12599 = function(argcv) {    // method toGrace(_)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_depth = arguments[curarg];
                                                        curarg++;
                                                        // Start argument checking
                                                        curarg = 1;
                                                        setLineNumber(1853);    // compilenode identifier
                                                        if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                    callmethod(var_Number, "asString", [0])._value + "."));
                                                        curarg++;
                                                        // End argument checking
                                                        setModuleName("ast");
                                                        setLineNumber(1854);    // compilenode string
                                                        var string12600 = new GraceString("\"");
                                                        var var_q = string12600;
                                                        setLineNumber(1855);    // compilenode member
                                                        // call case 6: other requests
                                                        // call case 4: self request
                                                        onSelf = true;
                                                        var call12604 = callmethodChecked(this, "value", []);
                                                        var call12605 = callmethodChecked(call12604, "quoted", []);
                                                        var opresult12608 = callmethodChecked(var_q, "++(1)", [1], call12605);
                                                        var opresult12610 = callmethodChecked(opresult12608, "++(1)", [1], var_q);
                                                        if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], opresult12610)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method toGrace(_) does not have " + 
                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                        return opresult12610;
                                                      };
                                                      func12599.paramTypes = [];
                                                      func12599.paramTypes.push([type_Number, "depth"]);
                                                      func12599.paramCounts = [1];
                                                      obj12567.methods["toGrace(1)"] = func12599;
                                                      func12599.definitionLine = 1853;
                                                      func12599.definitionModule = "ast";
                                                      var func12611 = function(argcv) {    // method asString
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        setModuleName("ast");
                                                        setLineNumber(1857);    // compilenode string
                                                        var string12612 = new GraceString("");
                                                        // call case 4: self request
                                                        onSelf = true;
                                                        var call12615 = callmethodChecked(this, "toGrace(1)", [1], new GraceNum(0));
                                                        var string12617 = new GraceString("string ");
                                                        var opresult12619 = callmethodChecked(string12617, "++(1)", [1], call12615);
                                                        var opresult12621 = callmethodChecked(opresult12619, "++(1)", [1], string12612);
                                                        return opresult12621;
                                                      };
                                                      func12611.paramCounts = [0];
                                                      obj12567.methods["asString"] = func12611;
                                                      func12611.definitionLine = 1857;
                                                      func12611.definitionModule = "ast";
                                                      var func12622 = function(argcv) {    // method shallowCopy
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        setModuleName("ast");
                                                        setLineNumber(1859);    // compilenode identifier
                                                        // call case 6: other requests
                                                        // call case 4: self request
                                                        onSelf = true;
                                                        var call12626 = callmethodChecked(this, "value", []);
                                                        // call case 6: other requests
                                                        var call12627 = callmethodChecked(var_stringNode, "new(1)", [1], call12626);
                                                        var call12628 = callmethodChecked(call12627, "shallowCopyFieldsFrom(1)", [1], this);
                                                        return call12628;
                                                      };
                                                      func12622.paramCounts = [0];
                                                      obj12567.methods["shallowCopy"] = func12622;
                                                      func12622.definitionLine = 1858;
                                                      func12622.definitionModule = "ast";
                                                      var func12629 = function(argcv) {    // method statementName
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        setModuleName("ast");
                                                        setLineNumber(1861);    // compilenode string
                                                        var string12630 = new GraceString("expression");
                                                        return string12630;
                                                      };
                                                      func12629.paramCounts = [0];
                                                      obj12567.methods["statementName"] = func12629;
                                                      func12629.definitionLine = 1861;
                                                      func12629.definitionModule = "ast";
                                                      var func12631 = function(argcv) {    // method isDelimited
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        setModuleName("ast");
                                                        // isDelimited is a simple accessor - elide try ... catch
                                                        setLineNumber(1862);    // compilenode identifier
                                                        return GraceTrue;
                                                      };
                                                      func12631.paramCounts = [0];
                                                      obj12567.methods["isDelimited"] = func12631;
                                                      func12631.definitionLine = 1862;
                                                      func12631.definitionModule = "ast";
                                                      setLineNumber(1839);    // compilenode identifier
                                                      // call case 6: other requests
                                                      // call case 6: other requests
                                                      // call case 3: self.outer request
                                                      var call12635 = callmethodChecked(superDepth, "outer", [0]);
                                                      var call12636 = callmethodChecked(call12635, "outer", []);
                                                      var call12637 = callmethodChecked(call12636, "baseNode$object(1)", [0, 1], this);
                                                      obj12567.superobj = call12637;
                                                      if (call12637.data) obj12567.data = call12637.data;
                                                      if (call12637.hasOwnProperty('_value'))
                                                          obj12567._value = call12637._value;
                                                      setLineNumber(1840);    // compilenode string
                                                      var string12638 = new GraceString("string");
                                                      obj12567.data["kind"] = string12638;
                                                      var reader_ast_kind12639 = function() {
                                                        return this.data["kind"];
                                                      };
                                                      reader_ast_kind12639.def = true;
                                                      obj12567.methods["kind"] = reader_ast_kind12639;
                                                      setLineNumber(1841);    // compilenode identifier
                                                      obj12567.data["value"] = var_v;
                                                      var reader_ast_value12640 = function() {
                                                        return this.data["value"];
                                                      };
                                                      obj12567.methods["value"] = reader_ast_value12640;
                                                      obj12567.data["value"] = var_v;
                                                      var writer_ast_value12640 = function(argcv, o) {
                                                        this.data["value"] = o;
                                                        return GraceDone;
                                                      };
                                                      obj12567.methods["value:=(1)"] = writer_ast_value12640;
                                                      obj12567.mutable = true;
                                                      superDepth = origSuperDepth;
                                                    };
                                                    obj_init_12567.apply(inheritingObject, []);
                                                    return obj12567;
                                                    };
                                                    obj12484.methods["new(1)$object(1)"] = func12566;
                                                  superDepth = origSuperDepth;
                                                };
                                                obj_init_12484.apply(obj12484, []);
                                                var var_stringNode = obj12484;
                                                setLineNumber(1);    // compilenode method
                                                var func12641 = function(argcv) {    // method stringNode
                                                  var returnTarget = invocationCount;
                                                  invocationCount++;
                                                  var curarg = 1;
                                                  setModuleName("ast");
                                                  // stringNode is a simple accessor - elide try ... catch
                                                  setLineNumber(1831);    // compilenode identifier
                                                  return var_stringNode;
                                                };
                                                func12641.paramCounts = [0];
                                                this.methods["stringNode"] = func12641;
                                                func12641.definitionLine = 1;
                                                func12641.definitionModule = "ast";
                                                this.methods["stringNode"].debug = "def";
                                                setLineNumber(1865);    // compilenode object
                                                var obj12642 = Grace_allocObject(GraceObject, "numNode");
                                                obj12642.definitionModule = "ast";
                                                obj12642.definitionLine = 1865;
                                                obj12642.outer = this;
                                                var reader_ast_outer12643 = function() {
                                                  return this.outer;
                                                };
                                                obj12642.methods["outer"] = reader_ast_outer12643;
                                                var obj_init_12642 = function() {
                                                  var origSuperDepth = superDepth;
                                                  superDepth = obj12642;
                                                  var func12644 = function(argcv) {    // method new(_)
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    var var_val = arguments[curarg];
                                                    curarg++;
                                                    setModuleName("ast");
                                                    setLineNumber(1866);    // compilenode object
                                                    var obj12645 = Grace_allocObject(null, "numNode.new(_)");
                                                    obj12645.definitionModule = "ast";
                                                    obj12645.definitionLine = 1866;
                                                    obj12645.outer = this;
                                                    var reader_ast_outer12646 = function() {
                                                      return this.outer;
                                                    };
                                                    obj12645.methods["outer"] = reader_ast_outer12646;
                                                    var obj_init_12645 = function() {
                                                      var origSuperDepth = superDepth;
                                                      superDepth = obj12645;
                                                      var func12647 = function(argcv) {    // method accept(_)from(_)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_visitor = arguments[curarg];
                                                        curarg++;
                                                        var var_as = arguments[curarg];
                                                        curarg++;
                                                        // Start argument checking
                                                        curarg = 1;
                                                        setLineNumber(1870);    // compilenode identifier
                                                        if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                    callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                        curarg++;
                                                        curarg++;
                                                        // End argument checking
                                                        setModuleName("ast");
                                                        setLineNumber(1871);    // compilenode identifier
                                                        // call case 6: other requests
                                                        var call12649 = callmethodChecked(var_visitor, "visitNum(1)up(1)", [1, 1], this, var_as);
                                                        return call12649;
                                                      };
                                                      func12647.paramTypes = [];
                                                      func12647.paramTypes.push([]);
                                                      func12647.paramTypes.push([]);
                                                      func12647.paramCounts = [1, 1];
                                                      obj12645.methods["accept(1)from(1)"] = func12647;
                                                      func12647.definitionLine = 1870;
                                                      func12647.definitionModule = "ast";
                                                      var func12650 = function(argcv) {    // method map(_)ancestors(_)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_blk = arguments[curarg];
                                                        curarg++;
                                                        var var_as = arguments[curarg];
                                                        curarg++;
                                                        setModuleName("ast");
                                                        setLineNumber(1874);    // compilenode member
                                                        // call case 4: self request
                                                        onSelf = true;
                                                        var call12652 = callmethodChecked(this, "shallowCopy", []);
                                                        var var_n = call12652;
                                                        setLineNumber(1875);    // compilenode identifier
                                                        // call case 6: other requests
                                                        var call12654 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                                        var var_newChain = call12654;
                                                        setLineNumber(1876);    // compilenode identifier
                                                        // call case 6: other requests
                                                        var call12656 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                                        return call12656;
                                                      };
                                                      func12650.paramCounts = [1, 1];
                                                      obj12645.methods["map(1)ancestors(1)"] = func12650;
                                                      func12650.definitionLine = 1873;
                                                      func12650.definitionModule = "ast";
                                                      var func12657 = function(argcv) {    // method pretty(_)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_depth = arguments[curarg];
                                                        curarg++;
                                                        setModuleName("ast");
                                                        setLineNumber(1879);    // compilenode string
                                                        var string12658 = new GraceString(")");
                                                        // call case 4: self request
                                                        onSelf = true;
                                                        var call12661 = callmethodChecked(this, "value", []);
                                                        var string12663 = new GraceString("(");
                                                        // call case 1: super request
                                                        var call12666 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                                        var string12668 = new GraceString("");
                                                        var opresult12670 = callmethodChecked(string12668, "++(1)", [1], call12666);
                                                        var opresult12672 = callmethodChecked(opresult12670, "++(1)", [1], string12663);
                                                        var opresult12674 = callmethodChecked(opresult12672, "++(1)", [1], call12661);
                                                        var opresult12676 = callmethodChecked(opresult12674, "++(1)", [1], string12658);
                                                        return opresult12676;
                                                      };
                                                      func12657.paramCounts = [1];
                                                      obj12645.methods["pretty(1)"] = func12657;
                                                      func12657.definitionLine = 1878;
                                                      func12657.definitionModule = "ast";
                                                      var func12677 = function(argcv) {    // method toGrace(_)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_depth = arguments[curarg];
                                                        curarg++;
                                                        // Start argument checking
                                                        curarg = 1;
                                                        setLineNumber(1881);    // compilenode identifier
                                                        if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                    callmethod(var_Number, "asString", [0])._value + "."));
                                                        curarg++;
                                                        // End argument checking
                                                        setModuleName("ast");
                                                        setLineNumber(1882);    // compilenode member
                                                        // call case 6: other requests
                                                        // call case 4: self request
                                                        onSelf = true;
                                                        var call12680 = callmethodChecked(this, "value", []);
                                                        var call12681 = callmethodChecked(call12680, "asString", []);
                                                        if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], call12681)))
                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                new GraceString("result of method toGrace(_) does not have " + 
                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                        return call12681;
                                                      };
                                                      func12677.paramTypes = [];
                                                      func12677.paramTypes.push([type_Number, "depth"]);
                                                      func12677.paramCounts = [1];
                                                      obj12645.methods["toGrace(1)"] = func12677;
                                                      func12677.definitionLine = 1881;
                                                      func12677.definitionModule = "ast";
                                                      var func12682 = function(argcv) {    // method asString
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        setModuleName("ast");
                                                        setLineNumber(1884);    // compilenode string
                                                        var string12683 = new GraceString("");
                                                        // call case 4: self request
                                                        onSelf = true;
                                                        var call12686 = callmethodChecked(this, "value", []);
                                                        var string12688 = new GraceString("num ");
                                                        var opresult12690 = callmethodChecked(string12688, "++(1)", [1], call12686);
                                                        var opresult12692 = callmethodChecked(opresult12690, "++(1)", [1], string12683);
                                                        return opresult12692;
                                                      };
                                                      func12682.paramCounts = [0];
                                                      obj12645.methods["asString"] = func12682;
                                                      func12682.definitionLine = 1884;
                                                      func12682.definitionModule = "ast";
                                                      var func12693 = function(argcv) {    // method shallowCopy
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        setModuleName("ast");
                                                        setLineNumber(1886);    // compilenode identifier
                                                        // call case 6: other requests
                                                        // call case 4: self request
                                                        onSelf = true;
                                                        var call12697 = callmethodChecked(this, "value", []);
                                                        // call case 6: other requests
                                                        var call12698 = callmethodChecked(var_numNode, "new(1)", [1], call12697);
                                                        var call12699 = callmethodChecked(call12698, "shallowCopyFieldsFrom(1)", [1], this);
                                                        return call12699;
                                                      };
                                                      func12693.paramCounts = [0];
                                                      obj12645.methods["shallowCopy"] = func12693;
                                                      func12693.definitionLine = 1885;
                                                      func12693.definitionModule = "ast";
                                                      var func12700 = function(argcv) {    // method statementName
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        setModuleName("ast");
                                                        setLineNumber(1888);    // compilenode string
                                                        var string12701 = new GraceString("expression");
                                                        return string12701;
                                                      };
                                                      func12700.paramCounts = [0];
                                                      obj12645.methods["statementName"] = func12700;
                                                      func12700.definitionLine = 1888;
                                                      func12700.definitionModule = "ast";
                                                      var func12702 = function(argcv) {    // method isDelimited
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        setModuleName("ast");
                                                        // isDelimited is a simple accessor - elide try ... catch
                                                        setLineNumber(1889);    // compilenode identifier
                                                        return GraceTrue;
                                                      };
                                                      func12702.paramCounts = [0];
                                                      obj12645.methods["isDelimited"] = func12702;
                                                      func12702.definitionLine = 1889;
                                                      func12702.definitionModule = "ast";
                                                      setLineNumber(1867);    // compilenode identifier
                                                      // call case 6: other requests
                                                      // call case 6: other requests
                                                      // call case 3: self.outer request
                                                      var call12706 = callmethodChecked(superDepth, "outer", [0]);
                                                      var call12707 = callmethodChecked(call12706, "outer", []);
                                                      var call12708 = callmethodChecked(call12707, "baseNode$object(1)", [0, 1], this);
                                                      obj12645.superobj = call12708;
                                                      if (call12708.data) obj12645.data = call12708.data;
                                                      if (call12708.hasOwnProperty('_value'))
                                                          obj12645._value = call12708._value;
                                                      setLineNumber(1868);    // compilenode string
                                                      var string12709 = new GraceString("num");
                                                      obj12645.data["kind"] = string12709;
                                                      var reader_ast_kind12710 = function() {
                                                        return this.data["kind"];
                                                      };
                                                      reader_ast_kind12710.def = true;
                                                      obj12645.methods["kind"] = reader_ast_kind12710;
                                                      setLineNumber(1869);    // compilenode identifier
                                                      obj12645.data["value"] = var_val;
                                                      var reader_ast_value12711 = function() {
                                                        return this.data["value"];
                                                      };
                                                      obj12645.methods["value"] = reader_ast_value12711;
                                                      obj12645.data["value"] = var_val;
                                                      var writer_ast_value12711 = function(argcv, o) {
                                                        this.data["value"] = o;
                                                        return GraceDone;
                                                      };
                                                      obj12645.methods["value:=(1)"] = writer_ast_value12711;
                                                      obj12645.mutable = true;
                                                      superDepth = origSuperDepth;
                                                    };
                                                    obj_init_12645.apply(obj12645, []);
                                                    return obj12645;
                                                  };
                                                  func12644.paramCounts = [1];
                                                  obj12642.methods["new(1)"] = func12644;
                                                  func12644.definitionLine = 1866;
                                                  func12644.definitionModule = "ast";
                                                    var func12712 = function(argcv) {    // method new(_)$object(_)
                                                      var curarg = 1;
                                                      var var_val = arguments[curarg];
                                                      curarg++;
                                                      var inheritingObject = arguments[curarg++];
                                                      // Start argument processing
                                                      curarg = 1;
                                                      curarg++;
                                                      // End argument processing
                                                      setModuleName("ast");
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var obj12713 = Grace_allocObject(null, "new(1)");
                                                      obj12713.definitionModule = "ast";
                                                      obj12713.definitionLine = 1866;
                                                      var inho12713 = inheritingObject;
                                                      while (inho12713.superobj) inho12713 = inho12713.superobj;
                                                      inho12713.superobj = obj12713;
                                                      obj12713.data = inheritingObject.data;
                                                      if (inheritingObject.hasOwnProperty('_value'))
                                                        obj12713._value = inheritingObject._value;
                                                      obj12713.outer = this;
                                                      var reader_ast_outer12714 = function() {
                                                        return this.outer;
                                                      };
                                                      obj12713.methods["outer"] = reader_ast_outer12714;
                                                      var obj_init_12713 = function() {
                                                        var origSuperDepth = superDepth;
                                                        superDepth = obj12713;
                                                        var func12715 = function(argcv) {    // method accept(_)from(_)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_visitor = arguments[curarg];
                                                          curarg++;
                                                          var var_as = arguments[curarg];
                                                          curarg++;
                                                          // Start argument checking
                                                          curarg = 1;
                                                          setLineNumber(1870);    // compilenode identifier
                                                          if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                      callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                          curarg++;
                                                          curarg++;
                                                          // End argument checking
                                                          setModuleName("ast");
                                                          setLineNumber(1871);    // compilenode identifier
                                                          // call case 6: other requests
                                                          var call12717 = callmethodChecked(var_visitor, "visitNum(1)up(1)", [1, 1], this, var_as);
                                                          return call12717;
                                                        };
                                                        func12715.paramTypes = [];
                                                        func12715.paramTypes.push([]);
                                                        func12715.paramTypes.push([]);
                                                        func12715.paramCounts = [1, 1];
                                                        obj12713.methods["accept(1)from(1)"] = func12715;
                                                        func12715.definitionLine = 1870;
                                                        func12715.definitionModule = "ast";
                                                        var func12718 = function(argcv) {    // method map(_)ancestors(_)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_blk = arguments[curarg];
                                                          curarg++;
                                                          var var_as = arguments[curarg];
                                                          curarg++;
                                                          setModuleName("ast");
                                                          setLineNumber(1874);    // compilenode member
                                                          // call case 4: self request
                                                          onSelf = true;
                                                          var call12720 = callmethodChecked(this, "shallowCopy", []);
                                                          var var_n = call12720;
                                                          setLineNumber(1875);    // compilenode identifier
                                                          // call case 6: other requests
                                                          var call12722 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                                          var var_newChain = call12722;
                                                          setLineNumber(1876);    // compilenode identifier
                                                          // call case 6: other requests
                                                          var call12724 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                                          return call12724;
                                                        };
                                                        func12718.paramCounts = [1, 1];
                                                        obj12713.methods["map(1)ancestors(1)"] = func12718;
                                                        func12718.definitionLine = 1873;
                                                        func12718.definitionModule = "ast";
                                                        var func12725 = function(argcv) {    // method pretty(_)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_depth = arguments[curarg];
                                                          curarg++;
                                                          setModuleName("ast");
                                                          setLineNumber(1879);    // compilenode string
                                                          var string12726 = new GraceString(")");
                                                          // call case 4: self request
                                                          onSelf = true;
                                                          var call12729 = callmethodChecked(this, "value", []);
                                                          var string12731 = new GraceString("(");
                                                          // call case 1: super request
                                                          var call12734 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                                          var string12736 = new GraceString("");
                                                          var opresult12738 = callmethodChecked(string12736, "++(1)", [1], call12734);
                                                          var opresult12740 = callmethodChecked(opresult12738, "++(1)", [1], string12731);
                                                          var opresult12742 = callmethodChecked(opresult12740, "++(1)", [1], call12729);
                                                          var opresult12744 = callmethodChecked(opresult12742, "++(1)", [1], string12726);
                                                          return opresult12744;
                                                        };
                                                        func12725.paramCounts = [1];
                                                        obj12713.methods["pretty(1)"] = func12725;
                                                        func12725.definitionLine = 1878;
                                                        func12725.definitionModule = "ast";
                                                        var func12745 = function(argcv) {    // method toGrace(_)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_depth = arguments[curarg];
                                                          curarg++;
                                                          // Start argument checking
                                                          curarg = 1;
                                                          setLineNumber(1881);    // compilenode identifier
                                                          if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                      callmethod(var_Number, "asString", [0])._value + "."));
                                                          curarg++;
                                                          // End argument checking
                                                          setModuleName("ast");
                                                          setLineNumber(1882);    // compilenode member
                                                          // call case 6: other requests
                                                          // call case 4: self request
                                                          onSelf = true;
                                                          var call12748 = callmethodChecked(this, "value", []);
                                                          var call12749 = callmethodChecked(call12748, "asString", []);
                                                          if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], call12749)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method toGrace(_) does not have " + 
                                                                      callmethod(var_String, "asString", [0])._value + "."));
                                                          return call12749;
                                                        };
                                                        func12745.paramTypes = [];
                                                        func12745.paramTypes.push([type_Number, "depth"]);
                                                        func12745.paramCounts = [1];
                                                        obj12713.methods["toGrace(1)"] = func12745;
                                                        func12745.definitionLine = 1881;
                                                        func12745.definitionModule = "ast";
                                                        var func12750 = function(argcv) {    // method asString
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          setModuleName("ast");
                                                          setLineNumber(1884);    // compilenode string
                                                          var string12751 = new GraceString("");
                                                          // call case 4: self request
                                                          onSelf = true;
                                                          var call12754 = callmethodChecked(this, "value", []);
                                                          var string12756 = new GraceString("num ");
                                                          var opresult12758 = callmethodChecked(string12756, "++(1)", [1], call12754);
                                                          var opresult12760 = callmethodChecked(opresult12758, "++(1)", [1], string12751);
                                                          return opresult12760;
                                                        };
                                                        func12750.paramCounts = [0];
                                                        obj12713.methods["asString"] = func12750;
                                                        func12750.definitionLine = 1884;
                                                        func12750.definitionModule = "ast";
                                                        var func12761 = function(argcv) {    // method shallowCopy
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          setModuleName("ast");
                                                          setLineNumber(1886);    // compilenode identifier
                                                          // call case 6: other requests
                                                          // call case 4: self request
                                                          onSelf = true;
                                                          var call12765 = callmethodChecked(this, "value", []);
                                                          // call case 6: other requests
                                                          var call12766 = callmethodChecked(var_numNode, "new(1)", [1], call12765);
                                                          var call12767 = callmethodChecked(call12766, "shallowCopyFieldsFrom(1)", [1], this);
                                                          return call12767;
                                                        };
                                                        func12761.paramCounts = [0];
                                                        obj12713.methods["shallowCopy"] = func12761;
                                                        func12761.definitionLine = 1885;
                                                        func12761.definitionModule = "ast";
                                                        var func12768 = function(argcv) {    // method statementName
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          setModuleName("ast");
                                                          setLineNumber(1888);    // compilenode string
                                                          var string12769 = new GraceString("expression");
                                                          return string12769;
                                                        };
                                                        func12768.paramCounts = [0];
                                                        obj12713.methods["statementName"] = func12768;
                                                        func12768.definitionLine = 1888;
                                                        func12768.definitionModule = "ast";
                                                        var func12770 = function(argcv) {    // method isDelimited
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          setModuleName("ast");
                                                          // isDelimited is a simple accessor - elide try ... catch
                                                          setLineNumber(1889);    // compilenode identifier
                                                          return GraceTrue;
                                                        };
                                                        func12770.paramCounts = [0];
                                                        obj12713.methods["isDelimited"] = func12770;
                                                        func12770.definitionLine = 1889;
                                                        func12770.definitionModule = "ast";
                                                        setLineNumber(1867);    // compilenode identifier
                                                        // call case 6: other requests
                                                        // call case 6: other requests
                                                        // call case 3: self.outer request
                                                        var call12774 = callmethodChecked(superDepth, "outer", [0]);
                                                        var call12775 = callmethodChecked(call12774, "outer", []);
                                                        var call12776 = callmethodChecked(call12775, "baseNode$object(1)", [0, 1], this);
                                                        obj12713.superobj = call12776;
                                                        if (call12776.data) obj12713.data = call12776.data;
                                                        if (call12776.hasOwnProperty('_value'))
                                                            obj12713._value = call12776._value;
                                                        setLineNumber(1868);    // compilenode string
                                                        var string12777 = new GraceString("num");
                                                        obj12713.data["kind"] = string12777;
                                                        var reader_ast_kind12778 = function() {
                                                          return this.data["kind"];
                                                        };
                                                        reader_ast_kind12778.def = true;
                                                        obj12713.methods["kind"] = reader_ast_kind12778;
                                                        setLineNumber(1869);    // compilenode identifier
                                                        obj12713.data["value"] = var_val;
                                                        var reader_ast_value12779 = function() {
                                                          return this.data["value"];
                                                        };
                                                        obj12713.methods["value"] = reader_ast_value12779;
                                                        obj12713.data["value"] = var_val;
                                                        var writer_ast_value12779 = function(argcv, o) {
                                                          this.data["value"] = o;
                                                          return GraceDone;
                                                        };
                                                        obj12713.methods["value:=(1)"] = writer_ast_value12779;
                                                        obj12713.mutable = true;
                                                        superDepth = origSuperDepth;
                                                      };
                                                      obj_init_12713.apply(inheritingObject, []);
                                                      return obj12713;
                                                      };
                                                      obj12642.methods["new(1)$object(1)"] = func12712;
                                                    superDepth = origSuperDepth;
                                                  };
                                                  obj_init_12642.apply(obj12642, []);
                                                  var var_numNode = obj12642;
                                                  setLineNumber(1);    // compilenode method
                                                  var func12780 = function(argcv) {    // method numNode
                                                    var returnTarget = invocationCount;
                                                    invocationCount++;
                                                    var curarg = 1;
                                                    setModuleName("ast");
                                                    // numNode is a simple accessor - elide try ... catch
                                                    setLineNumber(1865);    // compilenode identifier
                                                    return var_numNode;
                                                  };
                                                  func12780.paramCounts = [0];
                                                  this.methods["numNode"] = func12780;
                                                  func12780.definitionLine = 1;
                                                  func12780.definitionModule = "ast";
                                                  this.methods["numNode"].debug = "def";
                                                  setLineNumber(1892);    // compilenode object
                                                  var obj12781 = Grace_allocObject(GraceObject, "opNode");
                                                  obj12781.definitionModule = "ast";
                                                  obj12781.definitionLine = 1892;
                                                  obj12781.outer = this;
                                                  var reader_ast_outer12782 = function() {
                                                    return this.outer;
                                                  };
                                                  obj12781.methods["outer"] = reader_ast_outer12782;
                                                  var obj_init_12781 = function() {
                                                    var origSuperDepth = superDepth;
                                                    superDepth = obj12781;
                                                    var func12783 = function(argcv) {    // method new(_,_,_)
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      var var_op = arguments[curarg];
                                                      curarg++;
                                                      var var_l = arguments[curarg];
                                                      curarg++;
                                                      var var_r = arguments[curarg];
                                                      curarg++;
                                                      setModuleName("ast");
                                                      setLineNumber(1893);    // compilenode object
                                                      var obj12784 = Grace_allocObject(null, "opNode.new(_,_,_)");
                                                      obj12784.definitionModule = "ast";
                                                      obj12784.definitionLine = 1893;
                                                      obj12784.outer = this;
                                                      var reader_ast_outer12785 = function() {
                                                        return this.outer;
                                                      };
                                                      obj12784.methods["outer"] = reader_ast_outer12785;
                                                      var obj_init_12784 = function() {
                                                        var origSuperDepth = superDepth;
                                                        superDepth = obj12784;
                                                        var func12786 = function(argcv) {    // method isSimple
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          setModuleName("ast");
                                                          // isSimple is a simple accessor - elide try ... catch
                                                          setLineNumber(1899);    // compilenode identifier
                                                          return GraceFalse;
                                                        };
                                                        func12786.paramCounts = [0];
                                                        obj12784.methods["isSimple"] = func12786;
                                                        func12786.definitionLine = 1899;
                                                        func12786.definitionModule = "ast";
                                                        var func12787 = function(argcv) {    // method nameString
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          setModuleName("ast");
                                                          setLineNumber(1900);    // compilenode string
                                                          var string12788 = new GraceString("(1)");
                                                          // call case 4: self request
                                                          onSelf = true;
                                                          var call12791 = callmethodChecked(this, "value", []);
                                                          var opresult12793 = callmethodChecked(call12791, "++(1)", [1], string12788);
                                                          return opresult12793;
                                                        };
                                                        func12787.paramCounts = [0];
                                                        obj12784.methods["nameString"] = func12787;
                                                        func12787.definitionLine = 1900;
                                                        func12787.definitionModule = "ast";
                                                        var func12794 = function(argcv) {    // method accept(_)from(_)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_visitor = arguments[curarg];
                                                          curarg++;
                                                          var var_as = arguments[curarg];
                                                          curarg++;
                                                          // Start argument checking
                                                          curarg = 1;
                                                          setLineNumber(1901);    // compilenode identifier
                                                          if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                      callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                          curarg++;
                                                          curarg++;
                                                          // End argument checking
                                                          setModuleName("ast");
                                                          var if12795 = GraceDone;
                                                          setLineNumber(1902);    // compilenode identifier
                                                          // call case 6: other requests
                                                          var call12797 = callmethodChecked(var_visitor, "visitOp(1)up(1)", [1, 1], this, var_as);
                                                          if (Grace_isTrue(call12797)) {
                                                            setLineNumber(1903);    // compilenode identifier
                                                            // call case 6: other requests
                                                            var call12799 = callmethodChecked(var_as, "extend(1)", [1], this);
                                                            var var_newChain = call12799;
                                                            setLineNumber(1904);    // compilenode identifier
                                                            // call case 6: other requests
                                                            // call case 4: self request
                                                            onSelf = true;
                                                            var call12802 = callmethodChecked(this, "left", []);
                                                            var call12803 = callmethodChecked(call12802, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                            setLineNumber(1905);    // compilenode identifier
                                                            // call case 6: other requests
                                                            // call case 4: self request
                                                            onSelf = true;
                                                            var call12806 = callmethodChecked(this, "right", []);
                                                            var call12807 = callmethodChecked(call12806, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                            if12795 = call12807;
                                                          }
                                                          return if12795;
                                                        };
                                                        func12794.paramTypes = [];
                                                        func12794.paramTypes.push([]);
                                                        func12794.paramTypes.push([]);
                                                        func12794.paramCounts = [1, 1];
                                                        obj12784.methods["accept(1)from(1)"] = func12794;
                                                        func12794.definitionLine = 1901;
                                                        func12794.definitionModule = "ast";
                                                        var func12808 = function(argcv) {    // method map(_)ancestors(_)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_blk = arguments[curarg];
                                                          curarg++;
                                                          var var_as = arguments[curarg];
                                                          curarg++;
                                                          setModuleName("ast");
                                                          setLineNumber(1909);    // compilenode member
                                                          // call case 4: self request
                                                          onSelf = true;
                                                          var call12810 = callmethodChecked(this, "shallowCopy", []);
                                                          var var_n = call12810;
                                                          setLineNumber(1910);    // compilenode identifier
                                                          // call case 6: other requests
                                                          var call12812 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                                          var var_newChain = call12812;
                                                          setLineNumber(1911);    // compilenode identifier
                                                          // call case 6: other requests
                                                          // call case 4: self request
                                                          onSelf = true;
                                                          var call12816 = callmethodChecked(this, "left", []);
                                                          var call12817 = callmethodChecked(call12816, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
                                                          // call case 6: other requests
                                                          var call12818 = callmethodChecked(var_n, "left:=(1)", [1], call12817);
                                                          setLineNumber(1912);    // compilenode identifier
                                                          // call case 6: other requests
                                                          // call case 4: self request
                                                          onSelf = true;
                                                          var call12822 = callmethodChecked(this, "right", []);
                                                          var call12823 = callmethodChecked(call12822, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
                                                          // call case 6: other requests
                                                          var call12824 = callmethodChecked(var_n, "right:=(1)", [1], call12823);
                                                          setLineNumber(1913);    // compilenode identifier
                                                          // call case 6: other requests
                                                          var call12826 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                                          return call12826;
                                                        };
                                                        func12808.paramCounts = [1, 1];
                                                        obj12784.methods["map(1)ancestors(1)"] = func12808;
                                                        func12808.definitionLine = 1908;
                                                        func12808.definitionModule = "ast";
                                                        var func12827 = function(argcv) {    // method pretty(_)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_depth = arguments[curarg];
                                                          curarg++;
                                                          setModuleName("ast");
                                                          setLineNumber(1916);    // compilenode string
                                                          var string12828 = new GraceString("");
                                                          var var_spc = string12828;
                                                          setLineNumber(1917);    // compilenode num
                                                          var opresult12832 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                                                          var block12833 = new GraceBlock(this, 1917, 1);
                                                          setLineNumber(1);    // compilenode identifier
                                                          block12833.real = function(var_i) {
                                                            setLineNumber(1918);    // compilenode string
                                                            var string12834 = new GraceString("  ");
                                                            var opresult12837 = callmethodChecked(var_spc, "++(1)", [1], string12834);
                                                            var_spc = opresult12837;
                                                            return GraceDone;
                                                          };
                                                          // call case 5: prelude request
                                                          var call12838 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult12832, block12833);
                                                          setLineNumber(1920);    // compilenode string
                                                          var string12839 = new GraceString("\u203a");
                                                          // call case 4: self request
                                                          onSelf = true;
                                                          var call12842 = callmethodChecked(this, "nameString", []);
                                                          var string12844 = new GraceString("\u2039");
                                                          // call case 1: super request
                                                          var call12847 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                                          var string12849 = new GraceString("");
                                                          var opresult12851 = callmethodChecked(string12849, "++(1)", [1], call12847);
                                                          var opresult12853 = callmethodChecked(opresult12851, "++(1)", [1], string12844);
                                                          var opresult12855 = callmethodChecked(opresult12853, "++(1)", [1], call12842);
                                                          var opresult12857 = callmethodChecked(opresult12855, "++(1)", [1], string12839);
                                                          var var_s = opresult12857;
                                                          setLineNumber(1921);    // compilenode string
                                                          var string12858 = new GraceString("\n");
                                                          var opresult12861 = callmethodChecked(var_s, "++(1)", [1], string12858);
                                                          var_s = opresult12861;
                                                          setLineNumber(1922);    // compilenode identifier
                                                          var opresult12865 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                                          // call case 6: other requests
                                                          // call case 4: self request
                                                          onSelf = true;
                                                          var call12867 = callmethodChecked(this, "left", []);
                                                          var call12868 = callmethodChecked(call12867, "pretty(1)", [1], opresult12865);
                                                          var opresult12872 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                                          var opresult12874 = callmethodChecked(opresult12872, "++(1)", [1], call12868);
                                                          var_s = opresult12874;
                                                          setLineNumber(1923);    // compilenode string
                                                          var string12875 = new GraceString("\n");
                                                          var opresult12878 = callmethodChecked(var_s, "++(1)", [1], string12875);
                                                          var_s = opresult12878;
                                                          setLineNumber(1924);    // compilenode identifier
                                                          var opresult12882 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                                          // call case 6: other requests
                                                          // call case 4: self request
                                                          onSelf = true;
                                                          var call12884 = callmethodChecked(this, "right", []);
                                                          var call12885 = callmethodChecked(call12884, "pretty(1)", [1], opresult12882);
                                                          var opresult12889 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                                          var opresult12891 = callmethodChecked(opresult12889, "++(1)", [1], call12885);
                                                          var_s = opresult12891;
                                                          setLineNumber(1925);    // compilenode identifier
                                                          return var_s;
                                                        };
                                                        func12827.paramCounts = [1];
                                                        obj12784.methods["pretty(1)"] = func12827;
                                                        func12827.definitionLine = 1915;
                                                        func12827.definitionModule = "ast";
                                                        var func12892 = function(argcv) {    // method toGrace(_)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_depth = arguments[curarg];
                                                          curarg++;
                                                          // Start argument checking
                                                          curarg = 1;
                                                          setLineNumber(1927);    // compilenode identifier
                                                          if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                      callmethod(var_Number, "asString", [0])._value + "."));
                                                          curarg++;
                                                          // End argument checking
                                                          setModuleName("ast");
                                                          setLineNumber(1928);    // compilenode string
                                                          var string12893 = new GraceString("");
                                                          var var_s = string12893;
                                                          var if12894 = GraceDone;
                                                          setLineNumber(1929);    // compilenode block
                                                          var block12895 = new GraceBlock(this, 1929, 0);
                                                          block12895.real = function() {
                                                            // call case 4: self request
                                                            onSelf = true;
                                                            var call12897 = callmethodChecked(this, "value", []);
                                                            // call case 6: other requests
                                                            // call case 4: self request
                                                            onSelf = true;
                                                            var call12901 = callmethodChecked(this, "left", []);
                                                            var call12902 = callmethodChecked(call12901, "value", []);
                                                            var opresult12904 = callmethodChecked(call12902, "\u2260(1)", [1], call12897);
                                                            return opresult12904;
                                                          };
                                                          var string12906 = new GraceString("op");
                                                          // call case 6: other requests
                                                          // call case 4: self request
                                                          onSelf = true;
                                                          var call12910 = callmethodChecked(this, "left", []);
                                                          var call12911 = callmethodChecked(call12910, "kind", []);
                                                          var opresult12913 = callmethodChecked(call12911, "==(1)", [1], string12906);
                                                          var opresult12915 = callmethodChecked(opresult12913, "&&(1)", [1], block12895);
                                                          if (Grace_isTrue(opresult12915)) {
                                                            setLineNumber(1930);    // compilenode string
                                                            var string12916 = new GraceString(")");
                                                            // call case 6: other requests
                                                            // call case 4: self request
                                                            onSelf = true;
                                                            var call12920 = callmethodChecked(this, "left", []);
                                                            var call12921 = callmethodChecked(call12920, "toGrace(1)", [1], new GraceNum(0));
                                                            var string12923 = new GraceString("(");
                                                            var opresult12925 = callmethodChecked(string12923, "++(1)", [1], call12921);
                                                            var opresult12927 = callmethodChecked(opresult12925, "++(1)", [1], string12916);
                                                            var_s = opresult12927;
                                                            if12894 = GraceDone;
                                                          } else {
                                                            setLineNumber(1932);    // compilenode num
                                                            // call case 6: other requests
                                                            // call case 4: self request
                                                            onSelf = true;
                                                            var call12930 = callmethodChecked(this, "left", []);
                                                            var call12931 = callmethodChecked(call12930, "toGrace(1)", [1], new GraceNum(0));
                                                            var_s = call12931;
                                                            if12894 = GraceDone;
                                                          }
                                                          var if12932 = GraceDone;
                                                          setLineNumber(1934);    // compilenode string
                                                          var string12933 = new GraceString("..");
                                                          // call case 4: self request
                                                          onSelf = true;
                                                          var call12936 = callmethodChecked(this, "value", []);
                                                          var opresult12938 = callmethodChecked(call12936, "==(1)", [1], string12933);
                                                          if (Grace_isTrue(opresult12938)) {
                                                            setLineNumber(1935);    // compilenode member
                                                            // call case 4: self request
                                                            onSelf = true;
                                                            var call12940 = callmethodChecked(this, "value", []);
                                                            var opresult12943 = callmethodChecked(var_s, "++(1)", [1], call12940);
                                                            var_s = opresult12943;
                                                            if12932 = GraceDone;
                                                          } else {
                                                            setLineNumber(1937);    // compilenode string
                                                            var string12944 = new GraceString(" ");
                                                            // call case 4: self request
                                                            onSelf = true;
                                                            var call12947 = callmethodChecked(this, "value", []);
                                                            var string12949 = new GraceString(" ");
                                                            var opresult12952 = callmethodChecked(var_s, "++(1)", [1], string12949);
                                                            var opresult12954 = callmethodChecked(opresult12952, "++(1)", [1], call12947);
                                                            var opresult12956 = callmethodChecked(opresult12954, "++(1)", [1], string12944);
                                                            var_s = opresult12956;
                                                            if12932 = GraceDone;
                                                          }
                                                          var if12957 = GraceDone;
                                                          setLineNumber(1939);    // compilenode block
                                                          var block12958 = new GraceBlock(this, 1939, 0);
                                                          block12958.real = function() {
                                                            // call case 4: self request
                                                            onSelf = true;
                                                            var call12960 = callmethodChecked(this, "value", []);
                                                            // call case 6: other requests
                                                            // call case 4: self request
                                                            onSelf = true;
                                                            var call12964 = callmethodChecked(this, "right", []);
                                                            var call12965 = callmethodChecked(call12964, "value", []);
                                                            var opresult12967 = callmethodChecked(call12965, "\u2260(1)", [1], call12960);
                                                            return opresult12967;
                                                          };
                                                          var string12969 = new GraceString("op");
                                                          // call case 6: other requests
                                                          // call case 4: self request
                                                          onSelf = true;
                                                          var call12973 = callmethodChecked(this, "right", []);
                                                          var call12974 = callmethodChecked(call12973, "kind", []);
                                                          var opresult12976 = callmethodChecked(call12974, "==(1)", [1], string12969);
                                                          var opresult12978 = callmethodChecked(opresult12976, "&&(1)", [1], block12958);
                                                          if (Grace_isTrue(opresult12978)) {
                                                            setLineNumber(1940);    // compilenode string
                                                            var string12979 = new GraceString(")");
                                                            // call case 6: other requests
                                                            // call case 4: self request
                                                            onSelf = true;
                                                            var call12983 = callmethodChecked(this, "right", []);
                                                            var call12984 = callmethodChecked(call12983, "toGrace(1)", [1], new GraceNum(0));
                                                            var string12986 = new GraceString("(");
                                                            var opresult12989 = callmethodChecked(var_s, "++(1)", [1], string12986);
                                                            var opresult12991 = callmethodChecked(opresult12989, "++(1)", [1], call12984);
                                                            var opresult12993 = callmethodChecked(opresult12991, "++(1)", [1], string12979);
                                                            var_s = opresult12993;
                                                            if12957 = GraceDone;
                                                          } else {
                                                            setLineNumber(1942);    // compilenode num
                                                            // call case 6: other requests
                                                            // call case 4: self request
                                                            onSelf = true;
                                                            var call12996 = callmethodChecked(this, "right", []);
                                                            var call12997 = callmethodChecked(call12996, "toGrace(1)", [1], new GraceNum(0));
                                                            var opresult13000 = callmethodChecked(var_s, "++(1)", [1], call12997);
                                                            var_s = opresult13000;
                                                            if12957 = GraceDone;
                                                          }
                                                          setLineNumber(1944);    // return value
                                                          if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], var_s)))
                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                  new GraceString("result of method toGrace(_) does not have " + 
                                                                      callmethod(var_String, "asString", [0])._value + "."));
                                                          return var_s;
                                                        };
                                                        func12892.paramTypes = [];
                                                        func12892.paramTypes.push([type_Number, "depth"]);
                                                        func12892.paramCounts = [1];
                                                        obj12784.methods["toGrace(1)"] = func12892;
                                                        func12892.definitionLine = 1927;
                                                        func12892.definitionModule = "ast";
                                                        var func13001 = function(argcv) {    // method asIdentifier
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          setModuleName("ast");
                                                          setLineNumber(1948);    // compilenode member
                                                          // call case 4: self request
                                                          onSelf = true;
                                                          var call13004 = callmethodChecked(this, "nameString", []);
                                                          // call case 4: self request
                                                          onSelf = true;
                                                          var call13006 = callmethodChecked(this, "scope", []);
                                                          // call case 6: other requests
                                                          var call13007 = callmethodChecked(var_identifierNode, "new(2)scope(1)", [2, 1], call13004, GraceFalse, call13006);
                                                          var var_resultNode = call13007;
                                                          setLineNumber(1949);    // compilenode identifier
                                                          // call case 6: other requests
                                                          var call13009 = callmethodChecked(var_resultNode, "inRequest:=(1)", [1], GraceTrue);
                                                          setLineNumber(1950);    // compilenode member
                                                          // call case 4: self request
                                                          onSelf = true;
                                                          var call13012 = callmethodChecked(this, "line", []);
                                                          // call case 6: other requests
                                                          var call13013 = callmethodChecked(var_resultNode, "line:=(1)", [1], call13012);
                                                          setLineNumber(1951);    // compilenode member
                                                          // call case 4: self request
                                                          onSelf = true;
                                                          var call13016 = callmethodChecked(this, "linePos", []);
                                                          // call case 6: other requests
                                                          var call13017 = callmethodChecked(var_resultNode, "linePos:=(1)", [1], call13016);
                                                          setLineNumber(1952);    // compilenode identifier
                                                          return var_resultNode;
                                                        };
                                                        func13001.paramCounts = [0];
                                                        obj12784.methods["asIdentifier"] = func13001;
                                                        func13001.definitionLine = 1946;
                                                        func13001.definitionModule = "ast";
                                                        var func13018 = function(argcv) {    // method shallowCopy
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          setModuleName("ast");
                                                          setLineNumber(1955);    // compilenode identifier
                                                          // call case 6: other requests
                                                          // call case 4: self request
                                                          onSelf = true;
                                                          var call13022 = callmethodChecked(this, "value", []);
                                                          // call case 6: other requests
                                                          var call13023 = callmethodChecked(var_opNode, "new(3)", [3], call13022, var_nullNode, var_nullNode);
                                                          var call13024 = callmethodChecked(call13023, "shallowCopyFieldsFrom(1)", [1], this);
                                                          return call13024;
                                                        };
                                                        func13018.paramCounts = [0];
                                                        obj12784.methods["shallowCopy"] = func13018;
                                                        func13018.definitionLine = 1954;
                                                        func13018.definitionModule = "ast";
                                                        setLineNumber(1894);    // compilenode identifier
                                                        // call case 6: other requests
                                                        // call case 6: other requests
                                                        // call case 3: self.outer request
                                                        var call13028 = callmethodChecked(superDepth, "outer", [0]);
                                                        var call13029 = callmethodChecked(call13028, "outer", []);
                                                        var call13030 = callmethodChecked(call13029, "baseNode$object(1)", [0, 1], this);
                                                        obj12784.superobj = call13030;
                                                        if (call13030.data) obj12784.data = call13030.data;
                                                        if (call13030.hasOwnProperty('_value'))
                                                            obj12784._value = call13030._value;
                                                        setLineNumber(1895);    // compilenode string
                                                        var string13031 = new GraceString("op");
                                                        obj12784.data["kind"] = string13031;
                                                        var reader_ast_kind13032 = function() {
                                                          return this.data["kind"];
                                                        };
                                                        reader_ast_kind13032.def = true;
                                                        obj12784.methods["kind"] = reader_ast_kind13032;
                                                        setLineNumber(1896);    // compilenode identifier
                                                        obj12784.data["value"] = var_op;
                                                        var reader_ast_value13033 = function() {
                                                          return this.data["value"];
                                                        };
                                                        reader_ast_value13033.def = true;
                                                        obj12784.methods["value"] = reader_ast_value13033;
                                                        setLineNumber(1897);    // compilenode identifier
                                                        obj12784.data["left"] = var_l;
                                                        var reader_ast_left13034 = function() {
                                                          return this.data["left"];
                                                        };
                                                        obj12784.methods["left"] = reader_ast_left13034;
                                                        obj12784.data["left"] = var_l;
                                                        var writer_ast_left13034 = function(argcv, o) {
                                                          this.data["left"] = o;
                                                          return GraceDone;
                                                        };
                                                        obj12784.methods["left:=(1)"] = writer_ast_left13034;
                                                        obj12784.mutable = true;
                                                        setLineNumber(1898);    // compilenode identifier
                                                        obj12784.data["right"] = var_r;
                                                        var reader_ast_right13035 = function() {
                                                          return this.data["right"];
                                                        };
                                                        obj12784.methods["right"] = reader_ast_right13035;
                                                        obj12784.data["right"] = var_r;
                                                        var writer_ast_right13035 = function(argcv, o) {
                                                          this.data["right"] = o;
                                                          return GraceDone;
                                                        };
                                                        obj12784.methods["right:=(1)"] = writer_ast_right13035;
                                                        obj12784.mutable = true;
                                                        superDepth = origSuperDepth;
                                                      };
                                                      obj_init_12784.apply(obj12784, []);
                                                      return obj12784;
                                                    };
                                                    func12783.paramCounts = [3];
                                                    obj12781.methods["new(3)"] = func12783;
                                                    func12783.definitionLine = 1893;
                                                    func12783.definitionModule = "ast";
                                                      var func13036 = function(argcv) {    // method new(_,_,_)$object(_)
                                                        var curarg = 1;
                                                        var var_op = arguments[curarg];
                                                        curarg++;
                                                        var var_l = arguments[curarg];
                                                        curarg++;
                                                        var var_r = arguments[curarg];
                                                        curarg++;
                                                        var inheritingObject = arguments[curarg++];
                                                        // Start argument processing
                                                        curarg = 1;
                                                        curarg++;
                                                        curarg++;
                                                        curarg++;
                                                        // End argument processing
                                                        setModuleName("ast");
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var obj13037 = Grace_allocObject(null, "new(3)");
                                                        obj13037.definitionModule = "ast";
                                                        obj13037.definitionLine = 1893;
                                                        var inho13037 = inheritingObject;
                                                        while (inho13037.superobj) inho13037 = inho13037.superobj;
                                                        inho13037.superobj = obj13037;
                                                        obj13037.data = inheritingObject.data;
                                                        if (inheritingObject.hasOwnProperty('_value'))
                                                          obj13037._value = inheritingObject._value;
                                                        obj13037.outer = this;
                                                        var reader_ast_outer13038 = function() {
                                                          return this.outer;
                                                        };
                                                        obj13037.methods["outer"] = reader_ast_outer13038;
                                                        var obj_init_13037 = function() {
                                                          var origSuperDepth = superDepth;
                                                          superDepth = obj13037;
                                                          var func13039 = function(argcv) {    // method isSimple
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            setModuleName("ast");
                                                            // isSimple is a simple accessor - elide try ... catch
                                                            setLineNumber(1899);    // compilenode identifier
                                                            return GraceFalse;
                                                          };
                                                          func13039.paramCounts = [0];
                                                          obj13037.methods["isSimple"] = func13039;
                                                          func13039.definitionLine = 1899;
                                                          func13039.definitionModule = "ast";
                                                          var func13040 = function(argcv) {    // method nameString
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            setModuleName("ast");
                                                            setLineNumber(1900);    // compilenode string
                                                            var string13041 = new GraceString("(1)");
                                                            // call case 4: self request
                                                            onSelf = true;
                                                            var call13044 = callmethodChecked(this, "value", []);
                                                            var opresult13046 = callmethodChecked(call13044, "++(1)", [1], string13041);
                                                            return opresult13046;
                                                          };
                                                          func13040.paramCounts = [0];
                                                          obj13037.methods["nameString"] = func13040;
                                                          func13040.definitionLine = 1900;
                                                          func13040.definitionModule = "ast";
                                                          var func13047 = function(argcv) {    // method accept(_)from(_)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_visitor = arguments[curarg];
                                                            curarg++;
                                                            var var_as = arguments[curarg];
                                                            curarg++;
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1901);    // compilenode identifier
                                                            if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                        callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                            curarg++;
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("ast");
                                                            var if13048 = GraceDone;
                                                            setLineNumber(1902);    // compilenode identifier
                                                            // call case 6: other requests
                                                            var call13050 = callmethodChecked(var_visitor, "visitOp(1)up(1)", [1, 1], this, var_as);
                                                            if (Grace_isTrue(call13050)) {
                                                              setLineNumber(1903);    // compilenode identifier
                                                              // call case 6: other requests
                                                              var call13052 = callmethodChecked(var_as, "extend(1)", [1], this);
                                                              var var_newChain = call13052;
                                                              setLineNumber(1904);    // compilenode identifier
                                                              // call case 6: other requests
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13055 = callmethodChecked(this, "left", []);
                                                              var call13056 = callmethodChecked(call13055, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                              setLineNumber(1905);    // compilenode identifier
                                                              // call case 6: other requests
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13059 = callmethodChecked(this, "right", []);
                                                              var call13060 = callmethodChecked(call13059, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                              if13048 = call13060;
                                                            }
                                                            return if13048;
                                                          };
                                                          func13047.paramTypes = [];
                                                          func13047.paramTypes.push([]);
                                                          func13047.paramTypes.push([]);
                                                          func13047.paramCounts = [1, 1];
                                                          obj13037.methods["accept(1)from(1)"] = func13047;
                                                          func13047.definitionLine = 1901;
                                                          func13047.definitionModule = "ast";
                                                          var func13061 = function(argcv) {    // method map(_)ancestors(_)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_blk = arguments[curarg];
                                                            curarg++;
                                                            var var_as = arguments[curarg];
                                                            curarg++;
                                                            setModuleName("ast");
                                                            setLineNumber(1909);    // compilenode member
                                                            // call case 4: self request
                                                            onSelf = true;
                                                            var call13063 = callmethodChecked(this, "shallowCopy", []);
                                                            var var_n = call13063;
                                                            setLineNumber(1910);    // compilenode identifier
                                                            // call case 6: other requests
                                                            var call13065 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                                            var var_newChain = call13065;
                                                            setLineNumber(1911);    // compilenode identifier
                                                            // call case 6: other requests
                                                            // call case 4: self request
                                                            onSelf = true;
                                                            var call13069 = callmethodChecked(this, "left", []);
                                                            var call13070 = callmethodChecked(call13069, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
                                                            // call case 6: other requests
                                                            var call13071 = callmethodChecked(var_n, "left:=(1)", [1], call13070);
                                                            setLineNumber(1912);    // compilenode identifier
                                                            // call case 6: other requests
                                                            // call case 4: self request
                                                            onSelf = true;
                                                            var call13075 = callmethodChecked(this, "right", []);
                                                            var call13076 = callmethodChecked(call13075, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
                                                            // call case 6: other requests
                                                            var call13077 = callmethodChecked(var_n, "right:=(1)", [1], call13076);
                                                            setLineNumber(1913);    // compilenode identifier
                                                            // call case 6: other requests
                                                            var call13079 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                                            return call13079;
                                                          };
                                                          func13061.paramCounts = [1, 1];
                                                          obj13037.methods["map(1)ancestors(1)"] = func13061;
                                                          func13061.definitionLine = 1908;
                                                          func13061.definitionModule = "ast";
                                                          var func13080 = function(argcv) {    // method pretty(_)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_depth = arguments[curarg];
                                                            curarg++;
                                                            setModuleName("ast");
                                                            setLineNumber(1916);    // compilenode string
                                                            var string13081 = new GraceString("");
                                                            var var_spc = string13081;
                                                            setLineNumber(1917);    // compilenode num
                                                            var opresult13085 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                                                            var block13086 = new GraceBlock(this, 1917, 1);
                                                            setLineNumber(1);    // compilenode identifier
                                                            block13086.real = function(var_i) {
                                                              setLineNumber(1918);    // compilenode string
                                                              var string13087 = new GraceString("  ");
                                                              var opresult13090 = callmethodChecked(var_spc, "++(1)", [1], string13087);
                                                              var_spc = opresult13090;
                                                              return GraceDone;
                                                            };
                                                            // call case 5: prelude request
                                                            var call13091 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult13085, block13086);
                                                            setLineNumber(1920);    // compilenode string
                                                            var string13092 = new GraceString("\u203a");
                                                            // call case 4: self request
                                                            onSelf = true;
                                                            var call13095 = callmethodChecked(this, "nameString", []);
                                                            var string13097 = new GraceString("\u2039");
                                                            // call case 1: super request
                                                            var call13100 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                                            var string13102 = new GraceString("");
                                                            var opresult13104 = callmethodChecked(string13102, "++(1)", [1], call13100);
                                                            var opresult13106 = callmethodChecked(opresult13104, "++(1)", [1], string13097);
                                                            var opresult13108 = callmethodChecked(opresult13106, "++(1)", [1], call13095);
                                                            var opresult13110 = callmethodChecked(opresult13108, "++(1)", [1], string13092);
                                                            var var_s = opresult13110;
                                                            setLineNumber(1921);    // compilenode string
                                                            var string13111 = new GraceString("\n");
                                                            var opresult13114 = callmethodChecked(var_s, "++(1)", [1], string13111);
                                                            var_s = opresult13114;
                                                            setLineNumber(1922);    // compilenode identifier
                                                            var opresult13118 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                                            // call case 6: other requests
                                                            // call case 4: self request
                                                            onSelf = true;
                                                            var call13120 = callmethodChecked(this, "left", []);
                                                            var call13121 = callmethodChecked(call13120, "pretty(1)", [1], opresult13118);
                                                            var opresult13125 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                                            var opresult13127 = callmethodChecked(opresult13125, "++(1)", [1], call13121);
                                                            var_s = opresult13127;
                                                            setLineNumber(1923);    // compilenode string
                                                            var string13128 = new GraceString("\n");
                                                            var opresult13131 = callmethodChecked(var_s, "++(1)", [1], string13128);
                                                            var_s = opresult13131;
                                                            setLineNumber(1924);    // compilenode identifier
                                                            var opresult13135 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                                            // call case 6: other requests
                                                            // call case 4: self request
                                                            onSelf = true;
                                                            var call13137 = callmethodChecked(this, "right", []);
                                                            var call13138 = callmethodChecked(call13137, "pretty(1)", [1], opresult13135);
                                                            var opresult13142 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                                            var opresult13144 = callmethodChecked(opresult13142, "++(1)", [1], call13138);
                                                            var_s = opresult13144;
                                                            setLineNumber(1925);    // compilenode identifier
                                                            return var_s;
                                                          };
                                                          func13080.paramCounts = [1];
                                                          obj13037.methods["pretty(1)"] = func13080;
                                                          func13080.definitionLine = 1915;
                                                          func13080.definitionModule = "ast";
                                                          var func13145 = function(argcv) {    // method toGrace(_)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_depth = arguments[curarg];
                                                            curarg++;
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1927);    // compilenode identifier
                                                            if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                        callmethod(var_Number, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("ast");
                                                            setLineNumber(1928);    // compilenode string
                                                            var string13146 = new GraceString("");
                                                            var var_s = string13146;
                                                            var if13147 = GraceDone;
                                                            setLineNumber(1929);    // compilenode block
                                                            var block13148 = new GraceBlock(this, 1929, 0);
                                                            block13148.real = function() {
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13150 = callmethodChecked(this, "value", []);
                                                              // call case 6: other requests
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13154 = callmethodChecked(this, "left", []);
                                                              var call13155 = callmethodChecked(call13154, "value", []);
                                                              var opresult13157 = callmethodChecked(call13155, "\u2260(1)", [1], call13150);
                                                              return opresult13157;
                                                            };
                                                            var string13159 = new GraceString("op");
                                                            // call case 6: other requests
                                                            // call case 4: self request
                                                            onSelf = true;
                                                            var call13163 = callmethodChecked(this, "left", []);
                                                            var call13164 = callmethodChecked(call13163, "kind", []);
                                                            var opresult13166 = callmethodChecked(call13164, "==(1)", [1], string13159);
                                                            var opresult13168 = callmethodChecked(opresult13166, "&&(1)", [1], block13148);
                                                            if (Grace_isTrue(opresult13168)) {
                                                              setLineNumber(1930);    // compilenode string
                                                              var string13169 = new GraceString(")");
                                                              // call case 6: other requests
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13173 = callmethodChecked(this, "left", []);
                                                              var call13174 = callmethodChecked(call13173, "toGrace(1)", [1], new GraceNum(0));
                                                              var string13176 = new GraceString("(");
                                                              var opresult13178 = callmethodChecked(string13176, "++(1)", [1], call13174);
                                                              var opresult13180 = callmethodChecked(opresult13178, "++(1)", [1], string13169);
                                                              var_s = opresult13180;
                                                              if13147 = GraceDone;
                                                            } else {
                                                              setLineNumber(1932);    // compilenode num
                                                              // call case 6: other requests
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13183 = callmethodChecked(this, "left", []);
                                                              var call13184 = callmethodChecked(call13183, "toGrace(1)", [1], new GraceNum(0));
                                                              var_s = call13184;
                                                              if13147 = GraceDone;
                                                            }
                                                            var if13185 = GraceDone;
                                                            setLineNumber(1934);    // compilenode string
                                                            var string13186 = new GraceString("..");
                                                            // call case 4: self request
                                                            onSelf = true;
                                                            var call13189 = callmethodChecked(this, "value", []);
                                                            var opresult13191 = callmethodChecked(call13189, "==(1)", [1], string13186);
                                                            if (Grace_isTrue(opresult13191)) {
                                                              setLineNumber(1935);    // compilenode member
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13193 = callmethodChecked(this, "value", []);
                                                              var opresult13196 = callmethodChecked(var_s, "++(1)", [1], call13193);
                                                              var_s = opresult13196;
                                                              if13185 = GraceDone;
                                                            } else {
                                                              setLineNumber(1937);    // compilenode string
                                                              var string13197 = new GraceString(" ");
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13200 = callmethodChecked(this, "value", []);
                                                              var string13202 = new GraceString(" ");
                                                              var opresult13205 = callmethodChecked(var_s, "++(1)", [1], string13202);
                                                              var opresult13207 = callmethodChecked(opresult13205, "++(1)", [1], call13200);
                                                              var opresult13209 = callmethodChecked(opresult13207, "++(1)", [1], string13197);
                                                              var_s = opresult13209;
                                                              if13185 = GraceDone;
                                                            }
                                                            var if13210 = GraceDone;
                                                            setLineNumber(1939);    // compilenode block
                                                            var block13211 = new GraceBlock(this, 1939, 0);
                                                            block13211.real = function() {
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13213 = callmethodChecked(this, "value", []);
                                                              // call case 6: other requests
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13217 = callmethodChecked(this, "right", []);
                                                              var call13218 = callmethodChecked(call13217, "value", []);
                                                              var opresult13220 = callmethodChecked(call13218, "\u2260(1)", [1], call13213);
                                                              return opresult13220;
                                                            };
                                                            var string13222 = new GraceString("op");
                                                            // call case 6: other requests
                                                            // call case 4: self request
                                                            onSelf = true;
                                                            var call13226 = callmethodChecked(this, "right", []);
                                                            var call13227 = callmethodChecked(call13226, "kind", []);
                                                            var opresult13229 = callmethodChecked(call13227, "==(1)", [1], string13222);
                                                            var opresult13231 = callmethodChecked(opresult13229, "&&(1)", [1], block13211);
                                                            if (Grace_isTrue(opresult13231)) {
                                                              setLineNumber(1940);    // compilenode string
                                                              var string13232 = new GraceString(")");
                                                              // call case 6: other requests
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13236 = callmethodChecked(this, "right", []);
                                                              var call13237 = callmethodChecked(call13236, "toGrace(1)", [1], new GraceNum(0));
                                                              var string13239 = new GraceString("(");
                                                              var opresult13242 = callmethodChecked(var_s, "++(1)", [1], string13239);
                                                              var opresult13244 = callmethodChecked(opresult13242, "++(1)", [1], call13237);
                                                              var opresult13246 = callmethodChecked(opresult13244, "++(1)", [1], string13232);
                                                              var_s = opresult13246;
                                                              if13210 = GraceDone;
                                                            } else {
                                                              setLineNumber(1942);    // compilenode num
                                                              // call case 6: other requests
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13249 = callmethodChecked(this, "right", []);
                                                              var call13250 = callmethodChecked(call13249, "toGrace(1)", [1], new GraceNum(0));
                                                              var opresult13253 = callmethodChecked(var_s, "++(1)", [1], call13250);
                                                              var_s = opresult13253;
                                                              if13210 = GraceDone;
                                                            }
                                                            setLineNumber(1944);    // return value
                                                            if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], var_s)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method toGrace(_) does not have " + 
                                                                        callmethod(var_String, "asString", [0])._value + "."));
                                                            return var_s;
                                                          };
                                                          func13145.paramTypes = [];
                                                          func13145.paramTypes.push([type_Number, "depth"]);
                                                          func13145.paramCounts = [1];
                                                          obj13037.methods["toGrace(1)"] = func13145;
                                                          func13145.definitionLine = 1927;
                                                          func13145.definitionModule = "ast";
                                                          var func13254 = function(argcv) {    // method asIdentifier
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            setModuleName("ast");
                                                            setLineNumber(1948);    // compilenode member
                                                            // call case 4: self request
                                                            onSelf = true;
                                                            var call13257 = callmethodChecked(this, "nameString", []);
                                                            // call case 4: self request
                                                            onSelf = true;
                                                            var call13259 = callmethodChecked(this, "scope", []);
                                                            // call case 6: other requests
                                                            var call13260 = callmethodChecked(var_identifierNode, "new(2)scope(1)", [2, 1], call13257, GraceFalse, call13259);
                                                            var var_resultNode = call13260;
                                                            setLineNumber(1949);    // compilenode identifier
                                                            // call case 6: other requests
                                                            var call13262 = callmethodChecked(var_resultNode, "inRequest:=(1)", [1], GraceTrue);
                                                            setLineNumber(1950);    // compilenode member
                                                            // call case 4: self request
                                                            onSelf = true;
                                                            var call13265 = callmethodChecked(this, "line", []);
                                                            // call case 6: other requests
                                                            var call13266 = callmethodChecked(var_resultNode, "line:=(1)", [1], call13265);
                                                            setLineNumber(1951);    // compilenode member
                                                            // call case 4: self request
                                                            onSelf = true;
                                                            var call13269 = callmethodChecked(this, "linePos", []);
                                                            // call case 6: other requests
                                                            var call13270 = callmethodChecked(var_resultNode, "linePos:=(1)", [1], call13269);
                                                            setLineNumber(1952);    // compilenode identifier
                                                            return var_resultNode;
                                                          };
                                                          func13254.paramCounts = [0];
                                                          obj13037.methods["asIdentifier"] = func13254;
                                                          func13254.definitionLine = 1946;
                                                          func13254.definitionModule = "ast";
                                                          var func13271 = function(argcv) {    // method shallowCopy
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            setModuleName("ast");
                                                            setLineNumber(1955);    // compilenode identifier
                                                            // call case 6: other requests
                                                            // call case 4: self request
                                                            onSelf = true;
                                                            var call13275 = callmethodChecked(this, "value", []);
                                                            // call case 6: other requests
                                                            var call13276 = callmethodChecked(var_opNode, "new(3)", [3], call13275, var_nullNode, var_nullNode);
                                                            var call13277 = callmethodChecked(call13276, "shallowCopyFieldsFrom(1)", [1], this);
                                                            return call13277;
                                                          };
                                                          func13271.paramCounts = [0];
                                                          obj13037.methods["shallowCopy"] = func13271;
                                                          func13271.definitionLine = 1954;
                                                          func13271.definitionModule = "ast";
                                                          setLineNumber(1894);    // compilenode identifier
                                                          // call case 6: other requests
                                                          // call case 6: other requests
                                                          // call case 3: self.outer request
                                                          var call13281 = callmethodChecked(superDepth, "outer", [0]);
                                                          var call13282 = callmethodChecked(call13281, "outer", []);
                                                          var call13283 = callmethodChecked(call13282, "baseNode$object(1)", [0, 1], this);
                                                          obj13037.superobj = call13283;
                                                          if (call13283.data) obj13037.data = call13283.data;
                                                          if (call13283.hasOwnProperty('_value'))
                                                              obj13037._value = call13283._value;
                                                          setLineNumber(1895);    // compilenode string
                                                          var string13284 = new GraceString("op");
                                                          obj13037.data["kind"] = string13284;
                                                          var reader_ast_kind13285 = function() {
                                                            return this.data["kind"];
                                                          };
                                                          reader_ast_kind13285.def = true;
                                                          obj13037.methods["kind"] = reader_ast_kind13285;
                                                          setLineNumber(1896);    // compilenode identifier
                                                          obj13037.data["value"] = var_op;
                                                          var reader_ast_value13286 = function() {
                                                            return this.data["value"];
                                                          };
                                                          reader_ast_value13286.def = true;
                                                          obj13037.methods["value"] = reader_ast_value13286;
                                                          setLineNumber(1897);    // compilenode identifier
                                                          obj13037.data["left"] = var_l;
                                                          var reader_ast_left13287 = function() {
                                                            return this.data["left"];
                                                          };
                                                          obj13037.methods["left"] = reader_ast_left13287;
                                                          obj13037.data["left"] = var_l;
                                                          var writer_ast_left13287 = function(argcv, o) {
                                                            this.data["left"] = o;
                                                            return GraceDone;
                                                          };
                                                          obj13037.methods["left:=(1)"] = writer_ast_left13287;
                                                          obj13037.mutable = true;
                                                          setLineNumber(1898);    // compilenode identifier
                                                          obj13037.data["right"] = var_r;
                                                          var reader_ast_right13288 = function() {
                                                            return this.data["right"];
                                                          };
                                                          obj13037.methods["right"] = reader_ast_right13288;
                                                          obj13037.data["right"] = var_r;
                                                          var writer_ast_right13288 = function(argcv, o) {
                                                            this.data["right"] = o;
                                                            return GraceDone;
                                                          };
                                                          obj13037.methods["right:=(1)"] = writer_ast_right13288;
                                                          obj13037.mutable = true;
                                                          superDepth = origSuperDepth;
                                                        };
                                                        obj_init_13037.apply(inheritingObject, []);
                                                        return obj13037;
                                                        };
                                                        obj12781.methods["new(3)$object(1)"] = func13036;
                                                      superDepth = origSuperDepth;
                                                    };
                                                    obj_init_12781.apply(obj12781, []);
                                                    var var_opNode = obj12781;
                                                    setLineNumber(1);    // compilenode method
                                                    var func13289 = function(argcv) {    // method opNode
                                                      var returnTarget = invocationCount;
                                                      invocationCount++;
                                                      var curarg = 1;
                                                      setModuleName("ast");
                                                      // opNode is a simple accessor - elide try ... catch
                                                      setLineNumber(1892);    // compilenode identifier
                                                      return var_opNode;
                                                    };
                                                    func13289.paramCounts = [0];
                                                    this.methods["opNode"] = func13289;
                                                    func13289.definitionLine = 1;
                                                    func13289.definitionModule = "ast";
                                                    this.methods["opNode"].debug = "def";
                                                    setLineNumber(1959);    // compilenode object
                                                    var obj13290 = Grace_allocObject(GraceObject, "bindNode");
                                                    obj13290.definitionModule = "ast";
                                                    obj13290.definitionLine = 1959;
                                                    obj13290.outer = this;
                                                    var reader_ast_outer13291 = function() {
                                                      return this.outer;
                                                    };
                                                    obj13290.methods["outer"] = reader_ast_outer13291;
                                                    var obj_init_13290 = function() {
                                                      var origSuperDepth = superDepth;
                                                      superDepth = obj13290;
                                                      var func13292 = function(argcv) {    // method new(_,_)
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        var var_dest__39__ = arguments[curarg];
                                                        curarg++;
                                                        var var_val__39__ = arguments[curarg];
                                                        curarg++;
                                                        setModuleName("ast");
                                                        setLineNumber(1960);    // compilenode object
                                                        var obj13293 = Grace_allocObject(null, "bindNode.new(_,_)");
                                                        obj13293.definitionModule = "ast";
                                                        obj13293.definitionLine = 1960;
                                                        obj13293.outer = this;
                                                        var reader_ast_outer13294 = function() {
                                                          return this.outer;
                                                        };
                                                        obj13293.methods["outer"] = reader_ast_outer13294;
                                                        var obj_init_13293 = function() {
                                                          var origSuperDepth = superDepth;
                                                          superDepth = obj13293;
                                                          var func13295 = function(argcv) {    // method isBind
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            setModuleName("ast");
                                                            // isBind is a simple accessor - elide try ... catch
                                                            setLineNumber(1967);    // compilenode identifier
                                                            return GraceTrue;
                                                          };
                                                          func13295.paramCounts = [0];
                                                          obj13293.methods["isBind"] = func13295;
                                                          func13295.definitionLine = 1967;
                                                          func13295.definitionModule = "ast";
                                                          var func13296 = function(argcv) {    // method asString
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            setModuleName("ast");
                                                            setLineNumber(1968);    // compilenode string
                                                            var string13297 = new GraceString("");
                                                            // call case 4: self request
                                                            onSelf = true;
                                                            var call13300 = callmethodChecked(this, "value", []);
                                                            var string13302 = new GraceString("bind ");
                                                            var opresult13304 = callmethodChecked(string13302, "++(1)", [1], call13300);
                                                            var opresult13306 = callmethodChecked(opresult13304, "++(1)", [1], string13297);
                                                            return opresult13306;
                                                          };
                                                          func13296.paramCounts = [0];
                                                          obj13293.methods["asString"] = func13296;
                                                          func13296.definitionLine = 1968;
                                                          func13296.definitionModule = "ast";
                                                          var func13307 = function(argcv) {    // method accept(_)from(_)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_visitor = arguments[curarg];
                                                            curarg++;
                                                            var var_as = arguments[curarg];
                                                            curarg++;
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1969);    // compilenode identifier
                                                            if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                        callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                            curarg++;
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("ast");
                                                            var if13308 = GraceDone;
                                                            setLineNumber(1970);    // compilenode identifier
                                                            // call case 6: other requests
                                                            var call13310 = callmethodChecked(var_visitor, "visitBind(1)up(1)", [1, 1], this, var_as);
                                                            if (Grace_isTrue(call13310)) {
                                                              setLineNumber(1971);    // compilenode identifier
                                                              // call case 6: other requests
                                                              var call13312 = callmethodChecked(var_as, "extend(1)", [1], this);
                                                              var var_newChain = call13312;
                                                              setLineNumber(1972);    // compilenode identifier
                                                              // call case 6: other requests
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13315 = callmethodChecked(this, "dest", []);
                                                              var call13316 = callmethodChecked(call13315, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                              setLineNumber(1973);    // compilenode identifier
                                                              // call case 6: other requests
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13319 = callmethodChecked(this, "value", []);
                                                              var call13320 = callmethodChecked(call13319, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                              if13308 = call13320;
                                                            }
                                                            return if13308;
                                                          };
                                                          func13307.paramTypes = [];
                                                          func13307.paramTypes.push([]);
                                                          func13307.paramTypes.push([]);
                                                          func13307.paramCounts = [1, 1];
                                                          obj13293.methods["accept(1)from(1)"] = func13307;
                                                          func13307.definitionLine = 1969;
                                                          func13307.definitionModule = "ast";
                                                          var func13321 = function(argcv) {    // method map(_)ancestors(_)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_blk = arguments[curarg];
                                                            curarg++;
                                                            var var_as = arguments[curarg];
                                                            curarg++;
                                                            setModuleName("ast");
                                                            setLineNumber(1977);    // compilenode member
                                                            // call case 4: self request
                                                            onSelf = true;
                                                            var call13323 = callmethodChecked(this, "shallowCopy", []);
                                                            var var_n = call13323;
                                                            setLineNumber(1978);    // compilenode identifier
                                                            // call case 6: other requests
                                                            var call13325 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                                            var var_newChain = call13325;
                                                            setLineNumber(1979);    // compilenode identifier
                                                            // call case 6: other requests
                                                            // call case 4: self request
                                                            onSelf = true;
                                                            var call13329 = callmethodChecked(this, "dest", []);
                                                            var call13330 = callmethodChecked(call13329, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
                                                            // call case 6: other requests
                                                            var call13331 = callmethodChecked(var_n, "dest:=(1)", [1], call13330);
                                                            setLineNumber(1980);    // compilenode identifier
                                                            // call case 6: other requests
                                                            // call case 4: self request
                                                            onSelf = true;
                                                            var call13335 = callmethodChecked(this, "value", []);
                                                            var call13336 = callmethodChecked(call13335, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
                                                            // call case 6: other requests
                                                            var call13337 = callmethodChecked(var_n, "value:=(1)", [1], call13336);
                                                            setLineNumber(1981);    // compilenode identifier
                                                            // call case 6: other requests
                                                            var call13339 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                                            return call13339;
                                                          };
                                                          func13321.paramCounts = [1, 1];
                                                          obj13293.methods["map(1)ancestors(1)"] = func13321;
                                                          func13321.definitionLine = 1976;
                                                          func13321.definitionModule = "ast";
                                                          var func13340 = function(argcv) {    // method pretty(_)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_depth = arguments[curarg];
                                                            curarg++;
                                                            setModuleName("ast");
                                                            setLineNumber(1984);    // compilenode string
                                                            var string13341 = new GraceString("");
                                                            var var_spc = string13341;
                                                            setLineNumber(1985);    // compilenode num
                                                            var opresult13345 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                                                            var block13346 = new GraceBlock(this, 1985, 1);
                                                            setLineNumber(1);    // compilenode identifier
                                                            block13346.real = function(var_i) {
                                                              setLineNumber(1986);    // compilenode string
                                                              var string13347 = new GraceString("  ");
                                                              var opresult13350 = callmethodChecked(var_spc, "++(1)", [1], string13347);
                                                              var_spc = opresult13350;
                                                              return GraceDone;
                                                            };
                                                            // call case 5: prelude request
                                                            var call13351 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult13345, block13346);
                                                            setLineNumber(1988);    // compilenode string
                                                            var string13352 = new GraceString("\n");
                                                            // call case 1: super request
                                                            var call13355 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                                            var opresult13357 = callmethodChecked(call13355, "++(1)", [1], string13352);
                                                            var var_s = opresult13357;
                                                            setLineNumber(1989);    // compilenode identifier
                                                            var opresult13361 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                                            // call case 6: other requests
                                                            // call case 4: self request
                                                            onSelf = true;
                                                            var call13363 = callmethodChecked(this, "dest", []);
                                                            var call13364 = callmethodChecked(call13363, "pretty(1)", [1], opresult13361);
                                                            var opresult13368 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                                            var opresult13370 = callmethodChecked(opresult13368, "++(1)", [1], call13364);
                                                            var_s = opresult13370;
                                                            setLineNumber(1990);    // compilenode string
                                                            var string13371 = new GraceString("\n");
                                                            var opresult13374 = callmethodChecked(var_s, "++(1)", [1], string13371);
                                                            var_s = opresult13374;
                                                            setLineNumber(1991);    // compilenode identifier
                                                            var opresult13378 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                                            // call case 6: other requests
                                                            // call case 4: self request
                                                            onSelf = true;
                                                            var call13380 = callmethodChecked(this, "value", []);
                                                            var call13381 = callmethodChecked(call13380, "pretty(1)", [1], opresult13378);
                                                            var opresult13385 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                                            var opresult13387 = callmethodChecked(opresult13385, "++(1)", [1], call13381);
                                                            var_s = opresult13387;
                                                            setLineNumber(1992);    // compilenode identifier
                                                            return var_s;
                                                          };
                                                          func13340.paramCounts = [1];
                                                          obj13293.methods["pretty(1)"] = func13340;
                                                          func13340.definitionLine = 1983;
                                                          func13340.definitionModule = "ast";
                                                          var func13388 = function(argcv) {    // method toGrace(_)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_depth = arguments[curarg];
                                                            curarg++;
                                                            // Start argument checking
                                                            curarg = 1;
                                                            setLineNumber(1994);    // compilenode identifier
                                                            if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                        callmethod(var_Number, "asString", [0])._value + "."));
                                                            curarg++;
                                                            // End argument checking
                                                            setModuleName("ast");
                                                            setLineNumber(1995);    // compilenode string
                                                            var string13389 = new GraceString("");
                                                            var var_spc = string13389;
                                                            setLineNumber(1996);    // compilenode identifier
                                                            var diff13393 = callmethodChecked(var_depth, "-(1)", [1], new GraceNum(1));
                                                            var opresult13396 = callmethodChecked(new GraceNum(0), "..(1)", [1], diff13393);
                                                            var block13397 = new GraceBlock(this, 1996, 1);
                                                            setLineNumber(1);    // compilenode identifier
                                                            block13397.real = function(var_i) {
                                                              setLineNumber(1997);    // compilenode string
                                                              var string13398 = new GraceString("    ");
                                                              var opresult13401 = callmethodChecked(var_spc, "++(1)", [1], string13398);
                                                              var_spc = opresult13401;
                                                              return GraceDone;
                                                            };
                                                            // call case 5: prelude request
                                                            var call13402 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult13396, block13397);
                                                            setLineNumber(1999);    // compilenode identifier
                                                            var opresult13406 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                                            // call case 6: other requests
                                                            // call case 4: self request
                                                            onSelf = true;
                                                            var call13408 = callmethodChecked(this, "dest", []);
                                                            var call13409 = callmethodChecked(call13408, "toGrace(1)", [1], opresult13406);
                                                            var var_s = call13409;
                                                            setLineNumber(2000);    // compilenode identifier
                                                            var opresult13413 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                                            // call case 6: other requests
                                                            // call case 4: self request
                                                            onSelf = true;
                                                            var call13415 = callmethodChecked(this, "value", []);
                                                            var call13416 = callmethodChecked(call13415, "toGrace(1)", [1], opresult13413);
                                                            var string13418 = new GraceString(" := ");
                                                            var opresult13421 = callmethodChecked(var_s, "++(1)", [1], string13418);
                                                            var opresult13423 = callmethodChecked(opresult13421, "++(1)", [1], call13416);
                                                            var_s = opresult13423;
                                                            setLineNumber(2001);    // return value
                                                            if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], var_s)))
                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                    new GraceString("result of method toGrace(_) does not have " + 
                                                                        callmethod(var_String, "asString", [0])._value + "."));
                                                            return var_s;
                                                          };
                                                          func13388.paramTypes = [];
                                                          func13388.paramTypes.push([type_Number, "depth"]);
                                                          func13388.paramCounts = [1];
                                                          obj13293.methods["toGrace(1)"] = func13388;
                                                          func13388.definitionLine = 1994;
                                                          func13388.definitionModule = "ast";
                                                          var func13424 = function(argcv) {    // method shallowCopy
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            setModuleName("ast");
                                                            setLineNumber(2004);    // compilenode identifier
                                                            // call case 6: other requests
                                                            // call case 4: self request
                                                            onSelf = true;
                                                            var call13428 = callmethodChecked(this, "dest", []);
                                                            // call case 4: self request
                                                            onSelf = true;
                                                            var call13430 = callmethodChecked(this, "value", []);
                                                            // call case 6: other requests
                                                            var call13431 = callmethodChecked(var_bindNode, "new(2)", [2], call13428, call13430);
                                                            var call13432 = callmethodChecked(call13431, "shallowCopyFieldsFrom(1)", [1], this);
                                                            return call13432;
                                                          };
                                                          func13424.paramCounts = [0];
                                                          obj13293.methods["shallowCopy"] = func13424;
                                                          func13424.definitionLine = 2003;
                                                          func13424.definitionModule = "ast";
                                                          var func13433 = function(argcv) {    // method statementName
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            setModuleName("ast");
                                                            setLineNumber(2006);    // compilenode string
                                                            var string13434 = new GraceString("assignment or assigment request");
                                                            return string13434;
                                                          };
                                                          func13433.paramCounts = [0];
                                                          obj13293.methods["statementName"] = func13433;
                                                          func13433.definitionLine = 2006;
                                                          func13433.definitionModule = "ast";
                                                          setLineNumber(1962);    // compilenode identifier
                                                          // call case 6: other requests
                                                          // call case 6: other requests
                                                          // call case 3: self.outer request
                                                          var call13438 = callmethodChecked(superDepth, "outer", [0]);
                                                          var call13439 = callmethodChecked(call13438, "outer", []);
                                                          var call13440 = callmethodChecked(call13439, "baseNode$object(1)", [0, 1], this);
                                                          obj13293.superobj = call13440;
                                                          if (call13440.data) obj13293.data = call13440.data;
                                                          if (call13440.hasOwnProperty('_value'))
                                                              obj13293._value = call13440._value;
                                                          setLineNumber(1963);    // compilenode string
                                                          var string13441 = new GraceString("bind");
                                                          obj13293.data["kind"] = string13441;
                                                          var reader_ast_kind13442 = function() {
                                                            return this.data["kind"];
                                                          };
                                                          reader_ast_kind13442.def = true;
                                                          obj13293.methods["kind"] = reader_ast_kind13442;
                                                          setLineNumber(1964);    // compilenode identifier
                                                          obj13293.data["dest"] = var_dest__39__;
                                                          var reader_ast_dest13443 = function() {
                                                            return this.data["dest"];
                                                          };
                                                          obj13293.methods["dest"] = reader_ast_dest13443;
                                                          obj13293.data["dest"] = var_dest__39__;
                                                          var writer_ast_dest13443 = function(argcv, o) {
                                                            this.data["dest"] = o;
                                                            return GraceDone;
                                                          };
                                                          obj13293.methods["dest:=(1)"] = writer_ast_dest13443;
                                                          obj13293.mutable = true;
                                                          setLineNumber(1965);    // compilenode identifier
                                                          obj13293.data["value"] = var_val__39__;
                                                          var reader_ast_value13444 = function() {
                                                            return this.data["value"];
                                                          };
                                                          obj13293.methods["value"] = reader_ast_value13444;
                                                          obj13293.data["value"] = var_val__39__;
                                                          var writer_ast_value13444 = function(argcv, o) {
                                                            this.data["value"] = o;
                                                            return GraceDone;
                                                          };
                                                          obj13293.methods["value:=(1)"] = writer_ast_value13444;
                                                          obj13293.mutable = true;
                                                          superDepth = origSuperDepth;
                                                        };
                                                        obj_init_13293.apply(obj13293, []);
                                                        return obj13293;
                                                      };
                                                      func13292.paramCounts = [2];
                                                      obj13290.methods["new(2)"] = func13292;
                                                      func13292.definitionLine = 1960;
                                                      func13292.definitionModule = "ast";
                                                        var func13445 = function(argcv) {    // method new(_,_)$object(_)
                                                          var curarg = 1;
                                                          var var_dest__39__ = arguments[curarg];
                                                          curarg++;
                                                          var var_val__39__ = arguments[curarg];
                                                          curarg++;
                                                          var inheritingObject = arguments[curarg++];
                                                          // Start argument processing
                                                          curarg = 1;
                                                          curarg++;
                                                          curarg++;
                                                          // End argument processing
                                                          setModuleName("ast");
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var obj13446 = Grace_allocObject(null, "new(2)");
                                                          obj13446.definitionModule = "ast";
                                                          obj13446.definitionLine = 1960;
                                                          var inho13446 = inheritingObject;
                                                          while (inho13446.superobj) inho13446 = inho13446.superobj;
                                                          inho13446.superobj = obj13446;
                                                          obj13446.data = inheritingObject.data;
                                                          if (inheritingObject.hasOwnProperty('_value'))
                                                            obj13446._value = inheritingObject._value;
                                                          obj13446.outer = this;
                                                          var reader_ast_outer13447 = function() {
                                                            return this.outer;
                                                          };
                                                          obj13446.methods["outer"] = reader_ast_outer13447;
                                                          var obj_init_13446 = function() {
                                                            var origSuperDepth = superDepth;
                                                            superDepth = obj13446;
                                                            var func13448 = function(argcv) {    // method isBind
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              setModuleName("ast");
                                                              // isBind is a simple accessor - elide try ... catch
                                                              setLineNumber(1967);    // compilenode identifier
                                                              return GraceTrue;
                                                            };
                                                            func13448.paramCounts = [0];
                                                            obj13446.methods["isBind"] = func13448;
                                                            func13448.definitionLine = 1967;
                                                            func13448.definitionModule = "ast";
                                                            var func13449 = function(argcv) {    // method asString
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              setModuleName("ast");
                                                              setLineNumber(1968);    // compilenode string
                                                              var string13450 = new GraceString("");
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13453 = callmethodChecked(this, "value", []);
                                                              var string13455 = new GraceString("bind ");
                                                              var opresult13457 = callmethodChecked(string13455, "++(1)", [1], call13453);
                                                              var opresult13459 = callmethodChecked(opresult13457, "++(1)", [1], string13450);
                                                              return opresult13459;
                                                            };
                                                            func13449.paramCounts = [0];
                                                            obj13446.methods["asString"] = func13449;
                                                            func13449.definitionLine = 1968;
                                                            func13449.definitionModule = "ast";
                                                            var func13460 = function(argcv) {    // method accept(_)from(_)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_visitor = arguments[curarg];
                                                              curarg++;
                                                              var var_as = arguments[curarg];
                                                              curarg++;
                                                              // Start argument checking
                                                              curarg = 1;
                                                              setLineNumber(1969);    // compilenode identifier
                                                              if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                          callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                              curarg++;
                                                              curarg++;
                                                              // End argument checking
                                                              setModuleName("ast");
                                                              var if13461 = GraceDone;
                                                              setLineNumber(1970);    // compilenode identifier
                                                              // call case 6: other requests
                                                              var call13463 = callmethodChecked(var_visitor, "visitBind(1)up(1)", [1, 1], this, var_as);
                                                              if (Grace_isTrue(call13463)) {
                                                                setLineNumber(1971);    // compilenode identifier
                                                                // call case 6: other requests
                                                                var call13465 = callmethodChecked(var_as, "extend(1)", [1], this);
                                                                var var_newChain = call13465;
                                                                setLineNumber(1972);    // compilenode identifier
                                                                // call case 6: other requests
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call13468 = callmethodChecked(this, "dest", []);
                                                                var call13469 = callmethodChecked(call13468, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                                setLineNumber(1973);    // compilenode identifier
                                                                // call case 6: other requests
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call13472 = callmethodChecked(this, "value", []);
                                                                var call13473 = callmethodChecked(call13472, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                                if13461 = call13473;
                                                              }
                                                              return if13461;
                                                            };
                                                            func13460.paramTypes = [];
                                                            func13460.paramTypes.push([]);
                                                            func13460.paramTypes.push([]);
                                                            func13460.paramCounts = [1, 1];
                                                            obj13446.methods["accept(1)from(1)"] = func13460;
                                                            func13460.definitionLine = 1969;
                                                            func13460.definitionModule = "ast";
                                                            var func13474 = function(argcv) {    // method map(_)ancestors(_)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_blk = arguments[curarg];
                                                              curarg++;
                                                              var var_as = arguments[curarg];
                                                              curarg++;
                                                              setModuleName("ast");
                                                              setLineNumber(1977);    // compilenode member
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13476 = callmethodChecked(this, "shallowCopy", []);
                                                              var var_n = call13476;
                                                              setLineNumber(1978);    // compilenode identifier
                                                              // call case 6: other requests
                                                              var call13478 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                                              var var_newChain = call13478;
                                                              setLineNumber(1979);    // compilenode identifier
                                                              // call case 6: other requests
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13482 = callmethodChecked(this, "dest", []);
                                                              var call13483 = callmethodChecked(call13482, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
                                                              // call case 6: other requests
                                                              var call13484 = callmethodChecked(var_n, "dest:=(1)", [1], call13483);
                                                              setLineNumber(1980);    // compilenode identifier
                                                              // call case 6: other requests
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13488 = callmethodChecked(this, "value", []);
                                                              var call13489 = callmethodChecked(call13488, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
                                                              // call case 6: other requests
                                                              var call13490 = callmethodChecked(var_n, "value:=(1)", [1], call13489);
                                                              setLineNumber(1981);    // compilenode identifier
                                                              // call case 6: other requests
                                                              var call13492 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                                              return call13492;
                                                            };
                                                            func13474.paramCounts = [1, 1];
                                                            obj13446.methods["map(1)ancestors(1)"] = func13474;
                                                            func13474.definitionLine = 1976;
                                                            func13474.definitionModule = "ast";
                                                            var func13493 = function(argcv) {    // method pretty(_)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_depth = arguments[curarg];
                                                              curarg++;
                                                              setModuleName("ast");
                                                              setLineNumber(1984);    // compilenode string
                                                              var string13494 = new GraceString("");
                                                              var var_spc = string13494;
                                                              setLineNumber(1985);    // compilenode num
                                                              var opresult13498 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                                                              var block13499 = new GraceBlock(this, 1985, 1);
                                                              setLineNumber(1);    // compilenode identifier
                                                              block13499.real = function(var_i) {
                                                                setLineNumber(1986);    // compilenode string
                                                                var string13500 = new GraceString("  ");
                                                                var opresult13503 = callmethodChecked(var_spc, "++(1)", [1], string13500);
                                                                var_spc = opresult13503;
                                                                return GraceDone;
                                                              };
                                                              // call case 5: prelude request
                                                              var call13504 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult13498, block13499);
                                                              setLineNumber(1988);    // compilenode string
                                                              var string13505 = new GraceString("\n");
                                                              // call case 1: super request
                                                              var call13508 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                                              var opresult13510 = callmethodChecked(call13508, "++(1)", [1], string13505);
                                                              var var_s = opresult13510;
                                                              setLineNumber(1989);    // compilenode identifier
                                                              var opresult13514 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                                              // call case 6: other requests
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13516 = callmethodChecked(this, "dest", []);
                                                              var call13517 = callmethodChecked(call13516, "pretty(1)", [1], opresult13514);
                                                              var opresult13521 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                                              var opresult13523 = callmethodChecked(opresult13521, "++(1)", [1], call13517);
                                                              var_s = opresult13523;
                                                              setLineNumber(1990);    // compilenode string
                                                              var string13524 = new GraceString("\n");
                                                              var opresult13527 = callmethodChecked(var_s, "++(1)", [1], string13524);
                                                              var_s = opresult13527;
                                                              setLineNumber(1991);    // compilenode identifier
                                                              var opresult13531 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                                              // call case 6: other requests
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13533 = callmethodChecked(this, "value", []);
                                                              var call13534 = callmethodChecked(call13533, "pretty(1)", [1], opresult13531);
                                                              var opresult13538 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                                              var opresult13540 = callmethodChecked(opresult13538, "++(1)", [1], call13534);
                                                              var_s = opresult13540;
                                                              setLineNumber(1992);    // compilenode identifier
                                                              return var_s;
                                                            };
                                                            func13493.paramCounts = [1];
                                                            obj13446.methods["pretty(1)"] = func13493;
                                                            func13493.definitionLine = 1983;
                                                            func13493.definitionModule = "ast";
                                                            var func13541 = function(argcv) {    // method toGrace(_)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_depth = arguments[curarg];
                                                              curarg++;
                                                              // Start argument checking
                                                              curarg = 1;
                                                              setLineNumber(1994);    // compilenode identifier
                                                              if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                          callmethod(var_Number, "asString", [0])._value + "."));
                                                              curarg++;
                                                              // End argument checking
                                                              setModuleName("ast");
                                                              setLineNumber(1995);    // compilenode string
                                                              var string13542 = new GraceString("");
                                                              var var_spc = string13542;
                                                              setLineNumber(1996);    // compilenode identifier
                                                              var diff13546 = callmethodChecked(var_depth, "-(1)", [1], new GraceNum(1));
                                                              var opresult13549 = callmethodChecked(new GraceNum(0), "..(1)", [1], diff13546);
                                                              var block13550 = new GraceBlock(this, 1996, 1);
                                                              setLineNumber(1);    // compilenode identifier
                                                              block13550.real = function(var_i) {
                                                                setLineNumber(1997);    // compilenode string
                                                                var string13551 = new GraceString("    ");
                                                                var opresult13554 = callmethodChecked(var_spc, "++(1)", [1], string13551);
                                                                var_spc = opresult13554;
                                                                return GraceDone;
                                                              };
                                                              // call case 5: prelude request
                                                              var call13555 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult13549, block13550);
                                                              setLineNumber(1999);    // compilenode identifier
                                                              var opresult13559 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                                              // call case 6: other requests
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13561 = callmethodChecked(this, "dest", []);
                                                              var call13562 = callmethodChecked(call13561, "toGrace(1)", [1], opresult13559);
                                                              var var_s = call13562;
                                                              setLineNumber(2000);    // compilenode identifier
                                                              var opresult13566 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                                              // call case 6: other requests
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13568 = callmethodChecked(this, "value", []);
                                                              var call13569 = callmethodChecked(call13568, "toGrace(1)", [1], opresult13566);
                                                              var string13571 = new GraceString(" := ");
                                                              var opresult13574 = callmethodChecked(var_s, "++(1)", [1], string13571);
                                                              var opresult13576 = callmethodChecked(opresult13574, "++(1)", [1], call13569);
                                                              var_s = opresult13576;
                                                              setLineNumber(2001);    // return value
                                                              if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], var_s)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method toGrace(_) does not have " + 
                                                                          callmethod(var_String, "asString", [0])._value + "."));
                                                              return var_s;
                                                            };
                                                            func13541.paramTypes = [];
                                                            func13541.paramTypes.push([type_Number, "depth"]);
                                                            func13541.paramCounts = [1];
                                                            obj13446.methods["toGrace(1)"] = func13541;
                                                            func13541.definitionLine = 1994;
                                                            func13541.definitionModule = "ast";
                                                            var func13577 = function(argcv) {    // method shallowCopy
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              setModuleName("ast");
                                                              setLineNumber(2004);    // compilenode identifier
                                                              // call case 6: other requests
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13581 = callmethodChecked(this, "dest", []);
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13583 = callmethodChecked(this, "value", []);
                                                              // call case 6: other requests
                                                              var call13584 = callmethodChecked(var_bindNode, "new(2)", [2], call13581, call13583);
                                                              var call13585 = callmethodChecked(call13584, "shallowCopyFieldsFrom(1)", [1], this);
                                                              return call13585;
                                                            };
                                                            func13577.paramCounts = [0];
                                                            obj13446.methods["shallowCopy"] = func13577;
                                                            func13577.definitionLine = 2003;
                                                            func13577.definitionModule = "ast";
                                                            var func13586 = function(argcv) {    // method statementName
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              setModuleName("ast");
                                                              setLineNumber(2006);    // compilenode string
                                                              var string13587 = new GraceString("assignment or assigment request");
                                                              return string13587;
                                                            };
                                                            func13586.paramCounts = [0];
                                                            obj13446.methods["statementName"] = func13586;
                                                            func13586.definitionLine = 2006;
                                                            func13586.definitionModule = "ast";
                                                            setLineNumber(1962);    // compilenode identifier
                                                            // call case 6: other requests
                                                            // call case 6: other requests
                                                            // call case 3: self.outer request
                                                            var call13591 = callmethodChecked(superDepth, "outer", [0]);
                                                            var call13592 = callmethodChecked(call13591, "outer", []);
                                                            var call13593 = callmethodChecked(call13592, "baseNode$object(1)", [0, 1], this);
                                                            obj13446.superobj = call13593;
                                                            if (call13593.data) obj13446.data = call13593.data;
                                                            if (call13593.hasOwnProperty('_value'))
                                                                obj13446._value = call13593._value;
                                                            setLineNumber(1963);    // compilenode string
                                                            var string13594 = new GraceString("bind");
                                                            obj13446.data["kind"] = string13594;
                                                            var reader_ast_kind13595 = function() {
                                                              return this.data["kind"];
                                                            };
                                                            reader_ast_kind13595.def = true;
                                                            obj13446.methods["kind"] = reader_ast_kind13595;
                                                            setLineNumber(1964);    // compilenode identifier
                                                            obj13446.data["dest"] = var_dest__39__;
                                                            var reader_ast_dest13596 = function() {
                                                              return this.data["dest"];
                                                            };
                                                            obj13446.methods["dest"] = reader_ast_dest13596;
                                                            obj13446.data["dest"] = var_dest__39__;
                                                            var writer_ast_dest13596 = function(argcv, o) {
                                                              this.data["dest"] = o;
                                                              return GraceDone;
                                                            };
                                                            obj13446.methods["dest:=(1)"] = writer_ast_dest13596;
                                                            obj13446.mutable = true;
                                                            setLineNumber(1965);    // compilenode identifier
                                                            obj13446.data["value"] = var_val__39__;
                                                            var reader_ast_value13597 = function() {
                                                              return this.data["value"];
                                                            };
                                                            obj13446.methods["value"] = reader_ast_value13597;
                                                            obj13446.data["value"] = var_val__39__;
                                                            var writer_ast_value13597 = function(argcv, o) {
                                                              this.data["value"] = o;
                                                              return GraceDone;
                                                            };
                                                            obj13446.methods["value:=(1)"] = writer_ast_value13597;
                                                            obj13446.mutable = true;
                                                            superDepth = origSuperDepth;
                                                          };
                                                          obj_init_13446.apply(inheritingObject, []);
                                                          return obj13446;
                                                          };
                                                          obj13290.methods["new(2)$object(1)"] = func13445;
                                                        superDepth = origSuperDepth;
                                                      };
                                                      obj_init_13290.apply(obj13290, []);
                                                      var var_bindNode = obj13290;
                                                      setLineNumber(1);    // compilenode method
                                                      var func13598 = function(argcv) {    // method bindNode
                                                        var returnTarget = invocationCount;
                                                        invocationCount++;
                                                        var curarg = 1;
                                                        setModuleName("ast");
                                                        // bindNode is a simple accessor - elide try ... catch
                                                        setLineNumber(1959);    // compilenode identifier
                                                        return var_bindNode;
                                                      };
                                                      func13598.paramCounts = [0];
                                                      this.methods["bindNode"] = func13598;
                                                      func13598.definitionLine = 1;
                                                      func13598.definitionModule = "ast";
                                                      this.methods["bindNode"].debug = "def";
                                                      setLineNumber(2009);    // compilenode object
                                                      var obj13599 = Grace_allocObject(GraceObject, "defDecNode");
                                                      obj13599.definitionModule = "ast";
                                                      obj13599.definitionLine = 2009;
                                                      obj13599.outer = this;
                                                      var reader_ast_outer13600 = function() {
                                                        return this.outer;
                                                      };
                                                      obj13599.methods["outer"] = reader_ast_outer13600;
                                                      var obj_init_13599 = function() {
                                                        var origSuperDepth = superDepth;
                                                        superDepth = obj13599;
                                                        var func13601 = function(argcv) {    // method new(_,_,_)scope(_)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_name__39__ = arguments[curarg];
                                                          curarg++;
                                                          var var_val = arguments[curarg];
                                                          curarg++;
                                                          var var_dtype__39__ = arguments[curarg];
                                                          curarg++;
                                                          var var_s = arguments[curarg];
                                                          curarg++;
                                                          setModuleName("ast");
                                                          setLineNumber(2011);    // compilenode identifier
                                                          // call case 4: self request
                                                          onSelf = true;
                                                          var call13603 = callmethodChecked(this, "new(3)", [3], var_name__39__, var_val, var_dtype__39__);
                                                          var var_result = call13603;
                                                          setLineNumber(2012);    // compilenode identifier
                                                          // call case 6: other requests
                                                          var call13605 = callmethodChecked(var_result, "scope:=(1)", [1], var_s);
                                                          setLineNumber(2013);    // compilenode identifier
                                                          return var_result;
                                                        };
                                                        func13601.paramCounts = [3, 1];
                                                        obj13599.methods["new(3)scope(1)"] = func13601;
                                                        func13601.definitionLine = 2010;
                                                        func13601.definitionModule = "ast";
                                                        var func13606 = function(argcv) {    // method new(_,_,_)
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          var var_name__39__ = arguments[curarg];
                                                          curarg++;
                                                          var var_val = arguments[curarg];
                                                          curarg++;
                                                          var var_dtype__39__ = arguments[curarg];
                                                          curarg++;
                                                          setModuleName("ast");
                                                          setLineNumber(2016);    // compilenode object
                                                          var obj13607 = Grace_allocObject(null, "defDecNode.new(_,_,_)");
                                                          obj13607.definitionModule = "ast";
                                                          obj13607.definitionLine = 2016;
                                                          obj13607.outer = this;
                                                          var reader_ast_outer13608 = function() {
                                                            return this.outer;
                                                          };
                                                          obj13607.methods["outer"] = reader_ast_outer13608;
                                                          var obj_init_13607 = function() {
                                                            var origSuperDepth = superDepth;
                                                            superDepth = obj13607;
                                                            var func13609 = function(argcv) {    // method isPublic
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              setModuleName("ast");
                                                              var if13610 = GraceDone;
                                                              setLineNumber(2028);    // compilenode member
                                                              // call case 6: other requests
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13614 = callmethodChecked(this, "annotations", []);
                                                              var call13615 = callmethodChecked(call13614, "size", []);
                                                              var opresult13617 = callmethodChecked(call13615, "==(1)", [1], new GraceNum(0));
                                                              if (Grace_isTrue(opresult13617)) {
                                                                return GraceFalse;
                                                              }
                                                              var if13618 = GraceDone;
                                                              setLineNumber(2029);    // compilenode string
                                                              var string13620 = new GraceString("public");
                                                              // call case 6: other requests
                                                              // call case 6: other requests
                                                              // call case 3: self.outer request
                                                              var call13623 = callmethodChecked(superDepth, "outer", [0]);
                                                              var call13624 = callmethodChecked(call13623, "outer", []);
                                                              onSelf = true;
                                                              var call13625 = callmethodChecked(call13624, "findAnnotation(2)", [2], this, string13620);
                                                              if (Grace_isTrue(call13625)) {
                                                                return GraceTrue;
                                                              }
                                                              setLineNumber(2030);    // compilenode string
                                                              var string13627 = new GraceString("readable");
                                                              // call case 6: other requests
                                                              // call case 6: other requests
                                                              // call case 3: self.outer request
                                                              var call13630 = callmethodChecked(superDepth, "outer", [0]);
                                                              var call13631 = callmethodChecked(call13630, "outer", []);
                                                              onSelf = true;
                                                              var call13632 = callmethodChecked(call13631, "findAnnotation(2)", [2], this, string13627);
                                                              return call13632;
                                                            };
                                                            func13609.paramCounts = [0];
                                                            obj13607.methods["isPublic"] = func13609;
                                                            func13609.definitionLine = 2026;
                                                            func13609.definitionModule = "ast";
                                                            var func13633 = function(argcv) {    // method isFieldDec
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              setModuleName("ast");
                                                              // isFieldDec is a simple accessor - elide try ... catch
                                                              setLineNumber(2032);    // compilenode identifier
                                                              return GraceTrue;
                                                            };
                                                            func13633.paramCounts = [0];
                                                            obj13607.methods["isFieldDec"] = func13633;
                                                            func13633.definitionLine = 2032;
                                                            func13633.definitionModule = "ast";
                                                            var func13634 = function(argcv) {    // method isWritable
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              setModuleName("ast");
                                                              // isWritable is a simple accessor - elide try ... catch
                                                              setLineNumber(2033);    // compilenode identifier
                                                              return GraceFalse;
                                                            };
                                                            func13634.paramCounts = [0];
                                                            obj13607.methods["isWritable"] = func13634;
                                                            func13634.definitionLine = 2033;
                                                            func13634.definitionModule = "ast";
                                                            var func13635 = function(argcv) {    // method isReadable
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              setModuleName("ast");
                                                              setLineNumber(2034);    // compilenode member
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13637 = callmethodChecked(this, "isPublic", []);
                                                              return call13637;
                                                            };
                                                            func13635.paramCounts = [0];
                                                            obj13607.methods["isReadable"] = func13635;
                                                            func13635.definitionLine = 2034;
                                                            func13635.definitionModule = "ast";
                                                            var func13638 = function(argcv) {    // method returnsObject
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              setModuleName("ast");
                                                              setLineNumber(2037);    // compilenode member
                                                              // call case 6: other requests
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13641 = callmethodChecked(this, "value", []);
                                                              var call13642 = callmethodChecked(call13641, "returnsObject", []);
                                                              return call13642;
                                                            };
                                                            func13638.paramCounts = [0];
                                                            obj13607.methods["returnsObject"] = func13638;
                                                            func13638.definitionLine = 2036;
                                                            func13638.definitionModule = "ast";
                                                            var func13643 = function(argcv) {    // method returnedObjectScope
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              setModuleName("ast");
                                                              setLineNumber(2041);    // compilenode member
                                                              // call case 6: other requests
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13646 = callmethodChecked(this, "value", []);
                                                              var call13647 = callmethodChecked(call13646, "returnedObjectScope", []);
                                                              return call13647;
                                                            };
                                                            func13643.paramCounts = [0];
                                                            obj13607.methods["returnedObjectScope"] = func13643;
                                                            func13643.definitionLine = 2039;
                                                            func13643.definitionModule = "ast";
                                                            var func13648 = function(argcv) {    // method usesAsType(_)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_aNode = arguments[curarg];
                                                              curarg++;
                                                              setModuleName("ast");
                                                              setLineNumber(2044);    // compilenode member
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13650 = callmethodChecked(this, "dtype", []);
                                                              var opresult13653 = callmethodChecked(var_aNode, "==(1)", [1], call13650);
                                                              return opresult13653;
                                                            };
                                                            func13648.paramCounts = [1];
                                                            obj13607.methods["usesAsType(1)"] = func13648;
                                                            func13648.definitionLine = 2043;
                                                            func13648.definitionModule = "ast";
                                                            var func13654 = function(argcv) {    // method declarationKindWithAncestors(_)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_as = arguments[curarg];
                                                              curarg++;
                                                              setModuleName("ast");
                                                              setLineNumber(2046);    // compilenode member
                                                              // call case 6: other requests
                                                              var call13656 = callmethodChecked(var_k, "defdec", []);
                                                              return call13656;
                                                            };
                                                            func13654.paramCounts = [1];
                                                            obj13607.methods["declarationKindWithAncestors(1)"] = func13654;
                                                            func13654.definitionLine = 2046;
                                                            func13654.definitionModule = "ast";
                                                            var func13657 = function(argcv) {    // method accept(_)from(_)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_visitor = arguments[curarg];
                                                              curarg++;
                                                              var var_as = arguments[curarg];
                                                              curarg++;
                                                              // Start argument checking
                                                              curarg = 1;
                                                              setLineNumber(2048);    // compilenode identifier
                                                              if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                          callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                              curarg++;
                                                              curarg++;
                                                              // End argument checking
                                                              setModuleName("ast");
                                                              var if13658 = GraceDone;
                                                              setLineNumber(2049);    // compilenode identifier
                                                              // call case 6: other requests
                                                              var call13660 = callmethodChecked(var_visitor, "visitDefDec(1)up(1)", [1, 1], this, var_as);
                                                              if (Grace_isTrue(call13660)) {
                                                                setLineNumber(2050);    // compilenode identifier
                                                                // call case 6: other requests
                                                                var call13662 = callmethodChecked(var_as, "extend(1)", [1], this);
                                                                var var_newChain = call13662;
                                                                setLineNumber(2051);    // compilenode identifier
                                                                // call case 6: other requests
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call13665 = callmethodChecked(this, "name", []);
                                                                var call13666 = callmethodChecked(call13665, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                                var if13667 = GraceDone;
                                                                setLineNumber(2052);    // compilenode member
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call13669 = callmethodChecked(this, "dtype", []);
                                                                var opresult13672 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call13669);
                                                                if (Grace_isTrue(opresult13672)) {
                                                                  setLineNumber(2053);    // compilenode identifier
                                                                  // call case 6: other requests
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call13675 = callmethodChecked(this, "dtype", []);
                                                                  var call13676 = callmethodChecked(call13675, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                                  if13667 = call13676;
                                                                }
                                                                setLineNumber(2055);    // compilenode member
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call13679 = callmethodChecked(this, "annotations", []);
                                                                var block13680 = new GraceBlock(this, 2055, 1);
                                                                setLineNumber(1);    // compilenode identifier
                                                                block13680.real = function(var_ann) {
                                                                  setLineNumber(2056);    // compilenode identifier
                                                                  // call case 6: other requests
                                                                  var call13682 = callmethodChecked(var_ann, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                                  return call13682;
                                                                };
                                                                // call case 5: prelude request
                                                                var call13683 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call13679, block13680);
                                                                setLineNumber(2058);    // compilenode identifier
                                                                // call case 6: other requests
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call13686 = callmethodChecked(this, "value", []);
                                                                var call13687 = callmethodChecked(call13686, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                                if13658 = call13687;
                                                              }
                                                              return if13658;
                                                            };
                                                            func13657.paramTypes = [];
                                                            func13657.paramTypes.push([]);
                                                            func13657.paramTypes.push([]);
                                                            func13657.paramCounts = [1, 1];
                                                            obj13607.methods["accept(1)from(1)"] = func13657;
                                                            func13657.definitionLine = 2048;
                                                            func13657.definitionModule = "ast";
                                                            var func13688 = function(argcv) {    // method map(_)ancestors(_)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_blk = arguments[curarg];
                                                              curarg++;
                                                              var var_as = arguments[curarg];
                                                              curarg++;
                                                              setModuleName("ast");
                                                              setLineNumber(2062);    // compilenode member
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13690 = callmethodChecked(this, "shallowCopy", []);
                                                              var var_n = call13690;
                                                              setLineNumber(2063);    // compilenode identifier
                                                              // call case 6: other requests
                                                              var call13692 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                                              var var_newChain = call13692;
                                                              setLineNumber(2064);    // compilenode identifier
                                                              // call case 6: other requests
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13696 = callmethodChecked(this, "name", []);
                                                              var call13697 = callmethodChecked(call13696, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
                                                              // call case 6: other requests
                                                              var call13698 = callmethodChecked(var_n, "name:=(1)", [1], call13697);
                                                              setLineNumber(2065);    // compilenode identifier
                                                              // call case 6: other requests
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13702 = callmethodChecked(this, "value", []);
                                                              var call13703 = callmethodChecked(call13702, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
                                                              // call case 6: other requests
                                                              var call13704 = callmethodChecked(var_n, "value:=(1)", [1], call13703);
                                                              setLineNumber(2066);    // compilenode member
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13708 = callmethodChecked(this, "dtype", []);
                                                              // call case 6: other requests
                                                              // call case 6: other requests
                                                              // call case 3: self.outer request
                                                              var call13711 = callmethodChecked(superDepth, "outer", [0]);
                                                              var call13712 = callmethodChecked(call13711, "outer", []);
                                                              onSelf = true;
                                                              var call13713 = callmethodChecked(call13712, "maybeMap(2)ancestors(1)", [2, 1], call13708, var_blk, var_newChain);
                                                              // call case 6: other requests
                                                              var call13714 = callmethodChecked(var_n, "dtype:=(1)", [1], call13713);
                                                              setLineNumber(2067);    // compilenode member
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13718 = callmethodChecked(this, "annotations", []);
                                                              // call case 6: other requests
                                                              // call case 6: other requests
                                                              // call case 3: self.outer request
                                                              var call13721 = callmethodChecked(superDepth, "outer", [0]);
                                                              var call13722 = callmethodChecked(call13721, "outer", []);
                                                              onSelf = true;
                                                              var call13723 = callmethodChecked(call13722, "listMap(2)ancestors(1)", [2, 1], call13718, var_blk, var_newChain);
                                                              // call case 6: other requests
                                                              var call13724 = callmethodChecked(var_n, "annotations:=(1)", [1], call13723);
                                                              setLineNumber(2068);    // compilenode identifier
                                                              // call case 6: other requests
                                                              var call13726 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                                              return call13726;
                                                            };
                                                            func13688.paramCounts = [1, 1];
                                                            obj13607.methods["map(1)ancestors(1)"] = func13688;
                                                            func13688.definitionLine = 2061;
                                                            func13688.definitionModule = "ast";
                                                            var func13727 = function(argcv) {    // method pretty(_)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_depth = arguments[curarg];
                                                              curarg++;
                                                              setModuleName("ast");
                                                              setLineNumber(2071);    // compilenode string
                                                              var string13728 = new GraceString("");
                                                              var var_spc = string13728;
                                                              setLineNumber(2072);    // compilenode num
                                                              var opresult13732 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                                                              var block13733 = new GraceBlock(this, 2072, 1);
                                                              setLineNumber(1);    // compilenode identifier
                                                              block13733.real = function(var_i) {
                                                                setLineNumber(2073);    // compilenode string
                                                                var string13734 = new GraceString("  ");
                                                                var opresult13737 = callmethodChecked(var_spc, "++(1)", [1], string13734);
                                                                var_spc = opresult13737;
                                                                return GraceDone;
                                                              };
                                                              // call case 5: prelude request
                                                              var call13738 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult13732, block13733);
                                                              setLineNumber(2075);    // compilenode string
                                                              var string13739 = new GraceString("\n");
                                                              // call case 1: super request
                                                              var call13742 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                                              var opresult13744 = callmethodChecked(call13742, "++(1)", [1], string13739);
                                                              var var_s = opresult13744;
                                                              setLineNumber(2076);    // compilenode identifier
                                                              // call case 6: other requests
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13747 = callmethodChecked(this, "name", []);
                                                              var call13748 = callmethodChecked(call13747, "pretty(1)", [1], var_depth);
                                                              var opresult13752 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                                              var opresult13754 = callmethodChecked(opresult13752, "++(1)", [1], call13748);
                                                              var_s = opresult13754;
                                                              var if13755 = GraceDone;
                                                              setLineNumber(2077);    // compilenode member
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13757 = callmethodChecked(this, "dtype", []);
                                                              var opresult13760 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call13757);
                                                              if (Grace_isTrue(opresult13760)) {
                                                                setLineNumber(2078);    // compilenode identifier
                                                                var opresult13764 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                                                // call case 6: other requests
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call13766 = callmethodChecked(this, "dtype", []);
                                                                var call13767 = callmethodChecked(call13766, "pretty(1)", [1], opresult13764);
                                                                var string13769 = new GraceString("Type: ");
                                                                var string13772 = new GraceString("\n");
                                                                var opresult13775 = callmethodChecked(var_s, "++(1)", [1], string13772);
                                                                var opresult13777 = callmethodChecked(opresult13775, "++(1)", [1], var_spc);
                                                                var opresult13779 = callmethodChecked(opresult13777, "++(1)", [1], string13769);
                                                                var opresult13781 = callmethodChecked(opresult13779, "++(1)", [1], call13767);
                                                                var_s = opresult13781;
                                                                if13755 = GraceDone;
                                                              }
                                                              var if13782 = GraceDone;
                                                              setLineNumber(2080);    // compilenode member
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13784 = callmethodChecked(this, "value", []);
                                                              var opresult13787 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call13784);
                                                              if (Grace_isTrue(opresult13787)) {
                                                                setLineNumber(2081);    // compilenode identifier
                                                                var opresult13791 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                                                // call case 6: other requests
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call13793 = callmethodChecked(this, "value", []);
                                                                var call13794 = callmethodChecked(call13793, "pretty(1)", [1], opresult13791);
                                                                var string13796 = new GraceString("Value: ");
                                                                var string13799 = new GraceString("\n");
                                                                var opresult13802 = callmethodChecked(var_s, "++(1)", [1], string13799);
                                                                var opresult13804 = callmethodChecked(opresult13802, "++(1)", [1], var_spc);
                                                                var opresult13806 = callmethodChecked(opresult13804, "++(1)", [1], string13796);
                                                                var opresult13808 = callmethodChecked(opresult13806, "++(1)", [1], call13794);
                                                                var_s = opresult13808;
                                                                if13782 = GraceDone;
                                                              }
                                                              var if13809 = GraceDone;
                                                              setLineNumber(2083);    // compilenode member
                                                              // call case 6: other requests
                                                              // call case 6: other requests
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13813 = callmethodChecked(this, "annotations", []);
                                                              var call13814 = callmethodChecked(call13813, "isEmpty", []);
                                                              var call13815 = callmethodChecked(call13814, "not", []);
                                                              if (Grace_isTrue(call13815)) {
                                                                setLineNumber(2084);    // compilenode string
                                                                var string13816 = new GraceString("Annotations:");
                                                                var string13819 = new GraceString("\n");
                                                                var opresult13821 = callmethodChecked(string13819, "++(1)", [1], var_spc);
                                                                var opresult13823 = callmethodChecked(opresult13821, "++(1)", [1], string13816);
                                                                var opresult13826 = callmethodChecked(var_s, "++(1)", [1], opresult13823);
                                                                var_s = opresult13826;
                                                                setLineNumber(2085);    // compilenode block
                                                                var block13828 = new GraceBlock(this, 2085, 1);
                                                                setLineNumber(1);    // compilenode identifier
                                                                block13828.real = function(var_ann) {
                                                                  setLineNumber(2086);    // compilenode string
                                                                  var string13829 = new GraceString("");
                                                                  var opresult13834 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                                                  // call case 6: other requests
                                                                  var call13835 = callmethodChecked(var_ann, "pretty(1)", [1], opresult13834);
                                                                  var string13837 = new GraceString(" ");
                                                                  var string13840 = new GraceString("");
                                                                  var opresult13842 = callmethodChecked(string13840, "++(1)", [1], var_s);
                                                                  var opresult13844 = callmethodChecked(opresult13842, "++(1)", [1], string13837);
                                                                  var opresult13846 = callmethodChecked(opresult13844, "++(1)", [1], call13835);
                                                                  var opresult13848 = callmethodChecked(opresult13846, "++(1)", [1], string13829);
                                                                  var_s = opresult13848;
                                                                  return GraceDone;
                                                                };
                                                                // call case 6: other requests
                                                                setLineNumber(2085);    // compilenode member
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call13850 = callmethodChecked(this, "annotations", []);
                                                                var call13851 = callmethodChecked(call13850, "do(1)", [1], block13828);
                                                                if13809 = call13851;
                                                              }
                                                              var if13852 = GraceDone;
                                                              setLineNumber(2089);    // compilenode member
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13854 = callmethodChecked(this, "comments", []);
                                                              var opresult13857 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call13854);
                                                              if (Grace_isTrue(opresult13857)) {
                                                                setLineNumber(2090);    // compilenode identifier
                                                                var opresult13861 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                                                // call case 6: other requests
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call13863 = callmethodChecked(this, "comments", []);
                                                                var call13864 = callmethodChecked(call13863, "pretty(1)", [1], opresult13861);
                                                                var opresult13867 = callmethodChecked(var_s, "++(1)", [1], call13864);
                                                                var_s = opresult13867;
                                                                if13852 = GraceDone;
                                                              }
                                                              setLineNumber(2092);    // compilenode identifier
                                                              return var_s;
                                                            };
                                                            func13727.paramCounts = [1];
                                                            obj13607.methods["pretty(1)"] = func13727;
                                                            func13727.definitionLine = 2070;
                                                            func13727.definitionModule = "ast";
                                                            var func13868 = function(argcv) {    // method toGrace(_)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_depth = arguments[curarg];
                                                              curarg++;
                                                              // Start argument checking
                                                              curarg = 1;
                                                              setLineNumber(2094);    // compilenode identifier
                                                              if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                          callmethod(var_Number, "asString", [0])._value + "."));
                                                              curarg++;
                                                              // End argument checking
                                                              setModuleName("ast");
                                                              setLineNumber(2095);    // compilenode string
                                                              var string13869 = new GraceString("");
                                                              var var_spc = string13869;
                                                              setLineNumber(2096);    // compilenode identifier
                                                              var diff13873 = callmethodChecked(var_depth, "-(1)", [1], new GraceNum(1));
                                                              var opresult13876 = callmethodChecked(new GraceNum(0), "..(1)", [1], diff13873);
                                                              var block13877 = new GraceBlock(this, 2096, 1);
                                                              setLineNumber(1);    // compilenode identifier
                                                              block13877.real = function(var_i) {
                                                                setLineNumber(2097);    // compilenode string
                                                                var string13878 = new GraceString("    ");
                                                                var opresult13881 = callmethodChecked(var_spc, "++(1)", [1], string13878);
                                                                var_spc = opresult13881;
                                                                return GraceDone;
                                                              };
                                                              // call case 5: prelude request
                                                              var call13882 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult13876, block13877);
                                                              setLineNumber(2099);    // compilenode string
                                                              var string13883 = new GraceString("");
                                                              // call case 6: other requests
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13887 = callmethodChecked(this, "name", []);
                                                              var call13888 = callmethodChecked(call13887, "toGrace(1)", [1], new GraceNum(0));
                                                              var string13890 = new GraceString("def ");
                                                              var opresult13892 = callmethodChecked(string13890, "++(1)", [1], call13888);
                                                              var opresult13894 = callmethodChecked(opresult13892, "++(1)", [1], string13883);
                                                              var var_s = opresult13894;
                                                              var if13895 = GraceDone;
                                                              setLineNumber(2100);    // compilenode block
                                                              var block13896 = new GraceBlock(this, 2100, 0);
                                                              block13896.real = function() {
                                                                setLineNumber(2101);    // compilenode string
                                                                var string13897 = new GraceString("Unknown");
                                                                // call case 6: other requests
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call13901 = callmethodChecked(this, "dtype", []);
                                                                var call13902 = callmethodChecked(call13901, "value", []);
                                                                var opresult13904 = callmethodChecked(call13902, "\u2260(1)", [1], string13897);
                                                                return opresult13904;
                                                              };
                                                              setLineNumber(2100);    // compilenode member
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13907 = callmethodChecked(this, "dtype", []);
                                                              var opresult13910 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call13907);
                                                              var opresult13912 = callmethodChecked(opresult13910, "&&(1)", [1], block13896);
                                                              if (Grace_isTrue(opresult13912)) {
                                                                setLineNumber(2102);    // compilenode num
                                                                // call case 6: other requests
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call13915 = callmethodChecked(this, "dtype", []);
                                                                var call13916 = callmethodChecked(call13915, "toGrace(1)", [1], new GraceNum(0));
                                                                var string13918 = new GraceString(" : ");
                                                                var opresult13921 = callmethodChecked(var_s, "++(1)", [1], string13918);
                                                                var opresult13923 = callmethodChecked(opresult13921, "++(1)", [1], call13916);
                                                                var_s = opresult13923;
                                                                if13895 = GraceDone;
                                                              }
                                                              var if13924 = GraceDone;
                                                              setLineNumber(2104);    // compilenode member
                                                              // call case 6: other requests
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13928 = callmethodChecked(this, "annotations", []);
                                                              var call13929 = callmethodChecked(call13928, "size", []);
                                                              var opresult13931 = callmethodChecked(call13929, ">(1)", [1], new GraceNum(0));
                                                              if (Grace_isTrue(opresult13931)) {
                                                                setLineNumber(2105);    // compilenode string
                                                                var string13932 = new GraceString(" is ");
                                                                var opresult13935 = callmethodChecked(var_s, "++(1)", [1], string13932);
                                                                var_s = opresult13935;
                                                                setLineNumber(2106);    // compilenode block
                                                                var block13937 = new GraceBlock(this, 2106, 2);
                                                                setLineNumber(1);    // compilenode identifier
                                                                block13937.real = function(var_a, var_b) {
                                                                  setLineNumber(2107);    // compilenode num
                                                                  // call case 6: other requests
                                                                  var call13939 = callmethodChecked(var_b, "toGrace(1)", [1], new GraceNum(0));
                                                                  var if13941 = GraceDone;
                                                                  var string13942 = new GraceString("");
                                                                  var opresult13945 = callmethodChecked(var_a, "\u2260(1)", [1], string13942);
                                                                  if (Grace_isTrue(opresult13945)) {
                                                                    var string13946 = new GraceString(", ");
                                                                    var opresult13949 = callmethodChecked(var_a, "++(1)", [1], string13946);
                                                                    if13941 = opresult13949;
                                                                  } else {
                                                                    var string13950 = new GraceString("");
                                                                    if13941 = string13950;
                                                                  }
                                                                  var opresult13952 = callmethodChecked(if13941, "++(1)", [1], call13939);
                                                                  return opresult13952;
                                                                };
                                                                setLineNumber(2108);    // compilenode string
                                                                var string13953 = new GraceString("");
                                                                // call case 6: other requests
                                                                setLineNumber(2106);    // compilenode member
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call13955 = callmethodChecked(this, "annotations", []);
                                                                var call13956 = callmethodChecked(call13955, "fold(1)startingWith(1)", [1, 1], block13937, string13953);
                                                                var opresult13959 = callmethodChecked(var_s, "++(1)", [1], call13956);
                                                                var_s = opresult13959;
                                                                if13924 = GraceDone;
                                                              }
                                                              var if13960 = GraceDone;
                                                              setLineNumber(2110);    // compilenode member
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13962 = callmethodChecked(this, "value", []);
                                                              var opresult13965 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call13962);
                                                              if (Grace_isTrue(opresult13965)) {
                                                                setLineNumber(2111);    // compilenode identifier
                                                                // call case 6: other requests
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call13968 = callmethodChecked(this, "value", []);
                                                                var call13969 = callmethodChecked(call13968, "toGrace(1)", [1], var_depth);
                                                                var string13971 = new GraceString(" = ");
                                                                var opresult13974 = callmethodChecked(var_s, "++(1)", [1], string13971);
                                                                var opresult13976 = callmethodChecked(opresult13974, "++(1)", [1], call13969);
                                                                var_s = opresult13976;
                                                                if13960 = GraceDone;
                                                              }
                                                              setLineNumber(2113);    // return value
                                                              if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], var_s)))
                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                      new GraceString("result of method toGrace(_) does not have " + 
                                                                          callmethod(var_String, "asString", [0])._value + "."));
                                                              return var_s;
                                                            };
                                                            func13868.paramTypes = [];
                                                            func13868.paramTypes.push([type_Number, "depth"]);
                                                            func13868.paramCounts = [1];
                                                            obj13607.methods["toGrace(1)"] = func13868;
                                                            func13868.definitionLine = 2094;
                                                            func13868.definitionModule = "ast";
                                                            var func13977 = function(argcv) {    // method shallowCopy
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              setModuleName("ast");
                                                              setLineNumber(2116);    // compilenode identifier
                                                              // call case 6: other requests
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13981 = callmethodChecked(this, "name", []);
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13983 = callmethodChecked(this, "value", []);
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13985 = callmethodChecked(this, "dtype", []);
                                                              // call case 6: other requests
                                                              var call13986 = callmethodChecked(var_defDecNode, "new(3)", [3], call13981, call13983, call13985);
                                                              var call13987 = callmethodChecked(call13986, "shallowCopyFieldsFrom(1)", [1], this);
                                                              return call13987;
                                                            };
                                                            func13977.paramCounts = [0];
                                                            obj13607.methods["shallowCopy"] = func13977;
                                                            func13977.definitionLine = 2115;
                                                            func13977.definitionModule = "ast";
                                                            var func13988 = function(argcv) {    // method shallowCopyFieldsFrom(_)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_other = arguments[curarg];
                                                              curarg++;
                                                              setModuleName("ast");
                                                              setLineNumber(2119);    // compilenode identifier
                                                              // call case 1: super request
                                                              var call13990 = callmethodsuper(this, "shallowCopyFieldsFrom(1)", [1], var_other);
                                                              setLineNumber(2120);    // compilenode member
                                                              // call case 6: other requests
                                                              var call13993 = callmethodChecked(var_other, "startToken", []);
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call13994 = callmethodChecked(this, "startToken:=(1)", [1], call13993);
                                                              setLineNumber(2121);    // compilenode identifier
                                                              return this;
                                                            };
                                                            func13988.paramCounts = [1];
                                                            obj13607.methods["shallowCopyFieldsFrom(1)"] = func13988;
                                                            func13988.definitionLine = 2118;
                                                            func13988.definitionModule = "ast";
                                                            var func13995 = function(argcv) {    // method statementName
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              setModuleName("ast");
                                                              setLineNumber(2123);    // compilenode string
                                                              var string13996 = new GraceString("definition");
                                                              return string13996;
                                                            };
                                                            func13995.paramCounts = [0];
                                                            obj13607.methods["statementName"] = func13995;
                                                            func13995.definitionLine = 2123;
                                                            func13995.definitionModule = "ast";
                                                            setLineNumber(2017);    // compilenode identifier
                                                            // call case 6: other requests
                                                            // call case 6: other requests
                                                            // call case 3: self.outer request
                                                            var call14000 = callmethodChecked(superDepth, "outer", [0]);
                                                            var call14001 = callmethodChecked(call14000, "outer", []);
                                                            var call14002 = callmethodChecked(call14001, "baseNode$object(1)", [0, 1], this);
                                                            obj13607.superobj = call14002;
                                                            if (call14002.data) obj13607.data = call14002.data;
                                                            if (call14002.hasOwnProperty('_value'))
                                                                obj13607._value = call14002._value;
                                                            setLineNumber(2018);    // compilenode string
                                                            var string14003 = new GraceString("defdec");
                                                            obj13607.data["kind"] = string14003;
                                                            var reader_ast_kind14004 = function() {
                                                              return this.data["kind"];
                                                            };
                                                            reader_ast_kind14004.def = true;
                                                            obj13607.methods["kind"] = reader_ast_kind14004;
                                                            setLineNumber(2019);    // compilenode identifier
                                                            obj13607.data["name"] = var_name__39__;
                                                            var reader_ast_name14005 = function() {
                                                              return this.data["name"];
                                                            };
                                                            obj13607.methods["name"] = reader_ast_name14005;
                                                            obj13607.data["name"] = var_name__39__;
                                                            var writer_ast_name14005 = function(argcv, o) {
                                                              this.data["name"] = o;
                                                              return GraceDone;
                                                            };
                                                            obj13607.methods["name:=(1)"] = writer_ast_name14005;
                                                            obj13607.mutable = true;
                                                            setLineNumber(2020);    // compilenode identifier
                                                            obj13607.data["value"] = var_val;
                                                            var reader_ast_value14006 = function() {
                                                              return this.data["value"];
                                                            };
                                                            obj13607.methods["value"] = reader_ast_value14006;
                                                            obj13607.data["value"] = var_val;
                                                            var writer_ast_value14006 = function(argcv, o) {
                                                              this.data["value"] = o;
                                                              return GraceDone;
                                                            };
                                                            obj13607.methods["value:=(1)"] = writer_ast_value14006;
                                                            obj13607.mutable = true;
                                                            setLineNumber(2021);    // compilenode identifier
                                                            obj13607.data["dtype"] = var_dtype__39__;
                                                            var reader_ast_dtype14007 = function() {
                                                              return this.data["dtype"];
                                                            };
                                                            obj13607.methods["dtype"] = reader_ast_dtype14007;
                                                            obj13607.data["dtype"] = var_dtype__39__;
                                                            var writer_ast_dtype14007 = function(argcv, o) {
                                                              this.data["dtype"] = o;
                                                              return GraceDone;
                                                            };
                                                            obj13607.methods["dtype:=(1)"] = writer_ast_dtype14007;
                                                            obj13607.mutable = true;
                                                            setLineNumber(2022);    // compilenode member
                                                            // call case 6: other requests
                                                            // call case 4: self request
                                                            onSelf = true;
                                                            var call14010 = callmethodChecked(this, "name", []);
                                                            var call14011 = callmethodChecked(call14010, "nameString", []);
                                                            obj13607.data["nameString"] = call14011;
                                                            var reader_ast_nameString14012 = function() {
                                                              return this.data["nameString"];
                                                            };
                                                            reader_ast_nameString14012.def = true;
                                                            obj13607.methods["nameString"] = reader_ast_nameString14012;
                                                            setLineNumber(2023);    // compilenode array
                                                            var array14013 = new PrimitiveGraceList([]);
                                                            obj13607.data["annotations"] = array14013;
                                                            var reader_ast_annotations14014 = function() {
                                                              return this.data["annotations"];
                                                            };
                                                            obj13607.methods["annotations"] = reader_ast_annotations14014;
                                                            obj13607.data["annotations"] = array14013;
                                                            var writer_ast_annotations14014 = function(argcv, o) {
                                                              this.data["annotations"] = o;
                                                              return GraceDone;
                                                            };
                                                            obj13607.methods["annotations:=(1)"] = writer_ast_annotations14014;
                                                            obj13607.mutable = true;
                                                            setLineNumber(2024);    // compilenode identifier
                                                            obj13607.data["startToken"] = GraceFalse;
                                                            var reader_ast_startToken14015 = function() {
                                                              return this.data["startToken"];
                                                            };
                                                            obj13607.methods["startToken"] = reader_ast_startToken14015;
                                                            obj13607.data["startToken"] = GraceFalse;
                                                            var writer_ast_startToken14015 = function(argcv, o) {
                                                              this.data["startToken"] = o;
                                                              return GraceDone;
                                                            };
                                                            obj13607.methods["startToken:=(1)"] = writer_ast_startToken14015;
                                                            obj13607.mutable = true;
                                                            superDepth = origSuperDepth;
                                                          };
                                                          obj_init_13607.apply(obj13607, []);
                                                          return obj13607;
                                                        };
                                                        func13606.paramCounts = [3];
                                                        obj13599.methods["new(3)"] = func13606;
                                                        func13606.definitionLine = 2016;
                                                        func13606.definitionModule = "ast";
                                                          var func14016 = function(argcv) {    // method new(_,_,_)$object(_)
                                                            var curarg = 1;
                                                            var var_name__39__ = arguments[curarg];
                                                            curarg++;
                                                            var var_val = arguments[curarg];
                                                            curarg++;
                                                            var var_dtype__39__ = arguments[curarg];
                                                            curarg++;
                                                            var inheritingObject = arguments[curarg++];
                                                            // Start argument processing
                                                            curarg = 1;
                                                            curarg++;
                                                            curarg++;
                                                            curarg++;
                                                            // End argument processing
                                                            setModuleName("ast");
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var obj14017 = Grace_allocObject(null, "new(3)");
                                                            obj14017.definitionModule = "ast";
                                                            obj14017.definitionLine = 2016;
                                                            var inho14017 = inheritingObject;
                                                            while (inho14017.superobj) inho14017 = inho14017.superobj;
                                                            inho14017.superobj = obj14017;
                                                            obj14017.data = inheritingObject.data;
                                                            if (inheritingObject.hasOwnProperty('_value'))
                                                              obj14017._value = inheritingObject._value;
                                                            obj14017.outer = this;
                                                            var reader_ast_outer14018 = function() {
                                                              return this.outer;
                                                            };
                                                            obj14017.methods["outer"] = reader_ast_outer14018;
                                                            var obj_init_14017 = function() {
                                                              var origSuperDepth = superDepth;
                                                              superDepth = obj14017;
                                                              var func14019 = function(argcv) {    // method isPublic
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                setModuleName("ast");
                                                                var if14020 = GraceDone;
                                                                setLineNumber(2028);    // compilenode member
                                                                // call case 6: other requests
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14024 = callmethodChecked(this, "annotations", []);
                                                                var call14025 = callmethodChecked(call14024, "size", []);
                                                                var opresult14027 = callmethodChecked(call14025, "==(1)", [1], new GraceNum(0));
                                                                if (Grace_isTrue(opresult14027)) {
                                                                  return GraceFalse;
                                                                }
                                                                var if14028 = GraceDone;
                                                                setLineNumber(2029);    // compilenode string
                                                                var string14030 = new GraceString("public");
                                                                // call case 6: other requests
                                                                // call case 6: other requests
                                                                // call case 3: self.outer request
                                                                var call14033 = callmethodChecked(superDepth, "outer", [0]);
                                                                var call14034 = callmethodChecked(call14033, "outer", []);
                                                                onSelf = true;
                                                                var call14035 = callmethodChecked(call14034, "findAnnotation(2)", [2], this, string14030);
                                                                if (Grace_isTrue(call14035)) {
                                                                  return GraceTrue;
                                                                }
                                                                setLineNumber(2030);    // compilenode string
                                                                var string14037 = new GraceString("readable");
                                                                // call case 6: other requests
                                                                // call case 6: other requests
                                                                // call case 3: self.outer request
                                                                var call14040 = callmethodChecked(superDepth, "outer", [0]);
                                                                var call14041 = callmethodChecked(call14040, "outer", []);
                                                                onSelf = true;
                                                                var call14042 = callmethodChecked(call14041, "findAnnotation(2)", [2], this, string14037);
                                                                return call14042;
                                                              };
                                                              func14019.paramCounts = [0];
                                                              obj14017.methods["isPublic"] = func14019;
                                                              func14019.definitionLine = 2026;
                                                              func14019.definitionModule = "ast";
                                                              var func14043 = function(argcv) {    // method isFieldDec
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                setModuleName("ast");
                                                                // isFieldDec is a simple accessor - elide try ... catch
                                                                setLineNumber(2032);    // compilenode identifier
                                                                return GraceTrue;
                                                              };
                                                              func14043.paramCounts = [0];
                                                              obj14017.methods["isFieldDec"] = func14043;
                                                              func14043.definitionLine = 2032;
                                                              func14043.definitionModule = "ast";
                                                              var func14044 = function(argcv) {    // method isWritable
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                setModuleName("ast");
                                                                // isWritable is a simple accessor - elide try ... catch
                                                                setLineNumber(2033);    // compilenode identifier
                                                                return GraceFalse;
                                                              };
                                                              func14044.paramCounts = [0];
                                                              obj14017.methods["isWritable"] = func14044;
                                                              func14044.definitionLine = 2033;
                                                              func14044.definitionModule = "ast";
                                                              var func14045 = function(argcv) {    // method isReadable
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                setModuleName("ast");
                                                                setLineNumber(2034);    // compilenode member
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14047 = callmethodChecked(this, "isPublic", []);
                                                                return call14047;
                                                              };
                                                              func14045.paramCounts = [0];
                                                              obj14017.methods["isReadable"] = func14045;
                                                              func14045.definitionLine = 2034;
                                                              func14045.definitionModule = "ast";
                                                              var func14048 = function(argcv) {    // method returnsObject
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                setModuleName("ast");
                                                                setLineNumber(2037);    // compilenode member
                                                                // call case 6: other requests
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14051 = callmethodChecked(this, "value", []);
                                                                var call14052 = callmethodChecked(call14051, "returnsObject", []);
                                                                return call14052;
                                                              };
                                                              func14048.paramCounts = [0];
                                                              obj14017.methods["returnsObject"] = func14048;
                                                              func14048.definitionLine = 2036;
                                                              func14048.definitionModule = "ast";
                                                              var func14053 = function(argcv) {    // method returnedObjectScope
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                setModuleName("ast");
                                                                setLineNumber(2041);    // compilenode member
                                                                // call case 6: other requests
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14056 = callmethodChecked(this, "value", []);
                                                                var call14057 = callmethodChecked(call14056, "returnedObjectScope", []);
                                                                return call14057;
                                                              };
                                                              func14053.paramCounts = [0];
                                                              obj14017.methods["returnedObjectScope"] = func14053;
                                                              func14053.definitionLine = 2039;
                                                              func14053.definitionModule = "ast";
                                                              var func14058 = function(argcv) {    // method usesAsType(_)
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                var var_aNode = arguments[curarg];
                                                                curarg++;
                                                                setModuleName("ast");
                                                                setLineNumber(2044);    // compilenode member
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14060 = callmethodChecked(this, "dtype", []);
                                                                var opresult14063 = callmethodChecked(var_aNode, "==(1)", [1], call14060);
                                                                return opresult14063;
                                                              };
                                                              func14058.paramCounts = [1];
                                                              obj14017.methods["usesAsType(1)"] = func14058;
                                                              func14058.definitionLine = 2043;
                                                              func14058.definitionModule = "ast";
                                                              var func14064 = function(argcv) {    // method declarationKindWithAncestors(_)
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                var var_as = arguments[curarg];
                                                                curarg++;
                                                                setModuleName("ast");
                                                                setLineNumber(2046);    // compilenode member
                                                                // call case 6: other requests
                                                                var call14066 = callmethodChecked(var_k, "defdec", []);
                                                                return call14066;
                                                              };
                                                              func14064.paramCounts = [1];
                                                              obj14017.methods["declarationKindWithAncestors(1)"] = func14064;
                                                              func14064.definitionLine = 2046;
                                                              func14064.definitionModule = "ast";
                                                              var func14067 = function(argcv) {    // method accept(_)from(_)
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                var var_visitor = arguments[curarg];
                                                                curarg++;
                                                                var var_as = arguments[curarg];
                                                                curarg++;
                                                                // Start argument checking
                                                                curarg = 1;
                                                                setLineNumber(2048);    // compilenode identifier
                                                                if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                            callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                                curarg++;
                                                                curarg++;
                                                                // End argument checking
                                                                setModuleName("ast");
                                                                var if14068 = GraceDone;
                                                                setLineNumber(2049);    // compilenode identifier
                                                                // call case 6: other requests
                                                                var call14070 = callmethodChecked(var_visitor, "visitDefDec(1)up(1)", [1, 1], this, var_as);
                                                                if (Grace_isTrue(call14070)) {
                                                                  setLineNumber(2050);    // compilenode identifier
                                                                  // call case 6: other requests
                                                                  var call14072 = callmethodChecked(var_as, "extend(1)", [1], this);
                                                                  var var_newChain = call14072;
                                                                  setLineNumber(2051);    // compilenode identifier
                                                                  // call case 6: other requests
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call14075 = callmethodChecked(this, "name", []);
                                                                  var call14076 = callmethodChecked(call14075, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                                  var if14077 = GraceDone;
                                                                  setLineNumber(2052);    // compilenode member
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call14079 = callmethodChecked(this, "dtype", []);
                                                                  var opresult14082 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call14079);
                                                                  if (Grace_isTrue(opresult14082)) {
                                                                    setLineNumber(2053);    // compilenode identifier
                                                                    // call case 6: other requests
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call14085 = callmethodChecked(this, "dtype", []);
                                                                    var call14086 = callmethodChecked(call14085, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                                    if14077 = call14086;
                                                                  }
                                                                  setLineNumber(2055);    // compilenode member
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call14089 = callmethodChecked(this, "annotations", []);
                                                                  var block14090 = new GraceBlock(this, 2055, 1);
                                                                  setLineNumber(1);    // compilenode identifier
                                                                  block14090.real = function(var_ann) {
                                                                    setLineNumber(2056);    // compilenode identifier
                                                                    // call case 6: other requests
                                                                    var call14092 = callmethodChecked(var_ann, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                                    return call14092;
                                                                  };
                                                                  // call case 5: prelude request
                                                                  var call14093 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call14089, block14090);
                                                                  setLineNumber(2058);    // compilenode identifier
                                                                  // call case 6: other requests
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call14096 = callmethodChecked(this, "value", []);
                                                                  var call14097 = callmethodChecked(call14096, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                                  if14068 = call14097;
                                                                }
                                                                return if14068;
                                                              };
                                                              func14067.paramTypes = [];
                                                              func14067.paramTypes.push([]);
                                                              func14067.paramTypes.push([]);
                                                              func14067.paramCounts = [1, 1];
                                                              obj14017.methods["accept(1)from(1)"] = func14067;
                                                              func14067.definitionLine = 2048;
                                                              func14067.definitionModule = "ast";
                                                              var func14098 = function(argcv) {    // method map(_)ancestors(_)
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                var var_blk = arguments[curarg];
                                                                curarg++;
                                                                var var_as = arguments[curarg];
                                                                curarg++;
                                                                setModuleName("ast");
                                                                setLineNumber(2062);    // compilenode member
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14100 = callmethodChecked(this, "shallowCopy", []);
                                                                var var_n = call14100;
                                                                setLineNumber(2063);    // compilenode identifier
                                                                // call case 6: other requests
                                                                var call14102 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                                                var var_newChain = call14102;
                                                                setLineNumber(2064);    // compilenode identifier
                                                                // call case 6: other requests
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14106 = callmethodChecked(this, "name", []);
                                                                var call14107 = callmethodChecked(call14106, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
                                                                // call case 6: other requests
                                                                var call14108 = callmethodChecked(var_n, "name:=(1)", [1], call14107);
                                                                setLineNumber(2065);    // compilenode identifier
                                                                // call case 6: other requests
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14112 = callmethodChecked(this, "value", []);
                                                                var call14113 = callmethodChecked(call14112, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
                                                                // call case 6: other requests
                                                                var call14114 = callmethodChecked(var_n, "value:=(1)", [1], call14113);
                                                                setLineNumber(2066);    // compilenode member
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14118 = callmethodChecked(this, "dtype", []);
                                                                // call case 6: other requests
                                                                // call case 6: other requests
                                                                // call case 3: self.outer request
                                                                var call14121 = callmethodChecked(superDepth, "outer", [0]);
                                                                var call14122 = callmethodChecked(call14121, "outer", []);
                                                                onSelf = true;
                                                                var call14123 = callmethodChecked(call14122, "maybeMap(2)ancestors(1)", [2, 1], call14118, var_blk, var_newChain);
                                                                // call case 6: other requests
                                                                var call14124 = callmethodChecked(var_n, "dtype:=(1)", [1], call14123);
                                                                setLineNumber(2067);    // compilenode member
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14128 = callmethodChecked(this, "annotations", []);
                                                                // call case 6: other requests
                                                                // call case 6: other requests
                                                                // call case 3: self.outer request
                                                                var call14131 = callmethodChecked(superDepth, "outer", [0]);
                                                                var call14132 = callmethodChecked(call14131, "outer", []);
                                                                onSelf = true;
                                                                var call14133 = callmethodChecked(call14132, "listMap(2)ancestors(1)", [2, 1], call14128, var_blk, var_newChain);
                                                                // call case 6: other requests
                                                                var call14134 = callmethodChecked(var_n, "annotations:=(1)", [1], call14133);
                                                                setLineNumber(2068);    // compilenode identifier
                                                                // call case 6: other requests
                                                                var call14136 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                                                return call14136;
                                                              };
                                                              func14098.paramCounts = [1, 1];
                                                              obj14017.methods["map(1)ancestors(1)"] = func14098;
                                                              func14098.definitionLine = 2061;
                                                              func14098.definitionModule = "ast";
                                                              var func14137 = function(argcv) {    // method pretty(_)
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                var var_depth = arguments[curarg];
                                                                curarg++;
                                                                setModuleName("ast");
                                                                setLineNumber(2071);    // compilenode string
                                                                var string14138 = new GraceString("");
                                                                var var_spc = string14138;
                                                                setLineNumber(2072);    // compilenode num
                                                                var opresult14142 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                                                                var block14143 = new GraceBlock(this, 2072, 1);
                                                                setLineNumber(1);    // compilenode identifier
                                                                block14143.real = function(var_i) {
                                                                  setLineNumber(2073);    // compilenode string
                                                                  var string14144 = new GraceString("  ");
                                                                  var opresult14147 = callmethodChecked(var_spc, "++(1)", [1], string14144);
                                                                  var_spc = opresult14147;
                                                                  return GraceDone;
                                                                };
                                                                // call case 5: prelude request
                                                                var call14148 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult14142, block14143);
                                                                setLineNumber(2075);    // compilenode string
                                                                var string14149 = new GraceString("\n");
                                                                // call case 1: super request
                                                                var call14152 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                                                var opresult14154 = callmethodChecked(call14152, "++(1)", [1], string14149);
                                                                var var_s = opresult14154;
                                                                setLineNumber(2076);    // compilenode identifier
                                                                // call case 6: other requests
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14157 = callmethodChecked(this, "name", []);
                                                                var call14158 = callmethodChecked(call14157, "pretty(1)", [1], var_depth);
                                                                var opresult14162 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                                                var opresult14164 = callmethodChecked(opresult14162, "++(1)", [1], call14158);
                                                                var_s = opresult14164;
                                                                var if14165 = GraceDone;
                                                                setLineNumber(2077);    // compilenode member
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14167 = callmethodChecked(this, "dtype", []);
                                                                var opresult14170 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call14167);
                                                                if (Grace_isTrue(opresult14170)) {
                                                                  setLineNumber(2078);    // compilenode identifier
                                                                  var opresult14174 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                                                  // call case 6: other requests
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call14176 = callmethodChecked(this, "dtype", []);
                                                                  var call14177 = callmethodChecked(call14176, "pretty(1)", [1], opresult14174);
                                                                  var string14179 = new GraceString("Type: ");
                                                                  var string14182 = new GraceString("\n");
                                                                  var opresult14185 = callmethodChecked(var_s, "++(1)", [1], string14182);
                                                                  var opresult14187 = callmethodChecked(opresult14185, "++(1)", [1], var_spc);
                                                                  var opresult14189 = callmethodChecked(opresult14187, "++(1)", [1], string14179);
                                                                  var opresult14191 = callmethodChecked(opresult14189, "++(1)", [1], call14177);
                                                                  var_s = opresult14191;
                                                                  if14165 = GraceDone;
                                                                }
                                                                var if14192 = GraceDone;
                                                                setLineNumber(2080);    // compilenode member
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14194 = callmethodChecked(this, "value", []);
                                                                var opresult14197 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call14194);
                                                                if (Grace_isTrue(opresult14197)) {
                                                                  setLineNumber(2081);    // compilenode identifier
                                                                  var opresult14201 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                                                  // call case 6: other requests
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call14203 = callmethodChecked(this, "value", []);
                                                                  var call14204 = callmethodChecked(call14203, "pretty(1)", [1], opresult14201);
                                                                  var string14206 = new GraceString("Value: ");
                                                                  var string14209 = new GraceString("\n");
                                                                  var opresult14212 = callmethodChecked(var_s, "++(1)", [1], string14209);
                                                                  var opresult14214 = callmethodChecked(opresult14212, "++(1)", [1], var_spc);
                                                                  var opresult14216 = callmethodChecked(opresult14214, "++(1)", [1], string14206);
                                                                  var opresult14218 = callmethodChecked(opresult14216, "++(1)", [1], call14204);
                                                                  var_s = opresult14218;
                                                                  if14192 = GraceDone;
                                                                }
                                                                var if14219 = GraceDone;
                                                                setLineNumber(2083);    // compilenode member
                                                                // call case 6: other requests
                                                                // call case 6: other requests
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14223 = callmethodChecked(this, "annotations", []);
                                                                var call14224 = callmethodChecked(call14223, "isEmpty", []);
                                                                var call14225 = callmethodChecked(call14224, "not", []);
                                                                if (Grace_isTrue(call14225)) {
                                                                  setLineNumber(2084);    // compilenode string
                                                                  var string14226 = new GraceString("Annotations:");
                                                                  var string14229 = new GraceString("\n");
                                                                  var opresult14231 = callmethodChecked(string14229, "++(1)", [1], var_spc);
                                                                  var opresult14233 = callmethodChecked(opresult14231, "++(1)", [1], string14226);
                                                                  var opresult14236 = callmethodChecked(var_s, "++(1)", [1], opresult14233);
                                                                  var_s = opresult14236;
                                                                  setLineNumber(2085);    // compilenode block
                                                                  var block14238 = new GraceBlock(this, 2085, 1);
                                                                  setLineNumber(1);    // compilenode identifier
                                                                  block14238.real = function(var_ann) {
                                                                    setLineNumber(2086);    // compilenode string
                                                                    var string14239 = new GraceString("");
                                                                    var opresult14244 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                                                    // call case 6: other requests
                                                                    var call14245 = callmethodChecked(var_ann, "pretty(1)", [1], opresult14244);
                                                                    var string14247 = new GraceString(" ");
                                                                    var string14250 = new GraceString("");
                                                                    var opresult14252 = callmethodChecked(string14250, "++(1)", [1], var_s);
                                                                    var opresult14254 = callmethodChecked(opresult14252, "++(1)", [1], string14247);
                                                                    var opresult14256 = callmethodChecked(opresult14254, "++(1)", [1], call14245);
                                                                    var opresult14258 = callmethodChecked(opresult14256, "++(1)", [1], string14239);
                                                                    var_s = opresult14258;
                                                                    return GraceDone;
                                                                  };
                                                                  // call case 6: other requests
                                                                  setLineNumber(2085);    // compilenode member
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call14260 = callmethodChecked(this, "annotations", []);
                                                                  var call14261 = callmethodChecked(call14260, "do(1)", [1], block14238);
                                                                  if14219 = call14261;
                                                                }
                                                                var if14262 = GraceDone;
                                                                setLineNumber(2089);    // compilenode member
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14264 = callmethodChecked(this, "comments", []);
                                                                var opresult14267 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call14264);
                                                                if (Grace_isTrue(opresult14267)) {
                                                                  setLineNumber(2090);    // compilenode identifier
                                                                  var opresult14271 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                                                  // call case 6: other requests
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call14273 = callmethodChecked(this, "comments", []);
                                                                  var call14274 = callmethodChecked(call14273, "pretty(1)", [1], opresult14271);
                                                                  var opresult14277 = callmethodChecked(var_s, "++(1)", [1], call14274);
                                                                  var_s = opresult14277;
                                                                  if14262 = GraceDone;
                                                                }
                                                                setLineNumber(2092);    // compilenode identifier
                                                                return var_s;
                                                              };
                                                              func14137.paramCounts = [1];
                                                              obj14017.methods["pretty(1)"] = func14137;
                                                              func14137.definitionLine = 2070;
                                                              func14137.definitionModule = "ast";
                                                              var func14278 = function(argcv) {    // method toGrace(_)
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                var var_depth = arguments[curarg];
                                                                curarg++;
                                                                // Start argument checking
                                                                curarg = 1;
                                                                setLineNumber(2094);    // compilenode identifier
                                                                if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                            callmethod(var_Number, "asString", [0])._value + "."));
                                                                curarg++;
                                                                // End argument checking
                                                                setModuleName("ast");
                                                                setLineNumber(2095);    // compilenode string
                                                                var string14279 = new GraceString("");
                                                                var var_spc = string14279;
                                                                setLineNumber(2096);    // compilenode identifier
                                                                var diff14283 = callmethodChecked(var_depth, "-(1)", [1], new GraceNum(1));
                                                                var opresult14286 = callmethodChecked(new GraceNum(0), "..(1)", [1], diff14283);
                                                                var block14287 = new GraceBlock(this, 2096, 1);
                                                                setLineNumber(1);    // compilenode identifier
                                                                block14287.real = function(var_i) {
                                                                  setLineNumber(2097);    // compilenode string
                                                                  var string14288 = new GraceString("    ");
                                                                  var opresult14291 = callmethodChecked(var_spc, "++(1)", [1], string14288);
                                                                  var_spc = opresult14291;
                                                                  return GraceDone;
                                                                };
                                                                // call case 5: prelude request
                                                                var call14292 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult14286, block14287);
                                                                setLineNumber(2099);    // compilenode string
                                                                var string14293 = new GraceString("");
                                                                // call case 6: other requests
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14297 = callmethodChecked(this, "name", []);
                                                                var call14298 = callmethodChecked(call14297, "toGrace(1)", [1], new GraceNum(0));
                                                                var string14300 = new GraceString("def ");
                                                                var opresult14302 = callmethodChecked(string14300, "++(1)", [1], call14298);
                                                                var opresult14304 = callmethodChecked(opresult14302, "++(1)", [1], string14293);
                                                                var var_s = opresult14304;
                                                                var if14305 = GraceDone;
                                                                setLineNumber(2100);    // compilenode block
                                                                var block14306 = new GraceBlock(this, 2100, 0);
                                                                block14306.real = function() {
                                                                  setLineNumber(2101);    // compilenode string
                                                                  var string14307 = new GraceString("Unknown");
                                                                  // call case 6: other requests
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call14311 = callmethodChecked(this, "dtype", []);
                                                                  var call14312 = callmethodChecked(call14311, "value", []);
                                                                  var opresult14314 = callmethodChecked(call14312, "\u2260(1)", [1], string14307);
                                                                  return opresult14314;
                                                                };
                                                                setLineNumber(2100);    // compilenode member
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14317 = callmethodChecked(this, "dtype", []);
                                                                var opresult14320 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call14317);
                                                                var opresult14322 = callmethodChecked(opresult14320, "&&(1)", [1], block14306);
                                                                if (Grace_isTrue(opresult14322)) {
                                                                  setLineNumber(2102);    // compilenode num
                                                                  // call case 6: other requests
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call14325 = callmethodChecked(this, "dtype", []);
                                                                  var call14326 = callmethodChecked(call14325, "toGrace(1)", [1], new GraceNum(0));
                                                                  var string14328 = new GraceString(" : ");
                                                                  var opresult14331 = callmethodChecked(var_s, "++(1)", [1], string14328);
                                                                  var opresult14333 = callmethodChecked(opresult14331, "++(1)", [1], call14326);
                                                                  var_s = opresult14333;
                                                                  if14305 = GraceDone;
                                                                }
                                                                var if14334 = GraceDone;
                                                                setLineNumber(2104);    // compilenode member
                                                                // call case 6: other requests
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14338 = callmethodChecked(this, "annotations", []);
                                                                var call14339 = callmethodChecked(call14338, "size", []);
                                                                var opresult14341 = callmethodChecked(call14339, ">(1)", [1], new GraceNum(0));
                                                                if (Grace_isTrue(opresult14341)) {
                                                                  setLineNumber(2105);    // compilenode string
                                                                  var string14342 = new GraceString(" is ");
                                                                  var opresult14345 = callmethodChecked(var_s, "++(1)", [1], string14342);
                                                                  var_s = opresult14345;
                                                                  setLineNumber(2106);    // compilenode block
                                                                  var block14347 = new GraceBlock(this, 2106, 2);
                                                                  setLineNumber(1);    // compilenode identifier
                                                                  block14347.real = function(var_a, var_b) {
                                                                    setLineNumber(2107);    // compilenode num
                                                                    // call case 6: other requests
                                                                    var call14349 = callmethodChecked(var_b, "toGrace(1)", [1], new GraceNum(0));
                                                                    var if14351 = GraceDone;
                                                                    var string14352 = new GraceString("");
                                                                    var opresult14355 = callmethodChecked(var_a, "\u2260(1)", [1], string14352);
                                                                    if (Grace_isTrue(opresult14355)) {
                                                                      var string14356 = new GraceString(", ");
                                                                      var opresult14359 = callmethodChecked(var_a, "++(1)", [1], string14356);
                                                                      if14351 = opresult14359;
                                                                    } else {
                                                                      var string14360 = new GraceString("");
                                                                      if14351 = string14360;
                                                                    }
                                                                    var opresult14362 = callmethodChecked(if14351, "++(1)", [1], call14349);
                                                                    return opresult14362;
                                                                  };
                                                                  setLineNumber(2108);    // compilenode string
                                                                  var string14363 = new GraceString("");
                                                                  // call case 6: other requests
                                                                  setLineNumber(2106);    // compilenode member
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call14365 = callmethodChecked(this, "annotations", []);
                                                                  var call14366 = callmethodChecked(call14365, "fold(1)startingWith(1)", [1, 1], block14347, string14363);
                                                                  var opresult14369 = callmethodChecked(var_s, "++(1)", [1], call14366);
                                                                  var_s = opresult14369;
                                                                  if14334 = GraceDone;
                                                                }
                                                                var if14370 = GraceDone;
                                                                setLineNumber(2110);    // compilenode member
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14372 = callmethodChecked(this, "value", []);
                                                                var opresult14375 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call14372);
                                                                if (Grace_isTrue(opresult14375)) {
                                                                  setLineNumber(2111);    // compilenode identifier
                                                                  // call case 6: other requests
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call14378 = callmethodChecked(this, "value", []);
                                                                  var call14379 = callmethodChecked(call14378, "toGrace(1)", [1], var_depth);
                                                                  var string14381 = new GraceString(" = ");
                                                                  var opresult14384 = callmethodChecked(var_s, "++(1)", [1], string14381);
                                                                  var opresult14386 = callmethodChecked(opresult14384, "++(1)", [1], call14379);
                                                                  var_s = opresult14386;
                                                                  if14370 = GraceDone;
                                                                }
                                                                setLineNumber(2113);    // return value
                                                                if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], var_s)))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("result of method toGrace(_) does not have " + 
                                                                            callmethod(var_String, "asString", [0])._value + "."));
                                                                return var_s;
                                                              };
                                                              func14278.paramTypes = [];
                                                              func14278.paramTypes.push([type_Number, "depth"]);
                                                              func14278.paramCounts = [1];
                                                              obj14017.methods["toGrace(1)"] = func14278;
                                                              func14278.definitionLine = 2094;
                                                              func14278.definitionModule = "ast";
                                                              var func14387 = function(argcv) {    // method shallowCopy
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                setModuleName("ast");
                                                                setLineNumber(2116);    // compilenode identifier
                                                                // call case 6: other requests
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14391 = callmethodChecked(this, "name", []);
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14393 = callmethodChecked(this, "value", []);
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14395 = callmethodChecked(this, "dtype", []);
                                                                // call case 6: other requests
                                                                var call14396 = callmethodChecked(var_defDecNode, "new(3)", [3], call14391, call14393, call14395);
                                                                var call14397 = callmethodChecked(call14396, "shallowCopyFieldsFrom(1)", [1], this);
                                                                return call14397;
                                                              };
                                                              func14387.paramCounts = [0];
                                                              obj14017.methods["shallowCopy"] = func14387;
                                                              func14387.definitionLine = 2115;
                                                              func14387.definitionModule = "ast";
                                                              var func14398 = function(argcv) {    // method shallowCopyFieldsFrom(_)
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                var var_other = arguments[curarg];
                                                                curarg++;
                                                                setModuleName("ast");
                                                                setLineNumber(2119);    // compilenode identifier
                                                                // call case 1: super request
                                                                var call14400 = callmethodsuper(this, "shallowCopyFieldsFrom(1)", [1], var_other);
                                                                setLineNumber(2120);    // compilenode member
                                                                // call case 6: other requests
                                                                var call14403 = callmethodChecked(var_other, "startToken", []);
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14404 = callmethodChecked(this, "startToken:=(1)", [1], call14403);
                                                                setLineNumber(2121);    // compilenode identifier
                                                                return this;
                                                              };
                                                              func14398.paramCounts = [1];
                                                              obj14017.methods["shallowCopyFieldsFrom(1)"] = func14398;
                                                              func14398.definitionLine = 2118;
                                                              func14398.definitionModule = "ast";
                                                              var func14405 = function(argcv) {    // method statementName
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                setModuleName("ast");
                                                                setLineNumber(2123);    // compilenode string
                                                                var string14406 = new GraceString("definition");
                                                                return string14406;
                                                              };
                                                              func14405.paramCounts = [0];
                                                              obj14017.methods["statementName"] = func14405;
                                                              func14405.definitionLine = 2123;
                                                              func14405.definitionModule = "ast";
                                                              setLineNumber(2017);    // compilenode identifier
                                                              // call case 6: other requests
                                                              // call case 6: other requests
                                                              // call case 3: self.outer request
                                                              var call14410 = callmethodChecked(superDepth, "outer", [0]);
                                                              var call14411 = callmethodChecked(call14410, "outer", []);
                                                              var call14412 = callmethodChecked(call14411, "baseNode$object(1)", [0, 1], this);
                                                              obj14017.superobj = call14412;
                                                              if (call14412.data) obj14017.data = call14412.data;
                                                              if (call14412.hasOwnProperty('_value'))
                                                                  obj14017._value = call14412._value;
                                                              setLineNumber(2018);    // compilenode string
                                                              var string14413 = new GraceString("defdec");
                                                              obj14017.data["kind"] = string14413;
                                                              var reader_ast_kind14414 = function() {
                                                                return this.data["kind"];
                                                              };
                                                              reader_ast_kind14414.def = true;
                                                              obj14017.methods["kind"] = reader_ast_kind14414;
                                                              setLineNumber(2019);    // compilenode identifier
                                                              obj14017.data["name"] = var_name__39__;
                                                              var reader_ast_name14415 = function() {
                                                                return this.data["name"];
                                                              };
                                                              obj14017.methods["name"] = reader_ast_name14415;
                                                              obj14017.data["name"] = var_name__39__;
                                                              var writer_ast_name14415 = function(argcv, o) {
                                                                this.data["name"] = o;
                                                                return GraceDone;
                                                              };
                                                              obj14017.methods["name:=(1)"] = writer_ast_name14415;
                                                              obj14017.mutable = true;
                                                              setLineNumber(2020);    // compilenode identifier
                                                              obj14017.data["value"] = var_val;
                                                              var reader_ast_value14416 = function() {
                                                                return this.data["value"];
                                                              };
                                                              obj14017.methods["value"] = reader_ast_value14416;
                                                              obj14017.data["value"] = var_val;
                                                              var writer_ast_value14416 = function(argcv, o) {
                                                                this.data["value"] = o;
                                                                return GraceDone;
                                                              };
                                                              obj14017.methods["value:=(1)"] = writer_ast_value14416;
                                                              obj14017.mutable = true;
                                                              setLineNumber(2021);    // compilenode identifier
                                                              obj14017.data["dtype"] = var_dtype__39__;
                                                              var reader_ast_dtype14417 = function() {
                                                                return this.data["dtype"];
                                                              };
                                                              obj14017.methods["dtype"] = reader_ast_dtype14417;
                                                              obj14017.data["dtype"] = var_dtype__39__;
                                                              var writer_ast_dtype14417 = function(argcv, o) {
                                                                this.data["dtype"] = o;
                                                                return GraceDone;
                                                              };
                                                              obj14017.methods["dtype:=(1)"] = writer_ast_dtype14417;
                                                              obj14017.mutable = true;
                                                              setLineNumber(2022);    // compilenode member
                                                              // call case 6: other requests
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call14420 = callmethodChecked(this, "name", []);
                                                              var call14421 = callmethodChecked(call14420, "nameString", []);
                                                              obj14017.data["nameString"] = call14421;
                                                              var reader_ast_nameString14422 = function() {
                                                                return this.data["nameString"];
                                                              };
                                                              reader_ast_nameString14422.def = true;
                                                              obj14017.methods["nameString"] = reader_ast_nameString14422;
                                                              setLineNumber(2023);    // compilenode array
                                                              var array14423 = new PrimitiveGraceList([]);
                                                              obj14017.data["annotations"] = array14423;
                                                              var reader_ast_annotations14424 = function() {
                                                                return this.data["annotations"];
                                                              };
                                                              obj14017.methods["annotations"] = reader_ast_annotations14424;
                                                              obj14017.data["annotations"] = array14423;
                                                              var writer_ast_annotations14424 = function(argcv, o) {
                                                                this.data["annotations"] = o;
                                                                return GraceDone;
                                                              };
                                                              obj14017.methods["annotations:=(1)"] = writer_ast_annotations14424;
                                                              obj14017.mutable = true;
                                                              setLineNumber(2024);    // compilenode identifier
                                                              obj14017.data["startToken"] = GraceFalse;
                                                              var reader_ast_startToken14425 = function() {
                                                                return this.data["startToken"];
                                                              };
                                                              obj14017.methods["startToken"] = reader_ast_startToken14425;
                                                              obj14017.data["startToken"] = GraceFalse;
                                                              var writer_ast_startToken14425 = function(argcv, o) {
                                                                this.data["startToken"] = o;
                                                                return GraceDone;
                                                              };
                                                              obj14017.methods["startToken:=(1)"] = writer_ast_startToken14425;
                                                              obj14017.mutable = true;
                                                              superDepth = origSuperDepth;
                                                            };
                                                            obj_init_14017.apply(inheritingObject, []);
                                                            return obj14017;
                                                            };
                                                            obj13599.methods["new(3)$object(1)"] = func14016;
                                                          superDepth = origSuperDepth;
                                                        };
                                                        obj_init_13599.apply(obj13599, []);
                                                        var var_defDecNode = obj13599;
                                                        setLineNumber(1);    // compilenode method
                                                        var func14426 = function(argcv) {    // method defDecNode
                                                          var returnTarget = invocationCount;
                                                          invocationCount++;
                                                          var curarg = 1;
                                                          setModuleName("ast");
                                                          // defDecNode is a simple accessor - elide try ... catch
                                                          setLineNumber(2009);    // compilenode identifier
                                                          return var_defDecNode;
                                                        };
                                                        func14426.paramCounts = [0];
                                                        this.methods["defDecNode"] = func14426;
                                                        func14426.definitionLine = 1;
                                                        func14426.definitionModule = "ast";
                                                        this.methods["defDecNode"].debug = "def";
                                                        setLineNumber(2126);    // compilenode object
                                                        var obj14427 = Grace_allocObject(GraceObject, "varDecNode");
                                                        obj14427.definitionModule = "ast";
                                                        obj14427.definitionLine = 2126;
                                                        obj14427.outer = this;
                                                        var reader_ast_outer14428 = function() {
                                                          return this.outer;
                                                        };
                                                        obj14427.methods["outer"] = reader_ast_outer14428;
                                                        var obj_init_14427 = function() {
                                                          var origSuperDepth = superDepth;
                                                          superDepth = obj14427;
                                                          var func14429 = function(argcv) {    // method new(_,_,_)
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            var var_name__39__ = arguments[curarg];
                                                            curarg++;
                                                            var var_val__39__ = arguments[curarg];
                                                            curarg++;
                                                            var var_dtype__39__ = arguments[curarg];
                                                            curarg++;
                                                            setModuleName("ast");
                                                            setLineNumber(2127);    // compilenode object
                                                            var obj14430 = Grace_allocObject(null, "varDecNode.new(_,_,_)");
                                                            obj14430.definitionModule = "ast";
                                                            obj14430.definitionLine = 2127;
                                                            obj14430.outer = this;
                                                            var reader_ast_outer14431 = function() {
                                                              return this.outer;
                                                            };
                                                            obj14430.methods["outer"] = reader_ast_outer14431;
                                                            var obj_init_14430 = function() {
                                                              var origSuperDepth = superDepth;
                                                              superDepth = obj14430;
                                                              var func14432 = function(argcv) {    // method isPublic
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                setModuleName("ast");
                                                                var if14433 = GraceDone;
                                                                setLineNumber(2138);    // compilenode member
                                                                // call case 6: other requests
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14437 = callmethodChecked(this, "annotations", []);
                                                                var call14438 = callmethodChecked(call14437, "size", []);
                                                                var opresult14440 = callmethodChecked(call14438, "==(1)", [1], new GraceNum(0));
                                                                if (Grace_isTrue(opresult14440)) {
                                                                  return GraceFalse;
                                                                }
                                                                var if14441 = GraceDone;
                                                                setLineNumber(2139);    // compilenode string
                                                                var string14443 = new GraceString("public");
                                                                // call case 6: other requests
                                                                // call case 6: other requests
                                                                // call case 3: self.outer request
                                                                var call14446 = callmethodChecked(superDepth, "outer", [0]);
                                                                var call14447 = callmethodChecked(call14446, "outer", []);
                                                                onSelf = true;
                                                                var call14448 = callmethodChecked(call14447, "findAnnotation(2)", [2], this, string14443);
                                                                if (Grace_isTrue(call14448)) {
                                                                  return GraceTrue;
                                                                }
                                                                setLineNumber(2140);    // compilenode string
                                                                var string14450 = new GraceString("readable");
                                                                // call case 6: other requests
                                                                // call case 6: other requests
                                                                // call case 3: self.outer request
                                                                var call14453 = callmethodChecked(superDepth, "outer", [0]);
                                                                var call14454 = callmethodChecked(call14453, "outer", []);
                                                                onSelf = true;
                                                                var call14455 = callmethodChecked(call14454, "findAnnotation(2)", [2], this, string14450);
                                                                return call14455;
                                                              };
                                                              func14432.paramCounts = [0];
                                                              obj14430.methods["isPublic"] = func14432;
                                                              func14432.definitionLine = 2136;
                                                              func14432.definitionModule = "ast";
                                                              var func14456 = function(argcv) {    // method isWritable
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                setModuleName("ast");
                                                                var if14457 = GraceDone;
                                                                setLineNumber(2143);    // compilenode member
                                                                // call case 6: other requests
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14461 = callmethodChecked(this, "annotations", []);
                                                                var call14462 = callmethodChecked(call14461, "size", []);
                                                                var opresult14464 = callmethodChecked(call14462, "==(1)", [1], new GraceNum(0));
                                                                if (Grace_isTrue(opresult14464)) {
                                                                  return GraceFalse;
                                                                }
                                                                var if14465 = GraceDone;
                                                                setLineNumber(2144);    // compilenode string
                                                                var string14467 = new GraceString("public");
                                                                // call case 6: other requests
                                                                // call case 6: other requests
                                                                // call case 3: self.outer request
                                                                var call14470 = callmethodChecked(superDepth, "outer", [0]);
                                                                var call14471 = callmethodChecked(call14470, "outer", []);
                                                                onSelf = true;
                                                                var call14472 = callmethodChecked(call14471, "findAnnotation(2)", [2], this, string14467);
                                                                if (Grace_isTrue(call14472)) {
                                                                  return GraceTrue;
                                                                }
                                                                var if14473 = GraceDone;
                                                                setLineNumber(2145);    // compilenode string
                                                                var string14475 = new GraceString("writable");
                                                                // call case 6: other requests
                                                                // call case 6: other requests
                                                                // call case 3: self.outer request
                                                                var call14478 = callmethodChecked(superDepth, "outer", [0]);
                                                                var call14479 = callmethodChecked(call14478, "outer", []);
                                                                onSelf = true;
                                                                var call14480 = callmethodChecked(call14479, "findAnnotation(2)", [2], this, string14475);
                                                                if (Grace_isTrue(call14480)) {
                                                                  return GraceTrue;
                                                                }
                                                                setLineNumber(2146);    // compilenode identifier
                                                                return GraceFalse;
                                                              };
                                                              func14456.paramCounts = [0];
                                                              obj14430.methods["isWritable"] = func14456;
                                                              func14456.definitionLine = 2142;
                                                              func14456.definitionModule = "ast";
                                                              var func14481 = function(argcv) {    // method isReadable
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                setModuleName("ast");
                                                                var if14482 = GraceDone;
                                                                setLineNumber(2149);    // compilenode member
                                                                // call case 6: other requests
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14486 = callmethodChecked(this, "annotations", []);
                                                                var call14487 = callmethodChecked(call14486, "size", []);
                                                                var opresult14489 = callmethodChecked(call14487, "==(1)", [1], new GraceNum(0));
                                                                if (Grace_isTrue(opresult14489)) {
                                                                  return GraceFalse;
                                                                }
                                                                var if14490 = GraceDone;
                                                                setLineNumber(2150);    // compilenode string
                                                                var string14492 = new GraceString("public");
                                                                // call case 6: other requests
                                                                // call case 6: other requests
                                                                // call case 3: self.outer request
                                                                var call14495 = callmethodChecked(superDepth, "outer", [0]);
                                                                var call14496 = callmethodChecked(call14495, "outer", []);
                                                                onSelf = true;
                                                                var call14497 = callmethodChecked(call14496, "findAnnotation(2)", [2], this, string14492);
                                                                if (Grace_isTrue(call14497)) {
                                                                  return GraceTrue;
                                                                }
                                                                var if14498 = GraceDone;
                                                                setLineNumber(2151);    // compilenode string
                                                                var string14500 = new GraceString("readable");
                                                                // call case 6: other requests
                                                                // call case 6: other requests
                                                                // call case 3: self.outer request
                                                                var call14503 = callmethodChecked(superDepth, "outer", [0]);
                                                                var call14504 = callmethodChecked(call14503, "outer", []);
                                                                onSelf = true;
                                                                var call14505 = callmethodChecked(call14504, "findAnnotation(2)", [2], this, string14500);
                                                                if (Grace_isTrue(call14505)) {
                                                                  return GraceTrue;
                                                                }
                                                                setLineNumber(2152);    // compilenode identifier
                                                                return GraceFalse;
                                                              };
                                                              func14481.paramCounts = [0];
                                                              obj14430.methods["isReadable"] = func14481;
                                                              func14481.definitionLine = 2148;
                                                              func14481.definitionModule = "ast";
                                                              var func14506 = function(argcv) {    // method isFieldDec
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                setModuleName("ast");
                                                                // isFieldDec is a simple accessor - elide try ... catch
                                                                setLineNumber(2154);    // compilenode identifier
                                                                return GraceTrue;
                                                              };
                                                              func14506.paramCounts = [0];
                                                              obj14430.methods["isFieldDec"] = func14506;
                                                              func14506.definitionLine = 2154;
                                                              func14506.definitionModule = "ast";
                                                              var func14507 = function(argcv) {    // method usesAsType(_)
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                var var_aNode = arguments[curarg];
                                                                curarg++;
                                                                setModuleName("ast");
                                                                setLineNumber(2157);    // compilenode member
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14509 = callmethodChecked(this, "dtype", []);
                                                                var opresult14512 = callmethodChecked(var_aNode, "==(1)", [1], call14509);
                                                                return opresult14512;
                                                              };
                                                              func14507.paramCounts = [1];
                                                              obj14430.methods["usesAsType(1)"] = func14507;
                                                              func14507.definitionLine = 2156;
                                                              func14507.definitionModule = "ast";
                                                              var func14513 = function(argcv) {    // method declarationKindWithAncestors(_)
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                var var_as = arguments[curarg];
                                                                curarg++;
                                                                setModuleName("ast");
                                                                setLineNumber(2160);    // compilenode member
                                                                // call case 6: other requests
                                                                var call14515 = callmethodChecked(var_k, "vardec", []);
                                                                return call14515;
                                                              };
                                                              func14513.paramCounts = [1];
                                                              obj14430.methods["declarationKindWithAncestors(1)"] = func14513;
                                                              func14513.definitionLine = 2160;
                                                              func14513.definitionModule = "ast";
                                                              var func14516 = function(argcv) {    // method accept(_)from(_)
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                var var_visitor = arguments[curarg];
                                                                curarg++;
                                                                var var_as = arguments[curarg];
                                                                curarg++;
                                                                // Start argument checking
                                                                curarg = 1;
                                                                setLineNumber(2162);    // compilenode identifier
                                                                if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                            callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                                curarg++;
                                                                curarg++;
                                                                // End argument checking
                                                                setModuleName("ast");
                                                                var if14517 = GraceDone;
                                                                setLineNumber(2163);    // compilenode identifier
                                                                // call case 6: other requests
                                                                var call14519 = callmethodChecked(var_visitor, "visitVarDec(1)up(1)", [1, 1], this, var_as);
                                                                if (Grace_isTrue(call14519)) {
                                                                  setLineNumber(2164);    // compilenode identifier
                                                                  // call case 6: other requests
                                                                  var call14521 = callmethodChecked(var_as, "extend(1)", [1], this);
                                                                  var var_newChain = call14521;
                                                                  setLineNumber(2165);    // compilenode identifier
                                                                  // call case 6: other requests
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call14524 = callmethodChecked(this, "name", []);
                                                                  var call14525 = callmethodChecked(call14524, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                                  var if14526 = GraceDone;
                                                                  setLineNumber(2166);    // compilenode member
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call14528 = callmethodChecked(this, "dtype", []);
                                                                  var opresult14531 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call14528);
                                                                  if (Grace_isTrue(opresult14531)) {
                                                                    setLineNumber(2167);    // compilenode identifier
                                                                    // call case 6: other requests
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call14534 = callmethodChecked(this, "dtype", []);
                                                                    var call14535 = callmethodChecked(call14534, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                                    if14526 = call14535;
                                                                  }
                                                                  setLineNumber(2169);    // compilenode member
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call14538 = callmethodChecked(this, "annotations", []);
                                                                  var block14539 = new GraceBlock(this, 2169, 1);
                                                                  setLineNumber(1);    // compilenode identifier
                                                                  block14539.real = function(var_ann) {
                                                                    setLineNumber(2170);    // compilenode identifier
                                                                    // call case 6: other requests
                                                                    var call14541 = callmethodChecked(var_ann, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                                    return call14541;
                                                                  };
                                                                  // call case 5: prelude request
                                                                  var call14542 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call14538, block14539);
                                                                  var if14543 = GraceDone;
                                                                  setLineNumber(2172);    // compilenode member
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call14545 = callmethodChecked(this, "value", []);
                                                                  var opresult14548 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call14545);
                                                                  if (Grace_isTrue(opresult14548)) {
                                                                    setLineNumber(2173);    // compilenode identifier
                                                                    // call case 6: other requests
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call14551 = callmethodChecked(this, "value", []);
                                                                    var call14552 = callmethodChecked(call14551, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                                    if14543 = call14552;
                                                                  }
                                                                  if14517 = if14543;
                                                                }
                                                                return if14517;
                                                              };
                                                              func14516.paramTypes = [];
                                                              func14516.paramTypes.push([]);
                                                              func14516.paramTypes.push([]);
                                                              func14516.paramCounts = [1, 1];
                                                              obj14430.methods["accept(1)from(1)"] = func14516;
                                                              func14516.definitionLine = 2162;
                                                              func14516.definitionModule = "ast";
                                                              var func14553 = function(argcv) {    // method map(_)ancestors(_)
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                var var_blk = arguments[curarg];
                                                                curarg++;
                                                                var var_as = arguments[curarg];
                                                                curarg++;
                                                                setModuleName("ast");
                                                                setLineNumber(2178);    // compilenode member
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14555 = callmethodChecked(this, "shallowCopy", []);
                                                                var var_n = call14555;
                                                                setLineNumber(2179);    // compilenode identifier
                                                                // call case 6: other requests
                                                                var call14557 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                                                var var_newChain = call14557;
                                                                setLineNumber(2180);    // compilenode identifier
                                                                // call case 6: other requests
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14561 = callmethodChecked(this, "name", []);
                                                                var call14562 = callmethodChecked(call14561, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
                                                                // call case 6: other requests
                                                                var call14563 = callmethodChecked(var_n, "name:=(1)", [1], call14562);
                                                                setLineNumber(2181);    // compilenode member
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14567 = callmethodChecked(this, "value", []);
                                                                // call case 6: other requests
                                                                // call case 6: other requests
                                                                // call case 3: self.outer request
                                                                var call14570 = callmethodChecked(superDepth, "outer", [0]);
                                                                var call14571 = callmethodChecked(call14570, "outer", []);
                                                                onSelf = true;
                                                                var call14572 = callmethodChecked(call14571, "maybeMap(2)ancestors(1)", [2, 1], call14567, var_blk, var_newChain);
                                                                // call case 6: other requests
                                                                var call14573 = callmethodChecked(var_n, "value:=(1)", [1], call14572);
                                                                setLineNumber(2182);    // compilenode member
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14577 = callmethodChecked(this, "dtype", []);
                                                                // call case 6: other requests
                                                                // call case 6: other requests
                                                                // call case 3: self.outer request
                                                                var call14580 = callmethodChecked(superDepth, "outer", [0]);
                                                                var call14581 = callmethodChecked(call14580, "outer", []);
                                                                onSelf = true;
                                                                var call14582 = callmethodChecked(call14581, "maybeMap(2)ancestors(1)", [2, 1], call14577, var_blk, var_newChain);
                                                                // call case 6: other requests
                                                                var call14583 = callmethodChecked(var_n, "dtype:=(1)", [1], call14582);
                                                                setLineNumber(2183);    // compilenode member
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14587 = callmethodChecked(this, "annotations", []);
                                                                // call case 6: other requests
                                                                // call case 6: other requests
                                                                // call case 3: self.outer request
                                                                var call14590 = callmethodChecked(superDepth, "outer", [0]);
                                                                var call14591 = callmethodChecked(call14590, "outer", []);
                                                                onSelf = true;
                                                                var call14592 = callmethodChecked(call14591, "listMap(2)ancestors(1)", [2, 1], call14587, var_blk, var_newChain);
                                                                // call case 6: other requests
                                                                var call14593 = callmethodChecked(var_n, "annotations:=(1)", [1], call14592);
                                                                setLineNumber(2184);    // compilenode identifier
                                                                // call case 6: other requests
                                                                var call14595 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                                                return call14595;
                                                              };
                                                              func14553.paramCounts = [1, 1];
                                                              obj14430.methods["map(1)ancestors(1)"] = func14553;
                                                              func14553.definitionLine = 2177;
                                                              func14553.definitionModule = "ast";
                                                              var func14596 = function(argcv) {    // method pretty(_)
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                var var_depth = arguments[curarg];
                                                                curarg++;
                                                                setModuleName("ast");
                                                                setLineNumber(2187);    // compilenode string
                                                                var string14597 = new GraceString("");
                                                                var var_spc = string14597;
                                                                setLineNumber(2188);    // compilenode num
                                                                var opresult14601 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                                                                var block14602 = new GraceBlock(this, 2188, 1);
                                                                setLineNumber(1);    // compilenode identifier
                                                                block14602.real = function(var_i) {
                                                                  setLineNumber(2189);    // compilenode string
                                                                  var string14603 = new GraceString("  ");
                                                                  var opresult14606 = callmethodChecked(var_spc, "++(1)", [1], string14603);
                                                                  var_spc = opresult14606;
                                                                  return GraceDone;
                                                                };
                                                                // call case 5: prelude request
                                                                var call14607 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult14601, block14602);
                                                                setLineNumber(2191);    // compilenode string
                                                                var string14608 = new GraceString("\n");
                                                                // call case 1: super request
                                                                var call14611 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                                                var opresult14613 = callmethodChecked(call14611, "++(1)", [1], string14608);
                                                                var var_s = opresult14613;
                                                                setLineNumber(2192);    // compilenode identifier
                                                                var opresult14617 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                                                // call case 6: other requests
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14619 = callmethodChecked(this, "name", []);
                                                                var call14620 = callmethodChecked(call14619, "pretty(1)", [1], opresult14617);
                                                                var opresult14624 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                                                var opresult14626 = callmethodChecked(opresult14624, "++(1)", [1], call14620);
                                                                var_s = opresult14626;
                                                                var if14627 = GraceDone;
                                                                setLineNumber(2193);    // compilenode member
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14629 = callmethodChecked(this, "dtype", []);
                                                                var opresult14632 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call14629);
                                                                if (Grace_isTrue(opresult14632)) {
                                                                  setLineNumber(2194);    // compilenode string
                                                                  var string14633 = new GraceString("Type: ");
                                                                  var string14636 = new GraceString("\n");
                                                                  var opresult14639 = callmethodChecked(var_s, "++(1)", [1], string14636);
                                                                  var opresult14641 = callmethodChecked(opresult14639, "++(1)", [1], var_spc);
                                                                  var opresult14643 = callmethodChecked(opresult14641, "++(1)", [1], string14633);
                                                                  var_s = opresult14643;
                                                                  setLineNumber(2195);    // compilenode identifier
                                                                  var opresult14647 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                                                  // call case 6: other requests
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call14649 = callmethodChecked(this, "dtype", []);
                                                                  var call14650 = callmethodChecked(call14649, "pretty(1)", [1], opresult14647);
                                                                  var opresult14653 = callmethodChecked(var_s, "++(1)", [1], call14650);
                                                                  var_s = opresult14653;
                                                                  if14627 = GraceDone;
                                                                }
                                                                var if14654 = GraceDone;
                                                                setLineNumber(2197);    // compilenode member
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14656 = callmethodChecked(this, "value", []);
                                                                var opresult14659 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call14656);
                                                                if (Grace_isTrue(opresult14659)) {
                                                                  setLineNumber(2198);    // compilenode string
                                                                  var string14660 = new GraceString("Value: ");
                                                                  var string14663 = new GraceString("\n");
                                                                  var opresult14666 = callmethodChecked(var_s, "++(1)", [1], string14663);
                                                                  var opresult14668 = callmethodChecked(opresult14666, "++(1)", [1], var_spc);
                                                                  var opresult14670 = callmethodChecked(opresult14668, "++(1)", [1], string14660);
                                                                  var_s = opresult14670;
                                                                  setLineNumber(2199);    // compilenode identifier
                                                                  var opresult14674 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                                                  // call case 6: other requests
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call14676 = callmethodChecked(this, "value", []);
                                                                  var call14677 = callmethodChecked(call14676, "pretty(1)", [1], opresult14674);
                                                                  var opresult14680 = callmethodChecked(var_s, "++(1)", [1], call14677);
                                                                  var_s = opresult14680;
                                                                  if14654 = GraceDone;
                                                                }
                                                                var if14681 = GraceDone;
                                                                setLineNumber(2201);    // compilenode member
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14683 = callmethodChecked(this, "comments", []);
                                                                var opresult14686 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call14683);
                                                                if (Grace_isTrue(opresult14686)) {
                                                                  setLineNumber(2202);    // compilenode identifier
                                                                  var opresult14690 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                                                  // call case 6: other requests
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call14692 = callmethodChecked(this, "comments", []);
                                                                  var call14693 = callmethodChecked(call14692, "pretty(1)", [1], opresult14690);
                                                                  var opresult14696 = callmethodChecked(var_s, "++(1)", [1], call14693);
                                                                  var_s = opresult14696;
                                                                  if14681 = GraceDone;
                                                                }
                                                                setLineNumber(2204);    // compilenode identifier
                                                                return var_s;
                                                              };
                                                              func14596.paramCounts = [1];
                                                              obj14430.methods["pretty(1)"] = func14596;
                                                              func14596.definitionLine = 2186;
                                                              func14596.definitionModule = "ast";
                                                              var func14697 = function(argcv) {    // method toGrace(_)
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                var var_depth = arguments[curarg];
                                                                curarg++;
                                                                // Start argument checking
                                                                curarg = 1;
                                                                setLineNumber(2206);    // compilenode identifier
                                                                if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                            callmethod(var_Number, "asString", [0])._value + "."));
                                                                curarg++;
                                                                // End argument checking
                                                                setModuleName("ast");
                                                                setLineNumber(2207);    // compilenode string
                                                                var string14698 = new GraceString("");
                                                                var var_spc = string14698;
                                                                setLineNumber(2208);    // compilenode block
                                                                var block14700 = new GraceBlock(this, 2208, 0);
                                                                block14700.real = function() {
                                                                  setLineNumber(2209);    // compilenode string
                                                                  var string14701 = new GraceString("    ");
                                                                  var opresult14704 = callmethodChecked(var_spc, "++(1)", [1], string14701);
                                                                  var_spc = opresult14704;
                                                                  return GraceDone;
                                                                };
                                                                // call case 5: prelude request
                                                                var call14705 = callmethodChecked(var_prelude, "repeat(1)times(1)", [1, 1], var_depth, block14700);
                                                                setLineNumber(2211);    // compilenode string
                                                                var string14706 = new GraceString("");
                                                                // call case 6: other requests
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14710 = callmethodChecked(this, "name", []);
                                                                var call14711 = callmethodChecked(call14710, "toGrace(1)", [1], new GraceNum(0));
                                                                var string14713 = new GraceString("var ");
                                                                var opresult14715 = callmethodChecked(string14713, "++(1)", [1], call14711);
                                                                var opresult14717 = callmethodChecked(opresult14715, "++(1)", [1], string14706);
                                                                var var_s = opresult14717;
                                                                var if14718 = GraceDone;
                                                                setLineNumber(2212);    // compilenode block
                                                                var block14719 = new GraceBlock(this, 2212, 0);
                                                                block14719.real = function() {
                                                                  setLineNumber(2213);    // compilenode string
                                                                  var string14720 = new GraceString("Unknown");
                                                                  // call case 6: other requests
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call14724 = callmethodChecked(this, "dtype", []);
                                                                  var call14725 = callmethodChecked(call14724, "value", []);
                                                                  var opresult14727 = callmethodChecked(call14725, "\u2260(1)", [1], string14720);
                                                                  return opresult14727;
                                                                };
                                                                setLineNumber(2212);    // compilenode member
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14730 = callmethodChecked(this, "dtype", []);
                                                                var opresult14733 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call14730);
                                                                var opresult14735 = callmethodChecked(opresult14733, "&&(1)", [1], block14719);
                                                                if (Grace_isTrue(opresult14735)) {
                                                                  setLineNumber(2214);    // compilenode num
                                                                  // call case 6: other requests
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call14738 = callmethodChecked(this, "dtype", []);
                                                                  var call14739 = callmethodChecked(call14738, "toGrace(1)", [1], new GraceNum(0));
                                                                  var string14741 = new GraceString(" : ");
                                                                  var opresult14744 = callmethodChecked(var_s, "++(1)", [1], string14741);
                                                                  var opresult14746 = callmethodChecked(opresult14744, "++(1)", [1], call14739);
                                                                  var_s = opresult14746;
                                                                  if14718 = GraceDone;
                                                                }
                                                                var if14747 = GraceDone;
                                                                setLineNumber(2216);    // compilenode member
                                                                // call case 6: other requests
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14751 = callmethodChecked(this, "annotations", []);
                                                                var call14752 = callmethodChecked(call14751, "size", []);
                                                                var opresult14754 = callmethodChecked(call14752, ">(1)", [1], new GraceNum(0));
                                                                if (Grace_isTrue(opresult14754)) {
                                                                  setLineNumber(2217);    // compilenode string
                                                                  var string14755 = new GraceString(" is ");
                                                                  var opresult14758 = callmethodChecked(var_s, "++(1)", [1], string14755);
                                                                  var_s = opresult14758;
                                                                  setLineNumber(2218);    // compilenode block
                                                                  var block14760 = new GraceBlock(this, 2218, 2);
                                                                  setLineNumber(1);    // compilenode identifier
                                                                  block14760.real = function(var_a, var_b) {
                                                                    setLineNumber(2219);    // compilenode num
                                                                    // call case 6: other requests
                                                                    var call14762 = callmethodChecked(var_b, "toGrace(1)", [1], new GraceNum(0));
                                                                    var if14764 = GraceDone;
                                                                    var string14765 = new GraceString("");
                                                                    var opresult14768 = callmethodChecked(var_a, "\u2260(1)", [1], string14765);
                                                                    if (Grace_isTrue(opresult14768)) {
                                                                      var string14769 = new GraceString(", ");
                                                                      var opresult14772 = callmethodChecked(var_a, "++(1)", [1], string14769);
                                                                      if14764 = opresult14772;
                                                                    } else {
                                                                      var string14773 = new GraceString("");
                                                                      if14764 = string14773;
                                                                    }
                                                                    var opresult14775 = callmethodChecked(if14764, "++(1)", [1], call14762);
                                                                    return opresult14775;
                                                                  };
                                                                  setLineNumber(2220);    // compilenode string
                                                                  var string14776 = new GraceString("");
                                                                  // call case 6: other requests
                                                                  setLineNumber(2218);    // compilenode member
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call14778 = callmethodChecked(this, "annotations", []);
                                                                  var call14779 = callmethodChecked(call14778, "fold(1)startingWith(1)", [1, 1], block14760, string14776);
                                                                  var opresult14782 = callmethodChecked(var_s, "++(1)", [1], call14779);
                                                                  var_s = opresult14782;
                                                                  if14747 = GraceDone;
                                                                }
                                                                var if14783 = GraceDone;
                                                                setLineNumber(2222);    // compilenode member
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14785 = callmethodChecked(this, "value", []);
                                                                var opresult14788 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call14785);
                                                                if (Grace_isTrue(opresult14788)) {
                                                                  setLineNumber(2223);    // compilenode identifier
                                                                  // call case 6: other requests
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call14791 = callmethodChecked(this, "value", []);
                                                                  var call14792 = callmethodChecked(call14791, "toGrace(1)", [1], var_depth);
                                                                  var string14794 = new GraceString(" := ");
                                                                  var opresult14797 = callmethodChecked(var_s, "++(1)", [1], string14794);
                                                                  var opresult14799 = callmethodChecked(opresult14797, "++(1)", [1], call14792);
                                                                  var_s = opresult14799;
                                                                  if14783 = GraceDone;
                                                                }
                                                                setLineNumber(2225);    // return value
                                                                if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], var_s)))
                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                        new GraceString("result of method toGrace(_) does not have " + 
                                                                            callmethod(var_String, "asString", [0])._value + "."));
                                                                return var_s;
                                                              };
                                                              func14697.paramTypes = [];
                                                              func14697.paramTypes.push([type_Number, "depth"]);
                                                              func14697.paramCounts = [1];
                                                              obj14430.methods["toGrace(1)"] = func14697;
                                                              func14697.definitionLine = 2206;
                                                              func14697.definitionModule = "ast";
                                                              var func14800 = function(argcv) {    // method shallowCopy
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                setModuleName("ast");
                                                                setLineNumber(2228);    // compilenode identifier
                                                                // call case 6: other requests
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14804 = callmethodChecked(this, "name", []);
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14806 = callmethodChecked(this, "value", []);
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call14808 = callmethodChecked(this, "dtype", []);
                                                                // call case 6: other requests
                                                                var call14809 = callmethodChecked(var_varDecNode, "new(3)", [3], call14804, call14806, call14808);
                                                                var call14810 = callmethodChecked(call14809, "shallowCopyFieldsFrom(1)", [1], this);
                                                                return call14810;
                                                              };
                                                              func14800.paramCounts = [0];
                                                              obj14430.methods["shallowCopy"] = func14800;
                                                              func14800.definitionLine = 2227;
                                                              func14800.definitionModule = "ast";
                                                              var func14811 = function(argcv) {    // method statementName
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                setModuleName("ast");
                                                                setLineNumber(2230);    // compilenode string
                                                                var string14812 = new GraceString("variable declaration");
                                                                return string14812;
                                                              };
                                                              func14811.paramCounts = [0];
                                                              obj14430.methods["statementName"] = func14811;
                                                              func14811.definitionLine = 2230;
                                                              func14811.definitionModule = "ast";
                                                              setLineNumber(2128);    // compilenode identifier
                                                              // call case 6: other requests
                                                              // call case 6: other requests
                                                              // call case 3: self.outer request
                                                              var call14816 = callmethodChecked(superDepth, "outer", [0]);
                                                              var call14817 = callmethodChecked(call14816, "outer", []);
                                                              var call14818 = callmethodChecked(call14817, "baseNode$object(1)", [0, 1], this);
                                                              obj14430.superobj = call14818;
                                                              if (call14818.data) obj14430.data = call14818.data;
                                                              if (call14818.hasOwnProperty('_value'))
                                                                  obj14430._value = call14818._value;
                                                              setLineNumber(2129);    // compilenode string
                                                              var string14819 = new GraceString("vardec");
                                                              obj14430.data["kind"] = string14819;
                                                              var reader_ast_kind14820 = function() {
                                                                return this.data["kind"];
                                                              };
                                                              reader_ast_kind14820.def = true;
                                                              obj14430.methods["kind"] = reader_ast_kind14820;
                                                              setLineNumber(2130);    // compilenode identifier
                                                              obj14430.data["name"] = var_name__39__;
                                                              var reader_ast_name14821 = function() {
                                                                return this.data["name"];
                                                              };
                                                              obj14430.methods["name"] = reader_ast_name14821;
                                                              obj14430.data["name"] = var_name__39__;
                                                              var writer_ast_name14821 = function(argcv, o) {
                                                                this.data["name"] = o;
                                                                return GraceDone;
                                                              };
                                                              obj14430.methods["name:=(1)"] = writer_ast_name14821;
                                                              obj14430.mutable = true;
                                                              setLineNumber(2131);    // compilenode identifier
                                                              obj14430.data["value"] = var_val__39__;
                                                              var reader_ast_value14822 = function() {
                                                                return this.data["value"];
                                                              };
                                                              obj14430.methods["value"] = reader_ast_value14822;
                                                              obj14430.data["value"] = var_val__39__;
                                                              var writer_ast_value14822 = function(argcv, o) {
                                                                this.data["value"] = o;
                                                                return GraceDone;
                                                              };
                                                              obj14430.methods["value:=(1)"] = writer_ast_value14822;
                                                              obj14430.mutable = true;
                                                              setLineNumber(2132);    // compilenode identifier
                                                              obj14430.data["dtype"] = var_dtype__39__;
                                                              var reader_ast_dtype14823 = function() {
                                                                return this.data["dtype"];
                                                              };
                                                              obj14430.methods["dtype"] = reader_ast_dtype14823;
                                                              obj14430.data["dtype"] = var_dtype__39__;
                                                              var writer_ast_dtype14823 = function(argcv, o) {
                                                                this.data["dtype"] = o;
                                                                return GraceDone;
                                                              };
                                                              obj14430.methods["dtype:=(1)"] = writer_ast_dtype14823;
                                                              obj14430.mutable = true;
                                                              setLineNumber(2133);    // compilenode member
                                                              // call case 6: other requests
                                                              // call case 4: self request
                                                              onSelf = true;
                                                              var call14826 = callmethodChecked(this, "name", []);
                                                              var call14827 = callmethodChecked(call14826, "value", []);
                                                              obj14430.data["nameString"] = call14827;
                                                              var reader_ast_nameString14828 = function() {
                                                                return this.data["nameString"];
                                                              };
                                                              reader_ast_nameString14828.def = true;
                                                              obj14430.methods["nameString"] = reader_ast_nameString14828;
                                                              setLineNumber(2134);    // compilenode array
                                                              var array14829 = new PrimitiveGraceList([]);
                                                              obj14430.data["annotations"] = array14829;
                                                              var reader_ast_annotations14830 = function() {
                                                                return this.data["annotations"];
                                                              };
                                                              obj14430.methods["annotations"] = reader_ast_annotations14830;
                                                              obj14430.data["annotations"] = array14829;
                                                              var writer_ast_annotations14830 = function(argcv, o) {
                                                                this.data["annotations"] = o;
                                                                return GraceDone;
                                                              };
                                                              obj14430.methods["annotations:=(1)"] = writer_ast_annotations14830;
                                                              obj14430.mutable = true;
                                                              superDepth = origSuperDepth;
                                                            };
                                                            obj_init_14430.apply(obj14430, []);
                                                            return obj14430;
                                                          };
                                                          func14429.paramCounts = [3];
                                                          obj14427.methods["new(3)"] = func14429;
                                                          func14429.definitionLine = 2127;
                                                          func14429.definitionModule = "ast";
                                                            var func14831 = function(argcv) {    // method new(_,_,_)$object(_)
                                                              var curarg = 1;
                                                              var var_name__39__ = arguments[curarg];
                                                              curarg++;
                                                              var var_val__39__ = arguments[curarg];
                                                              curarg++;
                                                              var var_dtype__39__ = arguments[curarg];
                                                              curarg++;
                                                              var inheritingObject = arguments[curarg++];
                                                              // Start argument processing
                                                              curarg = 1;
                                                              curarg++;
                                                              curarg++;
                                                              curarg++;
                                                              // End argument processing
                                                              setModuleName("ast");
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var obj14832 = Grace_allocObject(null, "new(3)");
                                                              obj14832.definitionModule = "ast";
                                                              obj14832.definitionLine = 2127;
                                                              var inho14832 = inheritingObject;
                                                              while (inho14832.superobj) inho14832 = inho14832.superobj;
                                                              inho14832.superobj = obj14832;
                                                              obj14832.data = inheritingObject.data;
                                                              if (inheritingObject.hasOwnProperty('_value'))
                                                                obj14832._value = inheritingObject._value;
                                                              obj14832.outer = this;
                                                              var reader_ast_outer14833 = function() {
                                                                return this.outer;
                                                              };
                                                              obj14832.methods["outer"] = reader_ast_outer14833;
                                                              var obj_init_14832 = function() {
                                                                var origSuperDepth = superDepth;
                                                                superDepth = obj14832;
                                                                var func14834 = function(argcv) {    // method isPublic
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  setModuleName("ast");
                                                                  var if14835 = GraceDone;
                                                                  setLineNumber(2138);    // compilenode member
                                                                  // call case 6: other requests
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call14839 = callmethodChecked(this, "annotations", []);
                                                                  var call14840 = callmethodChecked(call14839, "size", []);
                                                                  var opresult14842 = callmethodChecked(call14840, "==(1)", [1], new GraceNum(0));
                                                                  if (Grace_isTrue(opresult14842)) {
                                                                    return GraceFalse;
                                                                  }
                                                                  var if14843 = GraceDone;
                                                                  setLineNumber(2139);    // compilenode string
                                                                  var string14845 = new GraceString("public");
                                                                  // call case 6: other requests
                                                                  // call case 6: other requests
                                                                  // call case 3: self.outer request
                                                                  var call14848 = callmethodChecked(superDepth, "outer", [0]);
                                                                  var call14849 = callmethodChecked(call14848, "outer", []);
                                                                  onSelf = true;
                                                                  var call14850 = callmethodChecked(call14849, "findAnnotation(2)", [2], this, string14845);
                                                                  if (Grace_isTrue(call14850)) {
                                                                    return GraceTrue;
                                                                  }
                                                                  setLineNumber(2140);    // compilenode string
                                                                  var string14852 = new GraceString("readable");
                                                                  // call case 6: other requests
                                                                  // call case 6: other requests
                                                                  // call case 3: self.outer request
                                                                  var call14855 = callmethodChecked(superDepth, "outer", [0]);
                                                                  var call14856 = callmethodChecked(call14855, "outer", []);
                                                                  onSelf = true;
                                                                  var call14857 = callmethodChecked(call14856, "findAnnotation(2)", [2], this, string14852);
                                                                  return call14857;
                                                                };
                                                                func14834.paramCounts = [0];
                                                                obj14832.methods["isPublic"] = func14834;
                                                                func14834.definitionLine = 2136;
                                                                func14834.definitionModule = "ast";
                                                                var func14858 = function(argcv) {    // method isWritable
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  setModuleName("ast");
                                                                  var if14859 = GraceDone;
                                                                  setLineNumber(2143);    // compilenode member
                                                                  // call case 6: other requests
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call14863 = callmethodChecked(this, "annotations", []);
                                                                  var call14864 = callmethodChecked(call14863, "size", []);
                                                                  var opresult14866 = callmethodChecked(call14864, "==(1)", [1], new GraceNum(0));
                                                                  if (Grace_isTrue(opresult14866)) {
                                                                    return GraceFalse;
                                                                  }
                                                                  var if14867 = GraceDone;
                                                                  setLineNumber(2144);    // compilenode string
                                                                  var string14869 = new GraceString("public");
                                                                  // call case 6: other requests
                                                                  // call case 6: other requests
                                                                  // call case 3: self.outer request
                                                                  var call14872 = callmethodChecked(superDepth, "outer", [0]);
                                                                  var call14873 = callmethodChecked(call14872, "outer", []);
                                                                  onSelf = true;
                                                                  var call14874 = callmethodChecked(call14873, "findAnnotation(2)", [2], this, string14869);
                                                                  if (Grace_isTrue(call14874)) {
                                                                    return GraceTrue;
                                                                  }
                                                                  var if14875 = GraceDone;
                                                                  setLineNumber(2145);    // compilenode string
                                                                  var string14877 = new GraceString("writable");
                                                                  // call case 6: other requests
                                                                  // call case 6: other requests
                                                                  // call case 3: self.outer request
                                                                  var call14880 = callmethodChecked(superDepth, "outer", [0]);
                                                                  var call14881 = callmethodChecked(call14880, "outer", []);
                                                                  onSelf = true;
                                                                  var call14882 = callmethodChecked(call14881, "findAnnotation(2)", [2], this, string14877);
                                                                  if (Grace_isTrue(call14882)) {
                                                                    return GraceTrue;
                                                                  }
                                                                  setLineNumber(2146);    // compilenode identifier
                                                                  return GraceFalse;
                                                                };
                                                                func14858.paramCounts = [0];
                                                                obj14832.methods["isWritable"] = func14858;
                                                                func14858.definitionLine = 2142;
                                                                func14858.definitionModule = "ast";
                                                                var func14883 = function(argcv) {    // method isReadable
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  setModuleName("ast");
                                                                  var if14884 = GraceDone;
                                                                  setLineNumber(2149);    // compilenode member
                                                                  // call case 6: other requests
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call14888 = callmethodChecked(this, "annotations", []);
                                                                  var call14889 = callmethodChecked(call14888, "size", []);
                                                                  var opresult14891 = callmethodChecked(call14889, "==(1)", [1], new GraceNum(0));
                                                                  if (Grace_isTrue(opresult14891)) {
                                                                    return GraceFalse;
                                                                  }
                                                                  var if14892 = GraceDone;
                                                                  setLineNumber(2150);    // compilenode string
                                                                  var string14894 = new GraceString("public");
                                                                  // call case 6: other requests
                                                                  // call case 6: other requests
                                                                  // call case 3: self.outer request
                                                                  var call14897 = callmethodChecked(superDepth, "outer", [0]);
                                                                  var call14898 = callmethodChecked(call14897, "outer", []);
                                                                  onSelf = true;
                                                                  var call14899 = callmethodChecked(call14898, "findAnnotation(2)", [2], this, string14894);
                                                                  if (Grace_isTrue(call14899)) {
                                                                    return GraceTrue;
                                                                  }
                                                                  var if14900 = GraceDone;
                                                                  setLineNumber(2151);    // compilenode string
                                                                  var string14902 = new GraceString("readable");
                                                                  // call case 6: other requests
                                                                  // call case 6: other requests
                                                                  // call case 3: self.outer request
                                                                  var call14905 = callmethodChecked(superDepth, "outer", [0]);
                                                                  var call14906 = callmethodChecked(call14905, "outer", []);
                                                                  onSelf = true;
                                                                  var call14907 = callmethodChecked(call14906, "findAnnotation(2)", [2], this, string14902);
                                                                  if (Grace_isTrue(call14907)) {
                                                                    return GraceTrue;
                                                                  }
                                                                  setLineNumber(2152);    // compilenode identifier
                                                                  return GraceFalse;
                                                                };
                                                                func14883.paramCounts = [0];
                                                                obj14832.methods["isReadable"] = func14883;
                                                                func14883.definitionLine = 2148;
                                                                func14883.definitionModule = "ast";
                                                                var func14908 = function(argcv) {    // method isFieldDec
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  setModuleName("ast");
                                                                  // isFieldDec is a simple accessor - elide try ... catch
                                                                  setLineNumber(2154);    // compilenode identifier
                                                                  return GraceTrue;
                                                                };
                                                                func14908.paramCounts = [0];
                                                                obj14832.methods["isFieldDec"] = func14908;
                                                                func14908.definitionLine = 2154;
                                                                func14908.definitionModule = "ast";
                                                                var func14909 = function(argcv) {    // method usesAsType(_)
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  var var_aNode = arguments[curarg];
                                                                  curarg++;
                                                                  setModuleName("ast");
                                                                  setLineNumber(2157);    // compilenode member
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call14911 = callmethodChecked(this, "dtype", []);
                                                                  var opresult14914 = callmethodChecked(var_aNode, "==(1)", [1], call14911);
                                                                  return opresult14914;
                                                                };
                                                                func14909.paramCounts = [1];
                                                                obj14832.methods["usesAsType(1)"] = func14909;
                                                                func14909.definitionLine = 2156;
                                                                func14909.definitionModule = "ast";
                                                                var func14915 = function(argcv) {    // method declarationKindWithAncestors(_)
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  var var_as = arguments[curarg];
                                                                  curarg++;
                                                                  setModuleName("ast");
                                                                  setLineNumber(2160);    // compilenode member
                                                                  // call case 6: other requests
                                                                  var call14917 = callmethodChecked(var_k, "vardec", []);
                                                                  return call14917;
                                                                };
                                                                func14915.paramCounts = [1];
                                                                obj14832.methods["declarationKindWithAncestors(1)"] = func14915;
                                                                func14915.definitionLine = 2160;
                                                                func14915.definitionModule = "ast";
                                                                var func14918 = function(argcv) {    // method accept(_)from(_)
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  var var_visitor = arguments[curarg];
                                                                  curarg++;
                                                                  var var_as = arguments[curarg];
                                                                  curarg++;
                                                                  // Start argument checking
                                                                  curarg = 1;
                                                                  setLineNumber(2162);    // compilenode identifier
                                                                  if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                              callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                                  curarg++;
                                                                  curarg++;
                                                                  // End argument checking
                                                                  setModuleName("ast");
                                                                  var if14919 = GraceDone;
                                                                  setLineNumber(2163);    // compilenode identifier
                                                                  // call case 6: other requests
                                                                  var call14921 = callmethodChecked(var_visitor, "visitVarDec(1)up(1)", [1, 1], this, var_as);
                                                                  if (Grace_isTrue(call14921)) {
                                                                    setLineNumber(2164);    // compilenode identifier
                                                                    // call case 6: other requests
                                                                    var call14923 = callmethodChecked(var_as, "extend(1)", [1], this);
                                                                    var var_newChain = call14923;
                                                                    setLineNumber(2165);    // compilenode identifier
                                                                    // call case 6: other requests
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call14926 = callmethodChecked(this, "name", []);
                                                                    var call14927 = callmethodChecked(call14926, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                                    var if14928 = GraceDone;
                                                                    setLineNumber(2166);    // compilenode member
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call14930 = callmethodChecked(this, "dtype", []);
                                                                    var opresult14933 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call14930);
                                                                    if (Grace_isTrue(opresult14933)) {
                                                                      setLineNumber(2167);    // compilenode identifier
                                                                      // call case 6: other requests
                                                                      // call case 4: self request
                                                                      onSelf = true;
                                                                      var call14936 = callmethodChecked(this, "dtype", []);
                                                                      var call14937 = callmethodChecked(call14936, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                                      if14928 = call14937;
                                                                    }
                                                                    setLineNumber(2169);    // compilenode member
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call14940 = callmethodChecked(this, "annotations", []);
                                                                    var block14941 = new GraceBlock(this, 2169, 1);
                                                                    setLineNumber(1);    // compilenode identifier
                                                                    block14941.real = function(var_ann) {
                                                                      setLineNumber(2170);    // compilenode identifier
                                                                      // call case 6: other requests
                                                                      var call14943 = callmethodChecked(var_ann, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                                      return call14943;
                                                                    };
                                                                    // call case 5: prelude request
                                                                    var call14944 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call14940, block14941);
                                                                    var if14945 = GraceDone;
                                                                    setLineNumber(2172);    // compilenode member
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call14947 = callmethodChecked(this, "value", []);
                                                                    var opresult14950 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call14947);
                                                                    if (Grace_isTrue(opresult14950)) {
                                                                      setLineNumber(2173);    // compilenode identifier
                                                                      // call case 6: other requests
                                                                      // call case 4: self request
                                                                      onSelf = true;
                                                                      var call14953 = callmethodChecked(this, "value", []);
                                                                      var call14954 = callmethodChecked(call14953, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                                      if14945 = call14954;
                                                                    }
                                                                    if14919 = if14945;
                                                                  }
                                                                  return if14919;
                                                                };
                                                                func14918.paramTypes = [];
                                                                func14918.paramTypes.push([]);
                                                                func14918.paramTypes.push([]);
                                                                func14918.paramCounts = [1, 1];
                                                                obj14832.methods["accept(1)from(1)"] = func14918;
                                                                func14918.definitionLine = 2162;
                                                                func14918.definitionModule = "ast";
                                                                var func14955 = function(argcv) {    // method map(_)ancestors(_)
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  var var_blk = arguments[curarg];
                                                                  curarg++;
                                                                  var var_as = arguments[curarg];
                                                                  curarg++;
                                                                  setModuleName("ast");
                                                                  setLineNumber(2178);    // compilenode member
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call14957 = callmethodChecked(this, "shallowCopy", []);
                                                                  var var_n = call14957;
                                                                  setLineNumber(2179);    // compilenode identifier
                                                                  // call case 6: other requests
                                                                  var call14959 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                                                  var var_newChain = call14959;
                                                                  setLineNumber(2180);    // compilenode identifier
                                                                  // call case 6: other requests
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call14963 = callmethodChecked(this, "name", []);
                                                                  var call14964 = callmethodChecked(call14963, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
                                                                  // call case 6: other requests
                                                                  var call14965 = callmethodChecked(var_n, "name:=(1)", [1], call14964);
                                                                  setLineNumber(2181);    // compilenode member
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call14969 = callmethodChecked(this, "value", []);
                                                                  // call case 6: other requests
                                                                  // call case 6: other requests
                                                                  // call case 3: self.outer request
                                                                  var call14972 = callmethodChecked(superDepth, "outer", [0]);
                                                                  var call14973 = callmethodChecked(call14972, "outer", []);
                                                                  onSelf = true;
                                                                  var call14974 = callmethodChecked(call14973, "maybeMap(2)ancestors(1)", [2, 1], call14969, var_blk, var_newChain);
                                                                  // call case 6: other requests
                                                                  var call14975 = callmethodChecked(var_n, "value:=(1)", [1], call14974);
                                                                  setLineNumber(2182);    // compilenode member
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call14979 = callmethodChecked(this, "dtype", []);
                                                                  // call case 6: other requests
                                                                  // call case 6: other requests
                                                                  // call case 3: self.outer request
                                                                  var call14982 = callmethodChecked(superDepth, "outer", [0]);
                                                                  var call14983 = callmethodChecked(call14982, "outer", []);
                                                                  onSelf = true;
                                                                  var call14984 = callmethodChecked(call14983, "maybeMap(2)ancestors(1)", [2, 1], call14979, var_blk, var_newChain);
                                                                  // call case 6: other requests
                                                                  var call14985 = callmethodChecked(var_n, "dtype:=(1)", [1], call14984);
                                                                  setLineNumber(2183);    // compilenode member
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call14989 = callmethodChecked(this, "annotations", []);
                                                                  // call case 6: other requests
                                                                  // call case 6: other requests
                                                                  // call case 3: self.outer request
                                                                  var call14992 = callmethodChecked(superDepth, "outer", [0]);
                                                                  var call14993 = callmethodChecked(call14992, "outer", []);
                                                                  onSelf = true;
                                                                  var call14994 = callmethodChecked(call14993, "listMap(2)ancestors(1)", [2, 1], call14989, var_blk, var_newChain);
                                                                  // call case 6: other requests
                                                                  var call14995 = callmethodChecked(var_n, "annotations:=(1)", [1], call14994);
                                                                  setLineNumber(2184);    // compilenode identifier
                                                                  // call case 6: other requests
                                                                  var call14997 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                                                  return call14997;
                                                                };
                                                                func14955.paramCounts = [1, 1];
                                                                obj14832.methods["map(1)ancestors(1)"] = func14955;
                                                                func14955.definitionLine = 2177;
                                                                func14955.definitionModule = "ast";
                                                                var func14998 = function(argcv) {    // method pretty(_)
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  var var_depth = arguments[curarg];
                                                                  curarg++;
                                                                  setModuleName("ast");
                                                                  setLineNumber(2187);    // compilenode string
                                                                  var string14999 = new GraceString("");
                                                                  var var_spc = string14999;
                                                                  setLineNumber(2188);    // compilenode num
                                                                  var opresult15003 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                                                                  var block15004 = new GraceBlock(this, 2188, 1);
                                                                  setLineNumber(1);    // compilenode identifier
                                                                  block15004.real = function(var_i) {
                                                                    setLineNumber(2189);    // compilenode string
                                                                    var string15005 = new GraceString("  ");
                                                                    var opresult15008 = callmethodChecked(var_spc, "++(1)", [1], string15005);
                                                                    var_spc = opresult15008;
                                                                    return GraceDone;
                                                                  };
                                                                  // call case 5: prelude request
                                                                  var call15009 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult15003, block15004);
                                                                  setLineNumber(2191);    // compilenode string
                                                                  var string15010 = new GraceString("\n");
                                                                  // call case 1: super request
                                                                  var call15013 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                                                  var opresult15015 = callmethodChecked(call15013, "++(1)", [1], string15010);
                                                                  var var_s = opresult15015;
                                                                  setLineNumber(2192);    // compilenode identifier
                                                                  var opresult15019 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                                                  // call case 6: other requests
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call15021 = callmethodChecked(this, "name", []);
                                                                  var call15022 = callmethodChecked(call15021, "pretty(1)", [1], opresult15019);
                                                                  var opresult15026 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                                                  var opresult15028 = callmethodChecked(opresult15026, "++(1)", [1], call15022);
                                                                  var_s = opresult15028;
                                                                  var if15029 = GraceDone;
                                                                  setLineNumber(2193);    // compilenode member
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call15031 = callmethodChecked(this, "dtype", []);
                                                                  var opresult15034 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call15031);
                                                                  if (Grace_isTrue(opresult15034)) {
                                                                    setLineNumber(2194);    // compilenode string
                                                                    var string15035 = new GraceString("Type: ");
                                                                    var string15038 = new GraceString("\n");
                                                                    var opresult15041 = callmethodChecked(var_s, "++(1)", [1], string15038);
                                                                    var opresult15043 = callmethodChecked(opresult15041, "++(1)", [1], var_spc);
                                                                    var opresult15045 = callmethodChecked(opresult15043, "++(1)", [1], string15035);
                                                                    var_s = opresult15045;
                                                                    setLineNumber(2195);    // compilenode identifier
                                                                    var opresult15049 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                                                    // call case 6: other requests
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call15051 = callmethodChecked(this, "dtype", []);
                                                                    var call15052 = callmethodChecked(call15051, "pretty(1)", [1], opresult15049);
                                                                    var opresult15055 = callmethodChecked(var_s, "++(1)", [1], call15052);
                                                                    var_s = opresult15055;
                                                                    if15029 = GraceDone;
                                                                  }
                                                                  var if15056 = GraceDone;
                                                                  setLineNumber(2197);    // compilenode member
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call15058 = callmethodChecked(this, "value", []);
                                                                  var opresult15061 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call15058);
                                                                  if (Grace_isTrue(opresult15061)) {
                                                                    setLineNumber(2198);    // compilenode string
                                                                    var string15062 = new GraceString("Value: ");
                                                                    var string15065 = new GraceString("\n");
                                                                    var opresult15068 = callmethodChecked(var_s, "++(1)", [1], string15065);
                                                                    var opresult15070 = callmethodChecked(opresult15068, "++(1)", [1], var_spc);
                                                                    var opresult15072 = callmethodChecked(opresult15070, "++(1)", [1], string15062);
                                                                    var_s = opresult15072;
                                                                    setLineNumber(2199);    // compilenode identifier
                                                                    var opresult15076 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                                                    // call case 6: other requests
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call15078 = callmethodChecked(this, "value", []);
                                                                    var call15079 = callmethodChecked(call15078, "pretty(1)", [1], opresult15076);
                                                                    var opresult15082 = callmethodChecked(var_s, "++(1)", [1], call15079);
                                                                    var_s = opresult15082;
                                                                    if15056 = GraceDone;
                                                                  }
                                                                  var if15083 = GraceDone;
                                                                  setLineNumber(2201);    // compilenode member
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call15085 = callmethodChecked(this, "comments", []);
                                                                  var opresult15088 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call15085);
                                                                  if (Grace_isTrue(opresult15088)) {
                                                                    setLineNumber(2202);    // compilenode identifier
                                                                    var opresult15092 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                                                    // call case 6: other requests
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call15094 = callmethodChecked(this, "comments", []);
                                                                    var call15095 = callmethodChecked(call15094, "pretty(1)", [1], opresult15092);
                                                                    var opresult15098 = callmethodChecked(var_s, "++(1)", [1], call15095);
                                                                    var_s = opresult15098;
                                                                    if15083 = GraceDone;
                                                                  }
                                                                  setLineNumber(2204);    // compilenode identifier
                                                                  return var_s;
                                                                };
                                                                func14998.paramCounts = [1];
                                                                obj14832.methods["pretty(1)"] = func14998;
                                                                func14998.definitionLine = 2186;
                                                                func14998.definitionModule = "ast";
                                                                var func15099 = function(argcv) {    // method toGrace(_)
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  var var_depth = arguments[curarg];
                                                                  curarg++;
                                                                  // Start argument checking
                                                                  curarg = 1;
                                                                  setLineNumber(2206);    // compilenode identifier
                                                                  if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                              callmethod(var_Number, "asString", [0])._value + "."));
                                                                  curarg++;
                                                                  // End argument checking
                                                                  setModuleName("ast");
                                                                  setLineNumber(2207);    // compilenode string
                                                                  var string15100 = new GraceString("");
                                                                  var var_spc = string15100;
                                                                  setLineNumber(2208);    // compilenode block
                                                                  var block15102 = new GraceBlock(this, 2208, 0);
                                                                  block15102.real = function() {
                                                                    setLineNumber(2209);    // compilenode string
                                                                    var string15103 = new GraceString("    ");
                                                                    var opresult15106 = callmethodChecked(var_spc, "++(1)", [1], string15103);
                                                                    var_spc = opresult15106;
                                                                    return GraceDone;
                                                                  };
                                                                  // call case 5: prelude request
                                                                  var call15107 = callmethodChecked(var_prelude, "repeat(1)times(1)", [1, 1], var_depth, block15102);
                                                                  setLineNumber(2211);    // compilenode string
                                                                  var string15108 = new GraceString("");
                                                                  // call case 6: other requests
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call15112 = callmethodChecked(this, "name", []);
                                                                  var call15113 = callmethodChecked(call15112, "toGrace(1)", [1], new GraceNum(0));
                                                                  var string15115 = new GraceString("var ");
                                                                  var opresult15117 = callmethodChecked(string15115, "++(1)", [1], call15113);
                                                                  var opresult15119 = callmethodChecked(opresult15117, "++(1)", [1], string15108);
                                                                  var var_s = opresult15119;
                                                                  var if15120 = GraceDone;
                                                                  setLineNumber(2212);    // compilenode block
                                                                  var block15121 = new GraceBlock(this, 2212, 0);
                                                                  block15121.real = function() {
                                                                    setLineNumber(2213);    // compilenode string
                                                                    var string15122 = new GraceString("Unknown");
                                                                    // call case 6: other requests
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call15126 = callmethodChecked(this, "dtype", []);
                                                                    var call15127 = callmethodChecked(call15126, "value", []);
                                                                    var opresult15129 = callmethodChecked(call15127, "\u2260(1)", [1], string15122);
                                                                    return opresult15129;
                                                                  };
                                                                  setLineNumber(2212);    // compilenode member
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call15132 = callmethodChecked(this, "dtype", []);
                                                                  var opresult15135 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call15132);
                                                                  var opresult15137 = callmethodChecked(opresult15135, "&&(1)", [1], block15121);
                                                                  if (Grace_isTrue(opresult15137)) {
                                                                    setLineNumber(2214);    // compilenode num
                                                                    // call case 6: other requests
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call15140 = callmethodChecked(this, "dtype", []);
                                                                    var call15141 = callmethodChecked(call15140, "toGrace(1)", [1], new GraceNum(0));
                                                                    var string15143 = new GraceString(" : ");
                                                                    var opresult15146 = callmethodChecked(var_s, "++(1)", [1], string15143);
                                                                    var opresult15148 = callmethodChecked(opresult15146, "++(1)", [1], call15141);
                                                                    var_s = opresult15148;
                                                                    if15120 = GraceDone;
                                                                  }
                                                                  var if15149 = GraceDone;
                                                                  setLineNumber(2216);    // compilenode member
                                                                  // call case 6: other requests
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call15153 = callmethodChecked(this, "annotations", []);
                                                                  var call15154 = callmethodChecked(call15153, "size", []);
                                                                  var opresult15156 = callmethodChecked(call15154, ">(1)", [1], new GraceNum(0));
                                                                  if (Grace_isTrue(opresult15156)) {
                                                                    setLineNumber(2217);    // compilenode string
                                                                    var string15157 = new GraceString(" is ");
                                                                    var opresult15160 = callmethodChecked(var_s, "++(1)", [1], string15157);
                                                                    var_s = opresult15160;
                                                                    setLineNumber(2218);    // compilenode block
                                                                    var block15162 = new GraceBlock(this, 2218, 2);
                                                                    setLineNumber(1);    // compilenode identifier
                                                                    block15162.real = function(var_a, var_b) {
                                                                      setLineNumber(2219);    // compilenode num
                                                                      // call case 6: other requests
                                                                      var call15164 = callmethodChecked(var_b, "toGrace(1)", [1], new GraceNum(0));
                                                                      var if15166 = GraceDone;
                                                                      var string15167 = new GraceString("");
                                                                      var opresult15170 = callmethodChecked(var_a, "\u2260(1)", [1], string15167);
                                                                      if (Grace_isTrue(opresult15170)) {
                                                                        var string15171 = new GraceString(", ");
                                                                        var opresult15174 = callmethodChecked(var_a, "++(1)", [1], string15171);
                                                                        if15166 = opresult15174;
                                                                      } else {
                                                                        var string15175 = new GraceString("");
                                                                        if15166 = string15175;
                                                                      }
                                                                      var opresult15177 = callmethodChecked(if15166, "++(1)", [1], call15164);
                                                                      return opresult15177;
                                                                    };
                                                                    setLineNumber(2220);    // compilenode string
                                                                    var string15178 = new GraceString("");
                                                                    // call case 6: other requests
                                                                    setLineNumber(2218);    // compilenode member
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call15180 = callmethodChecked(this, "annotations", []);
                                                                    var call15181 = callmethodChecked(call15180, "fold(1)startingWith(1)", [1, 1], block15162, string15178);
                                                                    var opresult15184 = callmethodChecked(var_s, "++(1)", [1], call15181);
                                                                    var_s = opresult15184;
                                                                    if15149 = GraceDone;
                                                                  }
                                                                  var if15185 = GraceDone;
                                                                  setLineNumber(2222);    // compilenode member
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call15187 = callmethodChecked(this, "value", []);
                                                                  var opresult15190 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call15187);
                                                                  if (Grace_isTrue(opresult15190)) {
                                                                    setLineNumber(2223);    // compilenode identifier
                                                                    // call case 6: other requests
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call15193 = callmethodChecked(this, "value", []);
                                                                    var call15194 = callmethodChecked(call15193, "toGrace(1)", [1], var_depth);
                                                                    var string15196 = new GraceString(" := ");
                                                                    var opresult15199 = callmethodChecked(var_s, "++(1)", [1], string15196);
                                                                    var opresult15201 = callmethodChecked(opresult15199, "++(1)", [1], call15194);
                                                                    var_s = opresult15201;
                                                                    if15185 = GraceDone;
                                                                  }
                                                                  setLineNumber(2225);    // return value
                                                                  if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], var_s)))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("result of method toGrace(_) does not have " + 
                                                                              callmethod(var_String, "asString", [0])._value + "."));
                                                                  return var_s;
                                                                };
                                                                func15099.paramTypes = [];
                                                                func15099.paramTypes.push([type_Number, "depth"]);
                                                                func15099.paramCounts = [1];
                                                                obj14832.methods["toGrace(1)"] = func15099;
                                                                func15099.definitionLine = 2206;
                                                                func15099.definitionModule = "ast";
                                                                var func15202 = function(argcv) {    // method shallowCopy
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  setModuleName("ast");
                                                                  setLineNumber(2228);    // compilenode identifier
                                                                  // call case 6: other requests
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call15206 = callmethodChecked(this, "name", []);
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call15208 = callmethodChecked(this, "value", []);
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call15210 = callmethodChecked(this, "dtype", []);
                                                                  // call case 6: other requests
                                                                  var call15211 = callmethodChecked(var_varDecNode, "new(3)", [3], call15206, call15208, call15210);
                                                                  var call15212 = callmethodChecked(call15211, "shallowCopyFieldsFrom(1)", [1], this);
                                                                  return call15212;
                                                                };
                                                                func15202.paramCounts = [0];
                                                                obj14832.methods["shallowCopy"] = func15202;
                                                                func15202.definitionLine = 2227;
                                                                func15202.definitionModule = "ast";
                                                                var func15213 = function(argcv) {    // method statementName
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  setModuleName("ast");
                                                                  setLineNumber(2230);    // compilenode string
                                                                  var string15214 = new GraceString("variable declaration");
                                                                  return string15214;
                                                                };
                                                                func15213.paramCounts = [0];
                                                                obj14832.methods["statementName"] = func15213;
                                                                func15213.definitionLine = 2230;
                                                                func15213.definitionModule = "ast";
                                                                setLineNumber(2128);    // compilenode identifier
                                                                // call case 6: other requests
                                                                // call case 6: other requests
                                                                // call case 3: self.outer request
                                                                var call15218 = callmethodChecked(superDepth, "outer", [0]);
                                                                var call15219 = callmethodChecked(call15218, "outer", []);
                                                                var call15220 = callmethodChecked(call15219, "baseNode$object(1)", [0, 1], this);
                                                                obj14832.superobj = call15220;
                                                                if (call15220.data) obj14832.data = call15220.data;
                                                                if (call15220.hasOwnProperty('_value'))
                                                                    obj14832._value = call15220._value;
                                                                setLineNumber(2129);    // compilenode string
                                                                var string15221 = new GraceString("vardec");
                                                                obj14832.data["kind"] = string15221;
                                                                var reader_ast_kind15222 = function() {
                                                                  return this.data["kind"];
                                                                };
                                                                reader_ast_kind15222.def = true;
                                                                obj14832.methods["kind"] = reader_ast_kind15222;
                                                                setLineNumber(2130);    // compilenode identifier
                                                                obj14832.data["name"] = var_name__39__;
                                                                var reader_ast_name15223 = function() {
                                                                  return this.data["name"];
                                                                };
                                                                obj14832.methods["name"] = reader_ast_name15223;
                                                                obj14832.data["name"] = var_name__39__;
                                                                var writer_ast_name15223 = function(argcv, o) {
                                                                  this.data["name"] = o;
                                                                  return GraceDone;
                                                                };
                                                                obj14832.methods["name:=(1)"] = writer_ast_name15223;
                                                                obj14832.mutable = true;
                                                                setLineNumber(2131);    // compilenode identifier
                                                                obj14832.data["value"] = var_val__39__;
                                                                var reader_ast_value15224 = function() {
                                                                  return this.data["value"];
                                                                };
                                                                obj14832.methods["value"] = reader_ast_value15224;
                                                                obj14832.data["value"] = var_val__39__;
                                                                var writer_ast_value15224 = function(argcv, o) {
                                                                  this.data["value"] = o;
                                                                  return GraceDone;
                                                                };
                                                                obj14832.methods["value:=(1)"] = writer_ast_value15224;
                                                                obj14832.mutable = true;
                                                                setLineNumber(2132);    // compilenode identifier
                                                                obj14832.data["dtype"] = var_dtype__39__;
                                                                var reader_ast_dtype15225 = function() {
                                                                  return this.data["dtype"];
                                                                };
                                                                obj14832.methods["dtype"] = reader_ast_dtype15225;
                                                                obj14832.data["dtype"] = var_dtype__39__;
                                                                var writer_ast_dtype15225 = function(argcv, o) {
                                                                  this.data["dtype"] = o;
                                                                  return GraceDone;
                                                                };
                                                                obj14832.methods["dtype:=(1)"] = writer_ast_dtype15225;
                                                                obj14832.mutable = true;
                                                                setLineNumber(2133);    // compilenode member
                                                                // call case 6: other requests
                                                                // call case 4: self request
                                                                onSelf = true;
                                                                var call15228 = callmethodChecked(this, "name", []);
                                                                var call15229 = callmethodChecked(call15228, "value", []);
                                                                obj14832.data["nameString"] = call15229;
                                                                var reader_ast_nameString15230 = function() {
                                                                  return this.data["nameString"];
                                                                };
                                                                reader_ast_nameString15230.def = true;
                                                                obj14832.methods["nameString"] = reader_ast_nameString15230;
                                                                setLineNumber(2134);    // compilenode array
                                                                var array15231 = new PrimitiveGraceList([]);
                                                                obj14832.data["annotations"] = array15231;
                                                                var reader_ast_annotations15232 = function() {
                                                                  return this.data["annotations"];
                                                                };
                                                                obj14832.methods["annotations"] = reader_ast_annotations15232;
                                                                obj14832.data["annotations"] = array15231;
                                                                var writer_ast_annotations15232 = function(argcv, o) {
                                                                  this.data["annotations"] = o;
                                                                  return GraceDone;
                                                                };
                                                                obj14832.methods["annotations:=(1)"] = writer_ast_annotations15232;
                                                                obj14832.mutable = true;
                                                                superDepth = origSuperDepth;
                                                              };
                                                              obj_init_14832.apply(inheritingObject, []);
                                                              return obj14832;
                                                              };
                                                              obj14427.methods["new(3)$object(1)"] = func14831;
                                                            superDepth = origSuperDepth;
                                                          };
                                                          obj_init_14427.apply(obj14427, []);
                                                          var var_varDecNode = obj14427;
                                                          setLineNumber(1);    // compilenode method
                                                          var func15233 = function(argcv) {    // method varDecNode
                                                            var returnTarget = invocationCount;
                                                            invocationCount++;
                                                            var curarg = 1;
                                                            setModuleName("ast");
                                                            // varDecNode is a simple accessor - elide try ... catch
                                                            setLineNumber(2126);    // compilenode identifier
                                                            return var_varDecNode;
                                                          };
                                                          func15233.paramCounts = [0];
                                                          this.methods["varDecNode"] = func15233;
                                                          func15233.definitionLine = 1;
                                                          func15233.definitionModule = "ast";
                                                          this.methods["varDecNode"].debug = "def";
                                                          setLineNumber(2234);    // compilenode object
                                                          var obj15234 = Grace_allocObject(GraceObject, "importNode");
                                                          obj15234.definitionModule = "ast";
                                                          obj15234.definitionLine = 2234;
                                                          obj15234.outer = this;
                                                          var reader_ast_outer15235 = function() {
                                                            return this.outer;
                                                          };
                                                          obj15234.methods["outer"] = reader_ast_outer15235;
                                                          var obj_init_15234 = function() {
                                                            var origSuperDepth = superDepth;
                                                            superDepth = obj15234;
                                                            var func15236 = function(argcv) {    // method new(_,_,_)
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              var var_path__39__ = arguments[curarg];
                                                              curarg++;
                                                              var var_name__39__ = arguments[curarg];
                                                              curarg++;
                                                              var var_dtype__39__ = arguments[curarg];
                                                              curarg++;
                                                              setModuleName("ast");
                                                              setLineNumber(2235);    // compilenode object
                                                              var obj15237 = Grace_allocObject(null, "importNode.new(_,_,_)");
                                                              obj15237.definitionModule = "ast";
                                                              obj15237.definitionLine = 2235;
                                                              obj15237.outer = this;
                                                              var reader_ast_outer15238 = function() {
                                                                return this.outer;
                                                              };
                                                              obj15237.methods["outer"] = reader_ast_outer15238;
                                                              var obj_init_15237 = function() {
                                                                var origSuperDepth = superDepth;
                                                                superDepth = obj15237;
                                                                var func15239 = function(argcv) {    // method isImport
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  setModuleName("ast");
                                                                  // isImport is a simple accessor - elide try ... catch
                                                                  setLineNumber(2242);    // compilenode identifier
                                                                  return GraceTrue;
                                                                };
                                                                func15239.paramCounts = [0];
                                                                obj15237.methods["isImport"] = func15239;
                                                                func15239.definitionLine = 2242;
                                                                func15239.definitionModule = "ast";
                                                                var func15240 = function(argcv) {    // method isExternal
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  setModuleName("ast");
                                                                  // isExternal is a simple accessor - elide try ... catch
                                                                  setLineNumber(2243);    // compilenode identifier
                                                                  return GraceTrue;
                                                                };
                                                                func15240.paramCounts = [0];
                                                                obj15237.methods["isExternal"] = func15240;
                                                                func15240.definitionLine = 2243;
                                                                func15240.definitionModule = "ast";
                                                                var func15241 = function(argcv) {    // method isExecutable
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  setModuleName("ast");
                                                                  // isExecutable is a simple accessor - elide try ... catch
                                                                  setLineNumber(2244);    // compilenode identifier
                                                                  return GraceFalse;
                                                                };
                                                                func15241.paramCounts = [0];
                                                                obj15237.methods["isExecutable"] = func15241;
                                                                func15241.definitionLine = 2244;
                                                                func15241.definitionModule = "ast";
                                                                var func15242 = function(argcv) {    // method name
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  setModuleName("ast");
                                                                  setLineNumber(2245);    // compilenode member
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call15244 = callmethodChecked(this, "value", []);
                                                                  return call15244;
                                                                };
                                                                func15242.paramCounts = [0];
                                                                obj15237.methods["name"] = func15242;
                                                                func15242.definitionLine = 2245;
                                                                func15242.definitionModule = "ast";
                                                                var func15245 = function(argcv) {    // method nameString
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  setModuleName("ast");
                                                                  setLineNumber(2246);    // compilenode member
                                                                  // call case 6: other requests
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call15248 = callmethodChecked(this, "value", []);
                                                                  var call15249 = callmethodChecked(call15248, "nameString", []);
                                                                  return call15249;
                                                                };
                                                                func15245.paramCounts = [0];
                                                                obj15237.methods["nameString"] = func15245;
                                                                func15245.definitionLine = 2246;
                                                                func15245.definitionModule = "ast";
                                                                var func15250 = function(argcv) {    // method isPublic
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  setModuleName("ast");
                                                                  var if15251 = GraceDone;
                                                                  setLineNumber(2249);    // compilenode member
                                                                  // call case 6: other requests
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call15255 = callmethodChecked(this, "annotations", []);
                                                                  var call15256 = callmethodChecked(call15255, "size", []);
                                                                  var opresult15258 = callmethodChecked(call15256, "==(1)", [1], new GraceNum(0));
                                                                  if (Grace_isTrue(opresult15258)) {
                                                                    return GraceFalse;
                                                                  }
                                                                  var if15259 = GraceDone;
                                                                  setLineNumber(2250);    // compilenode string
                                                                  var string15261 = new GraceString("public");
                                                                  // call case 6: other requests
                                                                  // call case 6: other requests
                                                                  // call case 3: self.outer request
                                                                  var call15264 = callmethodChecked(superDepth, "outer", [0]);
                                                                  var call15265 = callmethodChecked(call15264, "outer", []);
                                                                  onSelf = true;
                                                                  var call15266 = callmethodChecked(call15265, "findAnnotation(2)", [2], this, string15261);
                                                                  if (Grace_isTrue(call15266)) {
                                                                    return GraceTrue;
                                                                  }
                                                                  setLineNumber(2251);    // compilenode string
                                                                  var string15268 = new GraceString("readable");
                                                                  // call case 6: other requests
                                                                  // call case 6: other requests
                                                                  // call case 3: self.outer request
                                                                  var call15271 = callmethodChecked(superDepth, "outer", [0]);
                                                                  var call15272 = callmethodChecked(call15271, "outer", []);
                                                                  onSelf = true;
                                                                  var call15273 = callmethodChecked(call15272, "findAnnotation(2)", [2], this, string15268);
                                                                  return call15273;
                                                                };
                                                                func15250.paramCounts = [0];
                                                                obj15237.methods["isPublic"] = func15250;
                                                                func15250.definitionLine = 2247;
                                                                func15250.definitionModule = "ast";
                                                                var func15274 = function(argcv) {    // method moduleName
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  setModuleName("ast");
                                                                  setLineNumber(2254);    // compilenode string
                                                                  var string15275 = new GraceString("");
                                                                  var var_bnm = string15275;
                                                                  setLineNumber(2255);    // compilenode member
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call15278 = callmethodChecked(this, "path", []);
                                                                  var block15279 = new GraceBlock(this, 2255, 1);
                                                                  setLineNumber(1);    // compilenode identifier
                                                                  block15279.real = function(var_c) {
                                                                    var if15280 = GraceDone;
                                                                    setLineNumber(2256);    // compilenode string
                                                                    var string15281 = new GraceString("/");
                                                                    var opresult15284 = callmethodChecked(var_c, "==(1)", [1], string15281);
                                                                    if (Grace_isTrue(opresult15284)) {
                                                                      setLineNumber(2257);    // compilenode string
                                                                      var string15285 = new GraceString("");
                                                                      var_bnm = string15285;
                                                                      if15280 = GraceDone;
                                                                    } else {
                                                                      setLineNumber(2259);    // compilenode identifier
                                                                      var opresult15288 = callmethodChecked(var_bnm, "++(1)", [1], var_c);
                                                                      var_bnm = opresult15288;
                                                                      if15280 = GraceDone;
                                                                    }
                                                                    return if15280;
                                                                  };
                                                                  // call case 5: prelude request
                                                                  var call15289 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call15278, block15279);
                                                                  setLineNumber(2262);    // compilenode identifier
                                                                  return var_bnm;
                                                                };
                                                                func15274.paramCounts = [0];
                                                                obj15237.methods["moduleName"] = func15274;
                                                                func15274.definitionLine = 2253;
                                                                func15274.definitionModule = "ast";
                                                                var func15290 = function(argcv) {    // method isWritable
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  setModuleName("ast");
                                                                  // isWritable is a simple accessor - elide try ... catch
                                                                  setLineNumber(2264);    // compilenode identifier
                                                                  return GraceFalse;
                                                                };
                                                                func15290.paramCounts = [0];
                                                                obj15237.methods["isWritable"] = func15290;
                                                                func15290.definitionLine = 2264;
                                                                func15290.definitionModule = "ast";
                                                                var func15291 = function(argcv) {    // method isReadable
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  setModuleName("ast");
                                                                  setLineNumber(2265);    // compilenode member
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call15293 = callmethodChecked(this, "isPublic", []);
                                                                  return call15293;
                                                                };
                                                                func15291.paramCounts = [0];
                                                                obj15237.methods["isReadable"] = func15291;
                                                                func15291.definitionLine = 2265;
                                                                func15291.definitionModule = "ast";
                                                                var func15294 = function(argcv) {    // method declarationKindWithAncestors(_)
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  var var_as = arguments[curarg];
                                                                  curarg++;
                                                                  setModuleName("ast");
                                                                  setLineNumber(2266);    // compilenode member
                                                                  // call case 6: other requests
                                                                  var call15296 = callmethodChecked(var_k, "defdec", []);
                                                                  return call15296;
                                                                };
                                                                func15294.paramCounts = [1];
                                                                obj15237.methods["declarationKindWithAncestors(1)"] = func15294;
                                                                func15294.definitionLine = 2266;
                                                                func15294.definitionModule = "ast";
                                                                var func15297 = function(argcv) {    // method usesAsType(_)
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  var var_aNode = arguments[curarg];
                                                                  curarg++;
                                                                  setModuleName("ast");
                                                                  setLineNumber(2268);    // compilenode member
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call15299 = callmethodChecked(this, "dtype", []);
                                                                  var opresult15302 = callmethodChecked(var_aNode, "==(1)", [1], call15299);
                                                                  return opresult15302;
                                                                };
                                                                func15297.paramCounts = [1];
                                                                obj15237.methods["usesAsType(1)"] = func15297;
                                                                func15297.definitionLine = 2267;
                                                                func15297.definitionModule = "ast";
                                                                var func15303 = function(argcv) {    // method accept(_)from(_)
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  var var_visitor = arguments[curarg];
                                                                  curarg++;
                                                                  var var_as = arguments[curarg];
                                                                  curarg++;
                                                                  // Start argument checking
                                                                  curarg = 1;
                                                                  setLineNumber(2270);    // compilenode identifier
                                                                  if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                              callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                                  curarg++;
                                                                  curarg++;
                                                                  // End argument checking
                                                                  setModuleName("ast");
                                                                  var if15304 = GraceDone;
                                                                  setLineNumber(2271);    // compilenode identifier
                                                                  // call case 6: other requests
                                                                  var call15306 = callmethodChecked(var_visitor, "visitImport(1)up(1)", [1, 1], this, var_as);
                                                                  if (Grace_isTrue(call15306)) {
                                                                    setLineNumber(2272);    // compilenode identifier
                                                                    // call case 6: other requests
                                                                    var call15308 = callmethodChecked(var_as, "extend(1)", [1], this);
                                                                    var var_newChain = call15308;
                                                                    setLineNumber(2273);    // compilenode member
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call15311 = callmethodChecked(this, "annotations", []);
                                                                    var block15312 = new GraceBlock(this, 2273, 1);
                                                                    setLineNumber(1);    // compilenode identifier
                                                                    block15312.real = function(var_ann) {
                                                                      setLineNumber(2274);    // compilenode identifier
                                                                      // call case 6: other requests
                                                                      var call15314 = callmethodChecked(var_ann, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                                      return call15314;
                                                                    };
                                                                    // call case 5: prelude request
                                                                    var call15315 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call15311, block15312);
                                                                    setLineNumber(2276);    // compilenode identifier
                                                                    // call case 6: other requests
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call15318 = callmethodChecked(this, "value", []);
                                                                    var call15319 = callmethodChecked(call15318, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                                    var if15320 = GraceDone;
                                                                    setLineNumber(2277);    // compilenode member
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call15322 = callmethodChecked(this, "dtype", []);
                                                                    var opresult15325 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call15322);
                                                                    if (Grace_isTrue(opresult15325)) {
                                                                      setLineNumber(2278);    // compilenode identifier
                                                                      // call case 6: other requests
                                                                      // call case 4: self request
                                                                      onSelf = true;
                                                                      var call15328 = callmethodChecked(this, "dtype", []);
                                                                      var call15329 = callmethodChecked(call15328, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                                      if15320 = call15329;
                                                                    }
                                                                    if15304 = if15320;
                                                                  }
                                                                  return if15304;
                                                                };
                                                                func15303.paramTypes = [];
                                                                func15303.paramTypes.push([]);
                                                                func15303.paramTypes.push([]);
                                                                func15303.paramCounts = [1, 1];
                                                                obj15237.methods["accept(1)from(1)"] = func15303;
                                                                func15303.definitionLine = 2270;
                                                                func15303.definitionModule = "ast";
                                                                var func15330 = function(argcv) {    // method map(_)ancestors(_)
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  var var_blk = arguments[curarg];
                                                                  curarg++;
                                                                  var var_as = arguments[curarg];
                                                                  curarg++;
                                                                  setModuleName("ast");
                                                                  setLineNumber(2283);    // compilenode member
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call15332 = callmethodChecked(this, "shallowCopy", []);
                                                                  var var_n = call15332;
                                                                  setLineNumber(2284);    // compilenode identifier
                                                                  // call case 6: other requests
                                                                  var call15334 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                                                  var var_newChain = call15334;
                                                                  setLineNumber(2285);    // compilenode identifier
                                                                  // call case 6: other requests
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call15338 = callmethodChecked(this, "value", []);
                                                                  var call15339 = callmethodChecked(call15338, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
                                                                  // call case 6: other requests
                                                                  var call15340 = callmethodChecked(var_n, "value:=(1)", [1], call15339);
                                                                  setLineNumber(2286);    // compilenode member
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call15344 = callmethodChecked(this, "dtype", []);
                                                                  // call case 6: other requests
                                                                  // call case 6: other requests
                                                                  // call case 3: self.outer request
                                                                  var call15347 = callmethodChecked(superDepth, "outer", [0]);
                                                                  var call15348 = callmethodChecked(call15347, "outer", []);
                                                                  onSelf = true;
                                                                  var call15349 = callmethodChecked(call15348, "maybeMap(2)ancestors(1)", [2, 1], call15344, var_blk, var_newChain);
                                                                  // call case 6: other requests
                                                                  var call15350 = callmethodChecked(var_n, "dtype:=(1)", [1], call15349);
                                                                  setLineNumber(2287);    // compilenode member
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call15354 = callmethodChecked(this, "annotations", []);
                                                                  // call case 6: other requests
                                                                  // call case 6: other requests
                                                                  // call case 3: self.outer request
                                                                  var call15357 = callmethodChecked(superDepth, "outer", [0]);
                                                                  var call15358 = callmethodChecked(call15357, "outer", []);
                                                                  onSelf = true;
                                                                  var call15359 = callmethodChecked(call15358, "listMap(2)ancestors(1)", [2, 1], call15354, var_blk, var_newChain);
                                                                  // call case 6: other requests
                                                                  var call15360 = callmethodChecked(var_n, "annotations:=(1)", [1], call15359);
                                                                  setLineNumber(2288);    // compilenode identifier
                                                                  // call case 6: other requests
                                                                  var call15362 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                                                  return call15362;
                                                                };
                                                                func15330.paramCounts = [1, 1];
                                                                obj15237.methods["map(1)ancestors(1)"] = func15330;
                                                                func15330.definitionLine = 2282;
                                                                func15330.definitionModule = "ast";
                                                                var func15363 = function(argcv) {    // method pretty(_)
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  var var_depth = arguments[curarg];
                                                                  curarg++;
                                                                  setModuleName("ast");
                                                                  setLineNumber(2291);    // compilenode string
                                                                  var string15364 = new GraceString("");
                                                                  var var_spc = string15364;
                                                                  setLineNumber(2292);    // compilenode num
                                                                  var opresult15368 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                                                                  var block15369 = new GraceBlock(this, 2292, 1);
                                                                  setLineNumber(1);    // compilenode identifier
                                                                  block15369.real = function(var_i) {
                                                                    setLineNumber(2293);    // compilenode string
                                                                    var string15370 = new GraceString("  ");
                                                                    var opresult15373 = callmethodChecked(var_spc, "++(1)", [1], string15370);
                                                                    var_spc = opresult15373;
                                                                    return GraceDone;
                                                                  };
                                                                  // call case 5: prelude request
                                                                  var call15374 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult15368, block15369);
                                                                  setLineNumber(2295);    // compilenode string
                                                                  var string15375 = new GraceString("\n");
                                                                  // call case 1: super request
                                                                  var call15378 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                                                  var opresult15380 = callmethodChecked(call15378, "++(1)", [1], string15375);
                                                                  var var_s = opresult15380;
                                                                  setLineNumber(2296);    // compilenode string
                                                                  var string15381 = new GraceString("\n");
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call15384 = callmethodChecked(this, "path", []);
                                                                  var string15386 = new GraceString("Path: ");
                                                                  var string15389 = new GraceString("");
                                                                  var opresult15391 = callmethodChecked(string15389, "++(1)", [1], var_spc);
                                                                  var opresult15393 = callmethodChecked(opresult15391, "++(1)", [1], string15386);
                                                                  var opresult15395 = callmethodChecked(opresult15393, "++(1)", [1], call15384);
                                                                  var opresult15397 = callmethodChecked(opresult15395, "++(1)", [1], string15381);
                                                                  var opresult15400 = callmethodChecked(var_s, "++(1)", [1], opresult15397);
                                                                  var_s = opresult15400;
                                                                  setLineNumber(2297);    // compilenode string
                                                                  var string15401 = new GraceString("\n");
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call15404 = callmethodChecked(this, "value", []);
                                                                  var string15406 = new GraceString("Identifier: ");
                                                                  var string15409 = new GraceString("");
                                                                  var opresult15411 = callmethodChecked(string15409, "++(1)", [1], var_spc);
                                                                  var opresult15413 = callmethodChecked(opresult15411, "++(1)", [1], string15406);
                                                                  var opresult15415 = callmethodChecked(opresult15413, "++(1)", [1], call15404);
                                                                  var opresult15417 = callmethodChecked(opresult15415, "++(1)", [1], string15401);
                                                                  var opresult15420 = callmethodChecked(var_s, "++(1)", [1], opresult15417);
                                                                  var_s = opresult15420;
                                                                  var if15421 = GraceDone;
                                                                  setLineNumber(2298);    // compilenode member
                                                                  // call case 6: other requests
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call15425 = callmethodChecked(this, "annotations", []);
                                                                  var call15426 = callmethodChecked(call15425, "size", []);
                                                                  var opresult15428 = callmethodChecked(call15426, ">(1)", [1], new GraceNum(0));
                                                                  if (Grace_isTrue(opresult15428)) {
                                                                    setLineNumber(2299);    // compilenode string
                                                                    var string15429 = new GraceString("\n");
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call15432 = callmethodChecked(this, "annotations", []);
                                                                    var string15434 = new GraceString("Anotations: ");
                                                                    var string15437 = new GraceString("");
                                                                    var opresult15439 = callmethodChecked(string15437, "++(1)", [1], var_spc);
                                                                    var opresult15441 = callmethodChecked(opresult15439, "++(1)", [1], string15434);
                                                                    var opresult15443 = callmethodChecked(opresult15441, "++(1)", [1], call15432);
                                                                    var opresult15445 = callmethodChecked(opresult15443, "++(1)", [1], string15429);
                                                                    var opresult15448 = callmethodChecked(var_s, "++(1)", [1], opresult15445);
                                                                    var_s = opresult15448;
                                                                    if15421 = GraceDone;
                                                                  }
                                                                  setLineNumber(2301);    // compilenode identifier
                                                                  return var_s;
                                                                };
                                                                func15363.paramCounts = [1];
                                                                obj15237.methods["pretty(1)"] = func15363;
                                                                func15363.definitionLine = 2290;
                                                                func15363.definitionModule = "ast";
                                                                var func15449 = function(argcv) {    // method toGrace(_)
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  var var_depth = arguments[curarg];
                                                                  curarg++;
                                                                  // Start argument checking
                                                                  curarg = 1;
                                                                  setLineNumber(2303);    // compilenode identifier
                                                                  if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                              callmethod(var_Number, "asString", [0])._value + "."));
                                                                  curarg++;
                                                                  // End argument checking
                                                                  setModuleName("ast");
                                                                  setLineNumber(2304);    // compilenode string
                                                                  var string15450 = new GraceString("");
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call15453 = callmethodChecked(this, "nameString", []);
                                                                  var string15455 = new GraceString("\" as ");
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call15458 = callmethodChecked(this, "path", []);
                                                                  var string15460 = new GraceString("import \"");
                                                                  var opresult15462 = callmethodChecked(string15460, "++(1)", [1], call15458);
                                                                  var opresult15464 = callmethodChecked(opresult15462, "++(1)", [1], string15455);
                                                                  var opresult15466 = callmethodChecked(opresult15464, "++(1)", [1], call15453);
                                                                  var opresult15468 = callmethodChecked(opresult15466, "++(1)", [1], string15450);
                                                                  if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], opresult15468)))
                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                          new GraceString("result of method toGrace(_) does not have " + 
                                                                              callmethod(var_String, "asString", [0])._value + "."));
                                                                  return opresult15468;
                                                                };
                                                                func15449.paramTypes = [];
                                                                func15449.paramTypes.push([type_Number, "depth"]);
                                                                func15449.paramCounts = [1];
                                                                obj15237.methods["toGrace(1)"] = func15449;
                                                                func15449.definitionLine = 2303;
                                                                func15449.definitionModule = "ast";
                                                                var func15469 = function(argcv) {    // method shallowCopy
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  setModuleName("ast");
                                                                  setLineNumber(2307);    // compilenode identifier
                                                                  // call case 6: other requests
                                                                  // call case 4: self request
                                                                  onSelf = true;
                                                                  var call15473 = callmethodChecked(this, "path", []);
                                                                  // call case 6: other requests
                                                                  var call15474 = callmethodChecked(var_importNode, "new(3)", [3], call15473, var_nullNode, GraceFalse);
                                                                  var call15475 = callmethodChecked(call15474, "shallowCopyFieldsFrom(1)", [1], this);
                                                                  return call15475;
                                                                };
                                                                func15469.paramCounts = [0];
                                                                obj15237.methods["shallowCopy"] = func15469;
                                                                func15469.definitionLine = 2306;
                                                                func15469.definitionModule = "ast";
                                                                setLineNumber(2236);    // compilenode identifier
                                                                // call case 6: other requests
                                                                // call case 6: other requests
                                                                // call case 3: self.outer request
                                                                var call15479 = callmethodChecked(superDepth, "outer", [0]);
                                                                var call15480 = callmethodChecked(call15479, "outer", []);
                                                                var call15481 = callmethodChecked(call15480, "baseNode$object(1)", [0, 1], this);
                                                                obj15237.superobj = call15481;
                                                                if (call15481.data) obj15237.data = call15481.data;
                                                                if (call15481.hasOwnProperty('_value'))
                                                                    obj15237._value = call15481._value;
                                                                setLineNumber(2237);    // compilenode string
                                                                var string15482 = new GraceString("import");
                                                                obj15237.data["kind"] = string15482;
                                                                var reader_ast_kind15483 = function() {
                                                                  return this.data["kind"];
                                                                };
                                                                reader_ast_kind15483.def = true;
                                                                obj15237.methods["kind"] = reader_ast_kind15483;
                                                                setLineNumber(2238);    // compilenode identifier
                                                                obj15237.data["value"] = var_name__39__;
                                                                var reader_ast_value15484 = function() {
                                                                  return this.data["value"];
                                                                };
                                                                obj15237.methods["value"] = reader_ast_value15484;
                                                                obj15237.data["value"] = var_name__39__;
                                                                var writer_ast_value15484 = function(argcv, o) {
                                                                  this.data["value"] = o;
                                                                  return GraceDone;
                                                                };
                                                                obj15237.methods["value:=(1)"] = writer_ast_value15484;
                                                                obj15237.mutable = true;
                                                                setLineNumber(2239);    // compilenode identifier
                                                                obj15237.data["path"] = var_path__39__;
                                                                var reader_ast_path15485 = function() {
                                                                  return this.data["path"];
                                                                };
                                                                obj15237.methods["path"] = reader_ast_path15485;
                                                                obj15237.data["path"] = var_path__39__;
                                                                var writer_ast_path15485 = function(argcv, o) {
                                                                  this.data["path"] = o;
                                                                  return GraceDone;
                                                                };
                                                                obj15237.methods["path:=(1)"] = writer_ast_path15485;
                                                                obj15237.mutable = true;
                                                                setLineNumber(2240);    // compilenode array
                                                                var array15486 = new PrimitiveGraceList([]);
                                                                obj15237.data["annotations"] = array15486;
                                                                var reader_ast_annotations15487 = function() {
                                                                  return this.data["annotations"];
                                                                };
                                                                obj15237.methods["annotations"] = reader_ast_annotations15487;
                                                                obj15237.data["annotations"] = array15486;
                                                                var writer_ast_annotations15487 = function(argcv, o) {
                                                                  this.data["annotations"] = o;
                                                                  return GraceDone;
                                                                };
                                                                obj15237.methods["annotations:=(1)"] = writer_ast_annotations15487;
                                                                obj15237.mutable = true;
                                                                setLineNumber(2241);    // compilenode identifier
                                                                obj15237.data["dtype"] = var_dtype__39__;
                                                                var reader_ast_dtype15488 = function() {
                                                                  return this.data["dtype"];
                                                                };
                                                                obj15237.methods["dtype"] = reader_ast_dtype15488;
                                                                obj15237.data["dtype"] = var_dtype__39__;
                                                                var writer_ast_dtype15488 = function(argcv, o) {
                                                                  this.data["dtype"] = o;
                                                                  return GraceDone;
                                                                };
                                                                obj15237.methods["dtype:=(1)"] = writer_ast_dtype15488;
                                                                obj15237.mutable = true;
                                                                superDepth = origSuperDepth;
                                                              };
                                                              obj_init_15237.apply(obj15237, []);
                                                              return obj15237;
                                                            };
                                                            func15236.paramCounts = [3];
                                                            obj15234.methods["new(3)"] = func15236;
                                                            func15236.definitionLine = 2235;
                                                            func15236.definitionModule = "ast";
                                                              var func15489 = function(argcv) {    // method new(_,_,_)$object(_)
                                                                var curarg = 1;
                                                                var var_path__39__ = arguments[curarg];
                                                                curarg++;
                                                                var var_name__39__ = arguments[curarg];
                                                                curarg++;
                                                                var var_dtype__39__ = arguments[curarg];
                                                                curarg++;
                                                                var inheritingObject = arguments[curarg++];
                                                                // Start argument processing
                                                                curarg = 1;
                                                                curarg++;
                                                                curarg++;
                                                                curarg++;
                                                                // End argument processing
                                                                setModuleName("ast");
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var obj15490 = Grace_allocObject(null, "new(3)");
                                                                obj15490.definitionModule = "ast";
                                                                obj15490.definitionLine = 2235;
                                                                var inho15490 = inheritingObject;
                                                                while (inho15490.superobj) inho15490 = inho15490.superobj;
                                                                inho15490.superobj = obj15490;
                                                                obj15490.data = inheritingObject.data;
                                                                if (inheritingObject.hasOwnProperty('_value'))
                                                                  obj15490._value = inheritingObject._value;
                                                                obj15490.outer = this;
                                                                var reader_ast_outer15491 = function() {
                                                                  return this.outer;
                                                                };
                                                                obj15490.methods["outer"] = reader_ast_outer15491;
                                                                var obj_init_15490 = function() {
                                                                  var origSuperDepth = superDepth;
                                                                  superDepth = obj15490;
                                                                  var func15492 = function(argcv) {    // method isImport
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    setModuleName("ast");
                                                                    // isImport is a simple accessor - elide try ... catch
                                                                    setLineNumber(2242);    // compilenode identifier
                                                                    return GraceTrue;
                                                                  };
                                                                  func15492.paramCounts = [0];
                                                                  obj15490.methods["isImport"] = func15492;
                                                                  func15492.definitionLine = 2242;
                                                                  func15492.definitionModule = "ast";
                                                                  var func15493 = function(argcv) {    // method isExternal
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    setModuleName("ast");
                                                                    // isExternal is a simple accessor - elide try ... catch
                                                                    setLineNumber(2243);    // compilenode identifier
                                                                    return GraceTrue;
                                                                  };
                                                                  func15493.paramCounts = [0];
                                                                  obj15490.methods["isExternal"] = func15493;
                                                                  func15493.definitionLine = 2243;
                                                                  func15493.definitionModule = "ast";
                                                                  var func15494 = function(argcv) {    // method isExecutable
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    setModuleName("ast");
                                                                    // isExecutable is a simple accessor - elide try ... catch
                                                                    setLineNumber(2244);    // compilenode identifier
                                                                    return GraceFalse;
                                                                  };
                                                                  func15494.paramCounts = [0];
                                                                  obj15490.methods["isExecutable"] = func15494;
                                                                  func15494.definitionLine = 2244;
                                                                  func15494.definitionModule = "ast";
                                                                  var func15495 = function(argcv) {    // method name
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    setModuleName("ast");
                                                                    setLineNumber(2245);    // compilenode member
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call15497 = callmethodChecked(this, "value", []);
                                                                    return call15497;
                                                                  };
                                                                  func15495.paramCounts = [0];
                                                                  obj15490.methods["name"] = func15495;
                                                                  func15495.definitionLine = 2245;
                                                                  func15495.definitionModule = "ast";
                                                                  var func15498 = function(argcv) {    // method nameString
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    setModuleName("ast");
                                                                    setLineNumber(2246);    // compilenode member
                                                                    // call case 6: other requests
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call15501 = callmethodChecked(this, "value", []);
                                                                    var call15502 = callmethodChecked(call15501, "nameString", []);
                                                                    return call15502;
                                                                  };
                                                                  func15498.paramCounts = [0];
                                                                  obj15490.methods["nameString"] = func15498;
                                                                  func15498.definitionLine = 2246;
                                                                  func15498.definitionModule = "ast";
                                                                  var func15503 = function(argcv) {    // method isPublic
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    setModuleName("ast");
                                                                    var if15504 = GraceDone;
                                                                    setLineNumber(2249);    // compilenode member
                                                                    // call case 6: other requests
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call15508 = callmethodChecked(this, "annotations", []);
                                                                    var call15509 = callmethodChecked(call15508, "size", []);
                                                                    var opresult15511 = callmethodChecked(call15509, "==(1)", [1], new GraceNum(0));
                                                                    if (Grace_isTrue(opresult15511)) {
                                                                      return GraceFalse;
                                                                    }
                                                                    var if15512 = GraceDone;
                                                                    setLineNumber(2250);    // compilenode string
                                                                    var string15514 = new GraceString("public");
                                                                    // call case 6: other requests
                                                                    // call case 6: other requests
                                                                    // call case 3: self.outer request
                                                                    var call15517 = callmethodChecked(superDepth, "outer", [0]);
                                                                    var call15518 = callmethodChecked(call15517, "outer", []);
                                                                    onSelf = true;
                                                                    var call15519 = callmethodChecked(call15518, "findAnnotation(2)", [2], this, string15514);
                                                                    if (Grace_isTrue(call15519)) {
                                                                      return GraceTrue;
                                                                    }
                                                                    setLineNumber(2251);    // compilenode string
                                                                    var string15521 = new GraceString("readable");
                                                                    // call case 6: other requests
                                                                    // call case 6: other requests
                                                                    // call case 3: self.outer request
                                                                    var call15524 = callmethodChecked(superDepth, "outer", [0]);
                                                                    var call15525 = callmethodChecked(call15524, "outer", []);
                                                                    onSelf = true;
                                                                    var call15526 = callmethodChecked(call15525, "findAnnotation(2)", [2], this, string15521);
                                                                    return call15526;
                                                                  };
                                                                  func15503.paramCounts = [0];
                                                                  obj15490.methods["isPublic"] = func15503;
                                                                  func15503.definitionLine = 2247;
                                                                  func15503.definitionModule = "ast";
                                                                  var func15527 = function(argcv) {    // method moduleName
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    setModuleName("ast");
                                                                    setLineNumber(2254);    // compilenode string
                                                                    var string15528 = new GraceString("");
                                                                    var var_bnm = string15528;
                                                                    setLineNumber(2255);    // compilenode member
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call15531 = callmethodChecked(this, "path", []);
                                                                    var block15532 = new GraceBlock(this, 2255, 1);
                                                                    setLineNumber(1);    // compilenode identifier
                                                                    block15532.real = function(var_c) {
                                                                      var if15533 = GraceDone;
                                                                      setLineNumber(2256);    // compilenode string
                                                                      var string15534 = new GraceString("/");
                                                                      var opresult15537 = callmethodChecked(var_c, "==(1)", [1], string15534);
                                                                      if (Grace_isTrue(opresult15537)) {
                                                                        setLineNumber(2257);    // compilenode string
                                                                        var string15538 = new GraceString("");
                                                                        var_bnm = string15538;
                                                                        if15533 = GraceDone;
                                                                      } else {
                                                                        setLineNumber(2259);    // compilenode identifier
                                                                        var opresult15541 = callmethodChecked(var_bnm, "++(1)", [1], var_c);
                                                                        var_bnm = opresult15541;
                                                                        if15533 = GraceDone;
                                                                      }
                                                                      return if15533;
                                                                    };
                                                                    // call case 5: prelude request
                                                                    var call15542 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call15531, block15532);
                                                                    setLineNumber(2262);    // compilenode identifier
                                                                    return var_bnm;
                                                                  };
                                                                  func15527.paramCounts = [0];
                                                                  obj15490.methods["moduleName"] = func15527;
                                                                  func15527.definitionLine = 2253;
                                                                  func15527.definitionModule = "ast";
                                                                  var func15543 = function(argcv) {    // method isWritable
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    setModuleName("ast");
                                                                    // isWritable is a simple accessor - elide try ... catch
                                                                    setLineNumber(2264);    // compilenode identifier
                                                                    return GraceFalse;
                                                                  };
                                                                  func15543.paramCounts = [0];
                                                                  obj15490.methods["isWritable"] = func15543;
                                                                  func15543.definitionLine = 2264;
                                                                  func15543.definitionModule = "ast";
                                                                  var func15544 = function(argcv) {    // method isReadable
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    setModuleName("ast");
                                                                    setLineNumber(2265);    // compilenode member
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call15546 = callmethodChecked(this, "isPublic", []);
                                                                    return call15546;
                                                                  };
                                                                  func15544.paramCounts = [0];
                                                                  obj15490.methods["isReadable"] = func15544;
                                                                  func15544.definitionLine = 2265;
                                                                  func15544.definitionModule = "ast";
                                                                  var func15547 = function(argcv) {    // method declarationKindWithAncestors(_)
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    var var_as = arguments[curarg];
                                                                    curarg++;
                                                                    setModuleName("ast");
                                                                    setLineNumber(2266);    // compilenode member
                                                                    // call case 6: other requests
                                                                    var call15549 = callmethodChecked(var_k, "defdec", []);
                                                                    return call15549;
                                                                  };
                                                                  func15547.paramCounts = [1];
                                                                  obj15490.methods["declarationKindWithAncestors(1)"] = func15547;
                                                                  func15547.definitionLine = 2266;
                                                                  func15547.definitionModule = "ast";
                                                                  var func15550 = function(argcv) {    // method usesAsType(_)
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    var var_aNode = arguments[curarg];
                                                                    curarg++;
                                                                    setModuleName("ast");
                                                                    setLineNumber(2268);    // compilenode member
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call15552 = callmethodChecked(this, "dtype", []);
                                                                    var opresult15555 = callmethodChecked(var_aNode, "==(1)", [1], call15552);
                                                                    return opresult15555;
                                                                  };
                                                                  func15550.paramCounts = [1];
                                                                  obj15490.methods["usesAsType(1)"] = func15550;
                                                                  func15550.definitionLine = 2267;
                                                                  func15550.definitionModule = "ast";
                                                                  var func15556 = function(argcv) {    // method accept(_)from(_)
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    var var_visitor = arguments[curarg];
                                                                    curarg++;
                                                                    var var_as = arguments[curarg];
                                                                    curarg++;
                                                                    // Start argument checking
                                                                    curarg = 1;
                                                                    setLineNumber(2270);    // compilenode identifier
                                                                    if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                            new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                                callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                                    curarg++;
                                                                    curarg++;
                                                                    // End argument checking
                                                                    setModuleName("ast");
                                                                    var if15557 = GraceDone;
                                                                    setLineNumber(2271);    // compilenode identifier
                                                                    // call case 6: other requests
                                                                    var call15559 = callmethodChecked(var_visitor, "visitImport(1)up(1)", [1, 1], this, var_as);
                                                                    if (Grace_isTrue(call15559)) {
                                                                      setLineNumber(2272);    // compilenode identifier
                                                                      // call case 6: other requests
                                                                      var call15561 = callmethodChecked(var_as, "extend(1)", [1], this);
                                                                      var var_newChain = call15561;
                                                                      setLineNumber(2273);    // compilenode member
                                                                      // call case 4: self request
                                                                      onSelf = true;
                                                                      var call15564 = callmethodChecked(this, "annotations", []);
                                                                      var block15565 = new GraceBlock(this, 2273, 1);
                                                                      setLineNumber(1);    // compilenode identifier
                                                                      block15565.real = function(var_ann) {
                                                                        setLineNumber(2274);    // compilenode identifier
                                                                        // call case 6: other requests
                                                                        var call15567 = callmethodChecked(var_ann, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                                        return call15567;
                                                                      };
                                                                      // call case 5: prelude request
                                                                      var call15568 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call15564, block15565);
                                                                      setLineNumber(2276);    // compilenode identifier
                                                                      // call case 6: other requests
                                                                      // call case 4: self request
                                                                      onSelf = true;
                                                                      var call15571 = callmethodChecked(this, "value", []);
                                                                      var call15572 = callmethodChecked(call15571, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                                      var if15573 = GraceDone;
                                                                      setLineNumber(2277);    // compilenode member
                                                                      // call case 4: self request
                                                                      onSelf = true;
                                                                      var call15575 = callmethodChecked(this, "dtype", []);
                                                                      var opresult15578 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call15575);
                                                                      if (Grace_isTrue(opresult15578)) {
                                                                        setLineNumber(2278);    // compilenode identifier
                                                                        // call case 6: other requests
                                                                        // call case 4: self request
                                                                        onSelf = true;
                                                                        var call15581 = callmethodChecked(this, "dtype", []);
                                                                        var call15582 = callmethodChecked(call15581, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                                        if15573 = call15582;
                                                                      }
                                                                      if15557 = if15573;
                                                                    }
                                                                    return if15557;
                                                                  };
                                                                  func15556.paramTypes = [];
                                                                  func15556.paramTypes.push([]);
                                                                  func15556.paramTypes.push([]);
                                                                  func15556.paramCounts = [1, 1];
                                                                  obj15490.methods["accept(1)from(1)"] = func15556;
                                                                  func15556.definitionLine = 2270;
                                                                  func15556.definitionModule = "ast";
                                                                  var func15583 = function(argcv) {    // method map(_)ancestors(_)
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    var var_blk = arguments[curarg];
                                                                    curarg++;
                                                                    var var_as = arguments[curarg];
                                                                    curarg++;
                                                                    setModuleName("ast");
                                                                    setLineNumber(2283);    // compilenode member
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call15585 = callmethodChecked(this, "shallowCopy", []);
                                                                    var var_n = call15585;
                                                                    setLineNumber(2284);    // compilenode identifier
                                                                    // call case 6: other requests
                                                                    var call15587 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                                                    var var_newChain = call15587;
                                                                    setLineNumber(2285);    // compilenode identifier
                                                                    // call case 6: other requests
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call15591 = callmethodChecked(this, "value", []);
                                                                    var call15592 = callmethodChecked(call15591, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
                                                                    // call case 6: other requests
                                                                    var call15593 = callmethodChecked(var_n, "value:=(1)", [1], call15592);
                                                                    setLineNumber(2286);    // compilenode member
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call15597 = callmethodChecked(this, "dtype", []);
                                                                    // call case 6: other requests
                                                                    // call case 6: other requests
                                                                    // call case 3: self.outer request
                                                                    var call15600 = callmethodChecked(superDepth, "outer", [0]);
                                                                    var call15601 = callmethodChecked(call15600, "outer", []);
                                                                    onSelf = true;
                                                                    var call15602 = callmethodChecked(call15601, "maybeMap(2)ancestors(1)", [2, 1], call15597, var_blk, var_newChain);
                                                                    // call case 6: other requests
                                                                    var call15603 = callmethodChecked(var_n, "dtype:=(1)", [1], call15602);
                                                                    setLineNumber(2287);    // compilenode member
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call15607 = callmethodChecked(this, "annotations", []);
                                                                    // call case 6: other requests
                                                                    // call case 6: other requests
                                                                    // call case 3: self.outer request
                                                                    var call15610 = callmethodChecked(superDepth, "outer", [0]);
                                                                    var call15611 = callmethodChecked(call15610, "outer", []);
                                                                    onSelf = true;
                                                                    var call15612 = callmethodChecked(call15611, "listMap(2)ancestors(1)", [2, 1], call15607, var_blk, var_newChain);
                                                                    // call case 6: other requests
                                                                    var call15613 = callmethodChecked(var_n, "annotations:=(1)", [1], call15612);
                                                                    setLineNumber(2288);    // compilenode identifier
                                                                    // call case 6: other requests
                                                                    var call15615 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                                                    return call15615;
                                                                  };
                                                                  func15583.paramCounts = [1, 1];
                                                                  obj15490.methods["map(1)ancestors(1)"] = func15583;
                                                                  func15583.definitionLine = 2282;
                                                                  func15583.definitionModule = "ast";
                                                                  var func15616 = function(argcv) {    // method pretty(_)
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    var var_depth = arguments[curarg];
                                                                    curarg++;
                                                                    setModuleName("ast");
                                                                    setLineNumber(2291);    // compilenode string
                                                                    var string15617 = new GraceString("");
                                                                    var var_spc = string15617;
                                                                    setLineNumber(2292);    // compilenode num
                                                                    var opresult15621 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                                                                    var block15622 = new GraceBlock(this, 2292, 1);
                                                                    setLineNumber(1);    // compilenode identifier
                                                                    block15622.real = function(var_i) {
                                                                      setLineNumber(2293);    // compilenode string
                                                                      var string15623 = new GraceString("  ");
                                                                      var opresult15626 = callmethodChecked(var_spc, "++(1)", [1], string15623);
                                                                      var_spc = opresult15626;
                                                                      return GraceDone;
                                                                    };
                                                                    // call case 5: prelude request
                                                                    var call15627 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult15621, block15622);
                                                                    setLineNumber(2295);    // compilenode string
                                                                    var string15628 = new GraceString("\n");
                                                                    // call case 1: super request
                                                                    var call15631 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                                                    var opresult15633 = callmethodChecked(call15631, "++(1)", [1], string15628);
                                                                    var var_s = opresult15633;
                                                                    setLineNumber(2296);    // compilenode string
                                                                    var string15634 = new GraceString("\n");
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call15637 = callmethodChecked(this, "path", []);
                                                                    var string15639 = new GraceString("Path: ");
                                                                    var string15642 = new GraceString("");
                                                                    var opresult15644 = callmethodChecked(string15642, "++(1)", [1], var_spc);
                                                                    var opresult15646 = callmethodChecked(opresult15644, "++(1)", [1], string15639);
                                                                    var opresult15648 = callmethodChecked(opresult15646, "++(1)", [1], call15637);
                                                                    var opresult15650 = callmethodChecked(opresult15648, "++(1)", [1], string15634);
                                                                    var opresult15653 = callmethodChecked(var_s, "++(1)", [1], opresult15650);
                                                                    var_s = opresult15653;
                                                                    setLineNumber(2297);    // compilenode string
                                                                    var string15654 = new GraceString("\n");
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call15657 = callmethodChecked(this, "value", []);
                                                                    var string15659 = new GraceString("Identifier: ");
                                                                    var string15662 = new GraceString("");
                                                                    var opresult15664 = callmethodChecked(string15662, "++(1)", [1], var_spc);
                                                                    var opresult15666 = callmethodChecked(opresult15664, "++(1)", [1], string15659);
                                                                    var opresult15668 = callmethodChecked(opresult15666, "++(1)", [1], call15657);
                                                                    var opresult15670 = callmethodChecked(opresult15668, "++(1)", [1], string15654);
                                                                    var opresult15673 = callmethodChecked(var_s, "++(1)", [1], opresult15670);
                                                                    var_s = opresult15673;
                                                                    var if15674 = GraceDone;
                                                                    setLineNumber(2298);    // compilenode member
                                                                    // call case 6: other requests
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call15678 = callmethodChecked(this, "annotations", []);
                                                                    var call15679 = callmethodChecked(call15678, "size", []);
                                                                    var opresult15681 = callmethodChecked(call15679, ">(1)", [1], new GraceNum(0));
                                                                    if (Grace_isTrue(opresult15681)) {
                                                                      setLineNumber(2299);    // compilenode string
                                                                      var string15682 = new GraceString("\n");
                                                                      // call case 4: self request
                                                                      onSelf = true;
                                                                      var call15685 = callmethodChecked(this, "annotations", []);
                                                                      var string15687 = new GraceString("Anotations: ");
                                                                      var string15690 = new GraceString("");
                                                                      var opresult15692 = callmethodChecked(string15690, "++(1)", [1], var_spc);
                                                                      var opresult15694 = callmethodChecked(opresult15692, "++(1)", [1], string15687);
                                                                      var opresult15696 = callmethodChecked(opresult15694, "++(1)", [1], call15685);
                                                                      var opresult15698 = callmethodChecked(opresult15696, "++(1)", [1], string15682);
                                                                      var opresult15701 = callmethodChecked(var_s, "++(1)", [1], opresult15698);
                                                                      var_s = opresult15701;
                                                                      if15674 = GraceDone;
                                                                    }
                                                                    setLineNumber(2301);    // compilenode identifier
                                                                    return var_s;
                                                                  };
                                                                  func15616.paramCounts = [1];
                                                                  obj15490.methods["pretty(1)"] = func15616;
                                                                  func15616.definitionLine = 2290;
                                                                  func15616.definitionModule = "ast";
                                                                  var func15702 = function(argcv) {    // method toGrace(_)
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    var var_depth = arguments[curarg];
                                                                    curarg++;
                                                                    // Start argument checking
                                                                    curarg = 1;
                                                                    setLineNumber(2303);    // compilenode identifier
                                                                    if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                            new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                                callmethod(var_Number, "asString", [0])._value + "."));
                                                                    curarg++;
                                                                    // End argument checking
                                                                    setModuleName("ast");
                                                                    setLineNumber(2304);    // compilenode string
                                                                    var string15703 = new GraceString("");
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call15706 = callmethodChecked(this, "nameString", []);
                                                                    var string15708 = new GraceString("\" as ");
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call15711 = callmethodChecked(this, "path", []);
                                                                    var string15713 = new GraceString("import \"");
                                                                    var opresult15715 = callmethodChecked(string15713, "++(1)", [1], call15711);
                                                                    var opresult15717 = callmethodChecked(opresult15715, "++(1)", [1], string15708);
                                                                    var opresult15719 = callmethodChecked(opresult15717, "++(1)", [1], call15706);
                                                                    var opresult15721 = callmethodChecked(opresult15719, "++(1)", [1], string15703);
                                                                    if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], opresult15721)))
                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                            new GraceString("result of method toGrace(_) does not have " + 
                                                                                callmethod(var_String, "asString", [0])._value + "."));
                                                                    return opresult15721;
                                                                  };
                                                                  func15702.paramTypes = [];
                                                                  func15702.paramTypes.push([type_Number, "depth"]);
                                                                  func15702.paramCounts = [1];
                                                                  obj15490.methods["toGrace(1)"] = func15702;
                                                                  func15702.definitionLine = 2303;
                                                                  func15702.definitionModule = "ast";
                                                                  var func15722 = function(argcv) {    // method shallowCopy
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    setModuleName("ast");
                                                                    setLineNumber(2307);    // compilenode identifier
                                                                    // call case 6: other requests
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call15726 = callmethodChecked(this, "path", []);
                                                                    // call case 6: other requests
                                                                    var call15727 = callmethodChecked(var_importNode, "new(3)", [3], call15726, var_nullNode, GraceFalse);
                                                                    var call15728 = callmethodChecked(call15727, "shallowCopyFieldsFrom(1)", [1], this);
                                                                    return call15728;
                                                                  };
                                                                  func15722.paramCounts = [0];
                                                                  obj15490.methods["shallowCopy"] = func15722;
                                                                  func15722.definitionLine = 2306;
                                                                  func15722.definitionModule = "ast";
                                                                  setLineNumber(2236);    // compilenode identifier
                                                                  // call case 6: other requests
                                                                  // call case 6: other requests
                                                                  // call case 3: self.outer request
                                                                  var call15732 = callmethodChecked(superDepth, "outer", [0]);
                                                                  var call15733 = callmethodChecked(call15732, "outer", []);
                                                                  var call15734 = callmethodChecked(call15733, "baseNode$object(1)", [0, 1], this);
                                                                  obj15490.superobj = call15734;
                                                                  if (call15734.data) obj15490.data = call15734.data;
                                                                  if (call15734.hasOwnProperty('_value'))
                                                                      obj15490._value = call15734._value;
                                                                  setLineNumber(2237);    // compilenode string
                                                                  var string15735 = new GraceString("import");
                                                                  obj15490.data["kind"] = string15735;
                                                                  var reader_ast_kind15736 = function() {
                                                                    return this.data["kind"];
                                                                  };
                                                                  reader_ast_kind15736.def = true;
                                                                  obj15490.methods["kind"] = reader_ast_kind15736;
                                                                  setLineNumber(2238);    // compilenode identifier
                                                                  obj15490.data["value"] = var_name__39__;
                                                                  var reader_ast_value15737 = function() {
                                                                    return this.data["value"];
                                                                  };
                                                                  obj15490.methods["value"] = reader_ast_value15737;
                                                                  obj15490.data["value"] = var_name__39__;
                                                                  var writer_ast_value15737 = function(argcv, o) {
                                                                    this.data["value"] = o;
                                                                    return GraceDone;
                                                                  };
                                                                  obj15490.methods["value:=(1)"] = writer_ast_value15737;
                                                                  obj15490.mutable = true;
                                                                  setLineNumber(2239);    // compilenode identifier
                                                                  obj15490.data["path"] = var_path__39__;
                                                                  var reader_ast_path15738 = function() {
                                                                    return this.data["path"];
                                                                  };
                                                                  obj15490.methods["path"] = reader_ast_path15738;
                                                                  obj15490.data["path"] = var_path__39__;
                                                                  var writer_ast_path15738 = function(argcv, o) {
                                                                    this.data["path"] = o;
                                                                    return GraceDone;
                                                                  };
                                                                  obj15490.methods["path:=(1)"] = writer_ast_path15738;
                                                                  obj15490.mutable = true;
                                                                  setLineNumber(2240);    // compilenode array
                                                                  var array15739 = new PrimitiveGraceList([]);
                                                                  obj15490.data["annotations"] = array15739;
                                                                  var reader_ast_annotations15740 = function() {
                                                                    return this.data["annotations"];
                                                                  };
                                                                  obj15490.methods["annotations"] = reader_ast_annotations15740;
                                                                  obj15490.data["annotations"] = array15739;
                                                                  var writer_ast_annotations15740 = function(argcv, o) {
                                                                    this.data["annotations"] = o;
                                                                    return GraceDone;
                                                                  };
                                                                  obj15490.methods["annotations:=(1)"] = writer_ast_annotations15740;
                                                                  obj15490.mutable = true;
                                                                  setLineNumber(2241);    // compilenode identifier
                                                                  obj15490.data["dtype"] = var_dtype__39__;
                                                                  var reader_ast_dtype15741 = function() {
                                                                    return this.data["dtype"];
                                                                  };
                                                                  obj15490.methods["dtype"] = reader_ast_dtype15741;
                                                                  obj15490.data["dtype"] = var_dtype__39__;
                                                                  var writer_ast_dtype15741 = function(argcv, o) {
                                                                    this.data["dtype"] = o;
                                                                    return GraceDone;
                                                                  };
                                                                  obj15490.methods["dtype:=(1)"] = writer_ast_dtype15741;
                                                                  obj15490.mutable = true;
                                                                  superDepth = origSuperDepth;
                                                                };
                                                                obj_init_15490.apply(inheritingObject, []);
                                                                return obj15490;
                                                                };
                                                                obj15234.methods["new(3)$object(1)"] = func15489;
                                                              superDepth = origSuperDepth;
                                                            };
                                                            obj_init_15234.apply(obj15234, []);
                                                            var var_importNode = obj15234;
                                                            setLineNumber(1);    // compilenode method
                                                            var func15742 = function(argcv) {    // method importNode
                                                              var returnTarget = invocationCount;
                                                              invocationCount++;
                                                              var curarg = 1;
                                                              setModuleName("ast");
                                                              // importNode is a simple accessor - elide try ... catch
                                                              setLineNumber(2234);    // compilenode identifier
                                                              return var_importNode;
                                                            };
                                                            func15742.paramCounts = [0];
                                                            this.methods["importNode"] = func15742;
                                                            func15742.definitionLine = 1;
                                                            func15742.definitionModule = "ast";
                                                            this.methods["importNode"].debug = "def";
                                                            setLineNumber(2311);    // compilenode object
                                                            var obj15743 = Grace_allocObject(GraceObject, "dialectNode");
                                                            obj15743.definitionModule = "ast";
                                                            obj15743.definitionLine = 2311;
                                                            obj15743.outer = this;
                                                            var reader_ast_outer15744 = function() {
                                                              return this.outer;
                                                            };
                                                            obj15743.methods["outer"] = reader_ast_outer15744;
                                                            var obj_init_15743 = function() {
                                                              var origSuperDepth = superDepth;
                                                              superDepth = obj15743;
                                                              var func15745 = function(argcv) {    // method new(_)
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                var var_path__39__ = arguments[curarg];
                                                                curarg++;
                                                                setModuleName("ast");
                                                                setLineNumber(2312);    // compilenode object
                                                                var obj15746 = Grace_allocObject(null, "dialectNode.new(_)");
                                                                obj15746.definitionModule = "ast";
                                                                obj15746.definitionLine = 2312;
                                                                obj15746.outer = this;
                                                                var reader_ast_outer15747 = function() {
                                                                  return this.outer;
                                                                };
                                                                obj15746.methods["outer"] = reader_ast_outer15747;
                                                                var obj_init_15746 = function() {
                                                                  var origSuperDepth = superDepth;
                                                                  superDepth = obj15746;
                                                                  var func15748 = function(argcv) {    // method isDialect
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    setModuleName("ast");
                                                                    // isDialect is a simple accessor - elide try ... catch
                                                                    setLineNumber(2317);    // compilenode identifier
                                                                    return GraceTrue;
                                                                  };
                                                                  func15748.paramCounts = [0];
                                                                  obj15746.methods["isDialect"] = func15748;
                                                                  func15748.definitionLine = 2317;
                                                                  func15748.definitionModule = "ast";
                                                                  var func15749 = function(argcv) {    // method isExternal
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    setModuleName("ast");
                                                                    // isExternal is a simple accessor - elide try ... catch
                                                                    setLineNumber(2318);    // compilenode identifier
                                                                    return GraceTrue;
                                                                  };
                                                                  func15749.paramCounts = [0];
                                                                  obj15746.methods["isExternal"] = func15749;
                                                                  func15749.definitionLine = 2318;
                                                                  func15749.definitionModule = "ast";
                                                                  var func15750 = function(argcv) {    // method isExecutable
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    setModuleName("ast");
                                                                    // isExecutable is a simple accessor - elide try ... catch
                                                                    setLineNumber(2319);    // compilenode identifier
                                                                    return GraceFalse;
                                                                  };
                                                                  func15750.paramCounts = [0];
                                                                  obj15746.methods["isExecutable"] = func15750;
                                                                  func15750.definitionLine = 2319;
                                                                  func15750.definitionModule = "ast";
                                                                  var func15751 = function(argcv) {    // method moduleName
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    setModuleName("ast");
                                                                    setLineNumber(2321);    // compilenode string
                                                                    var string15752 = new GraceString("");
                                                                    var var_bnm = string15752;
                                                                    setLineNumber(2322);    // compilenode member
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call15755 = callmethodChecked(this, "value", []);
                                                                    var block15756 = new GraceBlock(this, 2322, 1);
                                                                    setLineNumber(1);    // compilenode identifier
                                                                    block15756.real = function(var_c) {
                                                                      var if15757 = GraceDone;
                                                                      setLineNumber(2323);    // compilenode string
                                                                      var string15758 = new GraceString("/");
                                                                      var opresult15761 = callmethodChecked(var_c, "==(1)", [1], string15758);
                                                                      if (Grace_isTrue(opresult15761)) {
                                                                        setLineNumber(2324);    // compilenode string
                                                                        var string15762 = new GraceString("");
                                                                        var_bnm = string15762;
                                                                        if15757 = GraceDone;
                                                                      } else {
                                                                        setLineNumber(2326);    // compilenode identifier
                                                                        var opresult15765 = callmethodChecked(var_bnm, "++(1)", [1], var_c);
                                                                        var_bnm = opresult15765;
                                                                        if15757 = GraceDone;
                                                                      }
                                                                      return if15757;
                                                                    };
                                                                    // call case 5: prelude request
                                                                    var call15766 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call15755, block15756);
                                                                    setLineNumber(2329);    // compilenode identifier
                                                                    return var_bnm;
                                                                  };
                                                                  func15751.paramCounts = [0];
                                                                  obj15746.methods["moduleName"] = func15751;
                                                                  func15751.definitionLine = 2320;
                                                                  func15751.definitionModule = "ast";
                                                                  var func15767 = function(argcv) {    // method path
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    setModuleName("ast");
                                                                    setLineNumber(2332);    // compilenode member
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call15769 = callmethodChecked(this, "value", []);
                                                                    return call15769;
                                                                  };
                                                                  func15767.paramCounts = [0];
                                                                  obj15746.methods["path"] = func15767;
                                                                  func15767.definitionLine = 2331;
                                                                  func15767.definitionModule = "ast";
                                                                  var func15770 = function(argcv) {    // method accept(_)from(_)
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    var var_visitor = arguments[curarg];
                                                                    curarg++;
                                                                    var var_as = arguments[curarg];
                                                                    curarg++;
                                                                    // Start argument checking
                                                                    curarg = 1;
                                                                    setLineNumber(2334);    // compilenode identifier
                                                                    if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                            new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                                callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                                    curarg++;
                                                                    curarg++;
                                                                    // End argument checking
                                                                    setModuleName("ast");
                                                                    setLineNumber(2335);    // compilenode identifier
                                                                    // call case 6: other requests
                                                                    var call15772 = callmethodChecked(var_visitor, "visitDialect(1)up(1)", [1, 1], this, var_as);
                                                                    return call15772;
                                                                  };
                                                                  func15770.paramTypes = [];
                                                                  func15770.paramTypes.push([]);
                                                                  func15770.paramTypes.push([]);
                                                                  func15770.paramCounts = [1, 1];
                                                                  obj15746.methods["accept(1)from(1)"] = func15770;
                                                                  func15770.definitionLine = 2334;
                                                                  func15770.definitionModule = "ast";
                                                                  var func15773 = function(argcv) {    // method map(_)ancestors(_)
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    var var_blk = arguments[curarg];
                                                                    curarg++;
                                                                    var var_as = arguments[curarg];
                                                                    curarg++;
                                                                    setModuleName("ast");
                                                                    setLineNumber(2338);    // compilenode member
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call15775 = callmethodChecked(this, "shallowCopy", []);
                                                                    var var_n = call15775;
                                                                    setLineNumber(2339);    // compilenode identifier
                                                                    // call case 6: other requests
                                                                    var call15777 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                                                    var var_newChain = call15777;
                                                                    setLineNumber(2340);    // compilenode identifier
                                                                    // call case 6: other requests
                                                                    var call15779 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                                                    return call15779;
                                                                  };
                                                                  func15773.paramCounts = [1, 1];
                                                                  obj15746.methods["map(1)ancestors(1)"] = func15773;
                                                                  func15773.definitionLine = 2337;
                                                                  func15773.definitionModule = "ast";
                                                                  var func15780 = function(argcv) {    // method pretty(_)
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    var var_depth = arguments[curarg];
                                                                    curarg++;
                                                                    setModuleName("ast");
                                                                    setLineNumber(2343);    // compilenode string
                                                                    var string15781 = new GraceString("");
                                                                    var var_spc = string15781;
                                                                    setLineNumber(2344);    // compilenode num
                                                                    var opresult15785 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                                                                    var block15786 = new GraceBlock(this, 2344, 1);
                                                                    setLineNumber(1);    // compilenode identifier
                                                                    block15786.real = function(var_i) {
                                                                      setLineNumber(2345);    // compilenode string
                                                                      var string15787 = new GraceString("  ");
                                                                      var opresult15790 = callmethodChecked(var_spc, "++(1)", [1], string15787);
                                                                      var_spc = opresult15790;
                                                                      return GraceDone;
                                                                    };
                                                                    // call case 5: prelude request
                                                                    var call15791 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult15785, block15786);
                                                                    setLineNumber(2347);    // compilenode string
                                                                    var string15792 = new GraceString("\n");
                                                                    // call case 1: super request
                                                                    var call15795 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                                                    var opresult15797 = callmethodChecked(call15795, "++(1)", [1], string15792);
                                                                    var var_s = opresult15797;
                                                                    setLineNumber(2348);    // compilenode string
                                                                    var string15798 = new GraceString("\n");
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call15801 = callmethodChecked(this, "value", []);
                                                                    var string15803 = new GraceString("Path: ");
                                                                    var string15806 = new GraceString("");
                                                                    var opresult15808 = callmethodChecked(string15806, "++(1)", [1], var_spc);
                                                                    var opresult15810 = callmethodChecked(opresult15808, "++(1)", [1], string15803);
                                                                    var opresult15812 = callmethodChecked(opresult15810, "++(1)", [1], call15801);
                                                                    var opresult15814 = callmethodChecked(opresult15812, "++(1)", [1], string15798);
                                                                    var opresult15817 = callmethodChecked(var_s, "++(1)", [1], opresult15814);
                                                                    var_s = opresult15817;
                                                                    setLineNumber(2349);    // compilenode identifier
                                                                    return var_s;
                                                                  };
                                                                  func15780.paramCounts = [1];
                                                                  obj15746.methods["pretty(1)"] = func15780;
                                                                  func15780.definitionLine = 2342;
                                                                  func15780.definitionModule = "ast";
                                                                  var func15818 = function(argcv) {    // method toGrace(_)
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    var var_depth = arguments[curarg];
                                                                    curarg++;
                                                                    // Start argument checking
                                                                    curarg = 1;
                                                                    setLineNumber(2351);    // compilenode identifier
                                                                    if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                            new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                                callmethod(var_Number, "asString", [0])._value + "."));
                                                                    curarg++;
                                                                    // End argument checking
                                                                    setModuleName("ast");
                                                                    setLineNumber(2352);    // compilenode string
                                                                    var string15819 = new GraceString("\"");
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call15822 = callmethodChecked(this, "value", []);
                                                                    var string15824 = new GraceString("dialect \"");
                                                                    var opresult15826 = callmethodChecked(string15824, "++(1)", [1], call15822);
                                                                    var opresult15828 = callmethodChecked(opresult15826, "++(1)", [1], string15819);
                                                                    if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], opresult15828)))
                                                                        throw new GraceExceptionPacket(TypeErrorObject,
                                                                            new GraceString("result of method toGrace(_) does not have " + 
                                                                                callmethod(var_String, "asString", [0])._value + "."));
                                                                    return opresult15828;
                                                                  };
                                                                  func15818.paramTypes = [];
                                                                  func15818.paramTypes.push([type_Number, "depth"]);
                                                                  func15818.paramCounts = [1];
                                                                  obj15746.methods["toGrace(1)"] = func15818;
                                                                  func15818.definitionLine = 2351;
                                                                  func15818.definitionModule = "ast";
                                                                  var func15829 = function(argcv) {    // method shallowCopy
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    setModuleName("ast");
                                                                    setLineNumber(2355);    // compilenode identifier
                                                                    // call case 6: other requests
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call15833 = callmethodChecked(this, "value", []);
                                                                    // call case 6: other requests
                                                                    var call15834 = callmethodChecked(var_dialectNode, "new(1)", [1], call15833);
                                                                    var call15835 = callmethodChecked(call15834, "shallowCopyFieldsFrom(1)", [1], this);
                                                                    return call15835;
                                                                  };
                                                                  func15829.paramCounts = [0];
                                                                  obj15746.methods["shallowCopy"] = func15829;
                                                                  func15829.definitionLine = 2354;
                                                                  func15829.definitionModule = "ast";
                                                                  setLineNumber(2313);    // compilenode identifier
                                                                  // call case 6: other requests
                                                                  // call case 6: other requests
                                                                  // call case 3: self.outer request
                                                                  var call15839 = callmethodChecked(superDepth, "outer", [0]);
                                                                  var call15840 = callmethodChecked(call15839, "outer", []);
                                                                  var call15841 = callmethodChecked(call15840, "baseNode$object(1)", [0, 1], this);
                                                                  obj15746.superobj = call15841;
                                                                  if (call15841.data) obj15746.data = call15841.data;
                                                                  if (call15841.hasOwnProperty('_value'))
                                                                      obj15746._value = call15841._value;
                                                                  setLineNumber(2314);    // compilenode string
                                                                  var string15842 = new GraceString("dialect");
                                                                  obj15746.data["kind"] = string15842;
                                                                  var reader_ast_kind15843 = function() {
                                                                    return this.data["kind"];
                                                                  };
                                                                  reader_ast_kind15843.def = true;
                                                                  obj15746.methods["kind"] = reader_ast_kind15843;
                                                                  setLineNumber(2315);    // compilenode identifier
                                                                  obj15746.data["value"] = var_path__39__;
                                                                  var reader_ast_value15844 = function() {
                                                                    return this.data["value"];
                                                                  };
                                                                  obj15746.methods["value"] = reader_ast_value15844;
                                                                  obj15746.data["value"] = var_path__39__;
                                                                  var writer_ast_value15844 = function(argcv, o) {
                                                                    this.data["value"] = o;
                                                                    return GraceDone;
                                                                  };
                                                                  obj15746.methods["value:=(1)"] = writer_ast_value15844;
                                                                  obj15746.mutable = true;
                                                                  superDepth = origSuperDepth;
                                                                };
                                                                obj_init_15746.apply(obj15746, []);
                                                                return obj15746;
                                                              };
                                                              func15745.paramCounts = [1];
                                                              obj15743.methods["new(1)"] = func15745;
                                                              func15745.definitionLine = 2312;
                                                              func15745.definitionModule = "ast";
                                                                var func15845 = function(argcv) {    // method new(_)$object(_)
                                                                  var curarg = 1;
                                                                  var var_path__39__ = arguments[curarg];
                                                                  curarg++;
                                                                  var inheritingObject = arguments[curarg++];
                                                                  // Start argument processing
                                                                  curarg = 1;
                                                                  curarg++;
                                                                  // End argument processing
                                                                  setModuleName("ast");
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var obj15846 = Grace_allocObject(null, "new(1)");
                                                                  obj15846.definitionModule = "ast";
                                                                  obj15846.definitionLine = 2312;
                                                                  var inho15846 = inheritingObject;
                                                                  while (inho15846.superobj) inho15846 = inho15846.superobj;
                                                                  inho15846.superobj = obj15846;
                                                                  obj15846.data = inheritingObject.data;
                                                                  if (inheritingObject.hasOwnProperty('_value'))
                                                                    obj15846._value = inheritingObject._value;
                                                                  obj15846.outer = this;
                                                                  var reader_ast_outer15847 = function() {
                                                                    return this.outer;
                                                                  };
                                                                  obj15846.methods["outer"] = reader_ast_outer15847;
                                                                  var obj_init_15846 = function() {
                                                                    var origSuperDepth = superDepth;
                                                                    superDepth = obj15846;
                                                                    var func15848 = function(argcv) {    // method isDialect
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      setModuleName("ast");
                                                                      // isDialect is a simple accessor - elide try ... catch
                                                                      setLineNumber(2317);    // compilenode identifier
                                                                      return GraceTrue;
                                                                    };
                                                                    func15848.paramCounts = [0];
                                                                    obj15846.methods["isDialect"] = func15848;
                                                                    func15848.definitionLine = 2317;
                                                                    func15848.definitionModule = "ast";
                                                                    var func15849 = function(argcv) {    // method isExternal
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      setModuleName("ast");
                                                                      // isExternal is a simple accessor - elide try ... catch
                                                                      setLineNumber(2318);    // compilenode identifier
                                                                      return GraceTrue;
                                                                    };
                                                                    func15849.paramCounts = [0];
                                                                    obj15846.methods["isExternal"] = func15849;
                                                                    func15849.definitionLine = 2318;
                                                                    func15849.definitionModule = "ast";
                                                                    var func15850 = function(argcv) {    // method isExecutable
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      setModuleName("ast");
                                                                      // isExecutable is a simple accessor - elide try ... catch
                                                                      setLineNumber(2319);    // compilenode identifier
                                                                      return GraceFalse;
                                                                    };
                                                                    func15850.paramCounts = [0];
                                                                    obj15846.methods["isExecutable"] = func15850;
                                                                    func15850.definitionLine = 2319;
                                                                    func15850.definitionModule = "ast";
                                                                    var func15851 = function(argcv) {    // method moduleName
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      setModuleName("ast");
                                                                      setLineNumber(2321);    // compilenode string
                                                                      var string15852 = new GraceString("");
                                                                      var var_bnm = string15852;
                                                                      setLineNumber(2322);    // compilenode member
                                                                      // call case 4: self request
                                                                      onSelf = true;
                                                                      var call15855 = callmethodChecked(this, "value", []);
                                                                      var block15856 = new GraceBlock(this, 2322, 1);
                                                                      setLineNumber(1);    // compilenode identifier
                                                                      block15856.real = function(var_c) {
                                                                        var if15857 = GraceDone;
                                                                        setLineNumber(2323);    // compilenode string
                                                                        var string15858 = new GraceString("/");
                                                                        var opresult15861 = callmethodChecked(var_c, "==(1)", [1], string15858);
                                                                        if (Grace_isTrue(opresult15861)) {
                                                                          setLineNumber(2324);    // compilenode string
                                                                          var string15862 = new GraceString("");
                                                                          var_bnm = string15862;
                                                                          if15857 = GraceDone;
                                                                        } else {
                                                                          setLineNumber(2326);    // compilenode identifier
                                                                          var opresult15865 = callmethodChecked(var_bnm, "++(1)", [1], var_c);
                                                                          var_bnm = opresult15865;
                                                                          if15857 = GraceDone;
                                                                        }
                                                                        return if15857;
                                                                      };
                                                                      // call case 5: prelude request
                                                                      var call15866 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call15855, block15856);
                                                                      setLineNumber(2329);    // compilenode identifier
                                                                      return var_bnm;
                                                                    };
                                                                    func15851.paramCounts = [0];
                                                                    obj15846.methods["moduleName"] = func15851;
                                                                    func15851.definitionLine = 2320;
                                                                    func15851.definitionModule = "ast";
                                                                    var func15867 = function(argcv) {    // method path
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      setModuleName("ast");
                                                                      setLineNumber(2332);    // compilenode member
                                                                      // call case 4: self request
                                                                      onSelf = true;
                                                                      var call15869 = callmethodChecked(this, "value", []);
                                                                      return call15869;
                                                                    };
                                                                    func15867.paramCounts = [0];
                                                                    obj15846.methods["path"] = func15867;
                                                                    func15867.definitionLine = 2331;
                                                                    func15867.definitionModule = "ast";
                                                                    var func15870 = function(argcv) {    // method accept(_)from(_)
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      var var_visitor = arguments[curarg];
                                                                      curarg++;
                                                                      var var_as = arguments[curarg];
                                                                      curarg++;
                                                                      // Start argument checking
                                                                      curarg = 1;
                                                                      setLineNumber(2334);    // compilenode identifier
                                                                      if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                                  callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                                      curarg++;
                                                                      curarg++;
                                                                      // End argument checking
                                                                      setModuleName("ast");
                                                                      setLineNumber(2335);    // compilenode identifier
                                                                      // call case 6: other requests
                                                                      var call15872 = callmethodChecked(var_visitor, "visitDialect(1)up(1)", [1, 1], this, var_as);
                                                                      return call15872;
                                                                    };
                                                                    func15870.paramTypes = [];
                                                                    func15870.paramTypes.push([]);
                                                                    func15870.paramTypes.push([]);
                                                                    func15870.paramCounts = [1, 1];
                                                                    obj15846.methods["accept(1)from(1)"] = func15870;
                                                                    func15870.definitionLine = 2334;
                                                                    func15870.definitionModule = "ast";
                                                                    var func15873 = function(argcv) {    // method map(_)ancestors(_)
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      var var_blk = arguments[curarg];
                                                                      curarg++;
                                                                      var var_as = arguments[curarg];
                                                                      curarg++;
                                                                      setModuleName("ast");
                                                                      setLineNumber(2338);    // compilenode member
                                                                      // call case 4: self request
                                                                      onSelf = true;
                                                                      var call15875 = callmethodChecked(this, "shallowCopy", []);
                                                                      var var_n = call15875;
                                                                      setLineNumber(2339);    // compilenode identifier
                                                                      // call case 6: other requests
                                                                      var call15877 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                                                      var var_newChain = call15877;
                                                                      setLineNumber(2340);    // compilenode identifier
                                                                      // call case 6: other requests
                                                                      var call15879 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                                                      return call15879;
                                                                    };
                                                                    func15873.paramCounts = [1, 1];
                                                                    obj15846.methods["map(1)ancestors(1)"] = func15873;
                                                                    func15873.definitionLine = 2337;
                                                                    func15873.definitionModule = "ast";
                                                                    var func15880 = function(argcv) {    // method pretty(_)
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      var var_depth = arguments[curarg];
                                                                      curarg++;
                                                                      setModuleName("ast");
                                                                      setLineNumber(2343);    // compilenode string
                                                                      var string15881 = new GraceString("");
                                                                      var var_spc = string15881;
                                                                      setLineNumber(2344);    // compilenode num
                                                                      var opresult15885 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                                                                      var block15886 = new GraceBlock(this, 2344, 1);
                                                                      setLineNumber(1);    // compilenode identifier
                                                                      block15886.real = function(var_i) {
                                                                        setLineNumber(2345);    // compilenode string
                                                                        var string15887 = new GraceString("  ");
                                                                        var opresult15890 = callmethodChecked(var_spc, "++(1)", [1], string15887);
                                                                        var_spc = opresult15890;
                                                                        return GraceDone;
                                                                      };
                                                                      // call case 5: prelude request
                                                                      var call15891 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult15885, block15886);
                                                                      setLineNumber(2347);    // compilenode string
                                                                      var string15892 = new GraceString("\n");
                                                                      // call case 1: super request
                                                                      var call15895 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                                                      var opresult15897 = callmethodChecked(call15895, "++(1)", [1], string15892);
                                                                      var var_s = opresult15897;
                                                                      setLineNumber(2348);    // compilenode string
                                                                      var string15898 = new GraceString("\n");
                                                                      // call case 4: self request
                                                                      onSelf = true;
                                                                      var call15901 = callmethodChecked(this, "value", []);
                                                                      var string15903 = new GraceString("Path: ");
                                                                      var string15906 = new GraceString("");
                                                                      var opresult15908 = callmethodChecked(string15906, "++(1)", [1], var_spc);
                                                                      var opresult15910 = callmethodChecked(opresult15908, "++(1)", [1], string15903);
                                                                      var opresult15912 = callmethodChecked(opresult15910, "++(1)", [1], call15901);
                                                                      var opresult15914 = callmethodChecked(opresult15912, "++(1)", [1], string15898);
                                                                      var opresult15917 = callmethodChecked(var_s, "++(1)", [1], opresult15914);
                                                                      var_s = opresult15917;
                                                                      setLineNumber(2349);    // compilenode identifier
                                                                      return var_s;
                                                                    };
                                                                    func15880.paramCounts = [1];
                                                                    obj15846.methods["pretty(1)"] = func15880;
                                                                    func15880.definitionLine = 2342;
                                                                    func15880.definitionModule = "ast";
                                                                    var func15918 = function(argcv) {    // method toGrace(_)
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      var var_depth = arguments[curarg];
                                                                      curarg++;
                                                                      // Start argument checking
                                                                      curarg = 1;
                                                                      setLineNumber(2351);    // compilenode identifier
                                                                      if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                                  callmethod(var_Number, "asString", [0])._value + "."));
                                                                      curarg++;
                                                                      // End argument checking
                                                                      setModuleName("ast");
                                                                      setLineNumber(2352);    // compilenode string
                                                                      var string15919 = new GraceString("\"");
                                                                      // call case 4: self request
                                                                      onSelf = true;
                                                                      var call15922 = callmethodChecked(this, "value", []);
                                                                      var string15924 = new GraceString("dialect \"");
                                                                      var opresult15926 = callmethodChecked(string15924, "++(1)", [1], call15922);
                                                                      var opresult15928 = callmethodChecked(opresult15926, "++(1)", [1], string15919);
                                                                      if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], opresult15928)))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("result of method toGrace(_) does not have " + 
                                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                                      return opresult15928;
                                                                    };
                                                                    func15918.paramTypes = [];
                                                                    func15918.paramTypes.push([type_Number, "depth"]);
                                                                    func15918.paramCounts = [1];
                                                                    obj15846.methods["toGrace(1)"] = func15918;
                                                                    func15918.definitionLine = 2351;
                                                                    func15918.definitionModule = "ast";
                                                                    var func15929 = function(argcv) {    // method shallowCopy
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      setModuleName("ast");
                                                                      setLineNumber(2355);    // compilenode identifier
                                                                      // call case 6: other requests
                                                                      // call case 4: self request
                                                                      onSelf = true;
                                                                      var call15933 = callmethodChecked(this, "value", []);
                                                                      // call case 6: other requests
                                                                      var call15934 = callmethodChecked(var_dialectNode, "new(1)", [1], call15933);
                                                                      var call15935 = callmethodChecked(call15934, "shallowCopyFieldsFrom(1)", [1], this);
                                                                      return call15935;
                                                                    };
                                                                    func15929.paramCounts = [0];
                                                                    obj15846.methods["shallowCopy"] = func15929;
                                                                    func15929.definitionLine = 2354;
                                                                    func15929.definitionModule = "ast";
                                                                    setLineNumber(2313);    // compilenode identifier
                                                                    // call case 6: other requests
                                                                    // call case 6: other requests
                                                                    // call case 3: self.outer request
                                                                    var call15939 = callmethodChecked(superDepth, "outer", [0]);
                                                                    var call15940 = callmethodChecked(call15939, "outer", []);
                                                                    var call15941 = callmethodChecked(call15940, "baseNode$object(1)", [0, 1], this);
                                                                    obj15846.superobj = call15941;
                                                                    if (call15941.data) obj15846.data = call15941.data;
                                                                    if (call15941.hasOwnProperty('_value'))
                                                                        obj15846._value = call15941._value;
                                                                    setLineNumber(2314);    // compilenode string
                                                                    var string15942 = new GraceString("dialect");
                                                                    obj15846.data["kind"] = string15942;
                                                                    var reader_ast_kind15943 = function() {
                                                                      return this.data["kind"];
                                                                    };
                                                                    reader_ast_kind15943.def = true;
                                                                    obj15846.methods["kind"] = reader_ast_kind15943;
                                                                    setLineNumber(2315);    // compilenode identifier
                                                                    obj15846.data["value"] = var_path__39__;
                                                                    var reader_ast_value15944 = function() {
                                                                      return this.data["value"];
                                                                    };
                                                                    obj15846.methods["value"] = reader_ast_value15944;
                                                                    obj15846.data["value"] = var_path__39__;
                                                                    var writer_ast_value15944 = function(argcv, o) {
                                                                      this.data["value"] = o;
                                                                      return GraceDone;
                                                                    };
                                                                    obj15846.methods["value:=(1)"] = writer_ast_value15944;
                                                                    obj15846.mutable = true;
                                                                    superDepth = origSuperDepth;
                                                                  };
                                                                  obj_init_15846.apply(inheritingObject, []);
                                                                  return obj15846;
                                                                  };
                                                                  obj15743.methods["new(1)$object(1)"] = func15845;
                                                                superDepth = origSuperDepth;
                                                              };
                                                              obj_init_15743.apply(obj15743, []);
                                                              var var_dialectNode = obj15743;
                                                              setLineNumber(1);    // compilenode method
                                                              var func15945 = function(argcv) {    // method dialectNode
                                                                var returnTarget = invocationCount;
                                                                invocationCount++;
                                                                var curarg = 1;
                                                                setModuleName("ast");
                                                                // dialectNode is a simple accessor - elide try ... catch
                                                                setLineNumber(2311);    // compilenode identifier
                                                                return var_dialectNode;
                                                              };
                                                              func15945.paramCounts = [0];
                                                              this.methods["dialectNode"] = func15945;
                                                              func15945.definitionLine = 1;
                                                              func15945.definitionModule = "ast";
                                                              this.methods["dialectNode"].debug = "def";
                                                              setLineNumber(2359);    // compilenode object
                                                              var obj15946 = Grace_allocObject(GraceObject, "returnNode");
                                                              obj15946.definitionModule = "ast";
                                                              obj15946.definitionLine = 2359;
                                                              obj15946.outer = this;
                                                              var reader_ast_outer15947 = function() {
                                                                return this.outer;
                                                              };
                                                              obj15946.methods["outer"] = reader_ast_outer15947;
                                                              var obj_init_15946 = function() {
                                                                var origSuperDepth = superDepth;
                                                                superDepth = obj15946;
                                                                var func15948 = function(argcv) {    // method new(_)
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  var var_expr = arguments[curarg];
                                                                  curarg++;
                                                                  setModuleName("ast");
                                                                  setLineNumber(2360);    // compilenode object
                                                                  var obj15949 = Grace_allocObject(null, "returnNode.new(_)");
                                                                  obj15949.definitionModule = "ast";
                                                                  obj15949.definitionLine = 2360;
                                                                  obj15949.outer = this;
                                                                  var reader_ast_outer15950 = function() {
                                                                    return this.outer;
                                                                  };
                                                                  obj15949.methods["outer"] = reader_ast_outer15950;
                                                                  var obj_init_15949 = function() {
                                                                    var origSuperDepth = superDepth;
                                                                    superDepth = obj15949;
                                                                    var func15951 = function(argcv) {    // method accept(_)from(_)
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      var var_visitor = arguments[curarg];
                                                                      curarg++;
                                                                      var var_as = arguments[curarg];
                                                                      curarg++;
                                                                      // Start argument checking
                                                                      curarg = 1;
                                                                      setLineNumber(2365);    // compilenode identifier
                                                                      if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                                  callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                                      curarg++;
                                                                      curarg++;
                                                                      // End argument checking
                                                                      setModuleName("ast");
                                                                      var if15952 = GraceDone;
                                                                      setLineNumber(2366);    // compilenode identifier
                                                                      // call case 6: other requests
                                                                      var call15954 = callmethodChecked(var_visitor, "visitReturn(1)up(1)", [1, 1], this, var_as);
                                                                      if (Grace_isTrue(call15954)) {
                                                                        setLineNumber(2367);    // compilenode identifier
                                                                        // call case 6: other requests
                                                                        var call15956 = callmethodChecked(var_as, "extend(1)", [1], this);
                                                                        var var_newChain = call15956;
                                                                        setLineNumber(2368);    // compilenode identifier
                                                                        // call case 6: other requests
                                                                        // call case 4: self request
                                                                        onSelf = true;
                                                                        var call15959 = callmethodChecked(this, "value", []);
                                                                        var call15960 = callmethodChecked(call15959, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                                        if15952 = call15960;
                                                                      }
                                                                      return if15952;
                                                                    };
                                                                    func15951.paramTypes = [];
                                                                    func15951.paramTypes.push([]);
                                                                    func15951.paramTypes.push([]);
                                                                    func15951.paramCounts = [1, 1];
                                                                    obj15949.methods["accept(1)from(1)"] = func15951;
                                                                    func15951.definitionLine = 2365;
                                                                    func15951.definitionModule = "ast";
                                                                    var func15961 = function(argcv) {    // method map(_)ancestors(_)
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      var var_blk = arguments[curarg];
                                                                      curarg++;
                                                                      var var_as = arguments[curarg];
                                                                      curarg++;
                                                                      setModuleName("ast");
                                                                      setLineNumber(2372);    // compilenode member
                                                                      // call case 4: self request
                                                                      onSelf = true;
                                                                      var call15963 = callmethodChecked(this, "shallowCopy", []);
                                                                      var var_n = call15963;
                                                                      setLineNumber(2373);    // compilenode identifier
                                                                      // call case 6: other requests
                                                                      var call15965 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                                                      var var_newChain = call15965;
                                                                      setLineNumber(2374);    // compilenode identifier
                                                                      // call case 6: other requests
                                                                      // call case 4: self request
                                                                      onSelf = true;
                                                                      var call15969 = callmethodChecked(this, "value", []);
                                                                      var call15970 = callmethodChecked(call15969, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
                                                                      // call case 6: other requests
                                                                      var call15971 = callmethodChecked(var_n, "value:=(1)", [1], call15970);
                                                                      setLineNumber(2375);    // compilenode identifier
                                                                      // call case 6: other requests
                                                                      var call15973 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                                                      return call15973;
                                                                    };
                                                                    func15961.paramCounts = [1, 1];
                                                                    obj15949.methods["map(1)ancestors(1)"] = func15961;
                                                                    func15961.definitionLine = 2371;
                                                                    func15961.definitionModule = "ast";
                                                                    var func15974 = function(argcv) {    // method pretty(_)
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      var var_depth = arguments[curarg];
                                                                      curarg++;
                                                                      setModuleName("ast");
                                                                      setLineNumber(2378);    // compilenode string
                                                                      var string15975 = new GraceString("");
                                                                      var var_spc = string15975;
                                                                      setLineNumber(2379);    // compilenode num
                                                                      var opresult15979 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                                                                      var block15980 = new GraceBlock(this, 2379, 1);
                                                                      setLineNumber(1);    // compilenode identifier
                                                                      block15980.real = function(var_i) {
                                                                        setLineNumber(2380);    // compilenode string
                                                                        var string15981 = new GraceString("  ");
                                                                        var opresult15984 = callmethodChecked(var_spc, "++(1)", [1], string15981);
                                                                        var_spc = opresult15984;
                                                                        return GraceDone;
                                                                      };
                                                                      // call case 5: prelude request
                                                                      var call15985 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult15979, block15980);
                                                                      setLineNumber(2382);    // compilenode string
                                                                      var string15986 = new GraceString("\n");
                                                                      // call case 1: super request
                                                                      var call15989 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                                                      var opresult15991 = callmethodChecked(call15989, "++(1)", [1], string15986);
                                                                      var var_s = opresult15991;
                                                                      setLineNumber(2383);    // compilenode identifier
                                                                      var opresult15995 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                                                      // call case 6: other requests
                                                                      // call case 4: self request
                                                                      onSelf = true;
                                                                      var call15997 = callmethodChecked(this, "value", []);
                                                                      var call15998 = callmethodChecked(call15997, "pretty(1)", [1], opresult15995);
                                                                      var opresult16002 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                                                      var opresult16004 = callmethodChecked(opresult16002, "++(1)", [1], call15998);
                                                                      var_s = opresult16004;
                                                                      setLineNumber(2384);    // compilenode identifier
                                                                      return var_s;
                                                                    };
                                                                    func15974.paramCounts = [1];
                                                                    obj15949.methods["pretty(1)"] = func15974;
                                                                    func15974.definitionLine = 2377;
                                                                    func15974.definitionModule = "ast";
                                                                    var func16005 = function(argcv) {    // method toGrace(_)
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      var var_depth = arguments[curarg];
                                                                      curarg++;
                                                                      // Start argument checking
                                                                      curarg = 1;
                                                                      setLineNumber(2386);    // compilenode identifier
                                                                      if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                                  callmethod(var_Number, "asString", [0])._value + "."));
                                                                      curarg++;
                                                                      // End argument checking
                                                                      setModuleName("ast");
                                                                      setLineNumber(2387);    // compilenode identifier
                                                                      // call case 6: other requests
                                                                      // call case 4: self request
                                                                      onSelf = true;
                                                                      var call16008 = callmethodChecked(this, "value", []);
                                                                      var call16009 = callmethodChecked(call16008, "toGrace(1)", [1], var_depth);
                                                                      var string16011 = new GraceString("return ");
                                                                      var opresult16013 = callmethodChecked(string16011, "++(1)", [1], call16009);
                                                                      if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], opresult16013)))
                                                                          throw new GraceExceptionPacket(TypeErrorObject,
                                                                              new GraceString("result of method toGrace(_) does not have " + 
                                                                                  callmethod(var_String, "asString", [0])._value + "."));
                                                                      return opresult16013;
                                                                    };
                                                                    func16005.paramTypes = [];
                                                                    func16005.paramTypes.push([type_Number, "depth"]);
                                                                    func16005.paramCounts = [1];
                                                                    obj15949.methods["toGrace(1)"] = func16005;
                                                                    func16005.definitionLine = 2386;
                                                                    func16005.definitionModule = "ast";
                                                                    var func16014 = function(argcv) {    // method shallowCopy
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      setModuleName("ast");
                                                                      setLineNumber(2390);    // compilenode identifier
                                                                      // call case 6: other requests
                                                                      // call case 6: other requests
                                                                      var call16017 = callmethodChecked(var_returnNode, "new(1)", [1], var_nullNode);
                                                                      var call16018 = callmethodChecked(call16017, "shallowCopyFieldsFrom(1)", [1], this);
                                                                      return call16018;
                                                                    };
                                                                    func16014.paramCounts = [0];
                                                                    obj15949.methods["shallowCopy"] = func16014;
                                                                    func16014.definitionLine = 2389;
                                                                    func16014.definitionModule = "ast";
                                                                    setLineNumber(2361);    // compilenode identifier
                                                                    // call case 6: other requests
                                                                    // call case 6: other requests
                                                                    // call case 3: self.outer request
                                                                    var call16022 = callmethodChecked(superDepth, "outer", [0]);
                                                                    var call16023 = callmethodChecked(call16022, "outer", []);
                                                                    var call16024 = callmethodChecked(call16023, "baseNode$object(1)", [0, 1], this);
                                                                    obj15949.superobj = call16024;
                                                                    if (call16024.data) obj15949.data = call16024.data;
                                                                    if (call16024.hasOwnProperty('_value'))
                                                                        obj15949._value = call16024._value;
                                                                    setLineNumber(2362);    // compilenode string
                                                                    var string16025 = new GraceString("return");
                                                                    obj15949.data["kind"] = string16025;
                                                                    var reader_ast_kind16026 = function() {
                                                                      return this.data["kind"];
                                                                    };
                                                                    reader_ast_kind16026.def = true;
                                                                    obj15949.methods["kind"] = reader_ast_kind16026;
                                                                    setLineNumber(2363);    // compilenode identifier
                                                                    obj15949.data["value"] = var_expr;
                                                                    var reader_ast_value16027 = function() {
                                                                      return this.data["value"];
                                                                    };
                                                                    obj15949.methods["value"] = reader_ast_value16027;
                                                                    obj15949.data["value"] = var_expr;
                                                                    var writer_ast_value16027 = function(argcv, o) {
                                                                      this.data["value"] = o;
                                                                      return GraceDone;
                                                                    };
                                                                    obj15949.methods["value:=(1)"] = writer_ast_value16027;
                                                                    obj15949.mutable = true;
                                                                    superDepth = origSuperDepth;
                                                                  };
                                                                  obj_init_15949.apply(obj15949, []);
                                                                  return obj15949;
                                                                };
                                                                func15948.paramCounts = [1];
                                                                obj15946.methods["new(1)"] = func15948;
                                                                func15948.definitionLine = 2360;
                                                                func15948.definitionModule = "ast";
                                                                  var func16028 = function(argcv) {    // method new(_)$object(_)
                                                                    var curarg = 1;
                                                                    var var_expr = arguments[curarg];
                                                                    curarg++;
                                                                    var inheritingObject = arguments[curarg++];
                                                                    // Start argument processing
                                                                    curarg = 1;
                                                                    curarg++;
                                                                    // End argument processing
                                                                    setModuleName("ast");
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var obj16029 = Grace_allocObject(null, "new(1)");
                                                                    obj16029.definitionModule = "ast";
                                                                    obj16029.definitionLine = 2360;
                                                                    var inho16029 = inheritingObject;
                                                                    while (inho16029.superobj) inho16029 = inho16029.superobj;
                                                                    inho16029.superobj = obj16029;
                                                                    obj16029.data = inheritingObject.data;
                                                                    if (inheritingObject.hasOwnProperty('_value'))
                                                                      obj16029._value = inheritingObject._value;
                                                                    obj16029.outer = this;
                                                                    var reader_ast_outer16030 = function() {
                                                                      return this.outer;
                                                                    };
                                                                    obj16029.methods["outer"] = reader_ast_outer16030;
                                                                    var obj_init_16029 = function() {
                                                                      var origSuperDepth = superDepth;
                                                                      superDepth = obj16029;
                                                                      var func16031 = function(argcv) {    // method accept(_)from(_)
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        var var_visitor = arguments[curarg];
                                                                        curarg++;
                                                                        var var_as = arguments[curarg];
                                                                        curarg++;
                                                                        // Start argument checking
                                                                        curarg = 1;
                                                                        setLineNumber(2365);    // compilenode identifier
                                                                        if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                                    callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                                        curarg++;
                                                                        curarg++;
                                                                        // End argument checking
                                                                        setModuleName("ast");
                                                                        var if16032 = GraceDone;
                                                                        setLineNumber(2366);    // compilenode identifier
                                                                        // call case 6: other requests
                                                                        var call16034 = callmethodChecked(var_visitor, "visitReturn(1)up(1)", [1, 1], this, var_as);
                                                                        if (Grace_isTrue(call16034)) {
                                                                          setLineNumber(2367);    // compilenode identifier
                                                                          // call case 6: other requests
                                                                          var call16036 = callmethodChecked(var_as, "extend(1)", [1], this);
                                                                          var var_newChain = call16036;
                                                                          setLineNumber(2368);    // compilenode identifier
                                                                          // call case 6: other requests
                                                                          // call case 4: self request
                                                                          onSelf = true;
                                                                          var call16039 = callmethodChecked(this, "value", []);
                                                                          var call16040 = callmethodChecked(call16039, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                                          if16032 = call16040;
                                                                        }
                                                                        return if16032;
                                                                      };
                                                                      func16031.paramTypes = [];
                                                                      func16031.paramTypes.push([]);
                                                                      func16031.paramTypes.push([]);
                                                                      func16031.paramCounts = [1, 1];
                                                                      obj16029.methods["accept(1)from(1)"] = func16031;
                                                                      func16031.definitionLine = 2365;
                                                                      func16031.definitionModule = "ast";
                                                                      var func16041 = function(argcv) {    // method map(_)ancestors(_)
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        var var_blk = arguments[curarg];
                                                                        curarg++;
                                                                        var var_as = arguments[curarg];
                                                                        curarg++;
                                                                        setModuleName("ast");
                                                                        setLineNumber(2372);    // compilenode member
                                                                        // call case 4: self request
                                                                        onSelf = true;
                                                                        var call16043 = callmethodChecked(this, "shallowCopy", []);
                                                                        var var_n = call16043;
                                                                        setLineNumber(2373);    // compilenode identifier
                                                                        // call case 6: other requests
                                                                        var call16045 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                                                        var var_newChain = call16045;
                                                                        setLineNumber(2374);    // compilenode identifier
                                                                        // call case 6: other requests
                                                                        // call case 4: self request
                                                                        onSelf = true;
                                                                        var call16049 = callmethodChecked(this, "value", []);
                                                                        var call16050 = callmethodChecked(call16049, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
                                                                        // call case 6: other requests
                                                                        var call16051 = callmethodChecked(var_n, "value:=(1)", [1], call16050);
                                                                        setLineNumber(2375);    // compilenode identifier
                                                                        // call case 6: other requests
                                                                        var call16053 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                                                        return call16053;
                                                                      };
                                                                      func16041.paramCounts = [1, 1];
                                                                      obj16029.methods["map(1)ancestors(1)"] = func16041;
                                                                      func16041.definitionLine = 2371;
                                                                      func16041.definitionModule = "ast";
                                                                      var func16054 = function(argcv) {    // method pretty(_)
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        var var_depth = arguments[curarg];
                                                                        curarg++;
                                                                        setModuleName("ast");
                                                                        setLineNumber(2378);    // compilenode string
                                                                        var string16055 = new GraceString("");
                                                                        var var_spc = string16055;
                                                                        setLineNumber(2379);    // compilenode num
                                                                        var opresult16059 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                                                                        var block16060 = new GraceBlock(this, 2379, 1);
                                                                        setLineNumber(1);    // compilenode identifier
                                                                        block16060.real = function(var_i) {
                                                                          setLineNumber(2380);    // compilenode string
                                                                          var string16061 = new GraceString("  ");
                                                                          var opresult16064 = callmethodChecked(var_spc, "++(1)", [1], string16061);
                                                                          var_spc = opresult16064;
                                                                          return GraceDone;
                                                                        };
                                                                        // call case 5: prelude request
                                                                        var call16065 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult16059, block16060);
                                                                        setLineNumber(2382);    // compilenode string
                                                                        var string16066 = new GraceString("\n");
                                                                        // call case 1: super request
                                                                        var call16069 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                                                        var opresult16071 = callmethodChecked(call16069, "++(1)", [1], string16066);
                                                                        var var_s = opresult16071;
                                                                        setLineNumber(2383);    // compilenode identifier
                                                                        var opresult16075 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                                                        // call case 6: other requests
                                                                        // call case 4: self request
                                                                        onSelf = true;
                                                                        var call16077 = callmethodChecked(this, "value", []);
                                                                        var call16078 = callmethodChecked(call16077, "pretty(1)", [1], opresult16075);
                                                                        var opresult16082 = callmethodChecked(var_s, "++(1)", [1], var_spc);
                                                                        var opresult16084 = callmethodChecked(opresult16082, "++(1)", [1], call16078);
                                                                        var_s = opresult16084;
                                                                        setLineNumber(2384);    // compilenode identifier
                                                                        return var_s;
                                                                      };
                                                                      func16054.paramCounts = [1];
                                                                      obj16029.methods["pretty(1)"] = func16054;
                                                                      func16054.definitionLine = 2377;
                                                                      func16054.definitionModule = "ast";
                                                                      var func16085 = function(argcv) {    // method toGrace(_)
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        var var_depth = arguments[curarg];
                                                                        curarg++;
                                                                        // Start argument checking
                                                                        curarg = 1;
                                                                        setLineNumber(2386);    // compilenode identifier
                                                                        if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                                    callmethod(var_Number, "asString", [0])._value + "."));
                                                                        curarg++;
                                                                        // End argument checking
                                                                        setModuleName("ast");
                                                                        setLineNumber(2387);    // compilenode identifier
                                                                        // call case 6: other requests
                                                                        // call case 4: self request
                                                                        onSelf = true;
                                                                        var call16088 = callmethodChecked(this, "value", []);
                                                                        var call16089 = callmethodChecked(call16088, "toGrace(1)", [1], var_depth);
                                                                        var string16091 = new GraceString("return ");
                                                                        var opresult16093 = callmethodChecked(string16091, "++(1)", [1], call16089);
                                                                        if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], opresult16093)))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("result of method toGrace(_) does not have " + 
                                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                                        return opresult16093;
                                                                      };
                                                                      func16085.paramTypes = [];
                                                                      func16085.paramTypes.push([type_Number, "depth"]);
                                                                      func16085.paramCounts = [1];
                                                                      obj16029.methods["toGrace(1)"] = func16085;
                                                                      func16085.definitionLine = 2386;
                                                                      func16085.definitionModule = "ast";
                                                                      var func16094 = function(argcv) {    // method shallowCopy
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        setModuleName("ast");
                                                                        setLineNumber(2390);    // compilenode identifier
                                                                        // call case 6: other requests
                                                                        // call case 6: other requests
                                                                        var call16097 = callmethodChecked(var_returnNode, "new(1)", [1], var_nullNode);
                                                                        var call16098 = callmethodChecked(call16097, "shallowCopyFieldsFrom(1)", [1], this);
                                                                        return call16098;
                                                                      };
                                                                      func16094.paramCounts = [0];
                                                                      obj16029.methods["shallowCopy"] = func16094;
                                                                      func16094.definitionLine = 2389;
                                                                      func16094.definitionModule = "ast";
                                                                      setLineNumber(2361);    // compilenode identifier
                                                                      // call case 6: other requests
                                                                      // call case 6: other requests
                                                                      // call case 3: self.outer request
                                                                      var call16102 = callmethodChecked(superDepth, "outer", [0]);
                                                                      var call16103 = callmethodChecked(call16102, "outer", []);
                                                                      var call16104 = callmethodChecked(call16103, "baseNode$object(1)", [0, 1], this);
                                                                      obj16029.superobj = call16104;
                                                                      if (call16104.data) obj16029.data = call16104.data;
                                                                      if (call16104.hasOwnProperty('_value'))
                                                                          obj16029._value = call16104._value;
                                                                      setLineNumber(2362);    // compilenode string
                                                                      var string16105 = new GraceString("return");
                                                                      obj16029.data["kind"] = string16105;
                                                                      var reader_ast_kind16106 = function() {
                                                                        return this.data["kind"];
                                                                      };
                                                                      reader_ast_kind16106.def = true;
                                                                      obj16029.methods["kind"] = reader_ast_kind16106;
                                                                      setLineNumber(2363);    // compilenode identifier
                                                                      obj16029.data["value"] = var_expr;
                                                                      var reader_ast_value16107 = function() {
                                                                        return this.data["value"];
                                                                      };
                                                                      obj16029.methods["value"] = reader_ast_value16107;
                                                                      obj16029.data["value"] = var_expr;
                                                                      var writer_ast_value16107 = function(argcv, o) {
                                                                        this.data["value"] = o;
                                                                        return GraceDone;
                                                                      };
                                                                      obj16029.methods["value:=(1)"] = writer_ast_value16107;
                                                                      obj16029.mutable = true;
                                                                      superDepth = origSuperDepth;
                                                                    };
                                                                    obj_init_16029.apply(inheritingObject, []);
                                                                    return obj16029;
                                                                    };
                                                                    obj15946.methods["new(1)$object(1)"] = func16028;
                                                                  superDepth = origSuperDepth;
                                                                };
                                                                obj_init_15946.apply(obj15946, []);
                                                                var var_returnNode = obj15946;
                                                                setLineNumber(1);    // compilenode method
                                                                var func16108 = function(argcv) {    // method returnNode
                                                                  var returnTarget = invocationCount;
                                                                  invocationCount++;
                                                                  var curarg = 1;
                                                                  setModuleName("ast");
                                                                  // returnNode is a simple accessor - elide try ... catch
                                                                  setLineNumber(2359);    // compilenode identifier
                                                                  return var_returnNode;
                                                                };
                                                                func16108.paramCounts = [0];
                                                                this.methods["returnNode"] = func16108;
                                                                func16108.definitionLine = 1;
                                                                func16108.definitionModule = "ast";
                                                                this.methods["returnNode"].debug = "def";
                                                                setLineNumber(2394);    // compilenode object
                                                                var obj16109 = Grace_allocObject(GraceObject, "inheritsNode");
                                                                obj16109.definitionModule = "ast";
                                                                obj16109.definitionLine = 2394;
                                                                obj16109.outer = this;
                                                                var reader_ast_outer16110 = function() {
                                                                  return this.outer;
                                                                };
                                                                obj16109.methods["outer"] = reader_ast_outer16110;
                                                                var obj_init_16109 = function() {
                                                                  var origSuperDepth = superDepth;
                                                                  superDepth = obj16109;
                                                                  var func16111 = function(argcv) {    // method new(_)scope(_)
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    var var_expr = arguments[curarg];
                                                                    curarg++;
                                                                    var var_s = arguments[curarg];
                                                                    curarg++;
                                                                    setModuleName("ast");
                                                                    setLineNumber(2396);    // compilenode identifier
                                                                    // call case 4: self request
                                                                    onSelf = true;
                                                                    var call16113 = callmethodChecked(this, "new(1)", [1], var_expr);
                                                                    var var_result = call16113;
                                                                    setLineNumber(2397);    // compilenode identifier
                                                                    // call case 6: other requests
                                                                    var call16115 = callmethodChecked(var_result, "scope:=(1)", [1], var_s);
                                                                    setLineNumber(2398);    // compilenode identifier
                                                                    return var_result;
                                                                  };
                                                                  func16111.paramCounts = [1, 1];
                                                                  obj16109.methods["new(1)scope(1)"] = func16111;
                                                                  func16111.definitionLine = 2395;
                                                                  func16111.definitionModule = "ast";
                                                                  var func16116 = function(argcv) {    // method new(_)
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    var var_expr = arguments[curarg];
                                                                    curarg++;
                                                                    setModuleName("ast");
                                                                    setLineNumber(2400);    // compilenode object
                                                                    var obj16117 = Grace_allocObject(null, "inheritsNode.new(_)");
                                                                    obj16117.definitionModule = "ast";
                                                                    obj16117.definitionLine = 2400;
                                                                    obj16117.outer = this;
                                                                    var reader_ast_outer16118 = function() {
                                                                      return this.outer;
                                                                    };
                                                                    obj16117.methods["outer"] = reader_ast_outer16118;
                                                                    var obj_init_16117 = function() {
                                                                      var origSuperDepth = superDepth;
                                                                      superDepth = obj16117;
                                                                      var func16119 = function(argcv) {    // method isLegalInTrait
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        setModuleName("ast");
                                                                        setLineNumber(2409);    // compilenode member
                                                                        // call case 4: self request
                                                                        onSelf = true;
                                                                        var call16121 = callmethodChecked(this, "isUse", []);
                                                                        return call16121;
                                                                      };
                                                                      func16119.paramCounts = [0];
                                                                      obj16117.methods["isLegalInTrait"] = func16119;
                                                                      func16119.definitionLine = 2409;
                                                                      func16119.definitionModule = "ast";
                                                                      var func16122 = function(argcv) {    // method isInherits
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        setModuleName("ast");
                                                                        // isInherits is a simple accessor - elide try ... catch
                                                                        setLineNumber(2410);    // compilenode identifier
                                                                        return GraceTrue;
                                                                      };
                                                                      func16122.paramCounts = [0];
                                                                      obj16117.methods["isInherits"] = func16122;
                                                                      func16122.definitionLine = 2410;
                                                                      func16122.definitionModule = "ast";
                                                                      var func16123 = function(argcv) {    // method inheritsFromMember
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        setModuleName("ast");
                                                                        setLineNumber(2411);    // compilenode member
                                                                        // call case 6: other requests
                                                                        // call case 4: self request
                                                                        onSelf = true;
                                                                        var call16126 = callmethodChecked(this, "value", []);
                                                                        var call16127 = callmethodChecked(call16126, "isMember", []);
                                                                        return call16127;
                                                                      };
                                                                      func16123.paramCounts = [0];
                                                                      obj16117.methods["inheritsFromMember"] = func16123;
                                                                      func16123.definitionLine = 2411;
                                                                      func16123.definitionModule = "ast";
                                                                      var func16128 = function(argcv) {    // method inheritsFromCall
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        setModuleName("ast");
                                                                        setLineNumber(2412);    // compilenode member
                                                                        // call case 6: other requests
                                                                        // call case 4: self request
                                                                        onSelf = true;
                                                                        var call16131 = callmethodChecked(this, "value", []);
                                                                        var call16132 = callmethodChecked(call16131, "isCall", []);
                                                                        return call16132;
                                                                      };
                                                                      func16128.paramCounts = [0];
                                                                      obj16117.methods["inheritsFromCall"] = func16128;
                                                                      func16128.definitionLine = 2412;
                                                                      func16128.definitionModule = "ast";
                                                                      var func16133 = function(argcv) {    // method isExecutable
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        setModuleName("ast");
                                                                        // isExecutable is a simple accessor - elide try ... catch
                                                                        setLineNumber(2413);    // compilenode identifier
                                                                        return GraceFalse;
                                                                      };
                                                                      func16133.paramCounts = [0];
                                                                      obj16117.methods["isExecutable"] = func16133;
                                                                      func16133.definitionLine = 2413;
                                                                      func16133.definitionModule = "ast";
                                                                      var func16134 = function(argcv) {    // method accept(_)from(_)
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        var var_visitor = arguments[curarg];
                                                                        curarg++;
                                                                        var var_as = arguments[curarg];
                                                                        curarg++;
                                                                        // Start argument checking
                                                                        curarg = 1;
                                                                        setLineNumber(2414);    // compilenode identifier
                                                                        if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                                    callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                                        curarg++;
                                                                        curarg++;
                                                                        // End argument checking
                                                                        setModuleName("ast");
                                                                        var if16135 = GraceDone;
                                                                        setLineNumber(2415);    // compilenode identifier
                                                                        // call case 6: other requests
                                                                        var call16137 = callmethodChecked(var_visitor, "visitInherits(1)up(1)", [1, 1], this, var_as);
                                                                        if (Grace_isTrue(call16137)) {
                                                                          setLineNumber(2416);    // compilenode identifier
                                                                          // call case 6: other requests
                                                                          var call16139 = callmethodChecked(var_as, "extend(1)", [1], this);
                                                                          var var_newChain = call16139;
                                                                          setLineNumber(2417);    // compilenode identifier
                                                                          // call case 6: other requests
                                                                          // call case 4: self request
                                                                          onSelf = true;
                                                                          var call16142 = callmethodChecked(this, "value", []);
                                                                          var call16143 = callmethodChecked(call16142, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                                          setLineNumber(2418);    // compilenode block
                                                                          var block16145 = new GraceBlock(this, 2418, 1);
                                                                          setLineNumber(1);    // compilenode identifier
                                                                          block16145.real = function(var_a) {
                                                                            setLineNumber(2419);    // compilenode identifier
                                                                            // call case 6: other requests
                                                                            // call case 6: other requests
                                                                            var call16148 = callmethodChecked(var_a, "newName", []);
                                                                            var call16149 = callmethodChecked(call16148, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                                            setLineNumber(2420);    // compilenode identifier
                                                                            // call case 6: other requests
                                                                            // call case 6: other requests
                                                                            var call16152 = callmethodChecked(var_a, "oldName", []);
                                                                            var call16153 = callmethodChecked(call16152, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                                            return call16153;
                                                                          };
                                                                          // call case 6: other requests
                                                                          setLineNumber(2418);    // compilenode member
                                                                          // call case 4: self request
                                                                          onSelf = true;
                                                                          var call16155 = callmethodChecked(this, "aliases", []);
                                                                          var call16156 = callmethodChecked(call16155, "do(1)", [1], block16145);
                                                                          setLineNumber(2422);    // compilenode block
                                                                          var block16158 = new GraceBlock(this, 2422, 1);
                                                                          setLineNumber(1);    // compilenode identifier
                                                                          block16158.real = function(var_e) {
                                                                            setLineNumber(2422);    // compilenode identifier
                                                                            // call case 6: other requests
                                                                            var call16160 = callmethodChecked(var_e, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                                            return call16160;
                                                                          };
                                                                          // call case 6: other requests
                                                                          // call case 4: self request
                                                                          onSelf = true;
                                                                          var call16162 = callmethodChecked(this, "exclusions", []);
                                                                          var call16163 = callmethodChecked(call16162, "do(1)", [1], block16158);
                                                                          if16135 = call16163;
                                                                        }
                                                                        return if16135;
                                                                      };
                                                                      func16134.paramTypes = [];
                                                                      func16134.paramTypes.push([]);
                                                                      func16134.paramTypes.push([]);
                                                                      func16134.paramCounts = [1, 1];
                                                                      obj16117.methods["accept(1)from(1)"] = func16134;
                                                                      func16134.definitionLine = 2414;
                                                                      func16134.definitionModule = "ast";
                                                                      var func16164 = function(argcv) {    // method declarationKindWithAncestors(_)
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        var var_as = arguments[curarg];
                                                                        curarg++;
                                                                        setModuleName("ast");
                                                                        setLineNumber(2429);    // compilenode member
                                                                        // call case 6: other requests
                                                                        var call16166 = callmethodChecked(var_k, "methdec", []);
                                                                        return call16166;
                                                                      };
                                                                      func16164.paramCounts = [1];
                                                                      obj16117.methods["declarationKindWithAncestors(1)"] = func16164;
                                                                      func16164.definitionLine = 2425;
                                                                      func16164.definitionModule = "ast";
                                                                      var func16167 = function(argcv) {    // method map(_)ancestors(_)
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        var var_blk = arguments[curarg];
                                                                        curarg++;
                                                                        var var_as = arguments[curarg];
                                                                        curarg++;
                                                                        setModuleName("ast");
                                                                        setLineNumber(2432);    // compilenode member
                                                                        // call case 4: self request
                                                                        onSelf = true;
                                                                        var call16169 = callmethodChecked(this, "shallowCopy", []);
                                                                        var var_n = call16169;
                                                                        setLineNumber(2433);    // compilenode identifier
                                                                        // call case 6: other requests
                                                                        var call16171 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                                                        var var_newChain = call16171;
                                                                        setLineNumber(2434);    // compilenode identifier
                                                                        // call case 6: other requests
                                                                        // call case 4: self request
                                                                        onSelf = true;
                                                                        var call16175 = callmethodChecked(this, "value", []);
                                                                        var call16176 = callmethodChecked(call16175, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
                                                                        // call case 6: other requests
                                                                        var call16177 = callmethodChecked(var_n, "value:=(1)", [1], call16176);
                                                                        setLineNumber(2435);    // compilenode identifier
                                                                        // call case 6: other requests
                                                                        var call16179 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                                                        return call16179;
                                                                      };
                                                                      func16167.paramCounts = [1, 1];
                                                                      obj16117.methods["map(1)ancestors(1)"] = func16167;
                                                                      func16167.definitionLine = 2431;
                                                                      func16167.definitionModule = "ast";
                                                                      var func16180 = function(argcv) {    // method pretty(_)
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        var var_depth = arguments[curarg];
                                                                        curarg++;
                                                                        setModuleName("ast");
                                                                        setLineNumber(2438);    // compilenode string
                                                                        var string16181 = new GraceString("");
                                                                        var var_spc = string16181;
                                                                        setLineNumber(2439);    // compilenode num
                                                                        var opresult16185 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                                                                        var block16186 = new GraceBlock(this, 2439, 1);
                                                                        setLineNumber(1);    // compilenode identifier
                                                                        block16186.real = function(var_i) {
                                                                          setLineNumber(2440);    // compilenode string
                                                                          var string16187 = new GraceString("  ");
                                                                          var opresult16190 = callmethodChecked(var_spc, "++(1)", [1], string16187);
                                                                          var_spc = opresult16190;
                                                                          return GraceDone;
                                                                        };
                                                                        // call case 5: prelude request
                                                                        var call16191 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult16185, block16186);
                                                                        setLineNumber(2442);    // compilenode identifier
                                                                        // call case 1: super request
                                                                        var call16193 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                                                        var var_s = call16193;
                                                                        var if16194 = GraceDone;
                                                                        setLineNumber(2443);    // compilenode member
                                                                        // call case 4: self request
                                                                        onSelf = true;
                                                                        var call16196 = callmethodChecked(this, "isUse", []);
                                                                        if (Grace_isTrue(call16196)) {
                                                                          var string16197 = new GraceString(" (use)");
                                                                          var string16200 = new GraceString("");
                                                                          var opresult16202 = callmethodChecked(string16200, "++(1)", [1], var_s);
                                                                          var opresult16204 = callmethodChecked(opresult16202, "++(1)", [1], string16197);
                                                                          var_s = opresult16204;
                                                                          if16194 = GraceDone;
                                                                        }
                                                                        setLineNumber(2444);    // compilenode identifier
                                                                        var opresult16208 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                                                        // call case 6: other requests
                                                                        // call case 4: self request
                                                                        onSelf = true;
                                                                        var call16210 = callmethodChecked(this, "value", []);
                                                                        var call16211 = callmethodChecked(call16210, "pretty(1)", [1], opresult16208);
                                                                        var string16214 = new GraceString("\n");
                                                                        var opresult16217 = callmethodChecked(var_s, "++(1)", [1], string16214);
                                                                        var opresult16219 = callmethodChecked(opresult16217, "++(1)", [1], var_spc);
                                                                        var opresult16221 = callmethodChecked(opresult16219, "++(1)", [1], call16211);
                                                                        var_s = opresult16221;
                                                                        setLineNumber(2445);    // compilenode block
                                                                        var block16223 = new GraceBlock(this, 2445, 1);
                                                                        setLineNumber(1);    // compilenode identifier
                                                                        block16223.real = function(var_a) {
                                                                          setLineNumber(2446);    // compilenode string
                                                                          var string16224 = new GraceString("");
                                                                          // call case 6: other requests
                                                                          var call16227 = callmethodChecked(var_a, "pretty(1)", [1], var_depth);
                                                                          var string16229 = new GraceString("\n");
                                                                          var string16232 = new GraceString("");
                                                                          var opresult16234 = callmethodChecked(string16232, "++(1)", [1], var_s);
                                                                          var opresult16236 = callmethodChecked(opresult16234, "++(1)", [1], string16229);
                                                                          var opresult16238 = callmethodChecked(opresult16236, "++(1)", [1], call16227);
                                                                          var opresult16240 = callmethodChecked(opresult16238, "++(1)", [1], string16224);
                                                                          var_s = opresult16240;
                                                                          return GraceDone;
                                                                        };
                                                                        // call case 6: other requests
                                                                        setLineNumber(2445);    // compilenode member
                                                                        // call case 4: self request
                                                                        onSelf = true;
                                                                        var call16242 = callmethodChecked(this, "aliases", []);
                                                                        var call16243 = callmethodChecked(call16242, "do(1)", [1], block16223);
                                                                        var if16244 = GraceDone;
                                                                        setLineNumber(2448);    // compilenode member
                                                                        // call case 6: other requests
                                                                        // call case 6: other requests
                                                                        // call case 4: self request
                                                                        onSelf = true;
                                                                        var call16248 = callmethodChecked(this, "exclusions", []);
                                                                        var call16249 = callmethodChecked(call16248, "isEmpty", []);
                                                                        var call16250 = callmethodChecked(call16249, "not", []);
                                                                        if (Grace_isTrue(call16250)) {
                                                                          var string16251 = new GraceString("");
                                                                          var string16254 = new GraceString("\n");
                                                                          var string16257 = new GraceString("");
                                                                          var opresult16259 = callmethodChecked(string16257, "++(1)", [1], var_s);
                                                                          var opresult16261 = callmethodChecked(opresult16259, "++(1)", [1], string16254);
                                                                          var opresult16263 = callmethodChecked(opresult16261, "++(1)", [1], var_spc);
                                                                          var opresult16265 = callmethodChecked(opresult16263, "++(1)", [1], string16251);
                                                                          var_s = opresult16265;
                                                                          if16244 = GraceDone;
                                                                        }
                                                                        setLineNumber(2449);    // compilenode block
                                                                        var block16267 = new GraceBlock(this, 2449, 1);
                                                                        setLineNumber(1);    // compilenode identifier
                                                                        block16267.real = function(var_e) {
                                                                          setLineNumber(2450);    // compilenode string
                                                                          var string16268 = new GraceString(" ");
                                                                          var string16271 = new GraceString(" exclude ");
                                                                          var string16274 = new GraceString("");
                                                                          var opresult16276 = callmethodChecked(string16274, "++(1)", [1], var_s);
                                                                          var opresult16278 = callmethodChecked(opresult16276, "++(1)", [1], string16271);
                                                                          var opresult16280 = callmethodChecked(opresult16278, "++(1)", [1], var_e);
                                                                          var opresult16282 = callmethodChecked(opresult16280, "++(1)", [1], string16268);
                                                                          var_s = opresult16282;
                                                                          return GraceDone;
                                                                        };
                                                                        // call case 6: other requests
                                                                        setLineNumber(2449);    // compilenode member
                                                                        // call case 4: self request
                                                                        onSelf = true;
                                                                        var call16284 = callmethodChecked(this, "exclusions", []);
                                                                        var call16285 = callmethodChecked(call16284, "do(1)", [1], block16267);
                                                                        var if16286 = GraceDone;
                                                                        setLineNumber(2452);    // compilenode member
                                                                        // call case 6: other requests
                                                                        // call case 6: other requests
                                                                        // call case 4: self request
                                                                        onSelf = true;
                                                                        var call16290 = callmethodChecked(this, "providedNames", []);
                                                                        var call16291 = callmethodChecked(call16290, "isEmpty", []);
                                                                        var call16292 = callmethodChecked(call16291, "not", []);
                                                                        if (Grace_isTrue(call16292)) {
                                                                          setLineNumber(2453);    // compilenode string
                                                                          var string16293 = new GraceString("");
                                                                          // call case 6: other requests
                                                                          // call case 6: other requests
                                                                          // call case 4: self request
                                                                          onSelf = true;
                                                                          var call16298 = callmethodChecked(this, "providedNames", []);
                                                                          var call16299 = callmethodChecked(call16298, "asList", []);
                                                                          var call16300 = callmethodChecked(call16299, "sort", []);
                                                                          var string16302 = new GraceString("Provided names: ");
                                                                          var string16305 = new GraceString("\n");
                                                                          var opresult16307 = callmethodChecked(string16305, "++(1)", [1], var_spc);
                                                                          var opresult16309 = callmethodChecked(opresult16307, "++(1)", [1], string16302);
                                                                          var opresult16311 = callmethodChecked(opresult16309, "++(1)", [1], call16300);
                                                                          var opresult16313 = callmethodChecked(opresult16311, "++(1)", [1], string16293);
                                                                          var opresult16316 = callmethodChecked(var_s, "++(1)", [1], opresult16313);
                                                                          var_s = opresult16316;
                                                                          if16286 = GraceDone;
                                                                        }
                                                                        setLineNumber(2455);    // compilenode identifier
                                                                        return var_s;
                                                                      };
                                                                      func16180.paramCounts = [1];
                                                                      obj16117.methods["pretty(1)"] = func16180;
                                                                      func16180.definitionLine = 2437;
                                                                      func16180.definitionModule = "ast";
                                                                      var func16317 = function(argcv) {    // method toGrace(_)
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        var var_depth = arguments[curarg];
                                                                        curarg++;
                                                                        // Start argument checking
                                                                        curarg = 1;
                                                                        setLineNumber(2457);    // compilenode identifier
                                                                        if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                                    callmethod(var_Number, "asString", [0])._value + "."));
                                                                        curarg++;
                                                                        // End argument checking
                                                                        setModuleName("ast");
                                                                        setLineNumber(2458);    // compilenode string
                                                                        var string16318 = new GraceString("");
                                                                        var var_s = string16318;
                                                                        setLineNumber(2459);    // compilenode block
                                                                        var block16320 = new GraceBlock(this, 2459, 0);
                                                                        block16320.real = function() {
                                                                          setLineNumber(2460);    // compilenode string
                                                                          var string16321 = new GraceString("    ");
                                                                          var opresult16324 = callmethodChecked(var_s, "++(1)", [1], string16321);
                                                                          var_s = opresult16324;
                                                                          return GraceDone;
                                                                        };
                                                                        // call case 5: prelude request
                                                                        var call16325 = callmethodChecked(var_prelude, "repeat(1)times(1)", [1, 1], var_depth, block16320);
                                                                        var if16326 = GraceDone;
                                                                        setLineNumber(2462);    // compilenode member
                                                                        // call case 4: self request
                                                                        onSelf = true;
                                                                        var call16328 = callmethodChecked(this, "isUse", []);
                                                                        if (Grace_isTrue(call16328)) {
                                                                          var string16329 = new GraceString("use ");
                                                                          if16326 = string16329;
                                                                        } else {
                                                                          var string16330 = new GraceString("inherit ");
                                                                          if16326 = string16330;
                                                                        }
                                                                        var opresult16333 = callmethodChecked(var_s, "++(1)", [1], if16326);
                                                                        var_s = opresult16333;
                                                                        setLineNumber(2463);    // compilenode num
                                                                        // call case 6: other requests
                                                                        // call case 4: self request
                                                                        onSelf = true;
                                                                        var call16336 = callmethodChecked(this, "value", []);
                                                                        var call16337 = callmethodChecked(call16336, "toGrace(1)", [1], new GraceNum(0));
                                                                        var opresult16340 = callmethodChecked(var_s, "++(1)", [1], call16337);
                                                                        var_s = opresult16340;
                                                                        setLineNumber(2464);    // compilenode block
                                                                        var block16342 = new GraceBlock(this, 2464, 1);
                                                                        setLineNumber(1);    // compilenode identifier
                                                                        block16342.real = function(var_a) {
                                                                          setLineNumber(2465);    // compilenode string
                                                                          var string16343 = new GraceString(" ");
                                                                          var string16346 = new GraceString(" ");
                                                                          var string16349 = new GraceString("");
                                                                          var opresult16351 = callmethodChecked(string16349, "++(1)", [1], var_s);
                                                                          var opresult16353 = callmethodChecked(opresult16351, "++(1)", [1], string16346);
                                                                          var opresult16355 = callmethodChecked(opresult16353, "++(1)", [1], var_a);
                                                                          var opresult16357 = callmethodChecked(opresult16355, "++(1)", [1], string16343);
                                                                          var_s = opresult16357;
                                                                          return GraceDone;
                                                                        };
                                                                        // call case 6: other requests
                                                                        setLineNumber(2464);    // compilenode member
                                                                        // call case 4: self request
                                                                        onSelf = true;
                                                                        var call16359 = callmethodChecked(this, "aliases", []);
                                                                        var call16360 = callmethodChecked(call16359, "do(1)", [1], block16342);
                                                                        setLineNumber(2467);    // compilenode block
                                                                        var block16362 = new GraceBlock(this, 2467, 1);
                                                                        setLineNumber(1);    // compilenode identifier
                                                                        block16362.real = function(var_e) {
                                                                          setLineNumber(2468);    // compilenode string
                                                                          var string16363 = new GraceString(" ");
                                                                          // call case 6: other requests
                                                                          var call16366 = callmethodChecked(var_e, "nameString", []);
                                                                          var string16368 = new GraceString(" exclude ");
                                                                          var string16371 = new GraceString("");
                                                                          var opresult16373 = callmethodChecked(string16371, "++(1)", [1], var_s);
                                                                          var opresult16375 = callmethodChecked(opresult16373, "++(1)", [1], string16368);
                                                                          var opresult16377 = callmethodChecked(opresult16375, "++(1)", [1], call16366);
                                                                          var opresult16379 = callmethodChecked(opresult16377, "++(1)", [1], string16363);
                                                                          var_s = opresult16379;
                                                                          return GraceDone;
                                                                        };
                                                                        // call case 6: other requests
                                                                        setLineNumber(2467);    // compilenode member
                                                                        // call case 4: self request
                                                                        onSelf = true;
                                                                        var call16381 = callmethodChecked(this, "exclusions", []);
                                                                        var call16382 = callmethodChecked(call16381, "do(1)", [1], block16362);
                                                                        setLineNumber(2470);    // return value
                                                                        if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], var_s)))
                                                                            throw new GraceExceptionPacket(TypeErrorObject,
                                                                                new GraceString("result of method toGrace(_) does not have " + 
                                                                                    callmethod(var_String, "asString", [0])._value + "."));
                                                                        return var_s;
                                                                      };
                                                                      func16317.paramTypes = [];
                                                                      func16317.paramTypes.push([type_Number, "depth"]);
                                                                      func16317.paramCounts = [1];
                                                                      obj16117.methods["toGrace(1)"] = func16317;
                                                                      func16317.definitionLine = 2457;
                                                                      func16317.definitionModule = "ast";
                                                                      var func16383 = function(argcv) {    // method asString
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        setModuleName("ast");
                                                                        setLineNumber(2473);    // compilenode num
                                                                        // call case 6: other requests
                                                                        // call case 4: self request
                                                                        onSelf = true;
                                                                        var call16386 = callmethodChecked(this, "value", []);
                                                                        var call16387 = callmethodChecked(call16386, "toGrace(1)", [1], new GraceNum(0));
                                                                        var if16389 = GraceDone;
                                                                        // call case 4: self request
                                                                        onSelf = true;
                                                                        var call16391 = callmethodChecked(this, "isUse", []);
                                                                        if (Grace_isTrue(call16391)) {
                                                                          var string16392 = new GraceString("use ");
                                                                          if16389 = string16392;
                                                                        } else {
                                                                          var string16393 = new GraceString("inherit ");
                                                                          if16389 = string16393;
                                                                        }
                                                                        var opresult16395 = callmethodChecked(if16389, "++(1)", [1], call16387);
                                                                        return opresult16395;
                                                                      };
                                                                      func16383.paramCounts = [0];
                                                                      obj16117.methods["asString"] = func16383;
                                                                      func16383.definitionLine = 2472;
                                                                      func16383.definitionModule = "ast";
                                                                      var func16396 = function(argcv) {    // method nameString
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        setModuleName("ast");
                                                                        setLineNumber(2475);    // compilenode num
                                                                        // call case 6: other requests
                                                                        // call case 4: self request
                                                                        onSelf = true;
                                                                        var call16399 = callmethodChecked(this, "value", []);
                                                                        var call16400 = callmethodChecked(call16399, "toGrace(1)", [1], new GraceNum(0));
                                                                        return call16400;
                                                                      };
                                                                      func16396.paramCounts = [0];
                                                                      obj16117.methods["nameString"] = func16396;
                                                                      func16396.definitionLine = 2475;
                                                                      func16396.definitionModule = "ast";
                                                                      var func16401 = function(argcv) {    // method addAlias(_)for(_)
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        var var_newName = arguments[curarg];
                                                                        curarg++;
                                                                        var var_oldName = arguments[curarg];
                                                                        curarg++;
                                                                        setModuleName("ast");
                                                                        setLineNumber(2477);    // compilenode identifier
                                                                        // call case 6: other requests
                                                                        // call case 6: other requests
                                                                        // call case 3: self.outer request
                                                                        var call16406 = callmethodChecked(superDepth, "outer", [0]);
                                                                        var call16407 = callmethodChecked(call16406, "outer", []);
                                                                        onSelf = true;
                                                                        var call16408 = callmethodChecked(call16407, "aliasNew(1)old(1)", [1, 1], var_newName, var_oldName);
                                                                        // call case 6: other requests
                                                                        // call case 4: self request
                                                                        onSelf = true;
                                                                        var call16410 = callmethodChecked(this, "aliases", []);
                                                                        var call16411 = callmethodChecked(call16410, "push(1)", [1], call16408);
                                                                        return call16411;
                                                                      };
                                                                      func16401.paramCounts = [1, 1];
                                                                      obj16117.methods["addAlias(1)for(1)"] = func16401;
                                                                      func16401.definitionLine = 2476;
                                                                      func16401.definitionModule = "ast";
                                                                      var func16412 = function(argcv) {    // method addExclusion(_)
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        var var_ident = arguments[curarg];
                                                                        curarg++;
                                                                        setModuleName("ast");
                                                                        setLineNumber(2480);    // compilenode identifier
                                                                        // call case 6: other requests
                                                                        // call case 4: self request
                                                                        onSelf = true;
                                                                        var call16415 = callmethodChecked(this, "exclusions", []);
                                                                        var call16416 = callmethodChecked(call16415, "push(1)", [1], var_ident);
                                                                        return call16416;
                                                                      };
                                                                      func16412.paramCounts = [1];
                                                                      obj16117.methods["addExclusion(1)"] = func16412;
                                                                      func16412.definitionLine = 2479;
                                                                      func16412.definitionModule = "ast";
                                                                      var func16417 = function(argcv) {    // method shallowCopy
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        setModuleName("ast");
                                                                        setLineNumber(2483);    // compilenode identifier
                                                                        // call case 6: other requests
                                                                        // call case 6: other requests
                                                                        var call16420 = callmethodChecked(var_inheritsNode, "new(1)", [1], var_nullNode);
                                                                        var call16421 = callmethodChecked(call16420, "shallowCopyFieldsFrom(1)", [1], this);
                                                                        return call16421;
                                                                      };
                                                                      func16417.paramCounts = [0];
                                                                      obj16117.methods["shallowCopy"] = func16417;
                                                                      func16417.definitionLine = 2482;
                                                                      func16417.definitionModule = "ast";
                                                                      var func16422 = function(argcv) {    // method shallowCopyFieldsFrom(_)
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        var var_other = arguments[curarg];
                                                                        curarg++;
                                                                        setModuleName("ast");
                                                                        setLineNumber(2486);    // compilenode identifier
                                                                        // call case 1: super request
                                                                        var call16424 = callmethodsuper(this, "shallowCopyFieldsFrom(1)", [1], var_other);
                                                                        setLineNumber(2487);    // compilenode member
                                                                        // call case 6: other requests
                                                                        var call16427 = callmethodChecked(var_other, "providedNames", []);
                                                                        // call case 4: self request
                                                                        onSelf = true;
                                                                        var call16428 = callmethodChecked(this, "providedNames:=(1)", [1], call16427);
                                                                        setLineNumber(2488);    // compilenode member
                                                                        // call case 6: other requests
                                                                        var call16431 = callmethodChecked(var_other, "aliases", []);
                                                                        // call case 4: self request
                                                                        onSelf = true;
                                                                        var call16432 = callmethodChecked(this, "aliases:=(1)", [1], call16431);
                                                                        setLineNumber(2489);    // compilenode member
                                                                        // call case 6: other requests
                                                                        var call16435 = callmethodChecked(var_other, "exclusions", []);
                                                                        // call case 4: self request
                                                                        onSelf = true;
                                                                        var call16436 = callmethodChecked(this, "exclusions:=(1)", [1], call16435);
                                                                        setLineNumber(2490);    // compilenode member
                                                                        // call case 6: other requests
                                                                        var call16439 = callmethodChecked(var_other, "isUse", []);
                                                                        // call case 4: self request
                                                                        onSelf = true;
                                                                        var call16440 = callmethodChecked(this, "isUse:=(1)", [1], call16439);
                                                                        setLineNumber(2491);    // compilenode identifier
                                                                        return this;
                                                                      };
                                                                      func16422.paramCounts = [1];
                                                                      obj16117.methods["shallowCopyFieldsFrom(1)"] = func16422;
                                                                      func16422.definitionLine = 2485;
                                                                      func16422.definitionModule = "ast";
                                                                      var func16441 = function(argcv) {    // method statementName
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        setModuleName("ast");
                                                                        var if16442 = GraceDone;
                                                                        setLineNumber(2494);    // compilenode member
                                                                        // call case 4: self request
                                                                        onSelf = true;
                                                                        var call16444 = callmethodChecked(this, "isUse", []);
                                                                        if (Grace_isTrue(call16444)) {
                                                                          var string16445 = new GraceString("use");
                                                                          if16442 = string16445;
                                                                        } else {
                                                                          var string16446 = new GraceString("inherit");
                                                                          if16442 = string16446;
                                                                        }
                                                                        return if16442;
                                                                      };
                                                                      func16441.paramCounts = [0];
                                                                      obj16117.methods["statementName"] = func16441;
                                                                      func16441.definitionLine = 2493;
                                                                      func16441.definitionModule = "ast";
                                                                      setLineNumber(2401);    // compilenode identifier
                                                                      // call case 6: other requests
                                                                      // call case 6: other requests
                                                                      // call case 3: self.outer request
                                                                      var call16450 = callmethodChecked(superDepth, "outer", [0]);
                                                                      var call16451 = callmethodChecked(call16450, "outer", []);
                                                                      var call16452 = callmethodChecked(call16451, "baseNode$object(1)", [0, 1], this);
                                                                      obj16117.superobj = call16452;
                                                                      if (call16452.data) obj16117.data = call16452.data;
                                                                      if (call16452.hasOwnProperty('_value'))
                                                                          obj16117._value = call16452._value;
                                                                      setLineNumber(2402);    // compilenode string
                                                                      var string16453 = new GraceString("inherits");
                                                                      obj16117.data["kind"] = string16453;
                                                                      var reader_ast_kind16454 = function() {
                                                                        return this.data["kind"];
                                                                      };
                                                                      reader_ast_kind16454.def = true;
                                                                      obj16117.methods["kind"] = reader_ast_kind16454;
                                                                      setLineNumber(2403);    // compilenode identifier
                                                                      obj16117.data["value"] = var_expr;
                                                                      var reader_ast_value16455 = function() {
                                                                        return this.data["value"];
                                                                      };
                                                                      obj16117.methods["value"] = reader_ast_value16455;
                                                                      obj16117.data["value"] = var_expr;
                                                                      var writer_ast_value16455 = function(argcv, o) {
                                                                        this.data["value"] = o;
                                                                        return GraceDone;
                                                                      };
                                                                      obj16117.methods["value:=(1)"] = writer_ast_value16455;
                                                                      obj16117.mutable = true;
                                                                      setLineNumber(2404);    // compilenode member
                                                                      // call case 5: prelude request
                                                                      var call16457 = callmethodChecked(var_prelude, "emptySet", []);
                                                                      obj16117.data["providedNames"] = call16457;
                                                                      var reader_ast_providedNames16458 = function() {
                                                                        return this.data["providedNames"];
                                                                      };
                                                                      obj16117.methods["providedNames"] = reader_ast_providedNames16458;
                                                                      obj16117.data["providedNames"] = call16457;
                                                                      var writer_ast_providedNames16458 = function(argcv, o) {
                                                                        this.data["providedNames"] = o;
                                                                        return GraceDone;
                                                                      };
                                                                      obj16117.methods["providedNames:=(1)"] = writer_ast_providedNames16458;
                                                                      obj16117.mutable = true;
                                                                      setLineNumber(2405);    // compilenode array
                                                                      var array16459 = new PrimitiveGraceList([]);
                                                                      obj16117.data["aliases"] = array16459;
                                                                      var reader_ast_aliases16460 = function() {
                                                                        return this.data["aliases"];
                                                                      };
                                                                      obj16117.methods["aliases"] = reader_ast_aliases16460;
                                                                      obj16117.data["aliases"] = array16459;
                                                                      var writer_ast_aliases16460 = function(argcv, o) {
                                                                        this.data["aliases"] = o;
                                                                        return GraceDone;
                                                                      };
                                                                      obj16117.methods["aliases:=(1)"] = writer_ast_aliases16460;
                                                                      obj16117.mutable = true;
                                                                      setLineNumber(2406);    // compilenode array
                                                                      var array16461 = new PrimitiveGraceList([]);
                                                                      obj16117.data["exclusions"] = array16461;
                                                                      var reader_ast_exclusions16462 = function() {
                                                                        return this.data["exclusions"];
                                                                      };
                                                                      obj16117.methods["exclusions"] = reader_ast_exclusions16462;
                                                                      obj16117.data["exclusions"] = array16461;
                                                                      var writer_ast_exclusions16462 = function(argcv, o) {
                                                                        this.data["exclusions"] = o;
                                                                        return GraceDone;
                                                                      };
                                                                      obj16117.methods["exclusions:=(1)"] = writer_ast_exclusions16462;
                                                                      obj16117.mutable = true;
                                                                      setLineNumber(2407);    // compilenode identifier
                                                                      obj16117.data["isUse"] = GraceFalse;
                                                                      var reader_ast_isUse16463 = function() {
                                                                        return this.data["isUse"];
                                                                      };
                                                                      obj16117.methods["isUse"] = reader_ast_isUse16463;
                                                                      obj16117.data["isUse"] = GraceFalse;
                                                                      var writer_ast_isUse16463 = function(argcv, o) {
                                                                        this.data["isUse"] = o;
                                                                        return GraceDone;
                                                                      };
                                                                      obj16117.methods["isUse:=(1)"] = writer_ast_isUse16463;
                                                                      obj16117.mutable = true;
                                                                      superDepth = origSuperDepth;
                                                                    };
                                                                    obj_init_16117.apply(obj16117, []);
                                                                    return obj16117;
                                                                  };
                                                                  func16116.paramCounts = [1];
                                                                  obj16109.methods["new(1)"] = func16116;
                                                                  func16116.definitionLine = 2400;
                                                                  func16116.definitionModule = "ast";
                                                                    var func16464 = function(argcv) {    // method new(_)$object(_)
                                                                      var curarg = 1;
                                                                      var var_expr = arguments[curarg];
                                                                      curarg++;
                                                                      var inheritingObject = arguments[curarg++];
                                                                      // Start argument processing
                                                                      curarg = 1;
                                                                      curarg++;
                                                                      // End argument processing
                                                                      setModuleName("ast");
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var obj16465 = Grace_allocObject(null, "new(1)");
                                                                      obj16465.definitionModule = "ast";
                                                                      obj16465.definitionLine = 2400;
                                                                      var inho16465 = inheritingObject;
                                                                      while (inho16465.superobj) inho16465 = inho16465.superobj;
                                                                      inho16465.superobj = obj16465;
                                                                      obj16465.data = inheritingObject.data;
                                                                      if (inheritingObject.hasOwnProperty('_value'))
                                                                        obj16465._value = inheritingObject._value;
                                                                      obj16465.outer = this;
                                                                      var reader_ast_outer16466 = function() {
                                                                        return this.outer;
                                                                      };
                                                                      obj16465.methods["outer"] = reader_ast_outer16466;
                                                                      var obj_init_16465 = function() {
                                                                        var origSuperDepth = superDepth;
                                                                        superDepth = obj16465;
                                                                        var func16467 = function(argcv) {    // method isLegalInTrait
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          setModuleName("ast");
                                                                          setLineNumber(2409);    // compilenode member
                                                                          // call case 4: self request
                                                                          onSelf = true;
                                                                          var call16469 = callmethodChecked(this, "isUse", []);
                                                                          return call16469;
                                                                        };
                                                                        func16467.paramCounts = [0];
                                                                        obj16465.methods["isLegalInTrait"] = func16467;
                                                                        func16467.definitionLine = 2409;
                                                                        func16467.definitionModule = "ast";
                                                                        var func16470 = function(argcv) {    // method isInherits
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          setModuleName("ast");
                                                                          // isInherits is a simple accessor - elide try ... catch
                                                                          setLineNumber(2410);    // compilenode identifier
                                                                          return GraceTrue;
                                                                        };
                                                                        func16470.paramCounts = [0];
                                                                        obj16465.methods["isInherits"] = func16470;
                                                                        func16470.definitionLine = 2410;
                                                                        func16470.definitionModule = "ast";
                                                                        var func16471 = function(argcv) {    // method inheritsFromMember
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          setModuleName("ast");
                                                                          setLineNumber(2411);    // compilenode member
                                                                          // call case 6: other requests
                                                                          // call case 4: self request
                                                                          onSelf = true;
                                                                          var call16474 = callmethodChecked(this, "value", []);
                                                                          var call16475 = callmethodChecked(call16474, "isMember", []);
                                                                          return call16475;
                                                                        };
                                                                        func16471.paramCounts = [0];
                                                                        obj16465.methods["inheritsFromMember"] = func16471;
                                                                        func16471.definitionLine = 2411;
                                                                        func16471.definitionModule = "ast";
                                                                        var func16476 = function(argcv) {    // method inheritsFromCall
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          setModuleName("ast");
                                                                          setLineNumber(2412);    // compilenode member
                                                                          // call case 6: other requests
                                                                          // call case 4: self request
                                                                          onSelf = true;
                                                                          var call16479 = callmethodChecked(this, "value", []);
                                                                          var call16480 = callmethodChecked(call16479, "isCall", []);
                                                                          return call16480;
                                                                        };
                                                                        func16476.paramCounts = [0];
                                                                        obj16465.methods["inheritsFromCall"] = func16476;
                                                                        func16476.definitionLine = 2412;
                                                                        func16476.definitionModule = "ast";
                                                                        var func16481 = function(argcv) {    // method isExecutable
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          setModuleName("ast");
                                                                          // isExecutable is a simple accessor - elide try ... catch
                                                                          setLineNumber(2413);    // compilenode identifier
                                                                          return GraceFalse;
                                                                        };
                                                                        func16481.paramCounts = [0];
                                                                        obj16465.methods["isExecutable"] = func16481;
                                                                        func16481.definitionLine = 2413;
                                                                        func16481.definitionModule = "ast";
                                                                        var func16482 = function(argcv) {    // method accept(_)from(_)
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          var var_visitor = arguments[curarg];
                                                                          curarg++;
                                                                          var var_as = arguments[curarg];
                                                                          curarg++;
                                                                          // Start argument checking
                                                                          curarg = 1;
                                                                          setLineNumber(2414);    // compilenode identifier
                                                                          if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                                      callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                                          curarg++;
                                                                          curarg++;
                                                                          // End argument checking
                                                                          setModuleName("ast");
                                                                          var if16483 = GraceDone;
                                                                          setLineNumber(2415);    // compilenode identifier
                                                                          // call case 6: other requests
                                                                          var call16485 = callmethodChecked(var_visitor, "visitInherits(1)up(1)", [1, 1], this, var_as);
                                                                          if (Grace_isTrue(call16485)) {
                                                                            setLineNumber(2416);    // compilenode identifier
                                                                            // call case 6: other requests
                                                                            var call16487 = callmethodChecked(var_as, "extend(1)", [1], this);
                                                                            var var_newChain = call16487;
                                                                            setLineNumber(2417);    // compilenode identifier
                                                                            // call case 6: other requests
                                                                            // call case 4: self request
                                                                            onSelf = true;
                                                                            var call16490 = callmethodChecked(this, "value", []);
                                                                            var call16491 = callmethodChecked(call16490, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                                            setLineNumber(2418);    // compilenode block
                                                                            var block16493 = new GraceBlock(this, 2418, 1);
                                                                            setLineNumber(1);    // compilenode identifier
                                                                            block16493.real = function(var_a) {
                                                                              setLineNumber(2419);    // compilenode identifier
                                                                              // call case 6: other requests
                                                                              // call case 6: other requests
                                                                              var call16496 = callmethodChecked(var_a, "newName", []);
                                                                              var call16497 = callmethodChecked(call16496, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                                              setLineNumber(2420);    // compilenode identifier
                                                                              // call case 6: other requests
                                                                              // call case 6: other requests
                                                                              var call16500 = callmethodChecked(var_a, "oldName", []);
                                                                              var call16501 = callmethodChecked(call16500, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                                              return call16501;
                                                                            };
                                                                            // call case 6: other requests
                                                                            setLineNumber(2418);    // compilenode member
                                                                            // call case 4: self request
                                                                            onSelf = true;
                                                                            var call16503 = callmethodChecked(this, "aliases", []);
                                                                            var call16504 = callmethodChecked(call16503, "do(1)", [1], block16493);
                                                                            setLineNumber(2422);    // compilenode block
                                                                            var block16506 = new GraceBlock(this, 2422, 1);
                                                                            setLineNumber(1);    // compilenode identifier
                                                                            block16506.real = function(var_e) {
                                                                              setLineNumber(2422);    // compilenode identifier
                                                                              // call case 6: other requests
                                                                              var call16508 = callmethodChecked(var_e, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                                              return call16508;
                                                                            };
                                                                            // call case 6: other requests
                                                                            // call case 4: self request
                                                                            onSelf = true;
                                                                            var call16510 = callmethodChecked(this, "exclusions", []);
                                                                            var call16511 = callmethodChecked(call16510, "do(1)", [1], block16506);
                                                                            if16483 = call16511;
                                                                          }
                                                                          return if16483;
                                                                        };
                                                                        func16482.paramTypes = [];
                                                                        func16482.paramTypes.push([]);
                                                                        func16482.paramTypes.push([]);
                                                                        func16482.paramCounts = [1, 1];
                                                                        obj16465.methods["accept(1)from(1)"] = func16482;
                                                                        func16482.definitionLine = 2414;
                                                                        func16482.definitionModule = "ast";
                                                                        var func16512 = function(argcv) {    // method declarationKindWithAncestors(_)
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          var var_as = arguments[curarg];
                                                                          curarg++;
                                                                          setModuleName("ast");
                                                                          setLineNumber(2429);    // compilenode member
                                                                          // call case 6: other requests
                                                                          var call16514 = callmethodChecked(var_k, "methdec", []);
                                                                          return call16514;
                                                                        };
                                                                        func16512.paramCounts = [1];
                                                                        obj16465.methods["declarationKindWithAncestors(1)"] = func16512;
                                                                        func16512.definitionLine = 2425;
                                                                        func16512.definitionModule = "ast";
                                                                        var func16515 = function(argcv) {    // method map(_)ancestors(_)
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          var var_blk = arguments[curarg];
                                                                          curarg++;
                                                                          var var_as = arguments[curarg];
                                                                          curarg++;
                                                                          setModuleName("ast");
                                                                          setLineNumber(2432);    // compilenode member
                                                                          // call case 4: self request
                                                                          onSelf = true;
                                                                          var call16517 = callmethodChecked(this, "shallowCopy", []);
                                                                          var var_n = call16517;
                                                                          setLineNumber(2433);    // compilenode identifier
                                                                          // call case 6: other requests
                                                                          var call16519 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                                                          var var_newChain = call16519;
                                                                          setLineNumber(2434);    // compilenode identifier
                                                                          // call case 6: other requests
                                                                          // call case 4: self request
                                                                          onSelf = true;
                                                                          var call16523 = callmethodChecked(this, "value", []);
                                                                          var call16524 = callmethodChecked(call16523, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
                                                                          // call case 6: other requests
                                                                          var call16525 = callmethodChecked(var_n, "value:=(1)", [1], call16524);
                                                                          setLineNumber(2435);    // compilenode identifier
                                                                          // call case 6: other requests
                                                                          var call16527 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                                                          return call16527;
                                                                        };
                                                                        func16515.paramCounts = [1, 1];
                                                                        obj16465.methods["map(1)ancestors(1)"] = func16515;
                                                                        func16515.definitionLine = 2431;
                                                                        func16515.definitionModule = "ast";
                                                                        var func16528 = function(argcv) {    // method pretty(_)
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          var var_depth = arguments[curarg];
                                                                          curarg++;
                                                                          setModuleName("ast");
                                                                          setLineNumber(2438);    // compilenode string
                                                                          var string16529 = new GraceString("");
                                                                          var var_spc = string16529;
                                                                          setLineNumber(2439);    // compilenode num
                                                                          var opresult16533 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                                                                          var block16534 = new GraceBlock(this, 2439, 1);
                                                                          setLineNumber(1);    // compilenode identifier
                                                                          block16534.real = function(var_i) {
                                                                            setLineNumber(2440);    // compilenode string
                                                                            var string16535 = new GraceString("  ");
                                                                            var opresult16538 = callmethodChecked(var_spc, "++(1)", [1], string16535);
                                                                            var_spc = opresult16538;
                                                                            return GraceDone;
                                                                          };
                                                                          // call case 5: prelude request
                                                                          var call16539 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult16533, block16534);
                                                                          setLineNumber(2442);    // compilenode identifier
                                                                          // call case 1: super request
                                                                          var call16541 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                                                          var var_s = call16541;
                                                                          var if16542 = GraceDone;
                                                                          setLineNumber(2443);    // compilenode member
                                                                          // call case 4: self request
                                                                          onSelf = true;
                                                                          var call16544 = callmethodChecked(this, "isUse", []);
                                                                          if (Grace_isTrue(call16544)) {
                                                                            var string16545 = new GraceString(" (use)");
                                                                            var string16548 = new GraceString("");
                                                                            var opresult16550 = callmethodChecked(string16548, "++(1)", [1], var_s);
                                                                            var opresult16552 = callmethodChecked(opresult16550, "++(1)", [1], string16545);
                                                                            var_s = opresult16552;
                                                                            if16542 = GraceDone;
                                                                          }
                                                                          setLineNumber(2444);    // compilenode identifier
                                                                          var opresult16556 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                                                          // call case 6: other requests
                                                                          // call case 4: self request
                                                                          onSelf = true;
                                                                          var call16558 = callmethodChecked(this, "value", []);
                                                                          var call16559 = callmethodChecked(call16558, "pretty(1)", [1], opresult16556);
                                                                          var string16562 = new GraceString("\n");
                                                                          var opresult16565 = callmethodChecked(var_s, "++(1)", [1], string16562);
                                                                          var opresult16567 = callmethodChecked(opresult16565, "++(1)", [1], var_spc);
                                                                          var opresult16569 = callmethodChecked(opresult16567, "++(1)", [1], call16559);
                                                                          var_s = opresult16569;
                                                                          setLineNumber(2445);    // compilenode block
                                                                          var block16571 = new GraceBlock(this, 2445, 1);
                                                                          setLineNumber(1);    // compilenode identifier
                                                                          block16571.real = function(var_a) {
                                                                            setLineNumber(2446);    // compilenode string
                                                                            var string16572 = new GraceString("");
                                                                            // call case 6: other requests
                                                                            var call16575 = callmethodChecked(var_a, "pretty(1)", [1], var_depth);
                                                                            var string16577 = new GraceString("\n");
                                                                            var string16580 = new GraceString("");
                                                                            var opresult16582 = callmethodChecked(string16580, "++(1)", [1], var_s);
                                                                            var opresult16584 = callmethodChecked(opresult16582, "++(1)", [1], string16577);
                                                                            var opresult16586 = callmethodChecked(opresult16584, "++(1)", [1], call16575);
                                                                            var opresult16588 = callmethodChecked(opresult16586, "++(1)", [1], string16572);
                                                                            var_s = opresult16588;
                                                                            return GraceDone;
                                                                          };
                                                                          // call case 6: other requests
                                                                          setLineNumber(2445);    // compilenode member
                                                                          // call case 4: self request
                                                                          onSelf = true;
                                                                          var call16590 = callmethodChecked(this, "aliases", []);
                                                                          var call16591 = callmethodChecked(call16590, "do(1)", [1], block16571);
                                                                          var if16592 = GraceDone;
                                                                          setLineNumber(2448);    // compilenode member
                                                                          // call case 6: other requests
                                                                          // call case 6: other requests
                                                                          // call case 4: self request
                                                                          onSelf = true;
                                                                          var call16596 = callmethodChecked(this, "exclusions", []);
                                                                          var call16597 = callmethodChecked(call16596, "isEmpty", []);
                                                                          var call16598 = callmethodChecked(call16597, "not", []);
                                                                          if (Grace_isTrue(call16598)) {
                                                                            var string16599 = new GraceString("");
                                                                            var string16602 = new GraceString("\n");
                                                                            var string16605 = new GraceString("");
                                                                            var opresult16607 = callmethodChecked(string16605, "++(1)", [1], var_s);
                                                                            var opresult16609 = callmethodChecked(opresult16607, "++(1)", [1], string16602);
                                                                            var opresult16611 = callmethodChecked(opresult16609, "++(1)", [1], var_spc);
                                                                            var opresult16613 = callmethodChecked(opresult16611, "++(1)", [1], string16599);
                                                                            var_s = opresult16613;
                                                                            if16592 = GraceDone;
                                                                          }
                                                                          setLineNumber(2449);    // compilenode block
                                                                          var block16615 = new GraceBlock(this, 2449, 1);
                                                                          setLineNumber(1);    // compilenode identifier
                                                                          block16615.real = function(var_e) {
                                                                            setLineNumber(2450);    // compilenode string
                                                                            var string16616 = new GraceString(" ");
                                                                            var string16619 = new GraceString(" exclude ");
                                                                            var string16622 = new GraceString("");
                                                                            var opresult16624 = callmethodChecked(string16622, "++(1)", [1], var_s);
                                                                            var opresult16626 = callmethodChecked(opresult16624, "++(1)", [1], string16619);
                                                                            var opresult16628 = callmethodChecked(opresult16626, "++(1)", [1], var_e);
                                                                            var opresult16630 = callmethodChecked(opresult16628, "++(1)", [1], string16616);
                                                                            var_s = opresult16630;
                                                                            return GraceDone;
                                                                          };
                                                                          // call case 6: other requests
                                                                          setLineNumber(2449);    // compilenode member
                                                                          // call case 4: self request
                                                                          onSelf = true;
                                                                          var call16632 = callmethodChecked(this, "exclusions", []);
                                                                          var call16633 = callmethodChecked(call16632, "do(1)", [1], block16615);
                                                                          var if16634 = GraceDone;
                                                                          setLineNumber(2452);    // compilenode member
                                                                          // call case 6: other requests
                                                                          // call case 6: other requests
                                                                          // call case 4: self request
                                                                          onSelf = true;
                                                                          var call16638 = callmethodChecked(this, "providedNames", []);
                                                                          var call16639 = callmethodChecked(call16638, "isEmpty", []);
                                                                          var call16640 = callmethodChecked(call16639, "not", []);
                                                                          if (Grace_isTrue(call16640)) {
                                                                            setLineNumber(2453);    // compilenode string
                                                                            var string16641 = new GraceString("");
                                                                            // call case 6: other requests
                                                                            // call case 6: other requests
                                                                            // call case 4: self request
                                                                            onSelf = true;
                                                                            var call16646 = callmethodChecked(this, "providedNames", []);
                                                                            var call16647 = callmethodChecked(call16646, "asList", []);
                                                                            var call16648 = callmethodChecked(call16647, "sort", []);
                                                                            var string16650 = new GraceString("Provided names: ");
                                                                            var string16653 = new GraceString("\n");
                                                                            var opresult16655 = callmethodChecked(string16653, "++(1)", [1], var_spc);
                                                                            var opresult16657 = callmethodChecked(opresult16655, "++(1)", [1], string16650);
                                                                            var opresult16659 = callmethodChecked(opresult16657, "++(1)", [1], call16648);
                                                                            var opresult16661 = callmethodChecked(opresult16659, "++(1)", [1], string16641);
                                                                            var opresult16664 = callmethodChecked(var_s, "++(1)", [1], opresult16661);
                                                                            var_s = opresult16664;
                                                                            if16634 = GraceDone;
                                                                          }
                                                                          setLineNumber(2455);    // compilenode identifier
                                                                          return var_s;
                                                                        };
                                                                        func16528.paramCounts = [1];
                                                                        obj16465.methods["pretty(1)"] = func16528;
                                                                        func16528.definitionLine = 2437;
                                                                        func16528.definitionModule = "ast";
                                                                        var func16665 = function(argcv) {    // method toGrace(_)
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          var var_depth = arguments[curarg];
                                                                          curarg++;
                                                                          // Start argument checking
                                                                          curarg = 1;
                                                                          setLineNumber(2457);    // compilenode identifier
                                                                          if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                                      callmethod(var_Number, "asString", [0])._value + "."));
                                                                          curarg++;
                                                                          // End argument checking
                                                                          setModuleName("ast");
                                                                          setLineNumber(2458);    // compilenode string
                                                                          var string16666 = new GraceString("");
                                                                          var var_s = string16666;
                                                                          setLineNumber(2459);    // compilenode block
                                                                          var block16668 = new GraceBlock(this, 2459, 0);
                                                                          block16668.real = function() {
                                                                            setLineNumber(2460);    // compilenode string
                                                                            var string16669 = new GraceString("    ");
                                                                            var opresult16672 = callmethodChecked(var_s, "++(1)", [1], string16669);
                                                                            var_s = opresult16672;
                                                                            return GraceDone;
                                                                          };
                                                                          // call case 5: prelude request
                                                                          var call16673 = callmethodChecked(var_prelude, "repeat(1)times(1)", [1, 1], var_depth, block16668);
                                                                          var if16674 = GraceDone;
                                                                          setLineNumber(2462);    // compilenode member
                                                                          // call case 4: self request
                                                                          onSelf = true;
                                                                          var call16676 = callmethodChecked(this, "isUse", []);
                                                                          if (Grace_isTrue(call16676)) {
                                                                            var string16677 = new GraceString("use ");
                                                                            if16674 = string16677;
                                                                          } else {
                                                                            var string16678 = new GraceString("inherit ");
                                                                            if16674 = string16678;
                                                                          }
                                                                          var opresult16681 = callmethodChecked(var_s, "++(1)", [1], if16674);
                                                                          var_s = opresult16681;
                                                                          setLineNumber(2463);    // compilenode num
                                                                          // call case 6: other requests
                                                                          // call case 4: self request
                                                                          onSelf = true;
                                                                          var call16684 = callmethodChecked(this, "value", []);
                                                                          var call16685 = callmethodChecked(call16684, "toGrace(1)", [1], new GraceNum(0));
                                                                          var opresult16688 = callmethodChecked(var_s, "++(1)", [1], call16685);
                                                                          var_s = opresult16688;
                                                                          setLineNumber(2464);    // compilenode block
                                                                          var block16690 = new GraceBlock(this, 2464, 1);
                                                                          setLineNumber(1);    // compilenode identifier
                                                                          block16690.real = function(var_a) {
                                                                            setLineNumber(2465);    // compilenode string
                                                                            var string16691 = new GraceString(" ");
                                                                            var string16694 = new GraceString(" ");
                                                                            var string16697 = new GraceString("");
                                                                            var opresult16699 = callmethodChecked(string16697, "++(1)", [1], var_s);
                                                                            var opresult16701 = callmethodChecked(opresult16699, "++(1)", [1], string16694);
                                                                            var opresult16703 = callmethodChecked(opresult16701, "++(1)", [1], var_a);
                                                                            var opresult16705 = callmethodChecked(opresult16703, "++(1)", [1], string16691);
                                                                            var_s = opresult16705;
                                                                            return GraceDone;
                                                                          };
                                                                          // call case 6: other requests
                                                                          setLineNumber(2464);    // compilenode member
                                                                          // call case 4: self request
                                                                          onSelf = true;
                                                                          var call16707 = callmethodChecked(this, "aliases", []);
                                                                          var call16708 = callmethodChecked(call16707, "do(1)", [1], block16690);
                                                                          setLineNumber(2467);    // compilenode block
                                                                          var block16710 = new GraceBlock(this, 2467, 1);
                                                                          setLineNumber(1);    // compilenode identifier
                                                                          block16710.real = function(var_e) {
                                                                            setLineNumber(2468);    // compilenode string
                                                                            var string16711 = new GraceString(" ");
                                                                            // call case 6: other requests
                                                                            var call16714 = callmethodChecked(var_e, "nameString", []);
                                                                            var string16716 = new GraceString(" exclude ");
                                                                            var string16719 = new GraceString("");
                                                                            var opresult16721 = callmethodChecked(string16719, "++(1)", [1], var_s);
                                                                            var opresult16723 = callmethodChecked(opresult16721, "++(1)", [1], string16716);
                                                                            var opresult16725 = callmethodChecked(opresult16723, "++(1)", [1], call16714);
                                                                            var opresult16727 = callmethodChecked(opresult16725, "++(1)", [1], string16711);
                                                                            var_s = opresult16727;
                                                                            return GraceDone;
                                                                          };
                                                                          // call case 6: other requests
                                                                          setLineNumber(2467);    // compilenode member
                                                                          // call case 4: self request
                                                                          onSelf = true;
                                                                          var call16729 = callmethodChecked(this, "exclusions", []);
                                                                          var call16730 = callmethodChecked(call16729, "do(1)", [1], block16710);
                                                                          setLineNumber(2470);    // return value
                                                                          if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], var_s)))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("result of method toGrace(_) does not have " + 
                                                                                      callmethod(var_String, "asString", [0])._value + "."));
                                                                          return var_s;
                                                                        };
                                                                        func16665.paramTypes = [];
                                                                        func16665.paramTypes.push([type_Number, "depth"]);
                                                                        func16665.paramCounts = [1];
                                                                        obj16465.methods["toGrace(1)"] = func16665;
                                                                        func16665.definitionLine = 2457;
                                                                        func16665.definitionModule = "ast";
                                                                        var func16731 = function(argcv) {    // method asString
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          setModuleName("ast");
                                                                          setLineNumber(2473);    // compilenode num
                                                                          // call case 6: other requests
                                                                          // call case 4: self request
                                                                          onSelf = true;
                                                                          var call16734 = callmethodChecked(this, "value", []);
                                                                          var call16735 = callmethodChecked(call16734, "toGrace(1)", [1], new GraceNum(0));
                                                                          var if16737 = GraceDone;
                                                                          // call case 4: self request
                                                                          onSelf = true;
                                                                          var call16739 = callmethodChecked(this, "isUse", []);
                                                                          if (Grace_isTrue(call16739)) {
                                                                            var string16740 = new GraceString("use ");
                                                                            if16737 = string16740;
                                                                          } else {
                                                                            var string16741 = new GraceString("inherit ");
                                                                            if16737 = string16741;
                                                                          }
                                                                          var opresult16743 = callmethodChecked(if16737, "++(1)", [1], call16735);
                                                                          return opresult16743;
                                                                        };
                                                                        func16731.paramCounts = [0];
                                                                        obj16465.methods["asString"] = func16731;
                                                                        func16731.definitionLine = 2472;
                                                                        func16731.definitionModule = "ast";
                                                                        var func16744 = function(argcv) {    // method nameString
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          setModuleName("ast");
                                                                          setLineNumber(2475);    // compilenode num
                                                                          // call case 6: other requests
                                                                          // call case 4: self request
                                                                          onSelf = true;
                                                                          var call16747 = callmethodChecked(this, "value", []);
                                                                          var call16748 = callmethodChecked(call16747, "toGrace(1)", [1], new GraceNum(0));
                                                                          return call16748;
                                                                        };
                                                                        func16744.paramCounts = [0];
                                                                        obj16465.methods["nameString"] = func16744;
                                                                        func16744.definitionLine = 2475;
                                                                        func16744.definitionModule = "ast";
                                                                        var func16749 = function(argcv) {    // method addAlias(_)for(_)
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          var var_newName = arguments[curarg];
                                                                          curarg++;
                                                                          var var_oldName = arguments[curarg];
                                                                          curarg++;
                                                                          setModuleName("ast");
                                                                          setLineNumber(2477);    // compilenode identifier
                                                                          // call case 6: other requests
                                                                          // call case 6: other requests
                                                                          // call case 3: self.outer request
                                                                          var call16754 = callmethodChecked(superDepth, "outer", [0]);
                                                                          var call16755 = callmethodChecked(call16754, "outer", []);
                                                                          onSelf = true;
                                                                          var call16756 = callmethodChecked(call16755, "aliasNew(1)old(1)", [1, 1], var_newName, var_oldName);
                                                                          // call case 6: other requests
                                                                          // call case 4: self request
                                                                          onSelf = true;
                                                                          var call16758 = callmethodChecked(this, "aliases", []);
                                                                          var call16759 = callmethodChecked(call16758, "push(1)", [1], call16756);
                                                                          return call16759;
                                                                        };
                                                                        func16749.paramCounts = [1, 1];
                                                                        obj16465.methods["addAlias(1)for(1)"] = func16749;
                                                                        func16749.definitionLine = 2476;
                                                                        func16749.definitionModule = "ast";
                                                                        var func16760 = function(argcv) {    // method addExclusion(_)
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          var var_ident = arguments[curarg];
                                                                          curarg++;
                                                                          setModuleName("ast");
                                                                          setLineNumber(2480);    // compilenode identifier
                                                                          // call case 6: other requests
                                                                          // call case 4: self request
                                                                          onSelf = true;
                                                                          var call16763 = callmethodChecked(this, "exclusions", []);
                                                                          var call16764 = callmethodChecked(call16763, "push(1)", [1], var_ident);
                                                                          return call16764;
                                                                        };
                                                                        func16760.paramCounts = [1];
                                                                        obj16465.methods["addExclusion(1)"] = func16760;
                                                                        func16760.definitionLine = 2479;
                                                                        func16760.definitionModule = "ast";
                                                                        var func16765 = function(argcv) {    // method shallowCopy
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          setModuleName("ast");
                                                                          setLineNumber(2483);    // compilenode identifier
                                                                          // call case 6: other requests
                                                                          // call case 6: other requests
                                                                          var call16768 = callmethodChecked(var_inheritsNode, "new(1)", [1], var_nullNode);
                                                                          var call16769 = callmethodChecked(call16768, "shallowCopyFieldsFrom(1)", [1], this);
                                                                          return call16769;
                                                                        };
                                                                        func16765.paramCounts = [0];
                                                                        obj16465.methods["shallowCopy"] = func16765;
                                                                        func16765.definitionLine = 2482;
                                                                        func16765.definitionModule = "ast";
                                                                        var func16770 = function(argcv) {    // method shallowCopyFieldsFrom(_)
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          var var_other = arguments[curarg];
                                                                          curarg++;
                                                                          setModuleName("ast");
                                                                          setLineNumber(2486);    // compilenode identifier
                                                                          // call case 1: super request
                                                                          var call16772 = callmethodsuper(this, "shallowCopyFieldsFrom(1)", [1], var_other);
                                                                          setLineNumber(2487);    // compilenode member
                                                                          // call case 6: other requests
                                                                          var call16775 = callmethodChecked(var_other, "providedNames", []);
                                                                          // call case 4: self request
                                                                          onSelf = true;
                                                                          var call16776 = callmethodChecked(this, "providedNames:=(1)", [1], call16775);
                                                                          setLineNumber(2488);    // compilenode member
                                                                          // call case 6: other requests
                                                                          var call16779 = callmethodChecked(var_other, "aliases", []);
                                                                          // call case 4: self request
                                                                          onSelf = true;
                                                                          var call16780 = callmethodChecked(this, "aliases:=(1)", [1], call16779);
                                                                          setLineNumber(2489);    // compilenode member
                                                                          // call case 6: other requests
                                                                          var call16783 = callmethodChecked(var_other, "exclusions", []);
                                                                          // call case 4: self request
                                                                          onSelf = true;
                                                                          var call16784 = callmethodChecked(this, "exclusions:=(1)", [1], call16783);
                                                                          setLineNumber(2490);    // compilenode member
                                                                          // call case 6: other requests
                                                                          var call16787 = callmethodChecked(var_other, "isUse", []);
                                                                          // call case 4: self request
                                                                          onSelf = true;
                                                                          var call16788 = callmethodChecked(this, "isUse:=(1)", [1], call16787);
                                                                          setLineNumber(2491);    // compilenode identifier
                                                                          return this;
                                                                        };
                                                                        func16770.paramCounts = [1];
                                                                        obj16465.methods["shallowCopyFieldsFrom(1)"] = func16770;
                                                                        func16770.definitionLine = 2485;
                                                                        func16770.definitionModule = "ast";
                                                                        var func16789 = function(argcv) {    // method statementName
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          setModuleName("ast");
                                                                          var if16790 = GraceDone;
                                                                          setLineNumber(2494);    // compilenode member
                                                                          // call case 4: self request
                                                                          onSelf = true;
                                                                          var call16792 = callmethodChecked(this, "isUse", []);
                                                                          if (Grace_isTrue(call16792)) {
                                                                            var string16793 = new GraceString("use");
                                                                            if16790 = string16793;
                                                                          } else {
                                                                            var string16794 = new GraceString("inherit");
                                                                            if16790 = string16794;
                                                                          }
                                                                          return if16790;
                                                                        };
                                                                        func16789.paramCounts = [0];
                                                                        obj16465.methods["statementName"] = func16789;
                                                                        func16789.definitionLine = 2493;
                                                                        func16789.definitionModule = "ast";
                                                                        setLineNumber(2401);    // compilenode identifier
                                                                        // call case 6: other requests
                                                                        // call case 6: other requests
                                                                        // call case 3: self.outer request
                                                                        var call16798 = callmethodChecked(superDepth, "outer", [0]);
                                                                        var call16799 = callmethodChecked(call16798, "outer", []);
                                                                        var call16800 = callmethodChecked(call16799, "baseNode$object(1)", [0, 1], this);
                                                                        obj16465.superobj = call16800;
                                                                        if (call16800.data) obj16465.data = call16800.data;
                                                                        if (call16800.hasOwnProperty('_value'))
                                                                            obj16465._value = call16800._value;
                                                                        setLineNumber(2402);    // compilenode string
                                                                        var string16801 = new GraceString("inherits");
                                                                        obj16465.data["kind"] = string16801;
                                                                        var reader_ast_kind16802 = function() {
                                                                          return this.data["kind"];
                                                                        };
                                                                        reader_ast_kind16802.def = true;
                                                                        obj16465.methods["kind"] = reader_ast_kind16802;
                                                                        setLineNumber(2403);    // compilenode identifier
                                                                        obj16465.data["value"] = var_expr;
                                                                        var reader_ast_value16803 = function() {
                                                                          return this.data["value"];
                                                                        };
                                                                        obj16465.methods["value"] = reader_ast_value16803;
                                                                        obj16465.data["value"] = var_expr;
                                                                        var writer_ast_value16803 = function(argcv, o) {
                                                                          this.data["value"] = o;
                                                                          return GraceDone;
                                                                        };
                                                                        obj16465.methods["value:=(1)"] = writer_ast_value16803;
                                                                        obj16465.mutable = true;
                                                                        setLineNumber(2404);    // compilenode member
                                                                        // call case 5: prelude request
                                                                        var call16805 = callmethodChecked(var_prelude, "emptySet", []);
                                                                        obj16465.data["providedNames"] = call16805;
                                                                        var reader_ast_providedNames16806 = function() {
                                                                          return this.data["providedNames"];
                                                                        };
                                                                        obj16465.methods["providedNames"] = reader_ast_providedNames16806;
                                                                        obj16465.data["providedNames"] = call16805;
                                                                        var writer_ast_providedNames16806 = function(argcv, o) {
                                                                          this.data["providedNames"] = o;
                                                                          return GraceDone;
                                                                        };
                                                                        obj16465.methods["providedNames:=(1)"] = writer_ast_providedNames16806;
                                                                        obj16465.mutable = true;
                                                                        setLineNumber(2405);    // compilenode array
                                                                        var array16807 = new PrimitiveGraceList([]);
                                                                        obj16465.data["aliases"] = array16807;
                                                                        var reader_ast_aliases16808 = function() {
                                                                          return this.data["aliases"];
                                                                        };
                                                                        obj16465.methods["aliases"] = reader_ast_aliases16808;
                                                                        obj16465.data["aliases"] = array16807;
                                                                        var writer_ast_aliases16808 = function(argcv, o) {
                                                                          this.data["aliases"] = o;
                                                                          return GraceDone;
                                                                        };
                                                                        obj16465.methods["aliases:=(1)"] = writer_ast_aliases16808;
                                                                        obj16465.mutable = true;
                                                                        setLineNumber(2406);    // compilenode array
                                                                        var array16809 = new PrimitiveGraceList([]);
                                                                        obj16465.data["exclusions"] = array16809;
                                                                        var reader_ast_exclusions16810 = function() {
                                                                          return this.data["exclusions"];
                                                                        };
                                                                        obj16465.methods["exclusions"] = reader_ast_exclusions16810;
                                                                        obj16465.data["exclusions"] = array16809;
                                                                        var writer_ast_exclusions16810 = function(argcv, o) {
                                                                          this.data["exclusions"] = o;
                                                                          return GraceDone;
                                                                        };
                                                                        obj16465.methods["exclusions:=(1)"] = writer_ast_exclusions16810;
                                                                        obj16465.mutable = true;
                                                                        setLineNumber(2407);    // compilenode identifier
                                                                        obj16465.data["isUse"] = GraceFalse;
                                                                        var reader_ast_isUse16811 = function() {
                                                                          return this.data["isUse"];
                                                                        };
                                                                        obj16465.methods["isUse"] = reader_ast_isUse16811;
                                                                        obj16465.data["isUse"] = GraceFalse;
                                                                        var writer_ast_isUse16811 = function(argcv, o) {
                                                                          this.data["isUse"] = o;
                                                                          return GraceDone;
                                                                        };
                                                                        obj16465.methods["isUse:=(1)"] = writer_ast_isUse16811;
                                                                        obj16465.mutable = true;
                                                                        superDepth = origSuperDepth;
                                                                      };
                                                                      obj_init_16465.apply(inheritingObject, []);
                                                                      return obj16465;
                                                                      };
                                                                      obj16109.methods["new(1)$object(1)"] = func16464;
                                                                    superDepth = origSuperDepth;
                                                                  };
                                                                  obj_init_16109.apply(obj16109, []);
                                                                  var var_inheritsNode = obj16109;
                                                                  setLineNumber(1);    // compilenode method
                                                                  var func16812 = function(argcv) {    // method inheritsNode
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    setModuleName("ast");
                                                                    // inheritsNode is a simple accessor - elide try ... catch
                                                                    setLineNumber(2394);    // compilenode identifier
                                                                    return var_inheritsNode;
                                                                  };
                                                                  func16812.paramCounts = [0];
                                                                  this.methods["inheritsNode"] = func16812;
                                                                  func16812.definitionLine = 1;
                                                                  func16812.definitionModule = "ast";
                                                                  this.methods["inheritsNode"].debug = "def";
                                                                  setLineNumber(2498);    // compilenode typedec
                                                                  // Type decl AliasPair
                                                                  //   Type literal 
                                                                  var type16814 = new GraceType("AliasPair");
                                                                  type16814.typeMethods.push("newName");
                                                                  type16814.typeMethods.push("oldName");
                                                                  var var_AliasPair = type16814;
                                                                  setLineNumber(1);    // compilenode method
                                                                  var func16815 = function(argcv) {    // method AliasPair
                                                                    var returnTarget = invocationCount;
                                                                    invocationCount++;
                                                                    var curarg = 1;
                                                                    setModuleName("ast");
                                                                    // AliasPair is a simple accessor - elide try ... catch
                                                                    setLineNumber(2498);    // compilenode identifier
                                                                    return var_AliasPair;
                                                                  };
                                                                  func16815.paramCounts = [0];
                                                                  this.methods["AliasPair"] = func16815;
                                                                  func16815.definitionLine = 1;
                                                                  func16815.definitionModule = "ast";
                                                                  setLineNumber(2522);    // compilenode object
                                                                  var obj16816 = Grace_allocObject(GraceObject, "blankNode");
                                                                  obj16816.definitionModule = "ast";
                                                                  obj16816.definitionLine = 2522;
                                                                  obj16816.outer = this;
                                                                  var reader_ast_outer16817 = function() {
                                                                    return this.outer;
                                                                  };
                                                                  obj16816.methods["outer"] = reader_ast_outer16817;
                                                                  var obj_init_16816 = function() {
                                                                    var origSuperDepth = superDepth;
                                                                    superDepth = obj16816;
                                                                    var func16818 = function(argcv) {    // method new
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      setModuleName("ast");
                                                                      setLineNumber(2523);    // compilenode object
                                                                      var obj16819 = Grace_allocObject(null, "blankNode.new");
                                                                      obj16819.definitionModule = "ast";
                                                                      obj16819.definitionLine = 2523;
                                                                      obj16819.outer = this;
                                                                      var reader_ast_outer16820 = function() {
                                                                        return this.outer;
                                                                      };
                                                                      obj16819.methods["outer"] = reader_ast_outer16820;
                                                                      var obj_init_16819 = function() {
                                                                        var origSuperDepth = superDepth;
                                                                        superDepth = obj16819;
                                                                        var func16821 = function(argcv) {    // method isExecutable
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          setModuleName("ast");
                                                                          // isExecutable is a simple accessor - elide try ... catch
                                                                          setLineNumber(2527);    // compilenode identifier
                                                                          return GraceFalse;
                                                                        };
                                                                        func16821.paramCounts = [0];
                                                                        obj16819.methods["isExecutable"] = func16821;
                                                                        func16821.definitionLine = 2527;
                                                                        func16821.definitionModule = "ast";
                                                                        var func16822 = function(argcv) {    // method accept(_)from(_)
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          var var_visitor = arguments[curarg];
                                                                          curarg++;
                                                                          var var_as = arguments[curarg];
                                                                          curarg++;
                                                                          // Start argument checking
                                                                          curarg = 1;
                                                                          setLineNumber(2530);    // compilenode identifier
                                                                          if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                                      callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                                          curarg++;
                                                                          curarg++;
                                                                          // End argument checking
                                                                          setModuleName("ast");
                                                                          setLineNumber(2531);    // compilenode identifier
                                                                          // call case 6: other requests
                                                                          var call16824 = callmethodChecked(var_visitor, "visitBlank(1)up(1)", [1, 1], this, var_as);
                                                                          return call16824;
                                                                        };
                                                                        func16822.paramTypes = [];
                                                                        func16822.paramTypes.push([]);
                                                                        func16822.paramTypes.push([]);
                                                                        func16822.paramCounts = [1, 1];
                                                                        obj16819.methods["accept(1)from(1)"] = func16822;
                                                                        func16822.definitionLine = 2530;
                                                                        func16822.definitionModule = "ast";
                                                                        var func16825 = function(argcv) {    // method map(_)ancestors(_)
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          var var_blk = arguments[curarg];
                                                                          curarg++;
                                                                          var var_as = arguments[curarg];
                                                                          curarg++;
                                                                          setModuleName("ast");
                                                                          setLineNumber(2534);    // compilenode member
                                                                          // call case 4: self request
                                                                          onSelf = true;
                                                                          var call16827 = callmethodChecked(this, "shallowCopy", []);
                                                                          var var_n = call16827;
                                                                          setLineNumber(2535);    // compilenode identifier
                                                                          // call case 6: other requests
                                                                          var call16829 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                                                          var var_newChain = call16829;
                                                                          setLineNumber(2536);    // compilenode identifier
                                                                          // call case 6: other requests
                                                                          var call16831 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                                                          return call16831;
                                                                        };
                                                                        func16825.paramCounts = [1, 1];
                                                                        obj16819.methods["map(1)ancestors(1)"] = func16825;
                                                                        func16825.definitionLine = 2533;
                                                                        func16825.definitionModule = "ast";
                                                                        var func16832 = function(argcv) {    // method nameString
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          setModuleName("ast");
                                                                          setLineNumber(2538);    // compilenode string
                                                                          var string16833 = new GraceString("");
                                                                          return string16833;
                                                                        };
                                                                        func16832.paramCounts = [0];
                                                                        obj16819.methods["nameString"] = func16832;
                                                                        func16832.definitionLine = 2538;
                                                                        func16832.definitionModule = "ast";
                                                                        var func16834 = function(argcv) {    // method asString
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          setModuleName("ast");
                                                                          setLineNumber(2539);    // compilenode string
                                                                          var string16835 = new GraceString("blank");
                                                                          return string16835;
                                                                        };
                                                                        func16834.paramCounts = [0];
                                                                        obj16819.methods["asString"] = func16834;
                                                                        func16834.definitionLine = 2539;
                                                                        func16834.definitionModule = "ast";
                                                                        var func16836 = function(argcv) {    // method toGrace(_)
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          var var_depth = arguments[curarg];
                                                                          curarg++;
                                                                          // Start argument checking
                                                                          curarg = 1;
                                                                          setLineNumber(2540);    // compilenode identifier
                                                                          if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                                      callmethod(var_Number, "asString", [0])._value + "."));
                                                                          curarg++;
                                                                          // End argument checking
                                                                          setModuleName("ast");
                                                                          var string16837 = new GraceString("");
                                                                          if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], string16837)))
                                                                              throw new GraceExceptionPacket(TypeErrorObject,
                                                                                  new GraceString("result of method toGrace(_) does not have " + 
                                                                                      callmethod(var_String, "asString", [0])._value + "."));
                                                                          return string16837;
                                                                        };
                                                                        func16836.paramTypes = [];
                                                                        func16836.paramTypes.push([type_Number, "depth"]);
                                                                        func16836.paramCounts = [1];
                                                                        obj16819.methods["toGrace(1)"] = func16836;
                                                                        func16836.definitionLine = 2540;
                                                                        func16836.definitionModule = "ast";
                                                                        var func16838 = function(argcv) {    // method shallowCopy
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          setModuleName("ast");
                                                                          setLineNumber(2542);    // compilenode identifier
                                                                          // call case 6: other requests
                                                                          // call case 6: other requests
                                                                          var call16841 = callmethodChecked(var_blankNode, "new", []);
                                                                          var call16842 = callmethodChecked(call16841, "shallowCopyFieldsFrom(1)", [1], this);
                                                                          return call16842;
                                                                        };
                                                                        func16838.paramCounts = [0];
                                                                        obj16819.methods["shallowCopy"] = func16838;
                                                                        func16838.definitionLine = 2541;
                                                                        func16838.definitionModule = "ast";
                                                                        setLineNumber(2524);    // compilenode identifier
                                                                        // call case 6: other requests
                                                                        // call case 6: other requests
                                                                        // call case 3: self.outer request
                                                                        var call16846 = callmethodChecked(superDepth, "outer", [0]);
                                                                        var call16847 = callmethodChecked(call16846, "outer", []);
                                                                        var call16848 = callmethodChecked(call16847, "baseNode$object(1)", [0, 1], this);
                                                                        obj16819.superobj = call16848;
                                                                        if (call16848.data) obj16819.data = call16848.data;
                                                                        if (call16848.hasOwnProperty('_value'))
                                                                            obj16819._value = call16848._value;
                                                                        setLineNumber(2525);    // compilenode string
                                                                        var string16849 = new GraceString("blank");
                                                                        obj16819.data["kind"] = string16849;
                                                                        var reader_ast_kind16850 = function() {
                                                                          return this.data["kind"];
                                                                        };
                                                                        reader_ast_kind16850.def = true;
                                                                        obj16819.methods["kind"] = reader_ast_kind16850;
                                                                        setLineNumber(2526);    // compilenode string
                                                                        var string16851 = new GraceString("blank");
                                                                        obj16819.data["value"] = string16851;
                                                                        var reader_ast_value16852 = function() {
                                                                          return this.data["value"];
                                                                        };
                                                                        reader_ast_value16852.def = true;
                                                                        obj16819.methods["value"] = reader_ast_value16852;
                                                                        superDepth = origSuperDepth;
                                                                      };
                                                                      obj_init_16819.apply(obj16819, []);
                                                                      return obj16819;
                                                                    };
                                                                    func16818.paramCounts = [0];
                                                                    obj16816.methods["new"] = func16818;
                                                                    func16818.definitionLine = 2523;
                                                                    func16818.definitionModule = "ast";
                                                                      var func16853 = function(argcv) {    // method new$object(_)
                                                                        var curarg = 1;
                                                                        var inheritingObject = arguments[curarg++];
                                                                        // Start argument processing
                                                                        curarg = 1;
                                                                        // End argument processing
                                                                        setModuleName("ast");
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var obj16854 = Grace_allocObject(null, "new");
                                                                        obj16854.definitionModule = "ast";
                                                                        obj16854.definitionLine = 2523;
                                                                        var inho16854 = inheritingObject;
                                                                        while (inho16854.superobj) inho16854 = inho16854.superobj;
                                                                        inho16854.superobj = obj16854;
                                                                        obj16854.data = inheritingObject.data;
                                                                        if (inheritingObject.hasOwnProperty('_value'))
                                                                          obj16854._value = inheritingObject._value;
                                                                        obj16854.outer = this;
                                                                        var reader_ast_outer16855 = function() {
                                                                          return this.outer;
                                                                        };
                                                                        obj16854.methods["outer"] = reader_ast_outer16855;
                                                                        var obj_init_16854 = function() {
                                                                          var origSuperDepth = superDepth;
                                                                          superDepth = obj16854;
                                                                          var func16856 = function(argcv) {    // method isExecutable
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            setModuleName("ast");
                                                                            // isExecutable is a simple accessor - elide try ... catch
                                                                            setLineNumber(2527);    // compilenode identifier
                                                                            return GraceFalse;
                                                                          };
                                                                          func16856.paramCounts = [0];
                                                                          obj16854.methods["isExecutable"] = func16856;
                                                                          func16856.definitionLine = 2527;
                                                                          func16856.definitionModule = "ast";
                                                                          var func16857 = function(argcv) {    // method accept(_)from(_)
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            var var_visitor = arguments[curarg];
                                                                            curarg++;
                                                                            var var_as = arguments[curarg];
                                                                            curarg++;
                                                                            // Start argument checking
                                                                            curarg = 1;
                                                                            setLineNumber(2530);    // compilenode identifier
                                                                            if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                                        callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                                            curarg++;
                                                                            curarg++;
                                                                            // End argument checking
                                                                            setModuleName("ast");
                                                                            setLineNumber(2531);    // compilenode identifier
                                                                            // call case 6: other requests
                                                                            var call16859 = callmethodChecked(var_visitor, "visitBlank(1)up(1)", [1, 1], this, var_as);
                                                                            return call16859;
                                                                          };
                                                                          func16857.paramTypes = [];
                                                                          func16857.paramTypes.push([]);
                                                                          func16857.paramTypes.push([]);
                                                                          func16857.paramCounts = [1, 1];
                                                                          obj16854.methods["accept(1)from(1)"] = func16857;
                                                                          func16857.definitionLine = 2530;
                                                                          func16857.definitionModule = "ast";
                                                                          var func16860 = function(argcv) {    // method map(_)ancestors(_)
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            var var_blk = arguments[curarg];
                                                                            curarg++;
                                                                            var var_as = arguments[curarg];
                                                                            curarg++;
                                                                            setModuleName("ast");
                                                                            setLineNumber(2534);    // compilenode member
                                                                            // call case 4: self request
                                                                            onSelf = true;
                                                                            var call16862 = callmethodChecked(this, "shallowCopy", []);
                                                                            var var_n = call16862;
                                                                            setLineNumber(2535);    // compilenode identifier
                                                                            // call case 6: other requests
                                                                            var call16864 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                                                            var var_newChain = call16864;
                                                                            setLineNumber(2536);    // compilenode identifier
                                                                            // call case 6: other requests
                                                                            var call16866 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                                                            return call16866;
                                                                          };
                                                                          func16860.paramCounts = [1, 1];
                                                                          obj16854.methods["map(1)ancestors(1)"] = func16860;
                                                                          func16860.definitionLine = 2533;
                                                                          func16860.definitionModule = "ast";
                                                                          var func16867 = function(argcv) {    // method nameString
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            setModuleName("ast");
                                                                            setLineNumber(2538);    // compilenode string
                                                                            var string16868 = new GraceString("");
                                                                            return string16868;
                                                                          };
                                                                          func16867.paramCounts = [0];
                                                                          obj16854.methods["nameString"] = func16867;
                                                                          func16867.definitionLine = 2538;
                                                                          func16867.definitionModule = "ast";
                                                                          var func16869 = function(argcv) {    // method asString
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            setModuleName("ast");
                                                                            setLineNumber(2539);    // compilenode string
                                                                            var string16870 = new GraceString("blank");
                                                                            return string16870;
                                                                          };
                                                                          func16869.paramCounts = [0];
                                                                          obj16854.methods["asString"] = func16869;
                                                                          func16869.definitionLine = 2539;
                                                                          func16869.definitionModule = "ast";
                                                                          var func16871 = function(argcv) {    // method toGrace(_)
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            var var_depth = arguments[curarg];
                                                                            curarg++;
                                                                            // Start argument checking
                                                                            curarg = 1;
                                                                            setLineNumber(2540);    // compilenode identifier
                                                                            if (!Grace_isTrue(callmethod(var_Number, "match(1)",  [1], arguments[curarg])))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("argument 1 in toGrace (arg list 1), which corresponds to parameter depth, does not have " + 
                                                                                        callmethod(var_Number, "asString", [0])._value + "."));
                                                                            curarg++;
                                                                            // End argument checking
                                                                            setModuleName("ast");
                                                                            var string16872 = new GraceString("");
                                                                            if (!Grace_isTrue(callmethod(var_String, "match(1)", [1], string16872)))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("result of method toGrace(_) does not have " + 
                                                                                        callmethod(var_String, "asString", [0])._value + "."));
                                                                            return string16872;
                                                                          };
                                                                          func16871.paramTypes = [];
                                                                          func16871.paramTypes.push([type_Number, "depth"]);
                                                                          func16871.paramCounts = [1];
                                                                          obj16854.methods["toGrace(1)"] = func16871;
                                                                          func16871.definitionLine = 2540;
                                                                          func16871.definitionModule = "ast";
                                                                          var func16873 = function(argcv) {    // method shallowCopy
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            setModuleName("ast");
                                                                            setLineNumber(2542);    // compilenode identifier
                                                                            // call case 6: other requests
                                                                            // call case 6: other requests
                                                                            var call16876 = callmethodChecked(var_blankNode, "new", []);
                                                                            var call16877 = callmethodChecked(call16876, "shallowCopyFieldsFrom(1)", [1], this);
                                                                            return call16877;
                                                                          };
                                                                          func16873.paramCounts = [0];
                                                                          obj16854.methods["shallowCopy"] = func16873;
                                                                          func16873.definitionLine = 2541;
                                                                          func16873.definitionModule = "ast";
                                                                          setLineNumber(2524);    // compilenode identifier
                                                                          // call case 6: other requests
                                                                          // call case 6: other requests
                                                                          // call case 3: self.outer request
                                                                          var call16881 = callmethodChecked(superDepth, "outer", [0]);
                                                                          var call16882 = callmethodChecked(call16881, "outer", []);
                                                                          var call16883 = callmethodChecked(call16882, "baseNode$object(1)", [0, 1], this);
                                                                          obj16854.superobj = call16883;
                                                                          if (call16883.data) obj16854.data = call16883.data;
                                                                          if (call16883.hasOwnProperty('_value'))
                                                                              obj16854._value = call16883._value;
                                                                          setLineNumber(2525);    // compilenode string
                                                                          var string16884 = new GraceString("blank");
                                                                          obj16854.data["kind"] = string16884;
                                                                          var reader_ast_kind16885 = function() {
                                                                            return this.data["kind"];
                                                                          };
                                                                          reader_ast_kind16885.def = true;
                                                                          obj16854.methods["kind"] = reader_ast_kind16885;
                                                                          setLineNumber(2526);    // compilenode string
                                                                          var string16886 = new GraceString("blank");
                                                                          obj16854.data["value"] = string16886;
                                                                          var reader_ast_value16887 = function() {
                                                                            return this.data["value"];
                                                                          };
                                                                          reader_ast_value16887.def = true;
                                                                          obj16854.methods["value"] = reader_ast_value16887;
                                                                          superDepth = origSuperDepth;
                                                                        };
                                                                        obj_init_16854.apply(inheritingObject, []);
                                                                        return obj16854;
                                                                        };
                                                                        obj16816.methods["new$object(1)"] = func16853;
                                                                      superDepth = origSuperDepth;
                                                                    };
                                                                    obj_init_16816.apply(obj16816, []);
                                                                    var var_blankNode = obj16816;
                                                                    setLineNumber(1);    // compilenode method
                                                                    var func16888 = function(argcv) {    // method blankNode
                                                                      var returnTarget = invocationCount;
                                                                      invocationCount++;
                                                                      var curarg = 1;
                                                                      setModuleName("ast");
                                                                      // blankNode is a simple accessor - elide try ... catch
                                                                      setLineNumber(2522);    // compilenode identifier
                                                                      return var_blankNode;
                                                                    };
                                                                    func16888.paramCounts = [0];
                                                                    this.methods["blankNode"] = func16888;
                                                                    func16888.definitionLine = 1;
                                                                    func16888.definitionModule = "ast";
                                                                    this.methods["blankNode"].debug = "def";
                                                                    setLineNumber(2546);    // compilenode object
                                                                    var obj16889 = Grace_allocObject(GraceObject, "signaturePart");
                                                                    obj16889.definitionModule = "ast";
                                                                    obj16889.definitionLine = 2546;
                                                                    obj16889.outer = this;
                                                                    var reader_ast_outer16890 = function() {
                                                                      return this.outer;
                                                                    };
                                                                    obj16889.methods["outer"] = reader_ast_outer16890;
                                                                    var obj_init_16889 = function() {
                                                                      var origSuperDepth = superDepth;
                                                                      superDepth = obj16889;
                                                                      var func16891 = function(argcv) {    // method new
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        setModuleName("ast");
                                                                        setLineNumber(2548);    // compilenode string
                                                                        var string16893 = new GraceString("");
                                                                        var array16894 = new PrimitiveGraceList([]);
                                                                        // call case 4: self request
                                                                        onSelf = true;
                                                                        var call16895 = callmethodChecked(this, "partName(1)params(1)", [1, 1], string16893, array16894);
                                                                        return call16895;
                                                                      };
                                                                      func16891.paramCounts = [0];
                                                                      obj16889.methods["new"] = func16891;
                                                                      func16891.definitionLine = 2547;
                                                                      func16891.definitionModule = "ast";
                                                                      var func16896 = function(argcv) {    // method partName(_)scope(_)
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        var var_n = arguments[curarg];
                                                                        curarg++;
                                                                        var var_s = arguments[curarg];
                                                                        curarg++;
                                                                        setModuleName("ast");
                                                                        setLineNumber(2551);    // compilenode array
                                                                        var array16898 = new PrimitiveGraceList([]);
                                                                        // call case 4: self request
                                                                        onSelf = true;
                                                                        var call16899 = callmethodChecked(this, "partName(1)params(1)", [1, 1], var_n, array16898);
                                                                        var var_result = call16899;
                                                                        setLineNumber(2552);    // compilenode identifier
                                                                        // call case 6: other requests
                                                                        var call16901 = callmethodChecked(var_result, "scope:=(1)", [1], var_s);
                                                                        setLineNumber(2553);    // compilenode identifier
                                                                        return var_result;
                                                                      };
                                                                      func16896.paramCounts = [1, 1];
                                                                      obj16889.methods["partName(1)scope(1)"] = func16896;
                                                                      func16896.definitionLine = 2550;
                                                                      func16896.definitionModule = "ast";
                                                                      var func16902 = function(argcv) {    // method partName(_)params(_)scope(_)
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        var var_n = arguments[curarg];
                                                                        curarg++;
                                                                        var var_ps = arguments[curarg];
                                                                        curarg++;
                                                                        var var_s = arguments[curarg];
                                                                        curarg++;
                                                                        setModuleName("ast");
                                                                        setLineNumber(2556);    // compilenode identifier
                                                                        // call case 4: self request
                                                                        onSelf = true;
                                                                        var call16904 = callmethodChecked(this, "partName(1)params(1)", [1, 1], var_n, var_ps);
                                                                        var var_result = call16904;
                                                                        setLineNumber(2557);    // compilenode identifier
                                                                        // call case 6: other requests
                                                                        var call16906 = callmethodChecked(var_result, "scope:=(1)", [1], var_s);
                                                                        setLineNumber(2558);    // compilenode identifier
                                                                        return var_result;
                                                                      };
                                                                      func16902.paramCounts = [1, 1, 1];
                                                                      obj16889.methods["partName(1)params(1)scope(1)"] = func16902;
                                                                      func16902.definitionLine = 2555;
                                                                      func16902.definitionModule = "ast";
                                                                      var func16907 = function(argcv) {    // method partName(_)
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        var var_n = arguments[curarg];
                                                                        curarg++;
                                                                        setModuleName("ast");
                                                                        setLineNumber(2561);    // compilenode array
                                                                        var array16909 = new PrimitiveGraceList([]);
                                                                        // call case 4: self request
                                                                        onSelf = true;
                                                                        var call16910 = callmethodChecked(this, "partName(1)params(1)", [1, 1], var_n, array16909);
                                                                        return call16910;
                                                                      };
                                                                      func16907.paramCounts = [1];
                                                                      obj16889.methods["partName(1)"] = func16907;
                                                                      func16907.definitionLine = 2560;
                                                                      func16907.definitionModule = "ast";
                                                                      var func16911 = function(argcv) {    // method partName(_)params(_)
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        var var_n = arguments[curarg];
                                                                        curarg++;
                                                                        var var_ps = arguments[curarg];
                                                                        curarg++;
                                                                        setModuleName("ast");
                                                                        setLineNumber(2563);    // compilenode object
                                                                        var obj16912 = Grace_allocObject(null, "signaturePart.partName(_)params(_)");
                                                                        obj16912.definitionModule = "ast";
                                                                        obj16912.definitionLine = 2563;
                                                                        obj16912.outer = this;
                                                                        var reader_ast_outer16913 = function() {
                                                                          return this.outer;
                                                                        };
                                                                        obj16912.methods["outer"] = reader_ast_outer16913;
                                                                        var obj_init_16912 = function() {
                                                                          var origSuperDepth = superDepth;
                                                                          superDepth = obj16912;
                                                                          var func16914 = function(argcv) {    // method nameString
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            setModuleName("ast");
                                                                            var if16915 = GraceDone;
                                                                            setLineNumber(2572);    // compilenode member
                                                                            // call case 6: other requests
                                                                            // call case 4: self request
                                                                            onSelf = true;
                                                                            var call16918 = callmethodChecked(this, "params", []);
                                                                            var call16919 = callmethodChecked(call16918, "isEmpty", []);
                                                                            if (Grace_isTrue(call16919)) {
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call16921 = callmethodChecked(this, "name", []);
                                                                              return call16921;
                                                                            }
                                                                            setLineNumber(2573);    // compilenode string
                                                                            var string16922 = new GraceString(")");
                                                                            // call case 6: other requests
                                                                            // call case 4: self request
                                                                            onSelf = true;
                                                                            var call16926 = callmethodChecked(this, "params", []);
                                                                            var call16927 = callmethodChecked(call16926, "size", []);
                                                                            var string16929 = new GraceString("(");
                                                                            // call case 4: self request
                                                                            onSelf = true;
                                                                            var call16932 = callmethodChecked(this, "name", []);
                                                                            var opresult16934 = callmethodChecked(call16932, "++(1)", [1], string16929);
                                                                            var opresult16936 = callmethodChecked(opresult16934, "++(1)", [1], call16927);
                                                                            var opresult16938 = callmethodChecked(opresult16936, "++(1)", [1], string16922);
                                                                            return opresult16938;
                                                                          };
                                                                          func16914.paramCounts = [0];
                                                                          obj16912.methods["nameString"] = func16914;
                                                                          func16914.definitionLine = 2571;
                                                                          func16914.definitionModule = "ast";
                                                                          var func16939 = function(argcv) {    // method numParams
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            setModuleName("ast");
                                                                            setLineNumber(2575);    // compilenode member
                                                                            // call case 6: other requests
                                                                            // call case 4: self request
                                                                            onSelf = true;
                                                                            var call16942 = callmethodChecked(this, "params", []);
                                                                            var call16943 = callmethodChecked(call16942, "size", []);
                                                                            return call16943;
                                                                          };
                                                                          func16939.paramCounts = [0];
                                                                          obj16912.methods["numParams"] = func16939;
                                                                          func16939.definitionLine = 2575;
                                                                          func16939.definitionModule = "ast";
                                                                          var func16944 = function(argcv) {    // method canonicalName
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            setModuleName("ast");
                                                                            var if16945 = GraceDone;
                                                                            setLineNumber(2577);    // compilenode member
                                                                            // call case 6: other requests
                                                                            // call case 4: self request
                                                                            onSelf = true;
                                                                            var call16949 = callmethodChecked(this, "params", []);
                                                                            var call16950 = callmethodChecked(call16949, "size", []);
                                                                            var opresult16952 = callmethodChecked(call16950, "==(1)", [1], new GraceNum(0));
                                                                            if (Grace_isTrue(opresult16952)) {
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call16954 = callmethodChecked(this, "name", []);
                                                                              return call16954;
                                                                            }
                                                                            setLineNumber(2578);    // compilenode string
                                                                            var string16955 = new GraceString("");
                                                                            var var_underScores = string16955;
                                                                            setLineNumber(2579);    // compilenode block
                                                                            var block16957 = new GraceBlock(this, 2579, 1);
                                                                            setLineNumber(1);    // compilenode identifier
                                                                            block16957.real = function(var___95____95__3) {
                                                                              setLineNumber(2579);    // compilenode string
                                                                              var string16958 = new GraceString("_");
                                                                              var opresult16961 = callmethodChecked(var_underScores, "++(1)", [1], string16958);
                                                                              var_underScores = opresult16961;
                                                                              return GraceDone;
                                                                            };
                                                                            setLineNumber(2580);    // compilenode block
                                                                            var block16962 = new GraceBlock(this, 2580, 0);
                                                                            block16962.real = function() {
                                                                              var string16963 = new GraceString(",");
                                                                              var opresult16966 = callmethodChecked(var_underScores, "++(1)", [1], string16963);
                                                                              var_underScores = opresult16966;
                                                                              return GraceDone;
                                                                            };
                                                                            // call case 6: other requests
                                                                            setLineNumber(2579);    // compilenode member
                                                                            // call case 4: self request
                                                                            onSelf = true;
                                                                            var call16968 = callmethodChecked(this, "params", []);
                                                                            var call16969 = callmethodChecked(call16968, "do(1)separatedBy(1)", [1, 1], block16957, block16962);
                                                                            setLineNumber(2581);    // compilenode string
                                                                            var string16970 = new GraceString(")");
                                                                            var string16973 = new GraceString("(");
                                                                            // call case 4: self request
                                                                            onSelf = true;
                                                                            var call16976 = callmethodChecked(this, "name", []);
                                                                            var opresult16978 = callmethodChecked(call16976, "++(1)", [1], string16973);
                                                                            var opresult16980 = callmethodChecked(opresult16978, "++(1)", [1], var_underScores);
                                                                            var opresult16982 = callmethodChecked(opresult16980, "++(1)", [1], string16970);
                                                                            return opresult16982;
                                                                          };
                                                                          func16944.paramCounts = [0];
                                                                          obj16912.methods["canonicalName"] = func16944;
                                                                          func16944.definitionLine = 2576;
                                                                          func16944.definitionModule = "ast";
                                                                          var func16983 = function(argcv) {    // method accept(_)from(_)
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            var var_visitor = arguments[curarg];
                                                                            curarg++;
                                                                            var var_as = arguments[curarg];
                                                                            curarg++;
                                                                            // Start argument checking
                                                                            curarg = 1;
                                                                            setLineNumber(2584);    // compilenode identifier
                                                                            if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                                        callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                                            curarg++;
                                                                            curarg++;
                                                                            // End argument checking
                                                                            setModuleName("ast");
                                                                            var if16984 = GraceDone;
                                                                            setLineNumber(2585);    // compilenode identifier
                                                                            // call case 6: other requests
                                                                            var call16986 = callmethodChecked(var_visitor, "visitSignaturePart(1)up(1)", [1, 1], this, var_as);
                                                                            if (Grace_isTrue(call16986)) {
                                                                              setLineNumber(2586);    // compilenode identifier
                                                                              // call case 6: other requests
                                                                              var call16988 = callmethodChecked(var_as, "extend(1)", [1], this);
                                                                              var var_newChain = call16988;
                                                                              setLineNumber(2587);    // compilenode block
                                                                              var block16990 = new GraceBlock(this, 2587, 1);
                                                                              setLineNumber(1);    // compilenode identifier
                                                                              block16990.real = function(var_p) {
                                                                                setLineNumber(2587);    // compilenode identifier
                                                                                // call case 6: other requests
                                                                                var call16992 = callmethodChecked(var_p, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                                                return call16992;
                                                                              };
                                                                              // call case 6: other requests
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call16994 = callmethodChecked(this, "params", []);
                                                                              var call16995 = callmethodChecked(call16994, "do(1)", [1], block16990);
                                                                              var if16996 = GraceDone;
                                                                              setLineNumber(2588);    // compilenode member
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call16998 = callmethodChecked(this, "typeParams", []);
                                                                              var opresult17001 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call16998);
                                                                              if (Grace_isTrue(opresult17001)) {
                                                                                setLineNumber(2589);    // compilenode identifier
                                                                                // call case 6: other requests
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call17004 = callmethodChecked(this, "typeParams", []);
                                                                                var call17005 = callmethodChecked(call17004, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                                                if16996 = call17005;
                                                                              }
                                                                              if16984 = if16996;
                                                                            }
                                                                            return if16984;
                                                                          };
                                                                          func16983.paramTypes = [];
                                                                          func16983.paramTypes.push([]);
                                                                          func16983.paramTypes.push([]);
                                                                          func16983.paramCounts = [1, 1];
                                                                          obj16912.methods["accept(1)from(1)"] = func16983;
                                                                          func16983.definitionLine = 2584;
                                                                          func16983.definitionModule = "ast";
                                                                          var func17006 = function(argcv) {    // method declarationKindWithAncestors(_)
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            var var_as = arguments[curarg];
                                                                            curarg++;
                                                                            setModuleName("ast");
                                                                            setLineNumber(2593);    // compilenode member
                                                                            // call case 6: other requests
                                                                            var call17008 = callmethodChecked(var_k, "parameter", []);
                                                                            return call17008;
                                                                          };
                                                                          func17006.paramCounts = [1];
                                                                          obj16912.methods["declarationKindWithAncestors(1)"] = func17006;
                                                                          func17006.definitionLine = 2593;
                                                                          func17006.definitionModule = "ast";
                                                                          var func17009 = function(argcv) {    // method map(_)ancestors(_)
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            var var_blk = arguments[curarg];
                                                                            curarg++;
                                                                            var var_as = arguments[curarg];
                                                                            curarg++;
                                                                            setModuleName("ast");
                                                                            setLineNumber(2595);    // compilenode member
                                                                            // call case 4: self request
                                                                            onSelf = true;
                                                                            var call17011 = callmethodChecked(this, "shallowCopy", []);
                                                                            var var_nd = call17011;
                                                                            setLineNumber(2596);    // compilenode identifier
                                                                            // call case 6: other requests
                                                                            var call17013 = callmethodChecked(var_as, "extend(1)", [1], var_nd);
                                                                            var var_newChain = call17013;
                                                                            setLineNumber(2597);    // compilenode member
                                                                            // call case 4: self request
                                                                            onSelf = true;
                                                                            var call17017 = callmethodChecked(this, "params", []);
                                                                            // call case 6: other requests
                                                                            // call case 6: other requests
                                                                            // call case 3: self.outer request
                                                                            var call17020 = callmethodChecked(superDepth, "outer", [0]);
                                                                            var call17021 = callmethodChecked(call17020, "outer", []);
                                                                            onSelf = true;
                                                                            var call17022 = callmethodChecked(call17021, "listMap(2)ancestors(1)", [2, 1], call17017, var_blk, var_newChain);
                                                                            // call case 6: other requests
                                                                            var call17023 = callmethodChecked(var_nd, "params:=(1)", [1], call17022);
                                                                            setLineNumber(2598);    // compilenode member
                                                                            // call case 4: self request
                                                                            onSelf = true;
                                                                            var call17027 = callmethodChecked(this, "typeParams", []);
                                                                            // call case 6: other requests
                                                                            // call case 6: other requests
                                                                            // call case 3: self.outer request
                                                                            var call17030 = callmethodChecked(superDepth, "outer", [0]);
                                                                            var call17031 = callmethodChecked(call17030, "outer", []);
                                                                            onSelf = true;
                                                                            var call17032 = callmethodChecked(call17031, "maybeMap(2)ancestors(1)", [2, 1], call17027, var_blk, var_newChain);
                                                                            // call case 6: other requests
                                                                            var call17033 = callmethodChecked(var_nd, "typeParams:=(1)", [1], call17032);
                                                                            setLineNumber(2599);    // compilenode identifier
                                                                            // call case 6: other requests
                                                                            var call17035 = callmethodChecked(var_blk, "apply(2)", [2], var_nd, var_as);
                                                                            return call17035;
                                                                          };
                                                                          func17009.paramCounts = [1, 1];
                                                                          obj16912.methods["map(1)ancestors(1)"] = func17009;
                                                                          func17009.definitionLine = 2594;
                                                                          func17009.definitionModule = "ast";
                                                                          var func17036 = function(argcv) {    // method pretty(_)
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            var var_depth = arguments[curarg];
                                                                            curarg++;
                                                                            setModuleName("ast");
                                                                            setLineNumber(2602);    // compilenode string
                                                                            var string17037 = new GraceString("");
                                                                            var var_spc = string17037;
                                                                            setLineNumber(2603);    // compilenode num
                                                                            var opresult17041 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                                                                            var block17042 = new GraceBlock(this, 2603, 1);
                                                                            setLineNumber(1);    // compilenode identifier
                                                                            block17042.real = function(var_i) {
                                                                              setLineNumber(2604);    // compilenode string
                                                                              var string17043 = new GraceString("  ");
                                                                              var opresult17046 = callmethodChecked(var_spc, "++(1)", [1], string17043);
                                                                              var_spc = opresult17046;
                                                                              return GraceDone;
                                                                            };
                                                                            // call case 5: prelude request
                                                                            var call17047 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult17041, block17042);
                                                                            setLineNumber(2606);    // compilenode string
                                                                            var string17048 = new GraceString("");
                                                                            // call case 4: self request
                                                                            onSelf = true;
                                                                            var call17051 = callmethodChecked(this, "name", []);
                                                                            var string17053 = new GraceString(": ");
                                                                            // call case 1: super request
                                                                            var call17056 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                                                            var string17058 = new GraceString("");
                                                                            var opresult17060 = callmethodChecked(string17058, "++(1)", [1], call17056);
                                                                            var opresult17062 = callmethodChecked(opresult17060, "++(1)", [1], string17053);
                                                                            var opresult17064 = callmethodChecked(opresult17062, "++(1)", [1], call17051);
                                                                            var opresult17066 = callmethodChecked(opresult17064, "++(1)", [1], string17048);
                                                                            var var_s = opresult17066;
                                                                            var if17067 = GraceDone;
                                                                            setLineNumber(2607);    // compilenode member
                                                                            // call case 6: other requests
                                                                            // call case 6: other requests
                                                                            // call case 4: self request
                                                                            onSelf = true;
                                                                            var call17071 = callmethodChecked(this, "params", []);
                                                                            var call17072 = callmethodChecked(call17071, "isEmpty", []);
                                                                            var call17073 = callmethodChecked(call17072, "not", []);
                                                                            if (Grace_isTrue(call17073)) {
                                                                              var string17074 = new GraceString("Parameters:");
                                                                              var string17077 = new GraceString("\n");
                                                                              var string17080 = new GraceString("");
                                                                              var opresult17082 = callmethodChecked(string17080, "++(1)", [1], var_s);
                                                                              var opresult17084 = callmethodChecked(opresult17082, "++(1)", [1], string17077);
                                                                              var opresult17086 = callmethodChecked(opresult17084, "++(1)", [1], var_spc);
                                                                              var opresult17088 = callmethodChecked(opresult17086, "++(1)", [1], string17074);
                                                                              var_s = opresult17088;
                                                                              if17067 = GraceDone;
                                                                            }
                                                                            setLineNumber(2608);    // compilenode member
                                                                            // call case 4: self request
                                                                            onSelf = true;
                                                                            var call17091 = callmethodChecked(this, "params", []);
                                                                            var block17092 = new GraceBlock(this, 2608, 1);
                                                                            setLineNumber(1);    // compilenode identifier
                                                                            block17092.real = function(var_p) {
                                                                              setLineNumber(2609);    // compilenode string
                                                                              var string17093 = new GraceString("");
                                                                              var opresult17098 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                                                              // call case 6: other requests
                                                                              var call17099 = callmethodChecked(var_p, "pretty(1)", [1], opresult17098);
                                                                              var string17101 = new GraceString("");
                                                                              var string17104 = new GraceString("\n  ");
                                                                              var string17107 = new GraceString("");
                                                                              var opresult17109 = callmethodChecked(string17107, "++(1)", [1], var_s);
                                                                              var opresult17111 = callmethodChecked(opresult17109, "++(1)", [1], string17104);
                                                                              var opresult17113 = callmethodChecked(opresult17111, "++(1)", [1], var_spc);
                                                                              var opresult17115 = callmethodChecked(opresult17113, "++(1)", [1], string17101);
                                                                              var opresult17117 = callmethodChecked(opresult17115, "++(1)", [1], call17099);
                                                                              var opresult17119 = callmethodChecked(opresult17117, "++(1)", [1], string17093);
                                                                              var_s = opresult17119;
                                                                              return GraceDone;
                                                                            };
                                                                            // call case 5: prelude request
                                                                            var call17120 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call17091, block17092);
                                                                            setLineNumber(2611);    // compilenode identifier
                                                                            return var_s;
                                                                          };
                                                                          func17036.paramCounts = [1];
                                                                          obj16912.methods["pretty(1)"] = func17036;
                                                                          func17036.definitionLine = 2601;
                                                                          func17036.definitionModule = "ast";
                                                                          var func17121 = function(argcv) {    // method toGrace(_)
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            var var_depth = arguments[curarg];
                                                                            curarg++;
                                                                            setModuleName("ast");
                                                                            setLineNumber(2614);    // compilenode member
                                                                            // call case 4: self request
                                                                            onSelf = true;
                                                                            var call17123 = callmethodChecked(this, "name", []);
                                                                            var var_s = call17123;
                                                                            var if17124 = GraceDone;
                                                                            setLineNumber(2615);    // compilenode member
                                                                            // call case 6: other requests
                                                                            // call case 6: other requests
                                                                            // call case 4: self request
                                                                            onSelf = true;
                                                                            var call17128 = callmethodChecked(this, "params", []);
                                                                            var call17129 = callmethodChecked(call17128, "isEmpty", []);
                                                                            var call17130 = callmethodChecked(call17129, "not", []);
                                                                            if (Grace_isTrue(call17130)) {
                                                                              setLineNumber(2616);    // compilenode string
                                                                              var string17131 = new GraceString("(");
                                                                              var opresult17134 = callmethodChecked(var_s, "++(1)", [1], string17131);
                                                                              var_s = opresult17134;
                                                                              setLineNumber(2617);    // compilenode block
                                                                              var block17136 = new GraceBlock(this, 2617, 1);
                                                                              setLineNumber(1);    // compilenode identifier
                                                                              block17136.real = function(var_each) {
                                                                                setLineNumber(2617);    // compilenode identifier
                                                                                var opresult17140 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                                                                // call case 6: other requests
                                                                                var call17141 = callmethodChecked(var_each, "toGrace(1)", [1], opresult17140);
                                                                                var_s = call17141;
                                                                                return GraceDone;
                                                                              };
                                                                              setLineNumber(2618);    // compilenode block
                                                                              var block17142 = new GraceBlock(this, 2618, 0);
                                                                              block17142.real = function() {
                                                                                var string17143 = new GraceString(", ");
                                                                                var opresult17146 = callmethodChecked(var_s, "++(1)", [1], string17143);
                                                                                var_s = opresult17146;
                                                                                return GraceDone;
                                                                              };
                                                                              // call case 6: other requests
                                                                              setLineNumber(2617);    // compilenode member
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call17148 = callmethodChecked(this, "params", []);
                                                                              var call17149 = callmethodChecked(call17148, "do(1)separatedBy(1)", [1, 1], block17136, block17142);
                                                                              setLineNumber(2619);    // compilenode string
                                                                              var string17150 = new GraceString(")");
                                                                              var opresult17153 = callmethodChecked(var_s, "++(1)", [1], string17150);
                                                                              var_s = opresult17153;
                                                                              if17124 = GraceDone;
                                                                            }
                                                                            setLineNumber(2621);    // compilenode identifier
                                                                            return var_s;
                                                                          };
                                                                          func17121.paramCounts = [1];
                                                                          obj16912.methods["toGrace(1)"] = func17121;
                                                                          func17121.definitionLine = 2613;
                                                                          func17121.definitionModule = "ast";
                                                                          var func17154 = function(argcv) {    // method shallowCopy
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            setModuleName("ast");
                                                                            setLineNumber(2625);    // compilenode identifier
                                                                            // call case 6: other requests
                                                                            setLineNumber(2624);    // compilenode member
                                                                            // call case 4: self request
                                                                            onSelf = true;
                                                                            var call17158 = callmethodChecked(this, "name", []);
                                                                            // call case 4: self request
                                                                            onSelf = true;
                                                                            var call17160 = callmethodChecked(this, "params", []);
                                                                            // call case 6: other requests
                                                                            var call17161 = callmethodChecked(var_signaturePart, "partName(1)params(1)", [1, 1], call17158, call17160);
                                                                            var call17162 = callmethodChecked(call17161, "shallowCopyFieldsFrom(1)", [1], this);
                                                                            return call17162;
                                                                          };
                                                                          func17154.paramCounts = [0];
                                                                          obj16912.methods["shallowCopy"] = func17154;
                                                                          func17154.definitionLine = 2623;
                                                                          func17154.definitionModule = "ast";
                                                                          var func17163 = function(argcv) {    // method shallowCopyFieldsFrom(_)
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            var var_other = arguments[curarg];
                                                                            curarg++;
                                                                            setModuleName("ast");
                                                                            setLineNumber(2628);    // compilenode identifier
                                                                            // call case 1: super request
                                                                            var call17165 = callmethodsuper(this, "shallowCopyFieldsFrom(1)", [1], var_other);
                                                                            setLineNumber(2629);    // compilenode member
                                                                            // call case 6: other requests
                                                                            var call17168 = callmethodChecked(var_other, "typeParams", []);
                                                                            // call case 4: self request
                                                                            onSelf = true;
                                                                            var call17169 = callmethodChecked(this, "typeParams:=(1)", [1], call17168);
                                                                            setLineNumber(2630);    // compilenode member
                                                                            // call case 6: other requests
                                                                            var call17172 = callmethodChecked(var_other, "lineLength", []);
                                                                            // call case 4: self request
                                                                            onSelf = true;
                                                                            var call17173 = callmethodChecked(this, "lineLength:=(1)", [1], call17172);
                                                                            setLineNumber(2631);    // compilenode identifier
                                                                            return this;
                                                                          };
                                                                          func17163.paramCounts = [1];
                                                                          obj16912.methods["shallowCopyFieldsFrom(1)"] = func17163;
                                                                          func17163.definitionLine = 2627;
                                                                          func17163.definitionModule = "ast";
                                                                          var func17174 = function(argcv) {    // method asString
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            setModuleName("ast");
                                                                            setLineNumber(2634);    // compilenode string
                                                                            var string17175 = new GraceString("");
                                                                            // call case 4: self request
                                                                            onSelf = true;
                                                                            var call17178 = callmethodChecked(this, "nameString", []);
                                                                            var string17180 = new GraceString("part: ");
                                                                            var opresult17182 = callmethodChecked(string17180, "++(1)", [1], call17178);
                                                                            var opresult17184 = callmethodChecked(opresult17182, "++(1)", [1], string17175);
                                                                            return opresult17184;
                                                                          };
                                                                          func17174.paramCounts = [0];
                                                                          obj16912.methods["asString"] = func17174;
                                                                          func17174.definitionLine = 2633;
                                                                          func17174.definitionModule = "ast";
                                                                          setLineNumber(2564);    // compilenode identifier
                                                                          // call case 6: other requests
                                                                          // call case 6: other requests
                                                                          // call case 3: self.outer request
                                                                          var call17188 = callmethodChecked(superDepth, "outer", [0]);
                                                                          var call17189 = callmethodChecked(call17188, "outer", []);
                                                                          var call17190 = callmethodChecked(call17189, "baseNode$object(1)", [0, 1], this);
                                                                          obj16912.superobj = call17190;
                                                                          if (call17190.data) obj16912.data = call17190.data;
                                                                          if (call17190.hasOwnProperty('_value'))
                                                                              obj16912._value = call17190._value;
                                                                          setLineNumber(2565);    // compilenode string
                                                                          var string17191 = new GraceString("signaturepart");
                                                                          obj16912.data["kind"] = string17191;
                                                                          var reader_ast_kind17192 = function() {
                                                                            return this.data["kind"];
                                                                          };
                                                                          reader_ast_kind17192.def = true;
                                                                          obj16912.methods["kind"] = reader_ast_kind17192;
                                                                          setLineNumber(2566);    // compilenode identifier
                                                                          obj16912.data["name"] = var_n;
                                                                          var reader_ast_name17193 = function() {
                                                                            return this.data["name"];
                                                                          };
                                                                          obj16912.methods["name"] = reader_ast_name17193;
                                                                          obj16912.data["name"] = var_n;
                                                                          var writer_ast_name17193 = function(argcv, o) {
                                                                            this.data["name"] = o;
                                                                            return GraceDone;
                                                                          };
                                                                          obj16912.methods["name:=(1)"] = writer_ast_name17193;
                                                                          obj16912.mutable = true;
                                                                          setLineNumber(2567);    // compilenode identifier
                                                                          obj16912.data["params"] = var_ps;
                                                                          var reader_ast_params17194 = function() {
                                                                            return this.data["params"];
                                                                          };
                                                                          obj16912.methods["params"] = reader_ast_params17194;
                                                                          obj16912.data["params"] = var_ps;
                                                                          var writer_ast_params17194 = function(argcv, o) {
                                                                            this.data["params"] = o;
                                                                            return GraceDone;
                                                                          };
                                                                          obj16912.methods["params:=(1)"] = writer_ast_params17194;
                                                                          obj16912.mutable = true;
                                                                          setLineNumber(2568);    // compilenode identifier
                                                                          obj16912.data["typeParams"] = GraceFalse;
                                                                          var reader_ast_typeParams17195 = function() {
                                                                            return this.data["typeParams"];
                                                                          };
                                                                          obj16912.methods["typeParams"] = reader_ast_typeParams17195;
                                                                          obj16912.data["typeParams"] = GraceFalse;
                                                                          var writer_ast_typeParams17195 = function(argcv, o) {
                                                                            this.data["typeParams"] = o;
                                                                            return GraceDone;
                                                                          };
                                                                          obj16912.methods["typeParams:=(1)"] = writer_ast_typeParams17195;
                                                                          obj16912.mutable = true;
                                                                          setLineNumber(2569);    // compilenode num
                                                                          obj16912.data["lineLength"] = new GraceNum(0);
                                                                          var reader_ast_lineLength17196 = function() {
                                                                            return this.data["lineLength"];
                                                                          };
                                                                          obj16912.methods["lineLength"] = reader_ast_lineLength17196;
                                                                          obj16912.data["lineLength"] = new GraceNum(0);
                                                                          var writer_ast_lineLength17196 = function(argcv, o) {
                                                                            this.data["lineLength"] = o;
                                                                            return GraceDone;
                                                                          };
                                                                          obj16912.methods["lineLength:=(1)"] = writer_ast_lineLength17196;
                                                                          obj16912.mutable = true;
                                                                          superDepth = origSuperDepth;
                                                                        };
                                                                        obj_init_16912.apply(obj16912, []);
                                                                        return obj16912;
                                                                      };
                                                                      func16911.paramCounts = [1, 1];
                                                                      obj16889.methods["partName(1)params(1)"] = func16911;
                                                                      func16911.definitionLine = 2563;
                                                                      func16911.definitionModule = "ast";
                                                                        var func17197 = function(argcv) {    // method partName(_)params(_)$object(_)
                                                                          var curarg = 1;
                                                                          var var_n = arguments[curarg];
                                                                          curarg++;
                                                                          var var_ps = arguments[curarg];
                                                                          curarg++;
                                                                          var inheritingObject = arguments[curarg++];
                                                                          // Start argument processing
                                                                          curarg = 1;
                                                                          curarg++;
                                                                          curarg++;
                                                                          // End argument processing
                                                                          setModuleName("ast");
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var obj17198 = Grace_allocObject(null, "partName(1)params(1)");
                                                                          obj17198.definitionModule = "ast";
                                                                          obj17198.definitionLine = 2563;
                                                                          var inho17198 = inheritingObject;
                                                                          while (inho17198.superobj) inho17198 = inho17198.superobj;
                                                                          inho17198.superobj = obj17198;
                                                                          obj17198.data = inheritingObject.data;
                                                                          if (inheritingObject.hasOwnProperty('_value'))
                                                                            obj17198._value = inheritingObject._value;
                                                                          obj17198.outer = this;
                                                                          var reader_ast_outer17199 = function() {
                                                                            return this.outer;
                                                                          };
                                                                          obj17198.methods["outer"] = reader_ast_outer17199;
                                                                          var obj_init_17198 = function() {
                                                                            var origSuperDepth = superDepth;
                                                                            superDepth = obj17198;
                                                                            var func17200 = function(argcv) {    // method nameString
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              setModuleName("ast");
                                                                              var if17201 = GraceDone;
                                                                              setLineNumber(2572);    // compilenode member
                                                                              // call case 6: other requests
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call17204 = callmethodChecked(this, "params", []);
                                                                              var call17205 = callmethodChecked(call17204, "isEmpty", []);
                                                                              if (Grace_isTrue(call17205)) {
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call17207 = callmethodChecked(this, "name", []);
                                                                                return call17207;
                                                                              }
                                                                              setLineNumber(2573);    // compilenode string
                                                                              var string17208 = new GraceString(")");
                                                                              // call case 6: other requests
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call17212 = callmethodChecked(this, "params", []);
                                                                              var call17213 = callmethodChecked(call17212, "size", []);
                                                                              var string17215 = new GraceString("(");
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call17218 = callmethodChecked(this, "name", []);
                                                                              var opresult17220 = callmethodChecked(call17218, "++(1)", [1], string17215);
                                                                              var opresult17222 = callmethodChecked(opresult17220, "++(1)", [1], call17213);
                                                                              var opresult17224 = callmethodChecked(opresult17222, "++(1)", [1], string17208);
                                                                              return opresult17224;
                                                                            };
                                                                            func17200.paramCounts = [0];
                                                                            obj17198.methods["nameString"] = func17200;
                                                                            func17200.definitionLine = 2571;
                                                                            func17200.definitionModule = "ast";
                                                                            var func17225 = function(argcv) {    // method numParams
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              setModuleName("ast");
                                                                              setLineNumber(2575);    // compilenode member
                                                                              // call case 6: other requests
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call17228 = callmethodChecked(this, "params", []);
                                                                              var call17229 = callmethodChecked(call17228, "size", []);
                                                                              return call17229;
                                                                            };
                                                                            func17225.paramCounts = [0];
                                                                            obj17198.methods["numParams"] = func17225;
                                                                            func17225.definitionLine = 2575;
                                                                            func17225.definitionModule = "ast";
                                                                            var func17230 = function(argcv) {    // method canonicalName
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              setModuleName("ast");
                                                                              var if17231 = GraceDone;
                                                                              setLineNumber(2577);    // compilenode member
                                                                              // call case 6: other requests
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call17235 = callmethodChecked(this, "params", []);
                                                                              var call17236 = callmethodChecked(call17235, "size", []);
                                                                              var opresult17238 = callmethodChecked(call17236, "==(1)", [1], new GraceNum(0));
                                                                              if (Grace_isTrue(opresult17238)) {
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call17240 = callmethodChecked(this, "name", []);
                                                                                return call17240;
                                                                              }
                                                                              setLineNumber(2578);    // compilenode string
                                                                              var string17241 = new GraceString("");
                                                                              var var_underScores = string17241;
                                                                              setLineNumber(2579);    // compilenode block
                                                                              var block17243 = new GraceBlock(this, 2579, 1);
                                                                              setLineNumber(1);    // compilenode identifier
                                                                              block17243.real = function(var___95____95__3) {
                                                                                setLineNumber(2579);    // compilenode string
                                                                                var string17244 = new GraceString("_");
                                                                                var opresult17247 = callmethodChecked(var_underScores, "++(1)", [1], string17244);
                                                                                var_underScores = opresult17247;
                                                                                return GraceDone;
                                                                              };
                                                                              setLineNumber(2580);    // compilenode block
                                                                              var block17248 = new GraceBlock(this, 2580, 0);
                                                                              block17248.real = function() {
                                                                                var string17249 = new GraceString(",");
                                                                                var opresult17252 = callmethodChecked(var_underScores, "++(1)", [1], string17249);
                                                                                var_underScores = opresult17252;
                                                                                return GraceDone;
                                                                              };
                                                                              // call case 6: other requests
                                                                              setLineNumber(2579);    // compilenode member
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call17254 = callmethodChecked(this, "params", []);
                                                                              var call17255 = callmethodChecked(call17254, "do(1)separatedBy(1)", [1, 1], block17243, block17248);
                                                                              setLineNumber(2581);    // compilenode string
                                                                              var string17256 = new GraceString(")");
                                                                              var string17259 = new GraceString("(");
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call17262 = callmethodChecked(this, "name", []);
                                                                              var opresult17264 = callmethodChecked(call17262, "++(1)", [1], string17259);
                                                                              var opresult17266 = callmethodChecked(opresult17264, "++(1)", [1], var_underScores);
                                                                              var opresult17268 = callmethodChecked(opresult17266, "++(1)", [1], string17256);
                                                                              return opresult17268;
                                                                            };
                                                                            func17230.paramCounts = [0];
                                                                            obj17198.methods["canonicalName"] = func17230;
                                                                            func17230.definitionLine = 2576;
                                                                            func17230.definitionModule = "ast";
                                                                            var func17269 = function(argcv) {    // method accept(_)from(_)
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              var var_visitor = arguments[curarg];
                                                                              curarg++;
                                                                              var var_as = arguments[curarg];
                                                                              curarg++;
                                                                              // Start argument checking
                                                                              curarg = 1;
                                                                              setLineNumber(2584);    // compilenode identifier
                                                                              if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                                          callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                                              curarg++;
                                                                              curarg++;
                                                                              // End argument checking
                                                                              setModuleName("ast");
                                                                              var if17270 = GraceDone;
                                                                              setLineNumber(2585);    // compilenode identifier
                                                                              // call case 6: other requests
                                                                              var call17272 = callmethodChecked(var_visitor, "visitSignaturePart(1)up(1)", [1, 1], this, var_as);
                                                                              if (Grace_isTrue(call17272)) {
                                                                                setLineNumber(2586);    // compilenode identifier
                                                                                // call case 6: other requests
                                                                                var call17274 = callmethodChecked(var_as, "extend(1)", [1], this);
                                                                                var var_newChain = call17274;
                                                                                setLineNumber(2587);    // compilenode block
                                                                                var block17276 = new GraceBlock(this, 2587, 1);
                                                                                setLineNumber(1);    // compilenode identifier
                                                                                block17276.real = function(var_p) {
                                                                                  setLineNumber(2587);    // compilenode identifier
                                                                                  // call case 6: other requests
                                                                                  var call17278 = callmethodChecked(var_p, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                                                  return call17278;
                                                                                };
                                                                                // call case 6: other requests
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call17280 = callmethodChecked(this, "params", []);
                                                                                var call17281 = callmethodChecked(call17280, "do(1)", [1], block17276);
                                                                                var if17282 = GraceDone;
                                                                                setLineNumber(2588);    // compilenode member
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call17284 = callmethodChecked(this, "typeParams", []);
                                                                                var opresult17287 = callmethodChecked(GraceFalse, "\u2260(1)", [1], call17284);
                                                                                if (Grace_isTrue(opresult17287)) {
                                                                                  setLineNumber(2589);    // compilenode identifier
                                                                                  // call case 6: other requests
                                                                                  // call case 4: self request
                                                                                  onSelf = true;
                                                                                  var call17290 = callmethodChecked(this, "typeParams", []);
                                                                                  var call17291 = callmethodChecked(call17290, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                                                                                  if17282 = call17291;
                                                                                }
                                                                                if17270 = if17282;
                                                                              }
                                                                              return if17270;
                                                                            };
                                                                            func17269.paramTypes = [];
                                                                            func17269.paramTypes.push([]);
                                                                            func17269.paramTypes.push([]);
                                                                            func17269.paramCounts = [1, 1];
                                                                            obj17198.methods["accept(1)from(1)"] = func17269;
                                                                            func17269.definitionLine = 2584;
                                                                            func17269.definitionModule = "ast";
                                                                            var func17292 = function(argcv) {    // method declarationKindWithAncestors(_)
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              var var_as = arguments[curarg];
                                                                              curarg++;
                                                                              setModuleName("ast");
                                                                              setLineNumber(2593);    // compilenode member
                                                                              // call case 6: other requests
                                                                              var call17294 = callmethodChecked(var_k, "parameter", []);
                                                                              return call17294;
                                                                            };
                                                                            func17292.paramCounts = [1];
                                                                            obj17198.methods["declarationKindWithAncestors(1)"] = func17292;
                                                                            func17292.definitionLine = 2593;
                                                                            func17292.definitionModule = "ast";
                                                                            var func17295 = function(argcv) {    // method map(_)ancestors(_)
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              var var_blk = arguments[curarg];
                                                                              curarg++;
                                                                              var var_as = arguments[curarg];
                                                                              curarg++;
                                                                              setModuleName("ast");
                                                                              setLineNumber(2595);    // compilenode member
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call17297 = callmethodChecked(this, "shallowCopy", []);
                                                                              var var_nd = call17297;
                                                                              setLineNumber(2596);    // compilenode identifier
                                                                              // call case 6: other requests
                                                                              var call17299 = callmethodChecked(var_as, "extend(1)", [1], var_nd);
                                                                              var var_newChain = call17299;
                                                                              setLineNumber(2597);    // compilenode member
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call17303 = callmethodChecked(this, "params", []);
                                                                              // call case 6: other requests
                                                                              // call case 6: other requests
                                                                              // call case 3: self.outer request
                                                                              var call17306 = callmethodChecked(superDepth, "outer", [0]);
                                                                              var call17307 = callmethodChecked(call17306, "outer", []);
                                                                              onSelf = true;
                                                                              var call17308 = callmethodChecked(call17307, "listMap(2)ancestors(1)", [2, 1], call17303, var_blk, var_newChain);
                                                                              // call case 6: other requests
                                                                              var call17309 = callmethodChecked(var_nd, "params:=(1)", [1], call17308);
                                                                              setLineNumber(2598);    // compilenode member
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call17313 = callmethodChecked(this, "typeParams", []);
                                                                              // call case 6: other requests
                                                                              // call case 6: other requests
                                                                              // call case 3: self.outer request
                                                                              var call17316 = callmethodChecked(superDepth, "outer", [0]);
                                                                              var call17317 = callmethodChecked(call17316, "outer", []);
                                                                              onSelf = true;
                                                                              var call17318 = callmethodChecked(call17317, "maybeMap(2)ancestors(1)", [2, 1], call17313, var_blk, var_newChain);
                                                                              // call case 6: other requests
                                                                              var call17319 = callmethodChecked(var_nd, "typeParams:=(1)", [1], call17318);
                                                                              setLineNumber(2599);    // compilenode identifier
                                                                              // call case 6: other requests
                                                                              var call17321 = callmethodChecked(var_blk, "apply(2)", [2], var_nd, var_as);
                                                                              return call17321;
                                                                            };
                                                                            func17295.paramCounts = [1, 1];
                                                                            obj17198.methods["map(1)ancestors(1)"] = func17295;
                                                                            func17295.definitionLine = 2594;
                                                                            func17295.definitionModule = "ast";
                                                                            var func17322 = function(argcv) {    // method pretty(_)
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              var var_depth = arguments[curarg];
                                                                              curarg++;
                                                                              setModuleName("ast");
                                                                              setLineNumber(2602);    // compilenode string
                                                                              var string17323 = new GraceString("");
                                                                              var var_spc = string17323;
                                                                              setLineNumber(2603);    // compilenode num
                                                                              var opresult17327 = callmethodChecked(new GraceNum(0), "..(1)", [1], var_depth);
                                                                              var block17328 = new GraceBlock(this, 2603, 1);
                                                                              setLineNumber(1);    // compilenode identifier
                                                                              block17328.real = function(var_i) {
                                                                                setLineNumber(2604);    // compilenode string
                                                                                var string17329 = new GraceString("  ");
                                                                                var opresult17332 = callmethodChecked(var_spc, "++(1)", [1], string17329);
                                                                                var_spc = opresult17332;
                                                                                return GraceDone;
                                                                              };
                                                                              // call case 5: prelude request
                                                                              var call17333 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], opresult17327, block17328);
                                                                              setLineNumber(2606);    // compilenode string
                                                                              var string17334 = new GraceString("");
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call17337 = callmethodChecked(this, "name", []);
                                                                              var string17339 = new GraceString(": ");
                                                                              // call case 1: super request
                                                                              var call17342 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                                                              var string17344 = new GraceString("");
                                                                              var opresult17346 = callmethodChecked(string17344, "++(1)", [1], call17342);
                                                                              var opresult17348 = callmethodChecked(opresult17346, "++(1)", [1], string17339);
                                                                              var opresult17350 = callmethodChecked(opresult17348, "++(1)", [1], call17337);
                                                                              var opresult17352 = callmethodChecked(opresult17350, "++(1)", [1], string17334);
                                                                              var var_s = opresult17352;
                                                                              var if17353 = GraceDone;
                                                                              setLineNumber(2607);    // compilenode member
                                                                              // call case 6: other requests
                                                                              // call case 6: other requests
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call17357 = callmethodChecked(this, "params", []);
                                                                              var call17358 = callmethodChecked(call17357, "isEmpty", []);
                                                                              var call17359 = callmethodChecked(call17358, "not", []);
                                                                              if (Grace_isTrue(call17359)) {
                                                                                var string17360 = new GraceString("Parameters:");
                                                                                var string17363 = new GraceString("\n");
                                                                                var string17366 = new GraceString("");
                                                                                var opresult17368 = callmethodChecked(string17366, "++(1)", [1], var_s);
                                                                                var opresult17370 = callmethodChecked(opresult17368, "++(1)", [1], string17363);
                                                                                var opresult17372 = callmethodChecked(opresult17370, "++(1)", [1], var_spc);
                                                                                var opresult17374 = callmethodChecked(opresult17372, "++(1)", [1], string17360);
                                                                                var_s = opresult17374;
                                                                                if17353 = GraceDone;
                                                                              }
                                                                              setLineNumber(2608);    // compilenode member
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call17377 = callmethodChecked(this, "params", []);
                                                                              var block17378 = new GraceBlock(this, 2608, 1);
                                                                              setLineNumber(1);    // compilenode identifier
                                                                              block17378.real = function(var_p) {
                                                                                setLineNumber(2609);    // compilenode string
                                                                                var string17379 = new GraceString("");
                                                                                var opresult17384 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(2));
                                                                                // call case 6: other requests
                                                                                var call17385 = callmethodChecked(var_p, "pretty(1)", [1], opresult17384);
                                                                                var string17387 = new GraceString("");
                                                                                var string17390 = new GraceString("\n  ");
                                                                                var string17393 = new GraceString("");
                                                                                var opresult17395 = callmethodChecked(string17393, "++(1)", [1], var_s);
                                                                                var opresult17397 = callmethodChecked(opresult17395, "++(1)", [1], string17390);
                                                                                var opresult17399 = callmethodChecked(opresult17397, "++(1)", [1], var_spc);
                                                                                var opresult17401 = callmethodChecked(opresult17399, "++(1)", [1], string17387);
                                                                                var opresult17403 = callmethodChecked(opresult17401, "++(1)", [1], call17385);
                                                                                var opresult17405 = callmethodChecked(opresult17403, "++(1)", [1], string17379);
                                                                                var_s = opresult17405;
                                                                                return GraceDone;
                                                                              };
                                                                              // call case 5: prelude request
                                                                              var call17406 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call17377, block17378);
                                                                              setLineNumber(2611);    // compilenode identifier
                                                                              return var_s;
                                                                            };
                                                                            func17322.paramCounts = [1];
                                                                            obj17198.methods["pretty(1)"] = func17322;
                                                                            func17322.definitionLine = 2601;
                                                                            func17322.definitionModule = "ast";
                                                                            var func17407 = function(argcv) {    // method toGrace(_)
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              var var_depth = arguments[curarg];
                                                                              curarg++;
                                                                              setModuleName("ast");
                                                                              setLineNumber(2614);    // compilenode member
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call17409 = callmethodChecked(this, "name", []);
                                                                              var var_s = call17409;
                                                                              var if17410 = GraceDone;
                                                                              setLineNumber(2615);    // compilenode member
                                                                              // call case 6: other requests
                                                                              // call case 6: other requests
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call17414 = callmethodChecked(this, "params", []);
                                                                              var call17415 = callmethodChecked(call17414, "isEmpty", []);
                                                                              var call17416 = callmethodChecked(call17415, "not", []);
                                                                              if (Grace_isTrue(call17416)) {
                                                                                setLineNumber(2616);    // compilenode string
                                                                                var string17417 = new GraceString("(");
                                                                                var opresult17420 = callmethodChecked(var_s, "++(1)", [1], string17417);
                                                                                var_s = opresult17420;
                                                                                setLineNumber(2617);    // compilenode block
                                                                                var block17422 = new GraceBlock(this, 2617, 1);
                                                                                setLineNumber(1);    // compilenode identifier
                                                                                block17422.real = function(var_each) {
                                                                                  setLineNumber(2617);    // compilenode identifier
                                                                                  var opresult17426 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                                                                  // call case 6: other requests
                                                                                  var call17427 = callmethodChecked(var_each, "toGrace(1)", [1], opresult17426);
                                                                                  var_s = call17427;
                                                                                  return GraceDone;
                                                                                };
                                                                                setLineNumber(2618);    // compilenode block
                                                                                var block17428 = new GraceBlock(this, 2618, 0);
                                                                                block17428.real = function() {
                                                                                  var string17429 = new GraceString(", ");
                                                                                  var opresult17432 = callmethodChecked(var_s, "++(1)", [1], string17429);
                                                                                  var_s = opresult17432;
                                                                                  return GraceDone;
                                                                                };
                                                                                // call case 6: other requests
                                                                                setLineNumber(2617);    // compilenode member
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call17434 = callmethodChecked(this, "params", []);
                                                                                var call17435 = callmethodChecked(call17434, "do(1)separatedBy(1)", [1, 1], block17422, block17428);
                                                                                setLineNumber(2619);    // compilenode string
                                                                                var string17436 = new GraceString(")");
                                                                                var opresult17439 = callmethodChecked(var_s, "++(1)", [1], string17436);
                                                                                var_s = opresult17439;
                                                                                if17410 = GraceDone;
                                                                              }
                                                                              setLineNumber(2621);    // compilenode identifier
                                                                              return var_s;
                                                                            };
                                                                            func17407.paramCounts = [1];
                                                                            obj17198.methods["toGrace(1)"] = func17407;
                                                                            func17407.definitionLine = 2613;
                                                                            func17407.definitionModule = "ast";
                                                                            var func17440 = function(argcv) {    // method shallowCopy
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              setModuleName("ast");
                                                                              setLineNumber(2625);    // compilenode identifier
                                                                              // call case 6: other requests
                                                                              setLineNumber(2624);    // compilenode member
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call17444 = callmethodChecked(this, "name", []);
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call17446 = callmethodChecked(this, "params", []);
                                                                              // call case 6: other requests
                                                                              var call17447 = callmethodChecked(var_signaturePart, "partName(1)params(1)", [1, 1], call17444, call17446);
                                                                              var call17448 = callmethodChecked(call17447, "shallowCopyFieldsFrom(1)", [1], this);
                                                                              return call17448;
                                                                            };
                                                                            func17440.paramCounts = [0];
                                                                            obj17198.methods["shallowCopy"] = func17440;
                                                                            func17440.definitionLine = 2623;
                                                                            func17440.definitionModule = "ast";
                                                                            var func17449 = function(argcv) {    // method shallowCopyFieldsFrom(_)
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              var var_other = arguments[curarg];
                                                                              curarg++;
                                                                              setModuleName("ast");
                                                                              setLineNumber(2628);    // compilenode identifier
                                                                              // call case 1: super request
                                                                              var call17451 = callmethodsuper(this, "shallowCopyFieldsFrom(1)", [1], var_other);
                                                                              setLineNumber(2629);    // compilenode member
                                                                              // call case 6: other requests
                                                                              var call17454 = callmethodChecked(var_other, "typeParams", []);
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call17455 = callmethodChecked(this, "typeParams:=(1)", [1], call17454);
                                                                              setLineNumber(2630);    // compilenode member
                                                                              // call case 6: other requests
                                                                              var call17458 = callmethodChecked(var_other, "lineLength", []);
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call17459 = callmethodChecked(this, "lineLength:=(1)", [1], call17458);
                                                                              setLineNumber(2631);    // compilenode identifier
                                                                              return this;
                                                                            };
                                                                            func17449.paramCounts = [1];
                                                                            obj17198.methods["shallowCopyFieldsFrom(1)"] = func17449;
                                                                            func17449.definitionLine = 2627;
                                                                            func17449.definitionModule = "ast";
                                                                            var func17460 = function(argcv) {    // method asString
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              setModuleName("ast");
                                                                              setLineNumber(2634);    // compilenode string
                                                                              var string17461 = new GraceString("");
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call17464 = callmethodChecked(this, "nameString", []);
                                                                              var string17466 = new GraceString("part: ");
                                                                              var opresult17468 = callmethodChecked(string17466, "++(1)", [1], call17464);
                                                                              var opresult17470 = callmethodChecked(opresult17468, "++(1)", [1], string17461);
                                                                              return opresult17470;
                                                                            };
                                                                            func17460.paramCounts = [0];
                                                                            obj17198.methods["asString"] = func17460;
                                                                            func17460.definitionLine = 2633;
                                                                            func17460.definitionModule = "ast";
                                                                            setLineNumber(2564);    // compilenode identifier
                                                                            // call case 6: other requests
                                                                            // call case 6: other requests
                                                                            // call case 3: self.outer request
                                                                            var call17474 = callmethodChecked(superDepth, "outer", [0]);
                                                                            var call17475 = callmethodChecked(call17474, "outer", []);
                                                                            var call17476 = callmethodChecked(call17475, "baseNode$object(1)", [0, 1], this);
                                                                            obj17198.superobj = call17476;
                                                                            if (call17476.data) obj17198.data = call17476.data;
                                                                            if (call17476.hasOwnProperty('_value'))
                                                                                obj17198._value = call17476._value;
                                                                            setLineNumber(2565);    // compilenode string
                                                                            var string17477 = new GraceString("signaturepart");
                                                                            obj17198.data["kind"] = string17477;
                                                                            var reader_ast_kind17478 = function() {
                                                                              return this.data["kind"];
                                                                            };
                                                                            reader_ast_kind17478.def = true;
                                                                            obj17198.methods["kind"] = reader_ast_kind17478;
                                                                            setLineNumber(2566);    // compilenode identifier
                                                                            obj17198.data["name"] = var_n;
                                                                            var reader_ast_name17479 = function() {
                                                                              return this.data["name"];
                                                                            };
                                                                            obj17198.methods["name"] = reader_ast_name17479;
                                                                            obj17198.data["name"] = var_n;
                                                                            var writer_ast_name17479 = function(argcv, o) {
                                                                              this.data["name"] = o;
                                                                              return GraceDone;
                                                                            };
                                                                            obj17198.methods["name:=(1)"] = writer_ast_name17479;
                                                                            obj17198.mutable = true;
                                                                            setLineNumber(2567);    // compilenode identifier
                                                                            obj17198.data["params"] = var_ps;
                                                                            var reader_ast_params17480 = function() {
                                                                              return this.data["params"];
                                                                            };
                                                                            obj17198.methods["params"] = reader_ast_params17480;
                                                                            obj17198.data["params"] = var_ps;
                                                                            var writer_ast_params17480 = function(argcv, o) {
                                                                              this.data["params"] = o;
                                                                              return GraceDone;
                                                                            };
                                                                            obj17198.methods["params:=(1)"] = writer_ast_params17480;
                                                                            obj17198.mutable = true;
                                                                            setLineNumber(2568);    // compilenode identifier
                                                                            obj17198.data["typeParams"] = GraceFalse;
                                                                            var reader_ast_typeParams17481 = function() {
                                                                              return this.data["typeParams"];
                                                                            };
                                                                            obj17198.methods["typeParams"] = reader_ast_typeParams17481;
                                                                            obj17198.data["typeParams"] = GraceFalse;
                                                                            var writer_ast_typeParams17481 = function(argcv, o) {
                                                                              this.data["typeParams"] = o;
                                                                              return GraceDone;
                                                                            };
                                                                            obj17198.methods["typeParams:=(1)"] = writer_ast_typeParams17481;
                                                                            obj17198.mutable = true;
                                                                            setLineNumber(2569);    // compilenode num
                                                                            obj17198.data["lineLength"] = new GraceNum(0);
                                                                            var reader_ast_lineLength17482 = function() {
                                                                              return this.data["lineLength"];
                                                                            };
                                                                            obj17198.methods["lineLength"] = reader_ast_lineLength17482;
                                                                            obj17198.data["lineLength"] = new GraceNum(0);
                                                                            var writer_ast_lineLength17482 = function(argcv, o) {
                                                                              this.data["lineLength"] = o;
                                                                              return GraceDone;
                                                                            };
                                                                            obj17198.methods["lineLength:=(1)"] = writer_ast_lineLength17482;
                                                                            obj17198.mutable = true;
                                                                            superDepth = origSuperDepth;
                                                                          };
                                                                          obj_init_17198.apply(inheritingObject, []);
                                                                          return obj17198;
                                                                          };
                                                                          obj16889.methods["partName(1)params(1)$object(1)"] = func17197;
                                                                        superDepth = origSuperDepth;
                                                                      };
                                                                      obj_init_16889.apply(obj16889, []);
                                                                      var var_signaturePart = obj16889;
                                                                      setLineNumber(1);    // compilenode method
                                                                      var func17483 = function(argcv) {    // method signaturePart
                                                                        var returnTarget = invocationCount;
                                                                        invocationCount++;
                                                                        var curarg = 1;
                                                                        setModuleName("ast");
                                                                        // signaturePart is a simple accessor - elide try ... catch
                                                                        setLineNumber(2546);    // compilenode identifier
                                                                        return var_signaturePart;
                                                                      };
                                                                      func17483.paramCounts = [0];
                                                                      this.methods["signaturePart"] = func17483;
                                                                      func17483.definitionLine = 1;
                                                                      func17483.definitionModule = "ast";
                                                                      this.methods["signaturePart"].debug = "def";
                                                                      setLineNumber(2639);    // compilenode object
                                                                      var obj17484 = Grace_allocObject(GraceObject, "requestPart");
                                                                      obj17484.definitionModule = "ast";
                                                                      obj17484.definitionLine = 2639;
                                                                      obj17484.outer = this;
                                                                      var reader_ast_outer17485 = function() {
                                                                        return this.outer;
                                                                      };
                                                                      obj17484.methods["outer"] = reader_ast_outer17485;
                                                                      var obj_init_17484 = function() {
                                                                        var origSuperDepth = superDepth;
                                                                        superDepth = obj17484;
                                                                        var func17486 = function(argcv) {    // method new
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          setModuleName("ast");
                                                                          setLineNumber(2641);    // compilenode string
                                                                          var string17488 = new GraceString("");
                                                                          var array17489 = new PrimitiveGraceList([]);
                                                                          // call case 4: self request
                                                                          onSelf = true;
                                                                          var call17490 = callmethodChecked(this, "request(1)withArgs(1)", [1, 1], string17488, array17489);
                                                                          return call17490;
                                                                        };
                                                                        func17486.paramCounts = [0];
                                                                        obj17484.methods["new"] = func17486;
                                                                        func17486.definitionLine = 2640;
                                                                        func17486.definitionModule = "ast";
                                                                        var func17491 = function(argcv) {    // method request(_)withArgs(_)scope(_)
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          var var_name = arguments[curarg];
                                                                          curarg++;
                                                                          var var_argList = arguments[curarg];
                                                                          curarg++;
                                                                          var var_s = arguments[curarg];
                                                                          curarg++;
                                                                          setModuleName("ast");
                                                                          setLineNumber(2644);    // compilenode identifier
                                                                          // call case 4: self request
                                                                          onSelf = true;
                                                                          var call17493 = callmethodChecked(this, "request(1)withArgs(1)", [1, 1], var_name, var_argList);
                                                                          var var_result = call17493;
                                                                          setLineNumber(2645);    // compilenode identifier
                                                                          // call case 6: other requests
                                                                          var call17495 = callmethodChecked(var_result, "scope:=(1)", [1], var_s);
                                                                          setLineNumber(2646);    // compilenode identifier
                                                                          return var_result;
                                                                        };
                                                                        func17491.paramCounts = [1, 1, 1];
                                                                        obj17484.methods["request(1)withArgs(1)scope(1)"] = func17491;
                                                                        func17491.definitionLine = 2643;
                                                                        func17491.definitionModule = "ast";
                                                                        var func17496 = function(argcv) {    // method request(_)withArgs(_)
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          var var_rPart = arguments[curarg];
                                                                          curarg++;
                                                                          var var_xs = arguments[curarg];
                                                                          curarg++;
                                                                          setModuleName("ast");
                                                                          setLineNumber(2648);    // compilenode object
                                                                          var obj17497 = Grace_allocObject(null, "requestPart.request(_)withArgs(_)");
                                                                          obj17497.definitionModule = "ast";
                                                                          obj17497.definitionLine = 2648;
                                                                          obj17497.outer = this;
                                                                          var reader_ast_outer17498 = function() {
                                                                            return this.outer;
                                                                          };
                                                                          obj17497.methods["outer"] = reader_ast_outer17498;
                                                                          var obj_init_17497 = function() {
                                                                            var origSuperDepth = superDepth;
                                                                            superDepth = obj17497;
                                                                            var func17499 = function(argcv) {    // method nameString
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              setModuleName("ast");
                                                                              var if17500 = GraceDone;
                                                                              setLineNumber(2657);    // compilenode member
                                                                              // call case 6: other requests
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call17504 = callmethodChecked(this, "args", []);
                                                                              var call17505 = callmethodChecked(call17504, "size", []);
                                                                              var opresult17507 = callmethodChecked(call17505, "==(1)", [1], new GraceNum(0));
                                                                              if (Grace_isTrue(opresult17507)) {
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call17509 = callmethodChecked(this, "name", []);
                                                                                return call17509;
                                                                              }
                                                                              setLineNumber(2658);    // compilenode string
                                                                              var string17510 = new GraceString(")");
                                                                              // call case 6: other requests
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call17514 = callmethodChecked(this, "args", []);
                                                                              var call17515 = callmethodChecked(call17514, "size", []);
                                                                              var string17517 = new GraceString("(");
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call17520 = callmethodChecked(this, "name", []);
                                                                              var opresult17522 = callmethodChecked(call17520, "++(1)", [1], string17517);
                                                                              var opresult17524 = callmethodChecked(opresult17522, "++(1)", [1], call17515);
                                                                              var opresult17526 = callmethodChecked(opresult17524, "++(1)", [1], string17510);
                                                                              return opresult17526;
                                                                            };
                                                                            func17499.paramCounts = [0];
                                                                            obj17497.methods["nameString"] = func17499;
                                                                            func17499.definitionLine = 2656;
                                                                            func17499.definitionModule = "ast";
                                                                            var func17527 = function(argcv) {    // method canonicalName
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              setModuleName("ast");
                                                                              var if17528 = GraceDone;
                                                                              setLineNumber(2662);    // compilenode member
                                                                              // call case 6: other requests
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call17532 = callmethodChecked(this, "args", []);
                                                                              var call17533 = callmethodChecked(call17532, "size", []);
                                                                              var opresult17535 = callmethodChecked(call17533, "==(1)", [1], new GraceNum(0));
                                                                              if (Grace_isTrue(opresult17535)) {
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call17537 = callmethodChecked(this, "name", []);
                                                                                return call17537;
                                                                              }
                                                                              setLineNumber(2663);    // compilenode string
                                                                              var string17538 = new GraceString("");
                                                                              var var_underScores = string17538;
                                                                              setLineNumber(2664);    // compilenode block
                                                                              var block17540 = new GraceBlock(this, 2664, 1);
                                                                              setLineNumber(1);    // compilenode identifier
                                                                              block17540.real = function(var___95____95__4) {
                                                                                setLineNumber(2664);    // compilenode string
                                                                                var string17541 = new GraceString("_");
                                                                                var opresult17544 = callmethodChecked(var_underScores, "++(1)", [1], string17541);
                                                                                var_underScores = opresult17544;
                                                                                return GraceDone;
                                                                              };
                                                                              setLineNumber(2665);    // compilenode block
                                                                              var block17545 = new GraceBlock(this, 2665, 0);
                                                                              block17545.real = function() {
                                                                                var string17546 = new GraceString(",");
                                                                                var opresult17549 = callmethodChecked(var_underScores, "++(1)", [1], string17546);
                                                                                var_underScores = opresult17549;
                                                                                return GraceDone;
                                                                              };
                                                                              // call case 6: other requests
                                                                              setLineNumber(2664);    // compilenode member
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call17551 = callmethodChecked(this, "args", []);
                                                                              var call17552 = callmethodChecked(call17551, "do(1)separatedBy(1)", [1, 1], block17540, block17545);
                                                                              setLineNumber(2666);    // compilenode string
                                                                              var string17553 = new GraceString(")");
                                                                              var string17556 = new GraceString("(");
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call17559 = callmethodChecked(this, "name", []);
                                                                              var opresult17561 = callmethodChecked(call17559, "++(1)", [1], string17556);
                                                                              var opresult17563 = callmethodChecked(opresult17561, "++(1)", [1], var_underScores);
                                                                              var opresult17565 = callmethodChecked(opresult17563, "++(1)", [1], string17553);
                                                                              return opresult17565;
                                                                            };
                                                                            func17527.paramCounts = [0];
                                                                            obj17497.methods["canonicalName"] = func17527;
                                                                            func17527.definitionLine = 2661;
                                                                            func17527.definitionModule = "ast";
                                                                            var func17566 = function(argcv) {    // method map(_)ancestors(_)
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              var var_blk = arguments[curarg];
                                                                              curarg++;
                                                                              var var_as = arguments[curarg];
                                                                              curarg++;
                                                                              setModuleName("ast");
                                                                              setLineNumber(2670);    // compilenode member
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call17568 = callmethodChecked(this, "shallowCopy", []);
                                                                              var var_n = call17568;
                                                                              setLineNumber(2671);    // compilenode identifier
                                                                              // call case 6: other requests
                                                                              var call17570 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                                                              var var_newChain = call17570;
                                                                              setLineNumber(2672);    // compilenode member
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call17574 = callmethodChecked(this, "args", []);
                                                                              // call case 6: other requests
                                                                              // call case 6: other requests
                                                                              // call case 3: self.outer request
                                                                              var call17577 = callmethodChecked(superDepth, "outer", [0]);
                                                                              var call17578 = callmethodChecked(call17577, "outer", []);
                                                                              onSelf = true;
                                                                              var call17579 = callmethodChecked(call17578, "listMap(2)ancestors(1)", [2, 1], call17574, var_blk, var_newChain);
                                                                              // call case 6: other requests
                                                                              var call17580 = callmethodChecked(var_n, "args:=(1)", [1], call17579);
                                                                              setLineNumber(2673);    // compilenode identifier
                                                                              // call case 6: other requests
                                                                              var call17582 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                                                              return call17582;
                                                                            };
                                                                            func17566.paramCounts = [1, 1];
                                                                            obj17497.methods["map(1)ancestors(1)"] = func17566;
                                                                            func17566.definitionLine = 2669;
                                                                            func17566.definitionModule = "ast";
                                                                            var func17583 = function(argcv) {    // method pretty(_)
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              var var_depth = arguments[curarg];
                                                                              curarg++;
                                                                              setModuleName("ast");
                                                                              setLineNumber(2676);    // compilenode string
                                                                              var string17584 = new GraceString("");
                                                                              var var_spc = string17584;
                                                                              setLineNumber(2677);    // compilenode identifier
                                                                              var opresult17588 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                                                              var block17589 = new GraceBlock(this, 2677, 0);
                                                                              block17589.real = function() {
                                                                                setLineNumber(2678);    // compilenode string
                                                                                var string17590 = new GraceString("  ");
                                                                                var opresult17593 = callmethodChecked(var_spc, "++(1)", [1], string17590);
                                                                                var_spc = opresult17593;
                                                                                return GraceDone;
                                                                              };
                                                                              // call case 5: prelude request
                                                                              var call17594 = callmethodChecked(var_prelude, "repeat(1)times(1)", [1, 1], opresult17588, block17589);
                                                                              setLineNumber(2680);    // compilenode string
                                                                              var string17595 = new GraceString("");
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call17598 = callmethodChecked(this, "name", []);
                                                                              var string17600 = new GraceString(": ");
                                                                              // call case 1: super request
                                                                              var call17603 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                                                              var string17605 = new GraceString("");
                                                                              var opresult17607 = callmethodChecked(string17605, "++(1)", [1], call17603);
                                                                              var opresult17609 = callmethodChecked(opresult17607, "++(1)", [1], string17600);
                                                                              var opresult17611 = callmethodChecked(opresult17609, "++(1)", [1], call17598);
                                                                              var opresult17613 = callmethodChecked(opresult17611, "++(1)", [1], string17595);
                                                                              var var_s = opresult17613;
                                                                              setLineNumber(2681);    // compilenode string
                                                                              var string17614 = new GraceString("Args:");
                                                                              var string17617 = new GraceString("\n    ");
                                                                              var string17620 = new GraceString("");
                                                                              var opresult17622 = callmethodChecked(string17620, "++(1)", [1], var_s);
                                                                              var opresult17624 = callmethodChecked(opresult17622, "++(1)", [1], string17617);
                                                                              var opresult17626 = callmethodChecked(opresult17624, "++(1)", [1], var_spc);
                                                                              var opresult17628 = callmethodChecked(opresult17626, "++(1)", [1], string17614);
                                                                              var_s = opresult17628;
                                                                              setLineNumber(2682);    // compilenode member
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call17631 = callmethodChecked(this, "args", []);
                                                                              var block17632 = new GraceBlock(this, 2682, 1);
                                                                              setLineNumber(1);    // compilenode identifier
                                                                              block17632.real = function(var_a) {
                                                                                setLineNumber(2683);    // compilenode string
                                                                                var string17633 = new GraceString("");
                                                                                var opresult17638 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(4));
                                                                                // call case 6: other requests
                                                                                var call17639 = callmethodChecked(var_a, "pretty(1)", [1], opresult17638);
                                                                                var string17641 = new GraceString("");
                                                                                var string17644 = new GraceString("\n    ");
                                                                                var string17647 = new GraceString("");
                                                                                var opresult17649 = callmethodChecked(string17647, "++(1)", [1], var_s);
                                                                                var opresult17651 = callmethodChecked(opresult17649, "++(1)", [1], string17644);
                                                                                var opresult17653 = callmethodChecked(opresult17651, "++(1)", [1], var_spc);
                                                                                var opresult17655 = callmethodChecked(opresult17653, "++(1)", [1], string17641);
                                                                                var opresult17657 = callmethodChecked(opresult17655, "++(1)", [1], call17639);
                                                                                var opresult17659 = callmethodChecked(opresult17657, "++(1)", [1], string17633);
                                                                                var_s = opresult17659;
                                                                                return GraceDone;
                                                                              };
                                                                              // call case 5: prelude request
                                                                              var call17660 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call17631, block17632);
                                                                              setLineNumber(2685);    // compilenode identifier
                                                                              return var_s;
                                                                            };
                                                                            func17583.paramCounts = [1];
                                                                            obj17497.methods["pretty(1)"] = func17583;
                                                                            func17583.definitionLine = 2675;
                                                                            func17583.definitionModule = "ast";
                                                                            var func17661 = function(argcv) {    // method toGrace(_)
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              var var_depth = arguments[curarg];
                                                                              curarg++;
                                                                              setModuleName("ast");
                                                                              setLineNumber(2688);    // compilenode member
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call17663 = callmethodChecked(this, "name", []);
                                                                              var var_s = call17663;
                                                                              var if17664 = GraceDone;
                                                                              setLineNumber(2689);    // compilenode member
                                                                              // call case 6: other requests
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call17668 = callmethodChecked(this, "typeArgs", []);
                                                                              var call17669 = callmethodChecked(call17668, "size", []);
                                                                              var opresult17671 = callmethodChecked(call17669, ">(1)", [1], new GraceNum(0));
                                                                              if (Grace_isTrue(opresult17671)) {
                                                                                setLineNumber(2690);    // compilenode string
                                                                                var string17672 = new GraceString("\u27e6");
                                                                                var opresult17675 = callmethodChecked(var_s, "++(1)", [1], string17672);
                                                                                var_s = opresult17675;
                                                                                setLineNumber(2691);    // compilenode block
                                                                                var block17677 = new GraceBlock(this, 2691, 1);
                                                                                setLineNumber(1);    // compilenode identifier
                                                                                block17677.real = function(var_tArg) {
                                                                                  setLineNumber(2692);    // compilenode identifier
                                                                                  var opresult17681 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                                                                  // call case 6: other requests
                                                                                  var call17682 = callmethodChecked(var_tArg, "toGrace(1)", [1], opresult17681);
                                                                                  var opresult17685 = callmethodChecked(var_s, "++(1)", [1], call17682);
                                                                                  var_s = opresult17685;
                                                                                  return GraceDone;
                                                                                };
                                                                                setLineNumber(2693);    // compilenode block
                                                                                var block17686 = new GraceBlock(this, 2693, 0);
                                                                                block17686.real = function() {
                                                                                  var string17687 = new GraceString(", ");
                                                                                  var opresult17690 = callmethodChecked(var_s, "++(1)", [1], string17687);
                                                                                  var_s = opresult17690;
                                                                                  return GraceDone;
                                                                                };
                                                                                // call case 6: other requests
                                                                                setLineNumber(2691);    // compilenode member
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call17692 = callmethodChecked(this, "typeArgs", []);
                                                                                var call17693 = callmethodChecked(call17692, "do(1)separatedBy(1)", [1, 1], block17677, block17686);
                                                                                setLineNumber(2694);    // compilenode string
                                                                                var string17694 = new GraceString("\u27e7");
                                                                                var opresult17697 = callmethodChecked(var_s, "++(1)", [1], string17694);
                                                                                var_s = opresult17697;
                                                                                if17664 = GraceDone;
                                                                              }
                                                                              var if17698 = GraceDone;
                                                                              setLineNumber(2696);    // compilenode member
                                                                              // call case 6: other requests
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call17702 = callmethodChecked(this, "args", []);
                                                                              var call17703 = callmethodChecked(call17702, "size", []);
                                                                              var opresult17705 = callmethodChecked(call17703, ">(1)", [1], new GraceNum(0));
                                                                              if (Grace_isTrue(opresult17705)) {
                                                                                setLineNumber(2697);    // compilenode member
                                                                                // call case 6: other requests
                                                                                // call case 6: other requests
                                                                                // call case 6: other requests
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call17710 = callmethodChecked(this, "args", []);
                                                                                var call17711 = callmethodChecked(call17710, "first", []);
                                                                                var call17712 = callmethodChecked(call17711, "isDelimited", []);
                                                                                var call17713 = callmethodChecked(call17712, "not", []);
                                                                                // call case 6: other requests
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call17718 = callmethodChecked(this, "args", []);
                                                                                var call17719 = callmethodChecked(call17718, "size", []);
                                                                                var opresult17721 = callmethodChecked(call17719, ">(1)", [1], new GraceNum(1));
                                                                                var opresult17723 = callmethodChecked(opresult17721, "||(1)", [1], call17713);
                                                                                var var_needsParens = opresult17723;
                                                                                var if17724 = GraceDone;
                                                                                setLineNumber(2698);    // compilenode identifier
                                                                                if (Grace_isTrue(var_needsParens)) {
                                                                                  var string17725 = new GraceString("(");
                                                                                  if17724 = string17725;
                                                                                } else {
                                                                                  var string17726 = new GraceString(" ");
                                                                                  if17724 = string17726;
                                                                                }
                                                                                var opresult17729 = callmethodChecked(var_s, "++(1)", [1], if17724);
                                                                                var_s = opresult17729;
                                                                                setLineNumber(2699);    // compilenode block
                                                                                var block17731 = new GraceBlock(this, 2699, 1);
                                                                                setLineNumber(1);    // compilenode identifier
                                                                                block17731.real = function(var_arg) {
                                                                                  setLineNumber(2700);    // compilenode identifier
                                                                                  // call case 6: other requests
                                                                                  var call17733 = callmethodChecked(var_arg, "toGrace(1)", [1], var_depth);
                                                                                  var opresult17736 = callmethodChecked(var_s, "++(1)", [1], call17733);
                                                                                  var_s = opresult17736;
                                                                                  return GraceDone;
                                                                                };
                                                                                setLineNumber(2701);    // compilenode block
                                                                                var block17737 = new GraceBlock(this, 2701, 0);
                                                                                block17737.real = function() {
                                                                                  setLineNumber(2702);    // compilenode string
                                                                                  var string17738 = new GraceString(", ");
                                                                                  var opresult17741 = callmethodChecked(var_s, "++(1)", [1], string17738);
                                                                                  var_s = opresult17741;
                                                                                  return GraceDone;
                                                                                };
                                                                                // call case 6: other requests
                                                                                setLineNumber(2699);    // compilenode member
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call17743 = callmethodChecked(this, "args", []);
                                                                                var call17744 = callmethodChecked(call17743, "do(1)separatedBy(1)", [1, 1], block17731, block17737);
                                                                                var if17745 = GraceDone;
                                                                                setLineNumber(2704);    // compilenode identifier
                                                                                if (Grace_isTrue(var_needsParens)) {
                                                                                  var string17746 = new GraceString(")");
                                                                                  var opresult17749 = callmethodChecked(var_s, "++(1)", [1], string17746);
                                                                                  var_s = opresult17749;
                                                                                  if17745 = GraceDone;
                                                                                }
                                                                                if17698 = if17745;
                                                                              }
                                                                              setLineNumber(2706);    // compilenode identifier
                                                                              return var_s;
                                                                            };
                                                                            func17661.paramCounts = [1];
                                                                            obj17497.methods["toGrace(1)"] = func17661;
                                                                            func17661.definitionLine = 2687;
                                                                            func17661.definitionModule = "ast";
                                                                            var func17750 = function(argcv) {    // method shallowCopy
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              setModuleName("ast");
                                                                              setLineNumber(2710);    // compilenode identifier
                                                                              // call case 6: other requests
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call17754 = callmethodChecked(this, "name", []);
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call17756 = callmethodChecked(this, "args", []);
                                                                              // call case 6: other requests
                                                                              var call17757 = callmethodChecked(var_requestPart, "request(1)withArgs(1)", [1, 1], call17754, call17756);
                                                                              var call17758 = callmethodChecked(call17757, "shallowCopyFieldsFrom(1)", [1], this);
                                                                              return call17758;
                                                                            };
                                                                            func17750.paramCounts = [0];
                                                                            obj17497.methods["shallowCopy"] = func17750;
                                                                            func17750.definitionLine = 2709;
                                                                            func17750.definitionModule = "ast";
                                                                            var func17759 = function(argcv) {    // method shallowCopyFieldsFrom(_)
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              var var_other = arguments[curarg];
                                                                              curarg++;
                                                                              setModuleName("ast");
                                                                              setLineNumber(2713);    // compilenode identifier
                                                                              // call case 1: super request
                                                                              var call17761 = callmethodsuper(this, "shallowCopyFieldsFrom(1)", [1], var_other);
                                                                              setLineNumber(2714);    // compilenode member
                                                                              // call case 6: other requests
                                                                              var call17764 = callmethodChecked(var_other, "lineLength", []);
                                                                              // call case 4: self request
                                                                              onSelf = true;
                                                                              var call17765 = callmethodChecked(this, "lineLength:=(1)", [1], call17764);
                                                                              setLineNumber(2715);    // compilenode identifier
                                                                              return this;
                                                                            };
                                                                            func17759.paramCounts = [1];
                                                                            obj17497.methods["shallowCopyFieldsFrom(1)"] = func17759;
                                                                            func17759.definitionLine = 2712;
                                                                            func17759.definitionModule = "ast";
                                                                            var func17766 = function(argcv) {    // method statementName
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              setModuleName("ast");
                                                                              setLineNumber(2717);    // compilenode string
                                                                              var string17767 = new GraceString("request");
                                                                              return string17767;
                                                                            };
                                                                            func17766.paramCounts = [0];
                                                                            obj17497.methods["statementName"] = func17766;
                                                                            func17766.definitionLine = 2717;
                                                                            func17766.definitionModule = "ast";
                                                                            setLineNumber(2649);    // compilenode identifier
                                                                            // call case 6: other requests
                                                                            // call case 6: other requests
                                                                            // call case 3: self.outer request
                                                                            var call17771 = callmethodChecked(superDepth, "outer", [0]);
                                                                            var call17772 = callmethodChecked(call17771, "outer", []);
                                                                            var call17773 = callmethodChecked(call17772, "baseNode$object(1)", [0, 1], this);
                                                                            obj17497.superobj = call17773;
                                                                            if (call17773.data) obj17497.data = call17773.data;
                                                                            if (call17773.hasOwnProperty('_value'))
                                                                                obj17497._value = call17773._value;
                                                                            setLineNumber(2650);    // compilenode string
                                                                            var string17774 = new GraceString("callwithpart");
                                                                            obj17497.data["kind"] = string17774;
                                                                            var reader_ast_kind17775 = function() {
                                                                              return this.data["kind"];
                                                                            };
                                                                            reader_ast_kind17775.def = true;
                                                                            obj17497.methods["kind"] = reader_ast_kind17775;
                                                                            setLineNumber(2651);    // compilenode identifier
                                                                            obj17497.data["name"] = var_rPart;
                                                                            var reader_ast_name17776 = function() {
                                                                              return this.data["name"];
                                                                            };
                                                                            obj17497.methods["name"] = reader_ast_name17776;
                                                                            obj17497.data["name"] = var_rPart;
                                                                            var writer_ast_name17776 = function(argcv, o) {
                                                                              this.data["name"] = o;
                                                                              return GraceDone;
                                                                            };
                                                                            obj17497.methods["name:=(1)"] = writer_ast_name17776;
                                                                            obj17497.mutable = true;
                                                                            setLineNumber(2652);    // compilenode identifier
                                                                            obj17497.data["args"] = var_xs;
                                                                            var reader_ast_args17777 = function() {
                                                                              return this.data["args"];
                                                                            };
                                                                            obj17497.methods["args"] = reader_ast_args17777;
                                                                            obj17497.data["args"] = var_xs;
                                                                            var writer_ast_args17777 = function(argcv, o) {
                                                                              this.data["args"] = o;
                                                                              return GraceDone;
                                                                            };
                                                                            obj17497.methods["args:=(1)"] = writer_ast_args17777;
                                                                            obj17497.mutable = true;
                                                                            setLineNumber(2653);    // compilenode identifier
                                                                            obj17497.data["typeArgs"] = var_emptySeq;
                                                                            var reader_ast_typeArgs17778 = function() {
                                                                              return this.data["typeArgs"];
                                                                            };
                                                                            obj17497.methods["typeArgs"] = reader_ast_typeArgs17778;
                                                                            obj17497.data["typeArgs"] = var_emptySeq;
                                                                            var writer_ast_typeArgs17778 = function(argcv, o) {
                                                                              this.data["typeArgs"] = o;
                                                                              return GraceDone;
                                                                            };
                                                                            obj17497.methods["typeArgs:=(1)"] = writer_ast_typeArgs17778;
                                                                            reader_ast_typeArgs17778.confidential = true;
                                                                            writer_ast_typeArgs17778.confidential = true;
                                                                            obj17497.mutable = true;
                                                                            setLineNumber(2654);    // compilenode num
                                                                            obj17497.data["lineLength"] = new GraceNum(0);
                                                                            var reader_ast_lineLength17779 = function() {
                                                                              return this.data["lineLength"];
                                                                            };
                                                                            obj17497.methods["lineLength"] = reader_ast_lineLength17779;
                                                                            obj17497.data["lineLength"] = new GraceNum(0);
                                                                            var writer_ast_lineLength17779 = function(argcv, o) {
                                                                              this.data["lineLength"] = o;
                                                                              return GraceDone;
                                                                            };
                                                                            obj17497.methods["lineLength:=(1)"] = writer_ast_lineLength17779;
                                                                            obj17497.mutable = true;
                                                                            superDepth = origSuperDepth;
                                                                          };
                                                                          obj_init_17497.apply(obj17497, []);
                                                                          return obj17497;
                                                                        };
                                                                        func17496.paramCounts = [1, 1];
                                                                        obj17484.methods["request(1)withArgs(1)"] = func17496;
                                                                        func17496.definitionLine = 2648;
                                                                        func17496.definitionModule = "ast";
                                                                          var func17780 = function(argcv) {    // method request(_)withArgs(_)$object(_)
                                                                            var curarg = 1;
                                                                            var var_rPart = arguments[curarg];
                                                                            curarg++;
                                                                            var var_xs = arguments[curarg];
                                                                            curarg++;
                                                                            var inheritingObject = arguments[curarg++];
                                                                            // Start argument processing
                                                                            curarg = 1;
                                                                            curarg++;
                                                                            curarg++;
                                                                            // End argument processing
                                                                            setModuleName("ast");
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var obj17781 = Grace_allocObject(null, "request(1)withArgs(1)");
                                                                            obj17781.definitionModule = "ast";
                                                                            obj17781.definitionLine = 2648;
                                                                            var inho17781 = inheritingObject;
                                                                            while (inho17781.superobj) inho17781 = inho17781.superobj;
                                                                            inho17781.superobj = obj17781;
                                                                            obj17781.data = inheritingObject.data;
                                                                            if (inheritingObject.hasOwnProperty('_value'))
                                                                              obj17781._value = inheritingObject._value;
                                                                            obj17781.outer = this;
                                                                            var reader_ast_outer17782 = function() {
                                                                              return this.outer;
                                                                            };
                                                                            obj17781.methods["outer"] = reader_ast_outer17782;
                                                                            var obj_init_17781 = function() {
                                                                              var origSuperDepth = superDepth;
                                                                              superDepth = obj17781;
                                                                              var func17783 = function(argcv) {    // method nameString
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                setModuleName("ast");
                                                                                var if17784 = GraceDone;
                                                                                setLineNumber(2657);    // compilenode member
                                                                                // call case 6: other requests
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call17788 = callmethodChecked(this, "args", []);
                                                                                var call17789 = callmethodChecked(call17788, "size", []);
                                                                                var opresult17791 = callmethodChecked(call17789, "==(1)", [1], new GraceNum(0));
                                                                                if (Grace_isTrue(opresult17791)) {
                                                                                  // call case 4: self request
                                                                                  onSelf = true;
                                                                                  var call17793 = callmethodChecked(this, "name", []);
                                                                                  return call17793;
                                                                                }
                                                                                setLineNumber(2658);    // compilenode string
                                                                                var string17794 = new GraceString(")");
                                                                                // call case 6: other requests
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call17798 = callmethodChecked(this, "args", []);
                                                                                var call17799 = callmethodChecked(call17798, "size", []);
                                                                                var string17801 = new GraceString("(");
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call17804 = callmethodChecked(this, "name", []);
                                                                                var opresult17806 = callmethodChecked(call17804, "++(1)", [1], string17801);
                                                                                var opresult17808 = callmethodChecked(opresult17806, "++(1)", [1], call17799);
                                                                                var opresult17810 = callmethodChecked(opresult17808, "++(1)", [1], string17794);
                                                                                return opresult17810;
                                                                              };
                                                                              func17783.paramCounts = [0];
                                                                              obj17781.methods["nameString"] = func17783;
                                                                              func17783.definitionLine = 2656;
                                                                              func17783.definitionModule = "ast";
                                                                              var func17811 = function(argcv) {    // method canonicalName
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                setModuleName("ast");
                                                                                var if17812 = GraceDone;
                                                                                setLineNumber(2662);    // compilenode member
                                                                                // call case 6: other requests
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call17816 = callmethodChecked(this, "args", []);
                                                                                var call17817 = callmethodChecked(call17816, "size", []);
                                                                                var opresult17819 = callmethodChecked(call17817, "==(1)", [1], new GraceNum(0));
                                                                                if (Grace_isTrue(opresult17819)) {
                                                                                  // call case 4: self request
                                                                                  onSelf = true;
                                                                                  var call17821 = callmethodChecked(this, "name", []);
                                                                                  return call17821;
                                                                                }
                                                                                setLineNumber(2663);    // compilenode string
                                                                                var string17822 = new GraceString("");
                                                                                var var_underScores = string17822;
                                                                                setLineNumber(2664);    // compilenode block
                                                                                var block17824 = new GraceBlock(this, 2664, 1);
                                                                                setLineNumber(1);    // compilenode identifier
                                                                                block17824.real = function(var___95____95__4) {
                                                                                  setLineNumber(2664);    // compilenode string
                                                                                  var string17825 = new GraceString("_");
                                                                                  var opresult17828 = callmethodChecked(var_underScores, "++(1)", [1], string17825);
                                                                                  var_underScores = opresult17828;
                                                                                  return GraceDone;
                                                                                };
                                                                                setLineNumber(2665);    // compilenode block
                                                                                var block17829 = new GraceBlock(this, 2665, 0);
                                                                                block17829.real = function() {
                                                                                  var string17830 = new GraceString(",");
                                                                                  var opresult17833 = callmethodChecked(var_underScores, "++(1)", [1], string17830);
                                                                                  var_underScores = opresult17833;
                                                                                  return GraceDone;
                                                                                };
                                                                                // call case 6: other requests
                                                                                setLineNumber(2664);    // compilenode member
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call17835 = callmethodChecked(this, "args", []);
                                                                                var call17836 = callmethodChecked(call17835, "do(1)separatedBy(1)", [1, 1], block17824, block17829);
                                                                                setLineNumber(2666);    // compilenode string
                                                                                var string17837 = new GraceString(")");
                                                                                var string17840 = new GraceString("(");
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call17843 = callmethodChecked(this, "name", []);
                                                                                var opresult17845 = callmethodChecked(call17843, "++(1)", [1], string17840);
                                                                                var opresult17847 = callmethodChecked(opresult17845, "++(1)", [1], var_underScores);
                                                                                var opresult17849 = callmethodChecked(opresult17847, "++(1)", [1], string17837);
                                                                                return opresult17849;
                                                                              };
                                                                              func17811.paramCounts = [0];
                                                                              obj17781.methods["canonicalName"] = func17811;
                                                                              func17811.definitionLine = 2661;
                                                                              func17811.definitionModule = "ast";
                                                                              var func17850 = function(argcv) {    // method map(_)ancestors(_)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_blk = arguments[curarg];
                                                                                curarg++;
                                                                                var var_as = arguments[curarg];
                                                                                curarg++;
                                                                                setModuleName("ast");
                                                                                setLineNumber(2670);    // compilenode member
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call17852 = callmethodChecked(this, "shallowCopy", []);
                                                                                var var_n = call17852;
                                                                                setLineNumber(2671);    // compilenode identifier
                                                                                // call case 6: other requests
                                                                                var call17854 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                                                                var var_newChain = call17854;
                                                                                setLineNumber(2672);    // compilenode member
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call17858 = callmethodChecked(this, "args", []);
                                                                                // call case 6: other requests
                                                                                // call case 6: other requests
                                                                                // call case 3: self.outer request
                                                                                var call17861 = callmethodChecked(superDepth, "outer", [0]);
                                                                                var call17862 = callmethodChecked(call17861, "outer", []);
                                                                                onSelf = true;
                                                                                var call17863 = callmethodChecked(call17862, "listMap(2)ancestors(1)", [2, 1], call17858, var_blk, var_newChain);
                                                                                // call case 6: other requests
                                                                                var call17864 = callmethodChecked(var_n, "args:=(1)", [1], call17863);
                                                                                setLineNumber(2673);    // compilenode identifier
                                                                                // call case 6: other requests
                                                                                var call17866 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                                                                return call17866;
                                                                              };
                                                                              func17850.paramCounts = [1, 1];
                                                                              obj17781.methods["map(1)ancestors(1)"] = func17850;
                                                                              func17850.definitionLine = 2669;
                                                                              func17850.definitionModule = "ast";
                                                                              var func17867 = function(argcv) {    // method pretty(_)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_depth = arguments[curarg];
                                                                                curarg++;
                                                                                setModuleName("ast");
                                                                                setLineNumber(2676);    // compilenode string
                                                                                var string17868 = new GraceString("");
                                                                                var var_spc = string17868;
                                                                                setLineNumber(2677);    // compilenode identifier
                                                                                var opresult17872 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                                                                var block17873 = new GraceBlock(this, 2677, 0);
                                                                                block17873.real = function() {
                                                                                  setLineNumber(2678);    // compilenode string
                                                                                  var string17874 = new GraceString("  ");
                                                                                  var opresult17877 = callmethodChecked(var_spc, "++(1)", [1], string17874);
                                                                                  var_spc = opresult17877;
                                                                                  return GraceDone;
                                                                                };
                                                                                // call case 5: prelude request
                                                                                var call17878 = callmethodChecked(var_prelude, "repeat(1)times(1)", [1, 1], opresult17872, block17873);
                                                                                setLineNumber(2680);    // compilenode string
                                                                                var string17879 = new GraceString("");
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call17882 = callmethodChecked(this, "name", []);
                                                                                var string17884 = new GraceString(": ");
                                                                                // call case 1: super request
                                                                                var call17887 = callmethodsuper(this, "pretty(1)", [1], var_depth);
                                                                                var string17889 = new GraceString("");
                                                                                var opresult17891 = callmethodChecked(string17889, "++(1)", [1], call17887);
                                                                                var opresult17893 = callmethodChecked(opresult17891, "++(1)", [1], string17884);
                                                                                var opresult17895 = callmethodChecked(opresult17893, "++(1)", [1], call17882);
                                                                                var opresult17897 = callmethodChecked(opresult17895, "++(1)", [1], string17879);
                                                                                var var_s = opresult17897;
                                                                                setLineNumber(2681);    // compilenode string
                                                                                var string17898 = new GraceString("Args:");
                                                                                var string17901 = new GraceString("\n    ");
                                                                                var string17904 = new GraceString("");
                                                                                var opresult17906 = callmethodChecked(string17904, "++(1)", [1], var_s);
                                                                                var opresult17908 = callmethodChecked(opresult17906, "++(1)", [1], string17901);
                                                                                var opresult17910 = callmethodChecked(opresult17908, "++(1)", [1], var_spc);
                                                                                var opresult17912 = callmethodChecked(opresult17910, "++(1)", [1], string17898);
                                                                                var_s = opresult17912;
                                                                                setLineNumber(2682);    // compilenode member
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call17915 = callmethodChecked(this, "args", []);
                                                                                var block17916 = new GraceBlock(this, 2682, 1);
                                                                                setLineNumber(1);    // compilenode identifier
                                                                                block17916.real = function(var_a) {
                                                                                  setLineNumber(2683);    // compilenode string
                                                                                  var string17917 = new GraceString("");
                                                                                  var opresult17922 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(4));
                                                                                  // call case 6: other requests
                                                                                  var call17923 = callmethodChecked(var_a, "pretty(1)", [1], opresult17922);
                                                                                  var string17925 = new GraceString("");
                                                                                  var string17928 = new GraceString("\n    ");
                                                                                  var string17931 = new GraceString("");
                                                                                  var opresult17933 = callmethodChecked(string17931, "++(1)", [1], var_s);
                                                                                  var opresult17935 = callmethodChecked(opresult17933, "++(1)", [1], string17928);
                                                                                  var opresult17937 = callmethodChecked(opresult17935, "++(1)", [1], var_spc);
                                                                                  var opresult17939 = callmethodChecked(opresult17937, "++(1)", [1], string17925);
                                                                                  var opresult17941 = callmethodChecked(opresult17939, "++(1)", [1], call17923);
                                                                                  var opresult17943 = callmethodChecked(opresult17941, "++(1)", [1], string17917);
                                                                                  var_s = opresult17943;
                                                                                  return GraceDone;
                                                                                };
                                                                                // call case 5: prelude request
                                                                                var call17944 = callmethodChecked(var_prelude, "for(1)do(1)", [1, 1], call17915, block17916);
                                                                                setLineNumber(2685);    // compilenode identifier
                                                                                return var_s;
                                                                              };
                                                                              func17867.paramCounts = [1];
                                                                              obj17781.methods["pretty(1)"] = func17867;
                                                                              func17867.definitionLine = 2675;
                                                                              func17867.definitionModule = "ast";
                                                                              var func17945 = function(argcv) {    // method toGrace(_)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_depth = arguments[curarg];
                                                                                curarg++;
                                                                                setModuleName("ast");
                                                                                setLineNumber(2688);    // compilenode member
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call17947 = callmethodChecked(this, "name", []);
                                                                                var var_s = call17947;
                                                                                var if17948 = GraceDone;
                                                                                setLineNumber(2689);    // compilenode member
                                                                                // call case 6: other requests
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call17952 = callmethodChecked(this, "typeArgs", []);
                                                                                var call17953 = callmethodChecked(call17952, "size", []);
                                                                                var opresult17955 = callmethodChecked(call17953, ">(1)", [1], new GraceNum(0));
                                                                                if (Grace_isTrue(opresult17955)) {
                                                                                  setLineNumber(2690);    // compilenode string
                                                                                  var string17956 = new GraceString("\u27e6");
                                                                                  var opresult17959 = callmethodChecked(var_s, "++(1)", [1], string17956);
                                                                                  var_s = opresult17959;
                                                                                  setLineNumber(2691);    // compilenode block
                                                                                  var block17961 = new GraceBlock(this, 2691, 1);
                                                                                  setLineNumber(1);    // compilenode identifier
                                                                                  block17961.real = function(var_tArg) {
                                                                                    setLineNumber(2692);    // compilenode identifier
                                                                                    var opresult17965 = callmethodChecked(var_depth, "+(1)", [1], new GraceNum(1));
                                                                                    // call case 6: other requests
                                                                                    var call17966 = callmethodChecked(var_tArg, "toGrace(1)", [1], opresult17965);
                                                                                    var opresult17969 = callmethodChecked(var_s, "++(1)", [1], call17966);
                                                                                    var_s = opresult17969;
                                                                                    return GraceDone;
                                                                                  };
                                                                                  setLineNumber(2693);    // compilenode block
                                                                                  var block17970 = new GraceBlock(this, 2693, 0);
                                                                                  block17970.real = function() {
                                                                                    var string17971 = new GraceString(", ");
                                                                                    var opresult17974 = callmethodChecked(var_s, "++(1)", [1], string17971);
                                                                                    var_s = opresult17974;
                                                                                    return GraceDone;
                                                                                  };
                                                                                  // call case 6: other requests
                                                                                  setLineNumber(2691);    // compilenode member
                                                                                  // call case 4: self request
                                                                                  onSelf = true;
                                                                                  var call17976 = callmethodChecked(this, "typeArgs", []);
                                                                                  var call17977 = callmethodChecked(call17976, "do(1)separatedBy(1)", [1, 1], block17961, block17970);
                                                                                  setLineNumber(2694);    // compilenode string
                                                                                  var string17978 = new GraceString("\u27e7");
                                                                                  var opresult17981 = callmethodChecked(var_s, "++(1)", [1], string17978);
                                                                                  var_s = opresult17981;
                                                                                  if17948 = GraceDone;
                                                                                }
                                                                                var if17982 = GraceDone;
                                                                                setLineNumber(2696);    // compilenode member
                                                                                // call case 6: other requests
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call17986 = callmethodChecked(this, "args", []);
                                                                                var call17987 = callmethodChecked(call17986, "size", []);
                                                                                var opresult17989 = callmethodChecked(call17987, ">(1)", [1], new GraceNum(0));
                                                                                if (Grace_isTrue(opresult17989)) {
                                                                                  setLineNumber(2697);    // compilenode member
                                                                                  // call case 6: other requests
                                                                                  // call case 6: other requests
                                                                                  // call case 6: other requests
                                                                                  // call case 4: self request
                                                                                  onSelf = true;
                                                                                  var call17994 = callmethodChecked(this, "args", []);
                                                                                  var call17995 = callmethodChecked(call17994, "first", []);
                                                                                  var call17996 = callmethodChecked(call17995, "isDelimited", []);
                                                                                  var call17997 = callmethodChecked(call17996, "not", []);
                                                                                  // call case 6: other requests
                                                                                  // call case 4: self request
                                                                                  onSelf = true;
                                                                                  var call18002 = callmethodChecked(this, "args", []);
                                                                                  var call18003 = callmethodChecked(call18002, "size", []);
                                                                                  var opresult18005 = callmethodChecked(call18003, ">(1)", [1], new GraceNum(1));
                                                                                  var opresult18007 = callmethodChecked(opresult18005, "||(1)", [1], call17997);
                                                                                  var var_needsParens = opresult18007;
                                                                                  var if18008 = GraceDone;
                                                                                  setLineNumber(2698);    // compilenode identifier
                                                                                  if (Grace_isTrue(var_needsParens)) {
                                                                                    var string18009 = new GraceString("(");
                                                                                    if18008 = string18009;
                                                                                  } else {
                                                                                    var string18010 = new GraceString(" ");
                                                                                    if18008 = string18010;
                                                                                  }
                                                                                  var opresult18013 = callmethodChecked(var_s, "++(1)", [1], if18008);
                                                                                  var_s = opresult18013;
                                                                                  setLineNumber(2699);    // compilenode block
                                                                                  var block18015 = new GraceBlock(this, 2699, 1);
                                                                                  setLineNumber(1);    // compilenode identifier
                                                                                  block18015.real = function(var_arg) {
                                                                                    setLineNumber(2700);    // compilenode identifier
                                                                                    // call case 6: other requests
                                                                                    var call18017 = callmethodChecked(var_arg, "toGrace(1)", [1], var_depth);
                                                                                    var opresult18020 = callmethodChecked(var_s, "++(1)", [1], call18017);
                                                                                    var_s = opresult18020;
                                                                                    return GraceDone;
                                                                                  };
                                                                                  setLineNumber(2701);    // compilenode block
                                                                                  var block18021 = new GraceBlock(this, 2701, 0);
                                                                                  block18021.real = function() {
                                                                                    setLineNumber(2702);    // compilenode string
                                                                                    var string18022 = new GraceString(", ");
                                                                                    var opresult18025 = callmethodChecked(var_s, "++(1)", [1], string18022);
                                                                                    var_s = opresult18025;
                                                                                    return GraceDone;
                                                                                  };
                                                                                  // call case 6: other requests
                                                                                  setLineNumber(2699);    // compilenode member
                                                                                  // call case 4: self request
                                                                                  onSelf = true;
                                                                                  var call18027 = callmethodChecked(this, "args", []);
                                                                                  var call18028 = callmethodChecked(call18027, "do(1)separatedBy(1)", [1, 1], block18015, block18021);
                                                                                  var if18029 = GraceDone;
                                                                                  setLineNumber(2704);    // compilenode identifier
                                                                                  if (Grace_isTrue(var_needsParens)) {
                                                                                    var string18030 = new GraceString(")");
                                                                                    var opresult18033 = callmethodChecked(var_s, "++(1)", [1], string18030);
                                                                                    var_s = opresult18033;
                                                                                    if18029 = GraceDone;
                                                                                  }
                                                                                  if17982 = if18029;
                                                                                }
                                                                                setLineNumber(2706);    // compilenode identifier
                                                                                return var_s;
                                                                              };
                                                                              func17945.paramCounts = [1];
                                                                              obj17781.methods["toGrace(1)"] = func17945;
                                                                              func17945.definitionLine = 2687;
                                                                              func17945.definitionModule = "ast";
                                                                              var func18034 = function(argcv) {    // method shallowCopy
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                setModuleName("ast");
                                                                                setLineNumber(2710);    // compilenode identifier
                                                                                // call case 6: other requests
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call18038 = callmethodChecked(this, "name", []);
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call18040 = callmethodChecked(this, "args", []);
                                                                                // call case 6: other requests
                                                                                var call18041 = callmethodChecked(var_requestPart, "request(1)withArgs(1)", [1, 1], call18038, call18040);
                                                                                var call18042 = callmethodChecked(call18041, "shallowCopyFieldsFrom(1)", [1], this);
                                                                                return call18042;
                                                                              };
                                                                              func18034.paramCounts = [0];
                                                                              obj17781.methods["shallowCopy"] = func18034;
                                                                              func18034.definitionLine = 2709;
                                                                              func18034.definitionModule = "ast";
                                                                              var func18043 = function(argcv) {    // method shallowCopyFieldsFrom(_)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_other = arguments[curarg];
                                                                                curarg++;
                                                                                setModuleName("ast");
                                                                                setLineNumber(2713);    // compilenode identifier
                                                                                // call case 1: super request
                                                                                var call18045 = callmethodsuper(this, "shallowCopyFieldsFrom(1)", [1], var_other);
                                                                                setLineNumber(2714);    // compilenode member
                                                                                // call case 6: other requests
                                                                                var call18048 = callmethodChecked(var_other, "lineLength", []);
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call18049 = callmethodChecked(this, "lineLength:=(1)", [1], call18048);
                                                                                setLineNumber(2715);    // compilenode identifier
                                                                                return this;
                                                                              };
                                                                              func18043.paramCounts = [1];
                                                                              obj17781.methods["shallowCopyFieldsFrom(1)"] = func18043;
                                                                              func18043.definitionLine = 2712;
                                                                              func18043.definitionModule = "ast";
                                                                              var func18050 = function(argcv) {    // method statementName
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                setModuleName("ast");
                                                                                setLineNumber(2717);    // compilenode string
                                                                                var string18051 = new GraceString("request");
                                                                                return string18051;
                                                                              };
                                                                              func18050.paramCounts = [0];
                                                                              obj17781.methods["statementName"] = func18050;
                                                                              func18050.definitionLine = 2717;
                                                                              func18050.definitionModule = "ast";
                                                                              setLineNumber(2649);    // compilenode identifier
                                                                              // call case 6: other requests
                                                                              // call case 6: other requests
                                                                              // call case 3: self.outer request
                                                                              var call18055 = callmethodChecked(superDepth, "outer", [0]);
                                                                              var call18056 = callmethodChecked(call18055, "outer", []);
                                                                              var call18057 = callmethodChecked(call18056, "baseNode$object(1)", [0, 1], this);
                                                                              obj17781.superobj = call18057;
                                                                              if (call18057.data) obj17781.data = call18057.data;
                                                                              if (call18057.hasOwnProperty('_value'))
                                                                                  obj17781._value = call18057._value;
                                                                              setLineNumber(2650);    // compilenode string
                                                                              var string18058 = new GraceString("callwithpart");
                                                                              obj17781.data["kind"] = string18058;
                                                                              var reader_ast_kind18059 = function() {
                                                                                return this.data["kind"];
                                                                              };
                                                                              reader_ast_kind18059.def = true;
                                                                              obj17781.methods["kind"] = reader_ast_kind18059;
                                                                              setLineNumber(2651);    // compilenode identifier
                                                                              obj17781.data["name"] = var_rPart;
                                                                              var reader_ast_name18060 = function() {
                                                                                return this.data["name"];
                                                                              };
                                                                              obj17781.methods["name"] = reader_ast_name18060;
                                                                              obj17781.data["name"] = var_rPart;
                                                                              var writer_ast_name18060 = function(argcv, o) {
                                                                                this.data["name"] = o;
                                                                                return GraceDone;
                                                                              };
                                                                              obj17781.methods["name:=(1)"] = writer_ast_name18060;
                                                                              obj17781.mutable = true;
                                                                              setLineNumber(2652);    // compilenode identifier
                                                                              obj17781.data["args"] = var_xs;
                                                                              var reader_ast_args18061 = function() {
                                                                                return this.data["args"];
                                                                              };
                                                                              obj17781.methods["args"] = reader_ast_args18061;
                                                                              obj17781.data["args"] = var_xs;
                                                                              var writer_ast_args18061 = function(argcv, o) {
                                                                                this.data["args"] = o;
                                                                                return GraceDone;
                                                                              };
                                                                              obj17781.methods["args:=(1)"] = writer_ast_args18061;
                                                                              obj17781.mutable = true;
                                                                              setLineNumber(2653);    // compilenode identifier
                                                                              obj17781.data["typeArgs"] = var_emptySeq;
                                                                              var reader_ast_typeArgs18062 = function() {
                                                                                return this.data["typeArgs"];
                                                                              };
                                                                              obj17781.methods["typeArgs"] = reader_ast_typeArgs18062;
                                                                              obj17781.data["typeArgs"] = var_emptySeq;
                                                                              var writer_ast_typeArgs18062 = function(argcv, o) {
                                                                                this.data["typeArgs"] = o;
                                                                                return GraceDone;
                                                                              };
                                                                              obj17781.methods["typeArgs:=(1)"] = writer_ast_typeArgs18062;
                                                                              reader_ast_typeArgs18062.confidential = true;
                                                                              writer_ast_typeArgs18062.confidential = true;
                                                                              obj17781.mutable = true;
                                                                              setLineNumber(2654);    // compilenode num
                                                                              obj17781.data["lineLength"] = new GraceNum(0);
                                                                              var reader_ast_lineLength18063 = function() {
                                                                                return this.data["lineLength"];
                                                                              };
                                                                              obj17781.methods["lineLength"] = reader_ast_lineLength18063;
                                                                              obj17781.data["lineLength"] = new GraceNum(0);
                                                                              var writer_ast_lineLength18063 = function(argcv, o) {
                                                                                this.data["lineLength"] = o;
                                                                                return GraceDone;
                                                                              };
                                                                              obj17781.methods["lineLength:=(1)"] = writer_ast_lineLength18063;
                                                                              obj17781.mutable = true;
                                                                              superDepth = origSuperDepth;
                                                                            };
                                                                            obj_init_17781.apply(inheritingObject, []);
                                                                            return obj17781;
                                                                            };
                                                                            obj17484.methods["request(1)withArgs(1)$object(1)"] = func17780;
                                                                          superDepth = origSuperDepth;
                                                                        };
                                                                        obj_init_17484.apply(obj17484, []);
                                                                        var var_requestPart = obj17484;
                                                                        setLineNumber(1);    // compilenode method
                                                                        var func18064 = function(argcv) {    // method requestPart
                                                                          var returnTarget = invocationCount;
                                                                          invocationCount++;
                                                                          var curarg = 1;
                                                                          setModuleName("ast");
                                                                          // requestPart is a simple accessor - elide try ... catch
                                                                          setLineNumber(2639);    // compilenode identifier
                                                                          return var_requestPart;
                                                                        };
                                                                        func18064.paramCounts = [0];
                                                                        this.methods["requestPart"] = func18064;
                                                                        func18064.definitionLine = 1;
                                                                        func18064.definitionModule = "ast";
                                                                        this.methods["requestPart"].debug = "def";
                                                                        setLineNumber(2721);    // compilenode object
                                                                        var obj18065 = Grace_allocObject(GraceObject, "commentNode");
                                                                        obj18065.definitionModule = "ast";
                                                                        obj18065.definitionLine = 2721;
                                                                        obj18065.outer = this;
                                                                        var reader_ast_outer18066 = function() {
                                                                          return this.outer;
                                                                        };
                                                                        obj18065.methods["outer"] = reader_ast_outer18066;
                                                                        var obj_init_18065 = function() {
                                                                          var origSuperDepth = superDepth;
                                                                          superDepth = obj18065;
                                                                          var func18067 = function(argcv) {    // method new(_)
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            var var_val__39__ = arguments[curarg];
                                                                            curarg++;
                                                                            setModuleName("ast");
                                                                            setLineNumber(2722);    // compilenode object
                                                                            var obj18068 = Grace_allocObject(null, "commentNode.new(_)");
                                                                            obj18068.definitionModule = "ast";
                                                                            obj18068.definitionLine = 2722;
                                                                            obj18068.outer = this;
                                                                            var reader_ast_outer18069 = function() {
                                                                              return this.outer;
                                                                            };
                                                                            obj18068.methods["outer"] = reader_ast_outer18069;
                                                                            var obj_init_18068 = function() {
                                                                              var origSuperDepth = superDepth;
                                                                              superDepth = obj18068;
                                                                              var func18070 = function(argcv) {    // method isComment
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                setModuleName("ast");
                                                                                // isComment is a simple accessor - elide try ... catch
                                                                                setLineNumber(2729);    // compilenode identifier
                                                                                return GraceTrue;
                                                                              };
                                                                              func18070.paramCounts = [0];
                                                                              obj18068.methods["isComment"] = func18070;
                                                                              func18070.definitionLine = 2729;
                                                                              func18070.definitionModule = "ast";
                                                                              var func18071 = function(argcv) {    // method isLegalInTrait
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                setModuleName("ast");
                                                                                // isLegalInTrait is a simple accessor - elide try ... catch
                                                                                setLineNumber(2730);    // compilenode identifier
                                                                                return GraceTrue;
                                                                              };
                                                                              func18071.paramCounts = [0];
                                                                              obj18068.methods["isLegalInTrait"] = func18071;
                                                                              func18071.definitionLine = 2730;
                                                                              func18071.definitionModule = "ast";
                                                                              var func18072 = function(argcv) {    // method isExecutable
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                setModuleName("ast");
                                                                                // isExecutable is a simple accessor - elide try ... catch
                                                                                setLineNumber(2731);    // compilenode identifier
                                                                                return GraceFalse;
                                                                              };
                                                                              func18072.paramCounts = [0];
                                                                              obj18068.methods["isExecutable"] = func18072;
                                                                              func18072.definitionLine = 2731;
                                                                              func18072.definitionModule = "ast";
                                                                              var func18073 = function(argcv) {    // method asString
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                setModuleName("ast");
                                                                                setLineNumber(2732);    // compilenode string
                                                                                var string18074 = new GraceString("");
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call18077 = callmethodChecked(this, "value", []);
                                                                                var string18079 = new GraceString("): ");
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call18082 = callmethodChecked(this, "endLine", []);
                                                                                var string18084 = new GraceString("\u2013");
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call18087 = callmethodChecked(this, "line", []);
                                                                                var string18089 = new GraceString("comment (");
                                                                                var opresult18091 = callmethodChecked(string18089, "++(1)", [1], call18087);
                                                                                var opresult18093 = callmethodChecked(opresult18091, "++(1)", [1], string18084);
                                                                                var opresult18095 = callmethodChecked(opresult18093, "++(1)", [1], call18082);
                                                                                var opresult18097 = callmethodChecked(opresult18095, "++(1)", [1], string18079);
                                                                                var opresult18099 = callmethodChecked(opresult18097, "++(1)", [1], call18077);
                                                                                var opresult18101 = callmethodChecked(opresult18099, "++(1)", [1], string18074);
                                                                                return opresult18101;
                                                                              };
                                                                              func18073.paramCounts = [0];
                                                                              obj18068.methods["asString"] = func18073;
                                                                              func18073.definitionLine = 2732;
                                                                              func18073.definitionModule = "ast";
                                                                              var func18102 = function(argcv) {    // method extendCommentUsing(_)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_cmtNode = arguments[curarg];
                                                                                curarg++;
                                                                                setModuleName("ast");
                                                                                setLineNumber(2734);    // compilenode member
                                                                                // call case 6: other requests
                                                                                var call18105 = callmethodChecked(var_cmtNode, "value", []);
                                                                                var string18107 = new GraceString(" ");
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call18110 = callmethodChecked(this, "value", []);
                                                                                var opresult18112 = callmethodChecked(call18110, "++(1)", [1], string18107);
                                                                                var opresult18114 = callmethodChecked(opresult18112, "++(1)", [1], call18105);
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call18115 = callmethodChecked(this, "value:=(1)", [1], opresult18114);
                                                                                setLineNumber(2735);    // compilenode member
                                                                                // call case 6: other requests
                                                                                var call18118 = callmethodChecked(var_cmtNode, "endLine", []);
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call18119 = callmethodChecked(this, "endLine:=(1)", [1], call18118);
                                                                                return call18119;
                                                                              };
                                                                              func18102.paramCounts = [1];
                                                                              obj18068.methods["extendCommentUsing(1)"] = func18102;
                                                                              func18102.definitionLine = 2733;
                                                                              func18102.definitionModule = "ast";
                                                                              var func18120 = function(argcv) {    // method map(_)ancestors(_)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_blk = arguments[curarg];
                                                                                curarg++;
                                                                                var var_as = arguments[curarg];
                                                                                curarg++;
                                                                                setModuleName("ast");
                                                                                setLineNumber(2738);    // compilenode member
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call18122 = callmethodChecked(this, "shallowCopy", []);
                                                                                var var_n = call18122;
                                                                                setLineNumber(2739);    // compilenode identifier
                                                                                // call case 6: other requests
                                                                                var call18124 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                                                                var var_newChain = call18124;
                                                                                setLineNumber(2740);    // compilenode identifier
                                                                                // call case 6: other requests
                                                                                var call18126 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                                                                return call18126;
                                                                              };
                                                                              func18120.paramCounts = [1, 1];
                                                                              obj18068.methods["map(1)ancestors(1)"] = func18120;
                                                                              func18120.definitionLine = 2737;
                                                                              func18120.definitionModule = "ast";
                                                                              var func18127 = function(argcv) {    // method accept(_)from(_)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_visitor = arguments[curarg];
                                                                                curarg++;
                                                                                var var_as = arguments[curarg];
                                                                                curarg++;
                                                                                // Start argument checking
                                                                                curarg = 1;
                                                                                setLineNumber(2742);    // compilenode identifier
                                                                                if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                                                                    throw new GraceExceptionPacket(TypeErrorObject,
                                                                                        new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                                            callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                                                curarg++;
                                                                                curarg++;
                                                                                // End argument checking
                                                                                setModuleName("ast");
                                                                                setLineNumber(2743);    // compilenode identifier
                                                                                // call case 6: other requests
                                                                                var call18129 = callmethodChecked(var_visitor, "visitComment(1)up(1)", [1, 1], this, var_as);
                                                                                return call18129;
                                                                              };
                                                                              func18127.paramTypes = [];
                                                                              func18127.paramTypes.push([]);
                                                                              func18127.paramTypes.push([]);
                                                                              func18127.paramCounts = [1, 1];
                                                                              obj18068.methods["accept(1)from(1)"] = func18127;
                                                                              func18127.definitionLine = 2742;
                                                                              func18127.definitionModule = "ast";
                                                                              var func18130 = function(argcv) {    // method pretty(_)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_depth = arguments[curarg];
                                                                                curarg++;
                                                                                setModuleName("ast");
                                                                                setLineNumber(2746);    // compilenode string
                                                                                var string18131 = new GraceString("\n");
                                                                                var var_s = string18131;
                                                                                setLineNumber(2747);    // compilenode identifier
                                                                                var diff18135 = callmethodChecked(var_depth, "-(1)", [1], new GraceNum(1));
                                                                                var block18136 = new GraceBlock(this, 2747, 0);
                                                                                block18136.real = function() {
                                                                                  setLineNumber(2748);    // compilenode string
                                                                                  var string18137 = new GraceString("  ");
                                                                                  var opresult18140 = callmethodChecked(var_s, "++(1)", [1], string18137);
                                                                                  var_s = opresult18140;
                                                                                  return GraceDone;
                                                                                };
                                                                                // call case 5: prelude request
                                                                                var call18141 = callmethodChecked(var_prelude, "repeat(1)times(1)", [1, 1], diff18135, block18136);
                                                                                var if18142 = GraceDone;
                                                                                setLineNumber(2750);    // compilenode member
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call18144 = callmethodChecked(this, "isPreceededByBlankLine", []);
                                                                                if (Grace_isTrue(call18144)) {
                                                                                  var string18145 = new GraceString(" > blank");
                                                                                  if18142 = string18145;
                                                                                } else {
                                                                                  var string18146 = new GraceString("");
                                                                                  if18142 = string18146;
                                                                                }
                                                                                var var_pb = if18142;
                                                                                setLineNumber(2751);    // compilenode string
                                                                                var string18147 = new GraceString("\u203a");
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call18150 = callmethodChecked(this, "value", []);
                                                                                var string18152 = new GraceString("): \u2039");
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call18155 = callmethodChecked(this, "endLine", []);
                                                                                var string18157 = new GraceString("\u2013");
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call18160 = callmethodChecked(this, "line", []);
                                                                                var string18162 = new GraceString("(");
                                                                                var string18165 = new GraceString("Comment");
                                                                                var string18168 = new GraceString("");
                                                                                var opresult18170 = callmethodChecked(string18168, "++(1)", [1], var_s);
                                                                                var opresult18172 = callmethodChecked(opresult18170, "++(1)", [1], string18165);
                                                                                var opresult18174 = callmethodChecked(opresult18172, "++(1)", [1], var_pb);
                                                                                var opresult18176 = callmethodChecked(opresult18174, "++(1)", [1], string18162);
                                                                                var opresult18178 = callmethodChecked(opresult18176, "++(1)", [1], call18160);
                                                                                var opresult18180 = callmethodChecked(opresult18178, "++(1)", [1], string18157);
                                                                                var opresult18182 = callmethodChecked(opresult18180, "++(1)", [1], call18155);
                                                                                var opresult18184 = callmethodChecked(opresult18182, "++(1)", [1], string18152);
                                                                                var opresult18186 = callmethodChecked(opresult18184, "++(1)", [1], call18150);
                                                                                var opresult18188 = callmethodChecked(opresult18186, "++(1)", [1], string18147);
                                                                                return opresult18188;
                                                                              };
                                                                              func18130.paramCounts = [1];
                                                                              obj18068.methods["pretty(1)"] = func18130;
                                                                              func18130.definitionLine = 2745;
                                                                              func18130.definitionModule = "ast";
                                                                              var func18189 = function(argcv) {    // method toGrace(_)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_depth = arguments[curarg];
                                                                                curarg++;
                                                                                setModuleName("ast");
                                                                                var if18190 = GraceDone;
                                                                                setLineNumber(2756);    // compilenode member
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call18192 = callmethodChecked(this, "isPartialLine", []);
                                                                                if (Grace_isTrue(call18192)) {
                                                                                  setLineNumber(2757);    // compilenode string
                                                                                  var string18193 = new GraceString("");
                                                                                  // call case 4: self request
                                                                                  onSelf = true;
                                                                                  var call18196 = callmethodChecked(this, "value", []);
                                                                                  var string18198 = new GraceString("// (partial) ");
                                                                                  var opresult18200 = callmethodChecked(string18198, "++(1)", [1], call18196);
                                                                                  var opresult18202 = callmethodChecked(opresult18200, "++(1)", [1], string18193);
                                                                                  if18190 = opresult18202;
                                                                                } else {
                                                                                  setLineNumber(2759);    // compilenode string
                                                                                  var string18203 = new GraceString("");
                                                                                  var var_spc = string18203;
                                                                                  setLineNumber(2760);    // compilenode block
                                                                                  var block18205 = new GraceBlock(this, 2760, 0);
                                                                                  block18205.real = function() {
                                                                                    var string18206 = new GraceString("    ");
                                                                                    var opresult18209 = callmethodChecked(var_spc, "++(1)", [1], string18206);
                                                                                    var_spc = opresult18209;
                                                                                    return GraceDone;
                                                                                  };
                                                                                  // call case 5: prelude request
                                                                                  var call18210 = callmethodChecked(var_prelude, "repeat(1)times(1)", [1, 1], var_depth, block18205);
                                                                                  setLineNumber(2761);    // compilenode member
                                                                                  // call case 4: self request
                                                                                  onSelf = true;
                                                                                  var call18213 = callmethodChecked(this, "value", []);
                                                                                  var string18214 = new GraceString("// ");
                                                                                  var opresult18217 = callmethodChecked(var_spc, "++(1)", [1], string18214);
                                                                                  // call case 6: other requests
                                                                                  // call case 6: other requests
                                                                                  // call case 3: self.outer request
                                                                                  var call18220 = callmethodChecked(superDepth, "outer", [0]);
                                                                                  var call18221 = callmethodChecked(call18220, "outer", []);
                                                                                  onSelf = true;
                                                                                  var call18222 = callmethodChecked(call18221, "wrap(1)to(1)prefix(1)", [1, 1, 1], call18213, var_lineLength, opresult18217);
                                                                                  if18190 = call18222;
                                                                                }
                                                                                return if18190;
                                                                              };
                                                                              func18189.paramCounts = [1];
                                                                              obj18068.methods["toGrace(1)"] = func18189;
                                                                              func18189.definitionLine = 2753;
                                                                              func18189.definitionModule = "ast";
                                                                              var func18223 = function(argcv) {    // method shallowCopy
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                setModuleName("ast");
                                                                                setLineNumber(2765);    // compilenode identifier
                                                                                // call case 6: other requests
                                                                                // call case 6: other requests
                                                                                var call18226 = callmethodChecked(var_commentNode, "new(1)", [1], var_nullNode);
                                                                                var call18227 = callmethodChecked(call18226, "shallowCopyFieldsFrom(1)", [1], this);
                                                                                return call18227;
                                                                              };
                                                                              func18223.paramCounts = [0];
                                                                              obj18068.methods["shallowCopy"] = func18223;
                                                                              func18223.definitionLine = 2764;
                                                                              func18223.definitionModule = "ast";
                                                                              var func18228 = function(argcv) {    // method shallowCopyFieldsFrom(_)
                                                                                var returnTarget = invocationCount;
                                                                                invocationCount++;
                                                                                var curarg = 1;
                                                                                var var_other = arguments[curarg];
                                                                                curarg++;
                                                                                setModuleName("ast");
                                                                                setLineNumber(2768);    // compilenode identifier
                                                                                // call case 1: super request
                                                                                var call18230 = callmethodsuper(this, "shallowCopyFieldsFrom(1)", [1], var_other);
                                                                                setLineNumber(2769);    // compilenode member
                                                                                // call case 6: other requests
                                                                                var call18233 = callmethodChecked(var_other, "value", []);
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call18234 = callmethodChecked(this, "value:=(1)", [1], call18233);
                                                                                setLineNumber(2770);    // compilenode member
                                                                                // call case 6: other requests
                                                                                var call18237 = callmethodChecked(var_other, "isPartialLine", []);
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call18238 = callmethodChecked(this, "isPartialLine:=(1)", [1], call18237);
                                                                                setLineNumber(2771);    // compilenode member
                                                                                // call case 6: other requests
                                                                                var call18241 = callmethodChecked(var_other, "endLine", []);
                                                                                // call case 4: self request
                                                                                onSelf = true;
                                                                                var call18242 = callmethodChecked(this, "endLine:=(1)", [1], call18241);
                                                                                setLineNumber(2772);    // compilenode identifier
                                                                                return this;
                                                                              };
                                                                              func18228.paramCounts = [1];
                                                                              obj18068.methods["shallowCopyFieldsFrom(1)"] = func18228;
                                                                              func18228.definitionLine = 2767;
                                                                              func18228.definitionModule = "ast";
                                                                              setLineNumber(2723);    // compilenode identifier
                                                                              // call case 6: other requests
                                                                              // call case 6: other requests
                                                                              // call case 3: self.outer request
                                                                              var call18246 = callmethodChecked(superDepth, "outer", [0]);
                                                                              var call18247 = callmethodChecked(call18246, "outer", []);
                                                                              var call18248 = callmethodChecked(call18247, "baseNode$object(1)", [0, 1], this);
                                                                              obj18068.superobj = call18248;
                                                                              if (call18248.data) obj18068.data = call18248.data;
                                                                              if (call18248.hasOwnProperty('_value'))
                                                                                  obj18068._value = call18248._value;
                                                                              setLineNumber(2724);    // compilenode string
                                                                              var string18249 = new GraceString("comment");
                                                                              obj18068.data["kind"] = string18249;
                                                                              var reader_ast_kind18250 = function() {
                                                                                return this.data["kind"];
                                                                              };
                                                                              reader_ast_kind18250.def = true;
                                                                              obj18068.methods["kind"] = reader_ast_kind18250;
                                                                              setLineNumber(2725);    // compilenode identifier
                                                                              obj18068.data["value"] = var_val__39__;
                                                                              var reader_ast_value18251 = function() {
                                                                                return this.data["value"];
                                                                              };
                                                                              obj18068.methods["value"] = reader_ast_value18251;
                                                                              obj18068.data["value"] = var_val__39__;
                                                                              var writer_ast_value18251 = function(argcv, o) {
                                                                                this.data["value"] = o;
                                                                                return GraceDone;
                                                                              };
                                                                              obj18068.methods["value:=(1)"] = writer_ast_value18251;
                                                                              obj18068.mutable = true;
                                                                              setLineNumber(2726);    // compilenode identifier
                                                                              obj18068.data["isPartialLine"] = GraceFalse;
                                                                              var reader_ast_isPartialLine18252 = function() {
                                                                                return this.data["isPartialLine"];
                                                                              };
                                                                              obj18068.methods["isPartialLine"] = reader_ast_isPartialLine18252;
                                                                              obj18068.data["isPartialLine"] = GraceFalse;
                                                                              var writer_ast_isPartialLine18252 = function(argcv, o) {
                                                                                this.data["isPartialLine"] = o;
                                                                                return GraceDone;
                                                                              };
                                                                              obj18068.methods["isPartialLine:=(1)"] = writer_ast_isPartialLine18252;
                                                                              if (!Grace_isTrue(callmethod(var_Boolean, "match(1)", [1], GraceFalse)))
                                                                                throw new GraceExceptionPacket(TypeErrorObject,
                                                                                    new GraceString("initial value of var 'isPartialLine' is not of type Boolean"));
                                                                              obj18068.mutable = true;
                                                                              setLineNumber(2727);    // compilenode identifier
                                                                              obj18068.data["isPreceededByBlankLine"] = GraceFalse;
                                                                              var reader_ast_isPreceededByBlankLine18253 = function() {
                                                                                return this.data["isPreceededByBlankLine"];
                                                                              };
                                                                              obj18068.methods["isPreceededByBlankLine"] = reader_ast_isPreceededByBlankLine18253;
                                                                              obj18068.data["isPreceededByBlankLine"] = GraceFalse;
                                                                              var writer_ast_isPreceededByBlankLine18253 = function(argcv, o) {
                                                                                this.data["isPreceededByBlankLine"] = o;
                                                                                return GraceDone;
                                                                              };
                                                                              obj18068.methods["isPreceededByBlankLine:=(1)"] = writer_ast_isPreceededByBlankLine18253;
                                                                              obj18068.mutable = true;
                                                                              setLineNumber(2728);    // compilenode member
                                                                              // call case 6: other requests
                                                                              var call18255 = callmethodChecked(var_util, "linenum", []);
                                                                              obj18068.data["endLine"] = call18255;
                                                                              var reader_ast_endLine18256 = function() {
                                                                                return this.data["endLine"];
                                                                              };
                                                                              obj18068.methods["endLine"] = reader_ast_endLine18256;
                                                                              obj18068.data["endLine"] = call18255;
                                                                              var writer_ast_endLine18256 = function(argcv, o) {
                                                                                this.data["endLine"] = o;
                                                                                return GraceDone;
                                                                              };
                                                                              obj18068.methods["endLine:=(1)"] = writer_ast_endLine18256;
                                                                              obj18068.mutable = true;
                                                                              superDepth = origSuperDepth;
                                                                            };
                                                                            obj_init_18068.apply(obj18068, []);
                                                                            return obj18068;
                                                                          };
                                                                          func18067.paramCounts = [1];
                                                                          obj18065.methods["new(1)"] = func18067;
                                                                          func18067.definitionLine = 2722;
                                                                          func18067.definitionModule = "ast";
                                                                            var func18257 = function(argcv) {    // method new(_)$object(_)
                                                                              var curarg = 1;
                                                                              var var_val__39__ = arguments[curarg];
                                                                              curarg++;
                                                                              var inheritingObject = arguments[curarg++];
                                                                              // Start argument processing
                                                                              curarg = 1;
                                                                              curarg++;
                                                                              // End argument processing
                                                                              setModuleName("ast");
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var obj18258 = Grace_allocObject(null, "new(1)");
                                                                              obj18258.definitionModule = "ast";
                                                                              obj18258.definitionLine = 2722;
                                                                              var inho18258 = inheritingObject;
                                                                              while (inho18258.superobj) inho18258 = inho18258.superobj;
                                                                              inho18258.superobj = obj18258;
                                                                              obj18258.data = inheritingObject.data;
                                                                              if (inheritingObject.hasOwnProperty('_value'))
                                                                                obj18258._value = inheritingObject._value;
                                                                              obj18258.outer = this;
                                                                              var reader_ast_outer18259 = function() {
                                                                                return this.outer;
                                                                              };
                                                                              obj18258.methods["outer"] = reader_ast_outer18259;
                                                                              var obj_init_18258 = function() {
                                                                                var origSuperDepth = superDepth;
                                                                                superDepth = obj18258;
                                                                                var func18260 = function(argcv) {    // method isComment
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  setModuleName("ast");
                                                                                  // isComment is a simple accessor - elide try ... catch
                                                                                  setLineNumber(2729);    // compilenode identifier
                                                                                  return GraceTrue;
                                                                                };
                                                                                func18260.paramCounts = [0];
                                                                                obj18258.methods["isComment"] = func18260;
                                                                                func18260.definitionLine = 2729;
                                                                                func18260.definitionModule = "ast";
                                                                                var func18261 = function(argcv) {    // method isLegalInTrait
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  setModuleName("ast");
                                                                                  // isLegalInTrait is a simple accessor - elide try ... catch
                                                                                  setLineNumber(2730);    // compilenode identifier
                                                                                  return GraceTrue;
                                                                                };
                                                                                func18261.paramCounts = [0];
                                                                                obj18258.methods["isLegalInTrait"] = func18261;
                                                                                func18261.definitionLine = 2730;
                                                                                func18261.definitionModule = "ast";
                                                                                var func18262 = function(argcv) {    // method isExecutable
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  setModuleName("ast");
                                                                                  // isExecutable is a simple accessor - elide try ... catch
                                                                                  setLineNumber(2731);    // compilenode identifier
                                                                                  return GraceFalse;
                                                                                };
                                                                                func18262.paramCounts = [0];
                                                                                obj18258.methods["isExecutable"] = func18262;
                                                                                func18262.definitionLine = 2731;
                                                                                func18262.definitionModule = "ast";
                                                                                var func18263 = function(argcv) {    // method asString
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  setModuleName("ast");
                                                                                  setLineNumber(2732);    // compilenode string
                                                                                  var string18264 = new GraceString("");
                                                                                  // call case 4: self request
                                                                                  onSelf = true;
                                                                                  var call18267 = callmethodChecked(this, "value", []);
                                                                                  var string18269 = new GraceString("): ");
                                                                                  // call case 4: self request
                                                                                  onSelf = true;
                                                                                  var call18272 = callmethodChecked(this, "endLine", []);
                                                                                  var string18274 = new GraceString("\u2013");
                                                                                  // call case 4: self request
                                                                                  onSelf = true;
                                                                                  var call18277 = callmethodChecked(this, "line", []);
                                                                                  var string18279 = new GraceString("comment (");
                                                                                  var opresult18281 = callmethodChecked(string18279, "++(1)", [1], call18277);
                                                                                  var opresult18283 = callmethodChecked(opresult18281, "++(1)", [1], string18274);
                                                                                  var opresult18285 = callmethodChecked(opresult18283, "++(1)", [1], call18272);
                                                                                  var opresult18287 = callmethodChecked(opresult18285, "++(1)", [1], string18269);
                                                                                  var opresult18289 = callmethodChecked(opresult18287, "++(1)", [1], call18267);
                                                                                  var opresult18291 = callmethodChecked(opresult18289, "++(1)", [1], string18264);
                                                                                  return opresult18291;
                                                                                };
                                                                                func18263.paramCounts = [0];
                                                                                obj18258.methods["asString"] = func18263;
                                                                                func18263.definitionLine = 2732;
                                                                                func18263.definitionModule = "ast";
                                                                                var func18292 = function(argcv) {    // method extendCommentUsing(_)
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  var var_cmtNode = arguments[curarg];
                                                                                  curarg++;
                                                                                  setModuleName("ast");
                                                                                  setLineNumber(2734);    // compilenode member
                                                                                  // call case 6: other requests
                                                                                  var call18295 = callmethodChecked(var_cmtNode, "value", []);
                                                                                  var string18297 = new GraceString(" ");
                                                                                  // call case 4: self request
                                                                                  onSelf = true;
                                                                                  var call18300 = callmethodChecked(this, "value", []);
                                                                                  var opresult18302 = callmethodChecked(call18300, "++(1)", [1], string18297);
                                                                                  var opresult18304 = callmethodChecked(opresult18302, "++(1)", [1], call18295);
                                                                                  // call case 4: self request
                                                                                  onSelf = true;
                                                                                  var call18305 = callmethodChecked(this, "value:=(1)", [1], opresult18304);
                                                                                  setLineNumber(2735);    // compilenode member
                                                                                  // call case 6: other requests
                                                                                  var call18308 = callmethodChecked(var_cmtNode, "endLine", []);
                                                                                  // call case 4: self request
                                                                                  onSelf = true;
                                                                                  var call18309 = callmethodChecked(this, "endLine:=(1)", [1], call18308);
                                                                                  return call18309;
                                                                                };
                                                                                func18292.paramCounts = [1];
                                                                                obj18258.methods["extendCommentUsing(1)"] = func18292;
                                                                                func18292.definitionLine = 2733;
                                                                                func18292.definitionModule = "ast";
                                                                                var func18310 = function(argcv) {    // method map(_)ancestors(_)
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  var var_blk = arguments[curarg];
                                                                                  curarg++;
                                                                                  var var_as = arguments[curarg];
                                                                                  curarg++;
                                                                                  setModuleName("ast");
                                                                                  setLineNumber(2738);    // compilenode member
                                                                                  // call case 4: self request
                                                                                  onSelf = true;
                                                                                  var call18312 = callmethodChecked(this, "shallowCopy", []);
                                                                                  var var_n = call18312;
                                                                                  setLineNumber(2739);    // compilenode identifier
                                                                                  // call case 6: other requests
                                                                                  var call18314 = callmethodChecked(var_as, "extend(1)", [1], var_n);
                                                                                  var var_newChain = call18314;
                                                                                  setLineNumber(2740);    // compilenode identifier
                                                                                  // call case 6: other requests
                                                                                  var call18316 = callmethodChecked(var_blk, "apply(2)", [2], var_n, var_as);
                                                                                  return call18316;
                                                                                };
                                                                                func18310.paramCounts = [1, 1];
                                                                                obj18258.methods["map(1)ancestors(1)"] = func18310;
                                                                                func18310.definitionLine = 2737;
                                                                                func18310.definitionModule = "ast";
                                                                                var func18317 = function(argcv) {    // method accept(_)from(_)
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  var var_visitor = arguments[curarg];
                                                                                  curarg++;
                                                                                  var var_as = arguments[curarg];
                                                                                  curarg++;
                                                                                  // Start argument checking
                                                                                  curarg = 1;
                                                                                  setLineNumber(2742);    // compilenode identifier
                                                                                  if (!Grace_isTrue(callmethod(var_ASTVisitor, "match(1)",  [1], arguments[curarg])))
                                                                                      throw new GraceExceptionPacket(TypeErrorObject,
                                                                                          new GraceString("argument 1 in accept (arg list 1), which corresponds to parameter visitor, does not have " + 
                                                                                              callmethod(var_ASTVisitor, "asString", [0])._value + "."));
                                                                                  curarg++;
                                                                                  curarg++;
                                                                                  // End argument checking
                                                                                  setModuleName("ast");
                                                                                  setLineNumber(2743);    // compilenode identifier
                                                                                  // call case 6: other requests
                                                                                  var call18319 = callmethodChecked(var_visitor, "visitComment(1)up(1)", [1, 1], this, var_as);
                                                                                  return call18319;
                                                                                };
                                                                                func18317.paramTypes = [];
                                                                                func18317.paramTypes.push([]);
                                                                                func18317.paramTypes.push([]);
                                                                                func18317.paramCounts = [1, 1];
                                                                                obj18258.methods["accept(1)from(1)"] = func18317;
                                                                                func18317.definitionLine = 2742;
                                                                                func18317.definitionModule = "ast";
                                                                                var func18320 = function(argcv) {    // method pretty(_)
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  var var_depth = arguments[curarg];
                                                                                  curarg++;
                                                                                  setModuleName("ast");
                                                                                  setLineNumber(2746);    // compilenode string
                                                                                  var string18321 = new GraceString("\n");
                                                                                  var var_s = string18321;
                                                                                  setLineNumber(2747);    // compilenode identifier
                                                                                  var diff18325 = callmethodChecked(var_depth, "-(1)", [1], new GraceNum(1));
                                                                                  var block18326 = new GraceBlock(this, 2747, 0);
                                                                                  block18326.real = function() {
                                                                                    setLineNumber(2748);    // compilenode string
                                                                                    var string18327 = new GraceString("  ");
                                                                                    var opresult18330 = callmethodChecked(var_s, "++(1)", [1], string18327);
                                                                                    var_s = opresult18330;
                                                                                    return GraceDone;
                                                                                  };
                                                                                  // call case 5: prelude request
                                                                                  var call18331 = callmethodChecked(var_prelude, "repeat(1)times(1)", [1, 1], diff18325, block18326);
                                                                                  var if18332 = GraceDone;
                                                                                  setLineNumber(2750);    // compilenode member
                                                                                  // call case 4: self request
                                                                                  onSelf = true;
                                                                                  var call18334 = callmethodChecked(this, "isPreceededByBlankLine", []);
                                                                                  if (Grace_isTrue(call18334)) {
                                                                                    var string18335 = new GraceString(" > blank");
                                                                                    if18332 = string18335;
                                                                                  } else {
                                                                                    var string18336 = new GraceString("");
                                                                                    if18332 = string18336;
                                                                                  }
                                                                                  var var_pb = if18332;
                                                                                  setLineNumber(2751);    // compilenode string
                                                                                  var string18337 = new GraceString("\u203a");
                                                                                  // call case 4: self request
                                                                                  onSelf = true;
                                                                                  var call18340 = callmethodChecked(this, "value", []);
                                                                                  var string18342 = new GraceString("): \u2039");
                                                                                  // call case 4: self request
                                                                                  onSelf = true;
                                                                                  var call18345 = callmethodChecked(this, "endLine", []);
                                                                                  var string18347 = new GraceString("\u2013");
                                                                                  // call case 4: self request
                                                                                  onSelf = true;
                                                                                  var call18350 = callmethodChecked(this, "line", []);
                                                                                  var string18352 = new GraceString("(");
                                                                                  var string18355 = new GraceString("Comment");
                                                                                  var string18358 = new GraceString("");
                                                                                  var opresult18360 = callmethodChecked(string18358, "++(1)", [1], var_s);
                                                                                  var opresult18362 = callmethodChecked(opresult18360, "++(1)", [1], string18355);
                                                                                  var opresult18364 = callmethodChecked(opresult18362, "++(1)", [1], var_pb);
                                                                                  var opresult18366 = callmethodChecked(opresult18364, "++(1)", [1], string18352);
                                                                                  var opresult18368 = callmethodChecked(opresult18366, "++(1)", [1], call18350);
                                                                                  var opresult18370 = callmethodChecked(opresult18368, "++(1)", [1], string18347);
                                                                                  var opresult18372 = callmethodChecked(opresult18370, "++(1)", [1], call18345);
                                                                                  var opresult18374 = callmethodChecked(opresult18372, "++(1)", [1], string18342);
                                                                                  var opresult18376 = callmethodChecked(opresult18374, "++(1)", [1], call18340);
                                                                                  var opresult18378 = callmethodChecked(opresult18376, "++(1)", [1], string18337);
                                                                                  return opresult18378;
                                                                                };
                                                                                func18320.paramCounts = [1];
                                                                                obj18258.methods["pretty(1)"] = func18320;
                                                                                func18320.definitionLine = 2745;
                                                                                func18320.definitionModule = "ast";
                                                                                var func18379 = function(argcv) {    // method toGrace(_)
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  var var_depth = arguments[curarg];
                                                                                  curarg++;
                                                                                  setModuleName("ast");
                                                                                  var if18380 = GraceDone;
                                                                                  setLineNumber(2756);    // compilenode member
                                                                                  // call case 4: self request
                                                                                  onSelf = true;
                                                                                  var call18382 = callmethodChecked(this, "isPartialLine", []);
                                                                                  if (Grace_isTrue(call18382)) {
                                                                                    setLineNumber(2757);    // compilenode string
                                                                                    var string18383 = new GraceString("");
                                                                                    // call case 4: self request
                                                                                    onSelf = true;
                                                                                    var call18386 = callmethodChecked(this, "value", []);
                                                                                    var string18388 = new GraceString("// (partial) ");
                                                                                    var opresult18390 = callmethodChecked(string18388, "++(1)", [1], call18386);
                                                                                    var opresult18392 = callmethodChecked(opresult18390, "++(1)", [1], string18383);
                                                                                    if18380 = opresult18392;
                                                                                  } else {
                                                                                    setLineNumber(2759);    // compilenode string
                                                                                    var string18393 = new GraceString("");
                                                                                    var var_spc = string18393;
                                                                                    setLineNumber(2760);    // compilenode block
                                                                                    var block18395 = new GraceBlock(this, 2760, 0);
                                                                                    block18395.real = function() {
                                                                                      var string18396 = new GraceString("    ");
                                                                                      var opresult18399 = callmethodChecked(var_spc, "++(1)", [1], string18396);
                                                                                      var_spc = opresult18399;
                                                                                      return GraceDone;
                                                                                    };
                                                                                    // call case 5: prelude request
                                                                                    var call18400 = callmethodChecked(var_prelude, "repeat(1)times(1)", [1, 1], var_depth, block18395);
                                                                                    setLineNumber(2761);    // compilenode member
                                                                                    // call case 4: self request
                                                                                    onSelf = true;
                                                                                    var call18403 = callmethodChecked(this, "value", []);
                                                                                    var string18404 = new GraceString("// ");
                                                                                    var opresult18407 = callmethodChecked(var_spc, "++(1)", [1], string18404);
                                                                                    // call case 6: other requests
                                                                                    // call case 6: other requests
                                                                                    // call case 3: self.outer request
                                                                                    var call18410 = callmethodChecked(superDepth, "outer", [0]);
                                                                                    var call18411 = callmethodChecked(call18410, "outer", []);
                                                                                    onSelf = true;
                                                                                    var call18412 = callmethodChecked(call18411, "wrap(1)to(1)prefix(1)", [1, 1, 1], call18403, var_lineLength, opresult18407);
                                                                                    if18380 = call18412;
                                                                                  }
                                                                                  return if18380;
                                                                                };
                                                                                func18379.paramCounts = [1];
                                                                                obj18258.methods["toGrace(1)"] = func18379;
                                                                                func18379.definitionLine = 2753;
                                                                                func18379.definitionModule = "ast";
                                                                                var func18413 = function(argcv) {    // method shallowCopy
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  setModuleName("ast");
                                                                                  setLineNumber(2765);    // compilenode identifier
                                                                                  // call case 6: other requests
                                                                                  // call case 6: other requests
                                                                                  var call18416 = callmethodChecked(var_commentNode, "new(1)", [1], var_nullNode);
                                                                                  var call18417 = callmethodChecked(call18416, "shallowCopyFieldsFrom(1)", [1], this);
                                                                                  return call18417;
                                                                                };
                                                                                func18413.paramCounts = [0];
                                                                                obj18258.methods["shallowCopy"] = func18413;
                                                                                func18413.definitionLine = 2764;
                                                                                func18413.definitionModule = "ast";
                                                                                var func18418 = function(argcv) {    // method shallowCopyFieldsFrom(_)
                                                                                  var returnTarget = invocationCount;
                                                                                  invocationCount++;
                                                                                  var curarg = 1;
                                                                                  var var_other = arguments[curarg];
                                                                                  curarg++;
                                                                                  setModuleName("ast");
                                                                                  setLineNumber(2768);    // compilenode identifier
                                                                                  // call case 1: super request
                                                                                  var call18420 = callmethodsuper(this, "shallowCopyFieldsFrom(1)", [1], var_other);
                                                                                  setLineNumber(2769);    // compilenode member
                                                                                  // call case 6: other requests
                                                                                  var call18423 = callmethodChecked(var_other, "value", []);
                                                                                  // call case 4: self request
                                                                                  onSelf = true;
                                                                                  var call18424 = callmethodChecked(this, "value:=(1)", [1], call18423);
                                                                                  setLineNumber(2770);    // compilenode member
                                                                                  // call case 6: other requests
                                                                                  var call18427 = callmethodChecked(var_other, "isPartialLine", []);
                                                                                  // call case 4: self request
                                                                                  onSelf = true;
                                                                                  var call18428 = callmethodChecked(this, "isPartialLine:=(1)", [1], call18427);
                                                                                  setLineNumber(2771);    // compilenode member
                                                                                  // call case 6: other requests
                                                                                  var call18431 = callmethodChecked(var_other, "endLine", []);
                                                                                  // call case 4: self request
                                                                                  onSelf = true;
                                                                                  var call18432 = callmethodChecked(this, "endLine:=(1)", [1], call18431);
                                                                                  setLineNumber(2772);    // compilenode identifier
                                                                                  return this;
                                                                                };
                                                                                func18418.paramCounts = [1];
                                                                                obj18258.methods["shallowCopyFieldsFrom(1)"] = func18418;
                                                                                func18418.definitionLine = 2767;
                                                                                func18418.definitionModule = "ast";
                                                                                setLineNumber(2723);    // compilenode identifier
                                                                                // call case 6: other requests
                                                                                // call case 6: other requests
                                                                                // call case 3: self.outer request
                                                                                var call18436 = callmethodChecked(superDepth, "outer", [0]);
                                                                                var call18437 = callmethodChecked(call18436, "outer", []);
                                                                                var call18438 = callmethodChecked(call18437, "baseNode$object(1)", [0, 1], this);
                                                                                obj18258.superobj = call18438;
                                                                                if (call18438.data) obj18258.data = call18438.data;
                                                                                if (call18438.hasOwnProperty('_value'))
                                                                                    obj18258._value = call18438._value;
                                                                                setLineNumber(2724);    // compilenode string
                                                                                var string18439 = new GraceString("comment");
                                                                                obj18258.data["kind"] = string18439;
                                                                                var reader_ast_kind18440 = function() {
                                                                                  return this.data["kind"];
                                                                                };
                                                                                reader_ast_kind18440.def = true;
                                                                                obj18258.methods["kind"] = reader_ast_kind18440;
                                                                                setLineNumber(2725);    // compilenode identifier
                                                                                obj18258.data["value"] = var_val__39__;
                                                                                var reader_ast_value18441 = function() {
                                                                                  return this.data["value"];
                                                                                };
                                                                                obj18258.methods["value"] = reader_ast_value18441;
                                                                                obj18258.data["value"] = var_val__39__;
                                                                                var writer_ast_value18441 = function(argcv, o) {
                                                                                  this.data["value"] = o;
                                                                                  return GraceDone;
                                                                                };
                                                                                obj18258.methods["value:=(1)"] = writer_ast_value18441;
                                                                                obj18258.mutable = true;
                                                                                setLineNumber(2726);    // compilenode identifier
                                                                                obj18258.data["isPartialLine"] = GraceFalse;
                                                                                var reader_ast_isPartialLine18442 = function() {
                                                                                  return this.data["isPartialLine"];
                                                                                };
                                                                                obj18258.methods["isPartialLine"] = reader_ast_isPartialLine18442;
                                                                                obj18258.data["isPartialLine"] = GraceFalse;
                                                                                var writer_ast_isPartialLine18442 = function(argcv, o) {
                                                                                  this.data["isPartialLine"] = o;
                                                                                  return GraceDone;
                                                                                };
                                                                                obj18258.methods["isPartialLine:=(1)"] = writer_ast_isPartialLine18442;
                                                                                if (!Grace_isTrue(callmethod(var_Boolean, "match(1)", [1], GraceFalse)))
                                                                                  throw new GraceExceptionPacket(TypeErrorObject,
                                                                                      new GraceString("initial value of var 'isPartialLine' is not of type Boolean"));
                                                                                obj18258.mutable = true;
                                                                                setLineNumber(2727);    // compilenode identifier
                                                                                obj18258.data["isPreceededByBlankLine"] = GraceFalse;
                                                                                var reader_ast_isPreceededByBlankLine18443 = function() {
                                                                                  return this.data["isPreceededByBlankLine"];
                                                                                };
                                                                                obj18258.methods["isPreceededByBlankLine"] = reader_ast_isPreceededByBlankLine18443;
                                                                                obj18258.data["isPreceededByBlankLine"] = GraceFalse;
                                                                                var writer_ast_isPreceededByBlankLine18443 = function(argcv, o) {
                                                                                  this.data["isPreceededByBlankLine"] = o;
                                                                                  return GraceDone;
                                                                                };
                                                                                obj18258.methods["isPreceededByBlankLine:=(1)"] = writer_ast_isPreceededByBlankLine18443;
                                                                                obj18258.mutable = true;
                                                                                setLineNumber(2728);    // compilenode member
                                                                                // call case 6: other requests
                                                                                var call18445 = callmethodChecked(var_util, "linenum", []);
                                                                                obj18258.data["endLine"] = call18445;
                                                                                var reader_ast_endLine18446 = function() {
                                                                                  return this.data["endLine"];
                                                                                };
                                                                                obj18258.methods["endLine"] = reader_ast_endLine18446;
                                                                                obj18258.data["endLine"] = call18445;
                                                                                var writer_ast_endLine18446 = function(argcv, o) {
                                                                                  this.data["endLine"] = o;
                                                                                  return GraceDone;
                                                                                };
                                                                                obj18258.methods["endLine:=(1)"] = writer_ast_endLine18446;
                                                                                obj18258.mutable = true;
                                                                                superDepth = origSuperDepth;
                                                                              };
                                                                              obj_init_18258.apply(inheritingObject, []);
                                                                              return obj18258;
                                                                              };
                                                                              obj18065.methods["new(1)$object(1)"] = func18257;
                                                                            superDepth = origSuperDepth;
                                                                          };
                                                                          obj_init_18065.apply(obj18065, []);
                                                                          var var_commentNode = obj18065;
                                                                          setLineNumber(1);    // compilenode method
                                                                          var func18447 = function(argcv) {    // method commentNode
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            setModuleName("ast");
                                                                            // commentNode is a simple accessor - elide try ... catch
                                                                            setLineNumber(2721);    // compilenode identifier
                                                                            return var_commentNode;
                                                                          };
                                                                          func18447.paramCounts = [0];
                                                                          this.methods["commentNode"] = func18447;
                                                                          func18447.definitionLine = 1;
                                                                          func18447.definitionModule = "ast";
                                                                          this.methods["commentNode"].debug = "def";
                                                                          setLineNumber(2811);    // compilenode typedec
                                                                          // Type decl ASTVisitor
                                                                          //   Type literal 
                                                                          var type18449 = new GraceType("ASTVisitor");
                                                                          type18449.typeMethods.push("visitIf(1)up(1)");
                                                                          type18449.typeMethods.push("visitBlock(1)up(1)");
                                                                          type18449.typeMethods.push("visitMatchCase(1)up(1)");
                                                                          type18449.typeMethods.push("visitTryCatch(1)up(1)");
                                                                          type18449.typeMethods.push("visitMethodType(1)up(1)");
                                                                          type18449.typeMethods.push("visitSignaturePart(1)up(1)");
                                                                          type18449.typeMethods.push("visitTypeLiteral(1)up(1)");
                                                                          type18449.typeMethods.push("visitTypeParameters(1)up(1)");
                                                                          type18449.typeMethods.push("visitTypeDec(1)up(1)");
                                                                          type18449.typeMethods.push("visitMethod(1)up(1)");
                                                                          type18449.typeMethods.push("visitCall(1)up(1)");
                                                                          type18449.typeMethods.push("visitObject(1)up(1)");
                                                                          type18449.typeMethods.push("visitModule(1)up(1)");
                                                                          type18449.typeMethods.push("visitArray(1)up(1)");
                                                                          type18449.typeMethods.push("visitMember(1)up(1)");
                                                                          type18449.typeMethods.push("visitGeneric(1)up(1)");
                                                                          type18449.typeMethods.push("visitIdentifier(1)up(1)");
                                                                          type18449.typeMethods.push("visitString(1)up(1)");
                                                                          type18449.typeMethods.push("visitNum(1)up(1)");
                                                                          type18449.typeMethods.push("visitOp(1)up(1)");
                                                                          type18449.typeMethods.push("visitBind(1)up(1)");
                                                                          type18449.typeMethods.push("visitDefDec(1)up(1)");
                                                                          type18449.typeMethods.push("visitVarDec(1)up(1)");
                                                                          type18449.typeMethods.push("visitImport(1)up(1)");
                                                                          type18449.typeMethods.push("visitReturn(1)up(1)");
                                                                          type18449.typeMethods.push("visitInherits(1)up(1)");
                                                                          type18449.typeMethods.push("visitDialect(1)up(1)");
                                                                          type18449.typeMethods.push("visitBlank(1)up(1)");
                                                                          type18449.typeMethods.push("visitComment(1)up(1)");
                                                                          type18449.typeMethods.push("visitImplicit(1)up(1)");
                                                                          var var_ASTVisitor = type18449;
                                                                          setLineNumber(1);    // compilenode method
                                                                          var func18450 = function(argcv) {    // method ASTVisitor
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            setModuleName("ast");
                                                                            // ASTVisitor is a simple accessor - elide try ... catch
                                                                            setLineNumber(2811);    // compilenode identifier
                                                                            return var_ASTVisitor;
                                                                          };
                                                                          func18450.paramCounts = [0];
                                                                          this.methods["ASTVisitor"] = func18450;
                                                                          func18450.definitionLine = 1;
                                                                          func18450.definitionModule = "ast";
                                                                          setLineNumber(2951);    // compilenode object
                                                                          var obj18451 = Grace_allocObject(null, "patternMarkVisitor");
                                                                          obj18451.definitionModule = "ast";
                                                                          obj18451.definitionLine = 2951;
                                                                          obj18451.outer = this;
                                                                          var reader_ast_outer18452 = function() {
                                                                            return this.outer;
                                                                          };
                                                                          obj18451.methods["outer"] = reader_ast_outer18452;
                                                                          var obj_init_18451 = function() {
                                                                            var origSuperDepth = superDepth;
                                                                            superDepth = obj18451;
                                                                            var func18453 = function(argcv) {    // method visitCall(_)up(_)
                                                                              var returnTarget = invocationCount;
                                                                              invocationCount++;
                                                                              var curarg = 1;
                                                                              var var_c = arguments[curarg];
                                                                              curarg++;
                                                                              var var_as = arguments[curarg];
                                                                              curarg++;
                                                                              setModuleName("ast");
                                                                              setLineNumber(2954);    // compilenode identifier
                                                                              // call case 6: other requests
                                                                              var call18455 = callmethodChecked(var_c, "isPattern:=(1)", [1], GraceTrue);
                                                                              setLineNumber(2955);    // compilenode identifier
                                                                              return GraceTrue;
                                                                            };
                                                                            func18453.paramCounts = [1, 1];
                                                                            obj18451.methods["visitCall(1)up(1)"] = func18453;
                                                                            func18453.definitionLine = 2953;
                                                                            func18453.definitionModule = "ast";
                                                                            setLineNumber(2952);    // compilenode identifier
                                                                            // call case 6: other requests
                                                                            // call case 3: self.outer request
                                                                            var call18458 = callmethodChecked(superDepth, "outer", [0]);
                                                                            var call18459 = callmethodChecked(call18458, "baseVisitor$object(1)", [0, 1], this);
                                                                            obj18451.superobj = call18459;
                                                                            if (call18459.data) obj18451.data = call18459.data;
                                                                            if (call18459.hasOwnProperty('_value'))
                                                                                obj18451._value = call18459._value;
                                                                            superDepth = origSuperDepth;
                                                                          };
                                                                          obj_init_18451.apply(obj18451, []);
                                                                          var var_patternMarkVisitor = obj18451;
                                                                          setLineNumber(1);    // compilenode method
                                                                          var func18460 = function(argcv) {    // method patternMarkVisitor
                                                                            var returnTarget = invocationCount;
                                                                            invocationCount++;
                                                                            var curarg = 1;
                                                                            setModuleName("ast");
                                                                            // patternMarkVisitor is a simple accessor - elide try ... catch
                                                                            setLineNumber(2951);    // compilenode identifier
                                                                            return var_patternMarkVisitor;
                                                                          };
                                                                          func18460.paramCounts = [0];
                                                                          this.methods["patternMarkVisitor"] = func18460;
                                                                          func18460.definitionLine = 1;
                                                                          func18460.definitionModule = "ast";
                                                                          this.methods["patternMarkVisitor"].debug = "def";
                                                                          return this;
                                                                        }
                                                                        gracecode_ast.imports = ['identifierKinds', 'util'];
                                                                        if (typeof gctCache !== "undefined")
                                                                          gctCache['ast'] = "classes:\n ancestorChain\n arrayNode\n bindNode\n blankNode\n blockNode\n callNode\n commentNode\n defDecNode\n dialectNode\n genericNode\n identifierNode\n ifNode\n importNode\n inheritsNode\n matchCaseNode\n memberNode\n methodNode\n methodTypeNode\n moduleNode\n numNode\n objectNode\n opNode\n requestPart\n returnNode\n signaturePart\n stringNode\n tryCatchNode\n typeDecNode\n typeLiteralNode\n typeParametersNode\n varDecNode\nconfidential:\n listMap(2)ancestors(1)\n maybeListMap(2)ancestors(1)\n maybeMap(2)ancestors(1)\nconstructors-of:ancestorChain:\n cons(1)onto(1)\n empty\nconstructors-of:arrayNode:\n new(1)\nconstructors-of:bindNode:\n new(2)\nconstructors-of:blankNode:\n new\nconstructors-of:blockNode:\n new(2)\nconstructors-of:callNode:\n new(2)\nconstructors-of:commentNode:\n new(1)\nconstructors-of:defDecNode:\n new(3)\nconstructors-of:dialectNode:\n new(1)\nconstructors-of:genericNode:\n new(2)\nconstructors-of:identifierNode:\n new(2)\nconstructors-of:ifNode:\n new(3)\nconstructors-of:importNode:\n new(3)\nconstructors-of:inheritsNode:\n new(1)\nconstructors-of:matchCaseNode:\n new(3)\nconstructors-of:memberNode:\n new(2)\nconstructors-of:methodNode:\n new(3)\nconstructors-of:methodTypeNode:\n new(2)\nconstructors-of:moduleNode:\n body(1)\nconstructors-of:numNode:\n new(1)\nconstructors-of:objectNode:\n new(2)\nconstructors-of:opNode:\n new(3)\nconstructors-of:requestPart:\n request(1)withArgs(1)\nconstructors-of:returnNode:\n new(1)\nconstructors-of:signaturePart:\n partName(1)params(1)\nconstructors-of:stringNode:\n new(1)\nconstructors-of:tryCatchNode:\n new(3)\nconstructors-of:typeDecNode:\n new(2)\nconstructors-of:typeLiteralNode:\n new(2)\nconstructors-of:typeParametersNode:\n new(1)\nconstructors-of:varDecNode:\n new(3)\nfresh-methods:\n aliasNew(1)old(1)\n baseNode\n baseVisitor\n pluggableVisitor(1)\nfresh:aliasNew(1)old(1):\n ==(1)\n asString\n hash\n isExecutable\n newName\n oldName\n pretty(1)\nfresh:baseNode:\n ==(1)\n accept(1)\n addComment(1)\n addComments(1)\n asString\n canInherit\n comments\n decType\n deepCopy\n description\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDelimited\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImplicit\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMember\n isMethod\n isObject\n isOuter\n isPrelude\n isPublic\n isReadable\n isSelf\n isSimple\n isSuper\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n nameString\n pretty(1)\n register\n returnsObject\n scope\n scope:=(1)\n setLine(1)col(1)\n setPositionFrom(1)\n shallowCopyFieldsFrom(1)\n statementName\n symbolTable\n usesAsType(1)\nfresh:baseVisitor:\n asString\n visitArray(1)\n visitArray(1)up(1)\n visitBind(1)\n visitBind(1)up(1)\n visitBlank(1)\n visitBlank(1)up(1)\n visitBlock(1)\n visitBlock(1)up(1)\n visitCall(1)\n visitCall(1)up(1)\n visitComment(1)\n visitComment(1)up(1)\n visitDefDec(1)\n visitDefDec(1)up(1)\n visitDialect(1)\n visitDialect(1)up(1)\n visitGeneric(1)\n visitGeneric(1)up(1)\n visitIdentifier(1)\n visitIdentifier(1)up(1)\n visitIf(1)\n visitIf(1)up(1)\n visitImplicit(1)\n visitImplicit(1)up(1)\n visitImport(1)\n visitImport(1)up(1)\n visitInherits(1)\n visitInherits(1)up(1)\n visitMatchCase(1)\n visitMatchCase(1)up(1)\n visitMember(1)\n visitMember(1)up(1)\n visitMethod(1)\n visitMethod(1)up(1)\n visitMethodType(1)\n visitMethodType(1)up(1)\n visitModule(1)\n visitModule(1)up(1)\n visitNum(1)\n visitNum(1)up(1)\n visitObject(1)\n visitObject(1)up(1)\n visitOp(1)\n visitOp(1)up(1)\n visitReturn(1)\n visitReturn(1)up(1)\n visitSignaturePart(1)\n visitSignaturePart(1)up(1)\n visitString(1)\n visitString(1)up(1)\n visitTryCatch(1)\n visitTryCatch(1)up(1)\n visitTypeDec(1)\n visitTypeDec(1)up(1)\n visitTypeLiteral(1)\n visitTypeLiteral(1)up(1)\n visitTypeParameters(1)\n visitTypeParameters(1)up(1)\n visitVarDec(1)\n visitVarDec(1)up(1)\nfresh:pluggableVisitor(1):\n asString\n visitArray(1)up(1)\n visitBind(1)up(1)\n visitBlank(1)up(1)\n visitBlock(1)up(1)\n visitCall(1)up(1)\n visitComment(1)up(1)\n visitDefDec(1)up(1)\n visitDialect(1)up(1)\n visitGeneric(1)up(1)\n visitIdentifier(1)up(1)\n visitIf(1)up(1)\n visitImplicit(1)up(1)\n visitImport(1)up(1)\n visitInherits(1)up(1)\n visitMatchCase(1)up(1)\n visitMember(1)up(1)\n visitMethod(1)up(1)\n visitMethodType(1)up(1)\n visitModule(1)up(1)\n visitNum(1)up(1)\n visitObject(1)up(1)\n visitOp(1)up(1)\n visitReturn(1)up(1)\n visitSignaturePart(1)up(1)\n visitString(1)up(1)\n visitTryCatch(1)up(1)\n visitTypeDec(1)up(1)\n visitTypeLiteral(1)up(1)\n visitVarDec(1)up(1)\nmethods-of:ancestorChain.cons(1)onto(1):\n asString\n extend(1)\n forebears\n grandparent\n isEmpty\n parent\nmethods-of:ancestorChain.empty:\n asString\n extend(1)\n isEmpty\nmethods-of:arrayNode.new(1):\n ::(1)\n ==(1)\n accept(1)\n accept(1)from(1)\n addComment(1)\n addComments(1)\n asDebugString\n asString\n basicAsString\n canInherit\n comments\n decType\n deepCopy\n description\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDelimited\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImplicit\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe(1)\n isMember\n isMethod\n isObject\n isOuter\n isPrelude\n isPublic\n isReadable\n isSelf\n isSimple\n isSuper\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map(1)ancestors(1)\n nameString\n pretty(1)\n register\n returnsObject\n scope\n scope:=(1)\n setLine(1)col(1)\n setPositionFrom(1)\n shallowCopy\n shallowCopyFieldsFrom(1)\n statementName\n symbolTable\n toGrace(1)\n usesAsType(1)\n value\n \u2260(1)\nmethods-of:bindNode.new(2):\n ::(1)\n ==(1)\n accept(1)\n accept(1)from(1)\n addComment(1)\n addComments(1)\n asDebugString\n asString\n basicAsString\n canInherit\n comments\n decType\n deepCopy\n description\n dest\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDelimited\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImplicit\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe(1)\n isMember\n isMethod\n isObject\n isOuter\n isPrelude\n isPublic\n isReadable\n isSelf\n isSimple\n isSuper\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map(1)ancestors(1)\n nameString\n pretty(1)\n register\n returnsObject\n scope\n scope:=(1)\n setLine(1)col(1)\n setPositionFrom(1)\n shallowCopy\n shallowCopyFieldsFrom(1)\n statementName\n symbolTable\n toGrace(1)\n usesAsType(1)\n value\n \u2260(1)\nmethods-of:blankNode.new:\n ::(1)\n ==(1)\n accept(1)\n accept(1)from(1)\n addComment(1)\n addComments(1)\n asDebugString\n asString\n basicAsString\n canInherit\n comments\n decType\n deepCopy\n description\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDelimited\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImplicit\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe(1)\n isMember\n isMethod\n isObject\n isOuter\n isPrelude\n isPublic\n isReadable\n isSelf\n isSimple\n isSuper\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map(1)ancestors(1)\n nameString\n pretty(1)\n register\n returnsObject\n scope\n scope:=(1)\n setLine(1)col(1)\n setPositionFrom(1)\n shallowCopy\n shallowCopyFieldsFrom(1)\n statementName\n symbolTable\n toGrace(1)\n usesAsType(1)\n value\n \u2260(1)\nmethods-of:blockNode.new(2):\n ::(1)\n ==(1)\n accept(1)\n accept(1)from(1)\n addComment(1)\n addComments(1)\n asDebugString\n asString\n basicAsString\n body\n canInherit\n comments\n decType\n declarationKindWithAncestors(1)\n deepCopy\n description\n enclosingObject\n extraRuntimeData\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDelimited\n isDialect\n isEmpty\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImplicit\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe(1)\n isMember\n isMethod\n isObject\n isOuter\n isPrelude\n isPublic\n isReadable\n isSelf\n isSimple\n isSuper\n isTrait\n isTypeDec\n isWritable\n isntEmpty\n kind\n line\n linePos\n map(1)ancestors(1)\n matchingPattern\n nameString\n parametersDo(1)\n params\n pretty(1)\n register\n returnedObjectScope\n returnsObject\n scope\n scope:=(1)\n selfclosure\n setLine(1)col(1)\n setPositionFrom(1)\n shallowCopy\n shallowCopyFieldsFrom(1)\n statementName\n symbolTable\n toGrace(1)\n usesAsType(1)\n value\n \u2260(1)\nmethods-of:callNode.new(2):\n ::(1)\n ==(1)\n accept(1)\n accept(1)from(1)\n addComment(1)\n addComments(1)\n arguments\n argumentsDo(1)\n asDebugString\n asIdentifier\n asString\n basicAsString\n canInherit\n canonicalName\n comments\n decType\n deepCopy\n description\n enclosingObject\n generics\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDelimited\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImplicit\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe(1)\n isMember\n isMethod\n isObject\n isOuter\n isPattern\n isPrelude\n isPublic\n isReadable\n isSelf\n isSelfRequest\n isSimple\n isSuper\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map(1)ancestors(1)\n nameString\n onSelf\n pretty(1)\n receiver\n register\n returnedObjectScope\n returnsObject\n scope\n scope:=(1)\n setLine(1)col(1)\n setPositionFrom(1)\n shallowCopy\n shallowCopyFieldsFrom(1)\n statementName\n symbolTable\n toGrace(1)\n usesAsType(1)\n with\n \u2260(1)\nmethods-of:commentNode.new(1):\n ::(1)\n ==(1)\n accept(1)\n accept(1)from(1)\n addComment(1)\n addComments(1)\n asDebugString\n asString\n basicAsString\n canInherit\n comments\n decType\n deepCopy\n description\n enclosingObject\n endLine\n extendCommentUsing(1)\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDelimited\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImplicit\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe(1)\n isMember\n isMethod\n isObject\n isOuter\n isPartialLine\n isPreceededByBlankLine\n isPrelude\n isPublic\n isReadable\n isSelf\n isSimple\n isSuper\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map(1)ancestors(1)\n nameString\n pretty(1)\n register\n returnsObject\n scope\n scope:=(1)\n setLine(1)col(1)\n setPositionFrom(1)\n shallowCopy\n shallowCopyFieldsFrom(1)\n statementName\n symbolTable\n toGrace(1)\n usesAsType(1)\n value\n \u2260(1)\nmethods-of:defDecNode.new(3):\n ::(1)\n ==(1)\n accept(1)\n accept(1)from(1)\n addComment(1)\n addComments(1)\n annotations\n asDebugString\n asString\n basicAsString\n canInherit\n comments\n decType\n declarationKindWithAncestors(1)\n deepCopy\n description\n dtype\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDelimited\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImplicit\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe(1)\n isMember\n isMethod\n isObject\n isOuter\n isPrelude\n isPublic\n isReadable\n isSelf\n isSimple\n isSuper\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map(1)ancestors(1)\n name\n nameString\n pretty(1)\n register\n returnedObjectScope\n returnsObject\n scope\n scope:=(1)\n setLine(1)col(1)\n setPositionFrom(1)\n shallowCopy\n shallowCopyFieldsFrom(1)\n startToken\n statementName\n symbolTable\n toGrace(1)\n usesAsType(1)\n value\n \u2260(1)\nmethods-of:dialectNode.new(1):\n ::(1)\n ==(1)\n accept(1)\n accept(1)from(1)\n addComment(1)\n addComments(1)\n asDebugString\n asString\n basicAsString\n canInherit\n comments\n decType\n deepCopy\n description\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDelimited\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImplicit\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe(1)\n isMember\n isMethod\n isObject\n isOuter\n isPrelude\n isPublic\n isReadable\n isSelf\n isSimple\n isSuper\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map(1)ancestors(1)\n moduleName\n nameString\n path\n pretty(1)\n register\n returnsObject\n scope\n scope:=(1)\n setLine(1)col(1)\n setPositionFrom(1)\n shallowCopy\n shallowCopyFieldsFrom(1)\n statementName\n symbolTable\n toGrace(1)\n usesAsType(1)\n value\n \u2260(1)\nmethods-of:genericNode.new(2):\n ::(1)\n ==(1)\n accept(1)\n accept(1)from(1)\n addComment(1)\n addComments(1)\n args\n asDebugString\n asString\n basicAsString\n canInherit\n comments\n decType\n deepCopy\n description\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDelimited\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImplicit\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe(1)\n isMember\n isMethod\n isObject\n isOuter\n isPrelude\n isPublic\n isReadable\n isSelf\n isSimple\n isSuper\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map(1)ancestors(1)\n nameString\n pretty(1)\n register\n returnsObject\n scope\n scope:=(1)\n setLine(1)col(1)\n setPositionFrom(1)\n shallowCopy\n shallowCopyFieldsFrom(1)\n statementName\n symbolTable\n toGrace(1)\n usesAsType(1)\n value\n \u2260(1)\nmethods-of:identifierNode.new(2):\n ::(1)\n ==(1)\n accept(1)\n accept(1)from(1)\n addComment(1)\n addComments(1)\n asDebugString\n asString\n basicAsString\n canInherit\n canonicalName\n comments\n decType\n declarationKindWithAncestors(1)\n deepCopy\n description\n dtype\n enclosingObject\n generics\n hash\n inClass\n inRequest\n inTrait\n inTypePositionWithAncestors(1)\n isAppliedOccurenceOfIdentifier\n isAssigned\n isBind\n isBindingOccurrence\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDeclaredByParent\n isDelimited\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImplicit\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe(1)\n isMember\n isMethod\n isObject\n isOuter\n isPrelude\n isPublic\n isReadable\n isSelf\n isSimple\n isSuper\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map(1)ancestors(1)\n nameString\n pretty(1)\n quoted\n register\n returnsObject\n scope\n scope:=(1)\n setLine(1)col(1)\n setPositionFrom(1)\n shallowCopy\n shallowCopyFieldsFrom(1)\n statementName\n symbolTable\n toGrace(1)\n usesAsType(1)\n value\n wildcard\n \u2260(1)\nmethods-of:ifNode.new(3):\n ::(1)\n ==(1)\n accept(1)\n accept(1)from(1)\n addComment(1)\n addComments(1)\n asDebugString\n asString\n basicAsString\n canInherit\n comments\n decType\n deepCopy\n description\n elseblock\n enclosingObject\n handledIdentifiers\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDelimited\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImplicit\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe(1)\n isMember\n isMethod\n isObject\n isOuter\n isPrelude\n isPublic\n isReadable\n isSelf\n isSimple\n isSuper\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map(1)ancestors(1)\n nameString\n pretty(1)\n register\n returnsObject\n scope\n scope:=(1)\n setLine(1)col(1)\n setPositionFrom(1)\n shallowCopy\n shallowCopyFieldsFrom(1)\n statementName\n symbolTable\n thenblock\n toGrace(1)\n usesAsType(1)\n value\n \u2260(1)\nmethods-of:importNode.new(3):\n ::(1)\n ==(1)\n accept(1)\n accept(1)from(1)\n addComment(1)\n addComments(1)\n annotations\n asDebugString\n asString\n basicAsString\n canInherit\n comments\n decType\n declarationKindWithAncestors(1)\n deepCopy\n description\n dtype\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDelimited\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImplicit\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe(1)\n isMember\n isMethod\n isObject\n isOuter\n isPrelude\n isPublic\n isReadable\n isSelf\n isSimple\n isSuper\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map(1)ancestors(1)\n moduleName\n name\n nameString\n path\n pretty(1)\n register\n returnsObject\n scope\n scope:=(1)\n setLine(1)col(1)\n setPositionFrom(1)\n shallowCopy\n shallowCopyFieldsFrom(1)\n statementName\n symbolTable\n toGrace(1)\n usesAsType(1)\n value\n \u2260(1)\nmethods-of:inheritsNode.new(1):\n ::(1)\n ==(1)\n accept(1)\n accept(1)from(1)\n addAlias(1)for(1)\n addComment(1)\n addComments(1)\n addExclusion(1)\n aliases\n asDebugString\n asString\n basicAsString\n canInherit\n comments\n decType\n declarationKindWithAncestors(1)\n deepCopy\n description\n enclosingObject\n exclusions\n hash\n inClass\n inTrait\n inheritsFromCall\n inheritsFromMember\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDelimited\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImplicit\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe(1)\n isMember\n isMethod\n isObject\n isOuter\n isPrelude\n isPublic\n isReadable\n isSelf\n isSimple\n isSuper\n isTrait\n isTypeDec\n isUse\n isWritable\n kind\n line\n linePos\n map(1)ancestors(1)\n nameString\n pretty(1)\n providedNames\n register\n returnsObject\n scope\n scope:=(1)\n setLine(1)col(1)\n setPositionFrom(1)\n shallowCopy\n shallowCopyFieldsFrom(1)\n statementName\n symbolTable\n toGrace(1)\n usesAsType(1)\n value\n \u2260(1)\nmethods-of:matchCaseNode.new(3):\n ::(1)\n ==(1)\n accept(1)\n accept(1)from(1)\n addComment(1)\n addComments(1)\n asDebugString\n asString\n basicAsString\n canInherit\n cases\n comments\n decType\n deepCopy\n description\n elsecase\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDelimited\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImplicit\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe(1)\n isMember\n isMethod\n isObject\n isOuter\n isPrelude\n isPublic\n isReadable\n isSelf\n isSimple\n isSuper\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map(1)ancestors(1)\n matchee\n nameString\n pretty(1)\n register\n returnsObject\n scope\n scope:=(1)\n setLine(1)col(1)\n setPositionFrom(1)\n shallowCopy\n shallowCopyFieldsFrom(1)\n statementName\n symbolTable\n toGrace(1)\n usesAsType(1)\n value\n \u2260(1)\nmethods-of:memberNode.new(2):\n ::(1)\n ==(1)\n accept(1)\n accept(1)from(1)\n addComment(1)\n addComments(1)\n arguments\n argumentsDo\n asDebugString\n asIdentifier\n asString\n basicAsString\n canInherit\n canonicalName\n comments\n decType\n deepCopy\n description\n enclosingObject\n generics\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDelimited\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImplicit\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe(1)\n isMember\n isMethod\n isObject\n isOuter\n isPrelude\n isPublic\n isReadable\n isSelf\n isSelfRequest\n isSimple\n isSuper\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map(1)ancestors(1)\n nameString\n onSelf\n pretty(1)\n receiver\n register\n returnsObject\n scope\n scope:=(1)\n setLine(1)col(1)\n setPositionFrom(1)\n shallowCopy\n shallowCopyFieldsFrom(1)\n statementName\n symbolTable\n toGrace(1)\n usesAsType(1)\n value\n with\n \u2260(1)\nmethods-of:methodNode.new(3):\n ::(1)\n ==(1)\n accept(1)\n accept(1)from(1)\n addComment(1)\n addComments(1)\n annotations\n appliedOccurence\n asDebugString\n asIdentifier\n asString\n basicAsString\n body\n cachedIdentifier\n canInherit\n canonicalName\n comments\n decType\n declarationKindWithAncestors(1)\n deepCopy\n description\n dtype\n enclosingObject\n endPos\n hasParams\n hasTypeParams\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBindingOccurence\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDelimited\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isFresh\n isIdentifier\n isImplicit\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe(1)\n isMember\n isMethod\n isObject\n isOuter\n isPrelude\n isPublic\n isReadable\n isSelf\n isSimple\n isSuper\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map(1)ancestors(1)\n nameString\n needsArgChecks\n numParamLists\n numParams\n pretty(1)\n register\n returnedObjectScope\n returnsObject\n scope\n scope:=(1)\n selfclosure\n setLine(1)col(1)\n setPositionFrom(1)\n shallowCopy\n shallowCopyFieldsFrom(1)\n signature\n statementName\n symbolTable\n toGrace(1)\n typeParams\n usesAsType(1)\n usesClassSyntax\n value\n \u2260(1)\nmethods-of:methodTypeNode.new(2):\n ::(1)\n ==(1)\n accept(1)\n accept(1)from(1)\n addComment(1)\n addComments(1)\n asDebugString\n asString\n basicAsString\n cachedIdentifier\n canInherit\n comments\n decType\n declarationKindWithAncestors(1)\n deepCopy\n description\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDelimited\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImplicit\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe(1)\n isMember\n isMethod\n isObject\n isOuter\n isPrelude\n isPublic\n isReadable\n isSelf\n isSimple\n isSuper\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map(1)ancestors(1)\n nameString\n parametersDo(1)\n pretty(1)\n register\n returnsObject\n rtype\n scope\n scope:=(1)\n setLine(1)col(1)\n setPositionFrom(1)\n shallowCopy\n shallowCopyFieldsFrom(1)\n signature\n statementName\n symbolTable\n toGrace(1)\n typeParams\n usesAsType(1)\n value\n \u2260(1)\nmethods-of:moduleNode.body(1):\n ::(1)\n ==(1)\n accept(1)\n accept(1)from(1)\n addComment(1)\n addComments(1)\n annotations\n asDebugString\n asString\n basicAsString\n body\n canInherit\n canUse\n comments\n decType\n deepCopy\n description\n enclosingObject\n executableComponentsDo(1)\n externalsDo(1)\n hash\n imports\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDelimited\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImplicit\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe(1)\n isMember\n isMethod\n isModule\n isObject\n isOuter\n isPrelude\n isPublic\n isReadable\n isSelf\n isSimple\n isSuper\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n localNames\n map(1)ancestors(1)\n methodsDo(1)\n myLocalNames\n name\n nameString\n parentsDo(1)\n pretty(1)\n register\n returnedObjectScope\n returnsObject\n scope\n scope:=(1)\n setLine(1)col(1)\n setPositionFrom(1)\n shallowCopy\n shallowCopyFieldsFrom(1)\n sourceLines\n statementName\n superclass\n symbolTable\n toGrace(1)\n usedTraits\n usesAsType(1)\n value\n \u2260(1)\nmethods-of:numNode.new(1):\n ::(1)\n ==(1)\n accept(1)\n accept(1)from(1)\n addComment(1)\n addComments(1)\n asDebugString\n asString\n basicAsString\n canInherit\n comments\n decType\n deepCopy\n description\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDelimited\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImplicit\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe(1)\n isMember\n isMethod\n isObject\n isOuter\n isPrelude\n isPublic\n isReadable\n isSelf\n isSimple\n isSuper\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map(1)ancestors(1)\n nameString\n pretty(1)\n register\n returnsObject\n scope\n scope:=(1)\n setLine(1)col(1)\n setPositionFrom(1)\n shallowCopy\n shallowCopyFieldsFrom(1)\n statementName\n symbolTable\n toGrace(1)\n usesAsType(1)\n value\n \u2260(1)\nmethods-of:objectNode.new(2):\n ::(1)\n ==(1)\n accept(1)\n accept(1)from(1)\n addComment(1)\n addComments(1)\n annotations\n asDebugString\n asString\n basicAsString\n body\n canInherit\n canUse\n comments\n decType\n deepCopy\n description\n enclosingObject\n executableComponentsDo(1)\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDelimited\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImplicit\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe(1)\n isMember\n isMethod\n isObject\n isOuter\n isPrelude\n isPublic\n isReadable\n isSelf\n isSimple\n isSuper\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n localNames\n map(1)ancestors(1)\n methodsDo(1)\n myLocalNames\n name\n nameString\n parentsDo(1)\n pretty(1)\n register\n returnedObjectScope\n returnsObject\n scope\n scope:=(1)\n setLine(1)col(1)\n setPositionFrom(1)\n shallowCopy\n shallowCopyFieldsFrom(1)\n statementName\n superclass\n symbolTable\n toGrace(1)\n usedTraits\n usesAsType(1)\n value\n \u2260(1)\nmethods-of:opNode.new(3):\n ::(1)\n ==(1)\n accept(1)\n accept(1)from(1)\n addComment(1)\n addComments(1)\n asDebugString\n asIdentifier\n asString\n basicAsString\n canInherit\n comments\n decType\n deepCopy\n description\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDelimited\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImplicit\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe(1)\n isMember\n isMethod\n isObject\n isOuter\n isPrelude\n isPublic\n isReadable\n isSelf\n isSimple\n isSuper\n isTrait\n isTypeDec\n isWritable\n kind\n left\n line\n linePos\n map(1)ancestors(1)\n nameString\n pretty(1)\n register\n returnsObject\n right\n scope\n scope:=(1)\n setLine(1)col(1)\n setPositionFrom(1)\n shallowCopy\n shallowCopyFieldsFrom(1)\n statementName\n symbolTable\n toGrace(1)\n usesAsType(1)\n value\n \u2260(1)\nmethods-of:requestPart.request(1)withArgs(1):\n ::(1)\n ==(1)\n accept(1)\n addComment(1)\n addComments(1)\n args\n asDebugString\n asString\n basicAsString\n canInherit\n canonicalName\n comments\n decType\n deepCopy\n description\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDelimited\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImplicit\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe(1)\n isMember\n isMethod\n isObject\n isOuter\n isPrelude\n isPublic\n isReadable\n isSelf\n isSimple\n isSuper\n isTrait\n isTypeDec\n isWritable\n kind\n line\n lineLength\n linePos\n map(1)ancestors(1)\n name\n nameString\n pretty(1)\n register\n returnsObject\n scope\n scope:=(1)\n setLine(1)col(1)\n setPositionFrom(1)\n shallowCopy\n shallowCopyFieldsFrom(1)\n statementName\n symbolTable\n toGrace(1)\n typeArgs\n usesAsType(1)\n \u2260(1)\nmethods-of:returnNode.new(1):\n ::(1)\n ==(1)\n accept(1)\n accept(1)from(1)\n addComment(1)\n addComments(1)\n asDebugString\n asString\n basicAsString\n canInherit\n comments\n decType\n deepCopy\n description\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDelimited\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImplicit\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe(1)\n isMember\n isMethod\n isObject\n isOuter\n isPrelude\n isPublic\n isReadable\n isSelf\n isSimple\n isSuper\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map(1)ancestors(1)\n nameString\n pretty(1)\n register\n returnsObject\n scope\n scope:=(1)\n setLine(1)col(1)\n setPositionFrom(1)\n shallowCopy\n shallowCopyFieldsFrom(1)\n statementName\n symbolTable\n toGrace(1)\n usesAsType(1)\n value\n \u2260(1)\nmethods-of:signaturePart.partName(1)params(1):\n ::(1)\n ==(1)\n accept(1)\n accept(1)from(1)\n addComment(1)\n addComments(1)\n asDebugString\n asString\n basicAsString\n canInherit\n canonicalName\n comments\n decType\n declarationKindWithAncestors(1)\n deepCopy\n description\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDelimited\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImplicit\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe(1)\n isMember\n isMethod\n isObject\n isOuter\n isPrelude\n isPublic\n isReadable\n isSelf\n isSimple\n isSuper\n isTrait\n isTypeDec\n isWritable\n kind\n line\n lineLength\n linePos\n map(1)ancestors(1)\n name\n nameString\n numParams\n params\n pretty(1)\n register\n returnsObject\n scope\n scope:=(1)\n setLine(1)col(1)\n setPositionFrom(1)\n shallowCopy\n shallowCopyFieldsFrom(1)\n statementName\n symbolTable\n toGrace(1)\n typeParams\n usesAsType(1)\n \u2260(1)\nmethods-of:stringNode.new(1):\n ::(1)\n ==(1)\n accept(1)\n accept(1)from(1)\n addComment(1)\n addComments(1)\n asDebugString\n asString\n basicAsString\n canInherit\n comments\n decType\n deepCopy\n description\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDelimited\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImplicit\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe(1)\n isMember\n isMethod\n isObject\n isOuter\n isPrelude\n isPublic\n isReadable\n isSelf\n isSimple\n isSuper\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map(1)ancestors(1)\n nameString\n pretty(1)\n register\n returnsObject\n scope\n scope:=(1)\n setLine(1)col(1)\n setPositionFrom(1)\n shallowCopy\n shallowCopyFieldsFrom(1)\n statementName\n symbolTable\n toGrace(1)\n usesAsType(1)\n value\n \u2260(1)\nmethods-of:tryCatchNode.new(3):\n ::(1)\n ==(1)\n accept(1)\n accept(1)from(1)\n addComment(1)\n addComments(1)\n asDebugString\n asString\n basicAsString\n canInherit\n cases\n comments\n decType\n deepCopy\n description\n enclosingObject\n finally\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDelimited\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImplicit\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe(1)\n isMember\n isMethod\n isObject\n isOuter\n isPrelude\n isPublic\n isReadable\n isSelf\n isSimple\n isSuper\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map(1)ancestors(1)\n nameString\n pretty(1)\n register\n returnsObject\n scope\n scope:=(1)\n setLine(1)col(1)\n setPositionFrom(1)\n shallowCopy\n shallowCopyFieldsFrom(1)\n statementName\n symbolTable\n toGrace(1)\n usesAsType(1)\n value\n \u2260(1)\nmethods-of:typeDecNode.new(2):\n ::(1)\n ==(1)\n accept(1)\n accept(1)from(1)\n addComment(1)\n addComments(1)\n annotations\n asDebugString\n asString\n basicAsString\n canInherit\n comments\n decType\n declarationKindWithAncestors(1)\n deepCopy\n description\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDelimited\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImplicit\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe(1)\n isMember\n isMethod\n isObject\n isOuter\n isPrelude\n isPublic\n isReadable\n isSelf\n isSimple\n isSuper\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map(1)ancestors(1)\n name\n nameString\n pretty(1)\n register\n returnsObject\n scope\n scope:=(1)\n setLine(1)col(1)\n setPositionFrom(1)\n shallowCopy\n shallowCopyFieldsFrom(1)\n statementName\n symbolTable\n toGrace(1)\n typeParams\n usesAsType(1)\n value\n \u2260(1)\nmethods-of:typeLiteralNode.new(2):\n ::(1)\n ==(1)\n accept(1)\n accept(1)from(1)\n addComment(1)\n addComments(1)\n anonymous\n asDebugString\n asString\n basicAsString\n canInherit\n comments\n decType\n declarationKindWithAncestors(1)\n deepCopy\n description\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDelimited\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImplicit\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe(1)\n isMember\n isMethod\n isObject\n isOuter\n isPrelude\n isPublic\n isReadable\n isSelf\n isSimple\n isSuper\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map(1)ancestors(1)\n methods\n name\n name:=(1)\n nameString\n nominal\n pretty(1)\n register\n returnsObject\n scope\n scope:=(1)\n setLine(1)col(1)\n setPositionFrom(1)\n shallowCopy\n shallowCopyFieldsFrom(1)\n statementName\n symbolTable\n toGrace(1)\n types\n usesAsType(1)\n value\n \u2260(1)\nmethods-of:typeParametersNode.new(1):\n ::(1)\n ==(1)\n accept(1)\n accept(1)from(1)\n addComment(1)\n addComments(1)\n asDebugString\n asString\n basicAsString\n canInherit\n comments\n decType\n declarationKindWithAncestors(1)\n deepCopy\n description\n do(1)\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDelimited\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImplicit\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe(1)\n isMember\n isMethod\n isObject\n isOuter\n isPrelude\n isPublic\n isReadable\n isSelf\n isSimple\n isSuper\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map(1)ancestors(1)\n nameString\n params\n pretty(1)\n register\n returnsObject\n scope\n scope:=(1)\n setLine(1)col(1)\n setPositionFrom(1)\n shallowCopy\n shallowCopyFieldsFrom(1)\n size\n statementName\n symbolTable\n toGrace(1)\n usesAsType(1)\n \u2260(1)\nmethods-of:varDecNode.new(3):\n ::(1)\n ==(1)\n accept(1)\n accept(1)from(1)\n addComment(1)\n addComments(1)\n annotations\n asDebugString\n asString\n basicAsString\n canInherit\n comments\n decType\n declarationKindWithAncestors(1)\n deepCopy\n description\n dtype\n enclosingObject\n hash\n inClass\n inTrait\n isAppliedOccurenceOfIdentifier\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isDelimited\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isIdentifier\n isImplicit\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe(1)\n isMember\n isMethod\n isObject\n isOuter\n isPrelude\n isPublic\n isReadable\n isSelf\n isSimple\n isSuper\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map(1)ancestors(1)\n name\n nameString\n pretty(1)\n register\n returnsObject\n scope\n scope:=(1)\n setLine(1)col(1)\n setPositionFrom(1)\n shallowCopy\n shallowCopyFieldsFrom(1)\n statementName\n symbolTable\n toGrace(1)\n usesAsType(1)\n value\n \u2260(1)\nmethodtypes-of:ASTVisitor:\n 1 visitArray(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitBind(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitBlank(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitBlock(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitCall(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitComment(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitDefDec(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitDialect(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitGeneric(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitIdentifier(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitIf(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitImplicit(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitImport(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitInherits(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitMatchCase(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitMember(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitMethod(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitMethodType(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitModule(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitNum(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitObject(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitOp(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitReturn(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitSignaturePart(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitString(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitTryCatch(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitTypeDec(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitTypeLiteral(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitTypeParameters(o : Unknown)up(as : Unknown) -> Boolean\n 1 visitVarDec(o : Unknown)up(as : Unknown) -> Boolean\nmethodtypes-of:AliasPair:\n 1 newName -> Done\n 1 oldName -> Done\nmethodtypes-of:AstNode:\n 1 comments -> AstNode\n 1 kind -> String\n 1 line -> Number\n 1 line:=(ln : Number) -> Done\n 1 linePos -> Number\n 1 linePos:=(lp : Number) -> Done\n 1 pretty(n : Number) -> String\n 1 register -> String\n 1 scope -> SymbolTable\nmethodtypes-of:SymbolTable:\nmodules:\n identifierKinds\n util\npath:\n ast\npublic:\n ASTVisitor\n AliasPair\n AstNode\n SymbolTable\n aliasNew(1)old(1)\n arrayNode\n baseNode\n baseVisitor\n bindNode\n blankNode\n blockNode\n dialectNode\n findAnnotation(2)\n genericNode\n ifNode\n implicit\n importNode\n lineLength\n matchCaseNode\n methodTypeNode\n nullNode\n numNode\n objectNode\n opNode\n pluggableVisitor(1)\n returnNode\n tryCatchNode\n typeDecNode\n typeLiteralNode\n typeParametersNode\n typeType\n unknownType\n varDecNode\n wrap(1)to(1)prefix(1)\ntypes:\n ASTVisitor\n AliasPair\n AstNode\n SymbolTable\n";
                                                                        if (typeof originalSourceLines !== "undefined") {
                                                                          originalSourceLines["ast"] = [
                                                                            "#pragme noTypeChecks",
                                                                            "#pragma ExtendedLineups",
                                                                            "import \"util\" as util",
                                                                            "import \"identifierKinds\" as k",
                                                                            "",
                                                                            "// This module contains classes and pseudo-classes for all the AST nodes used",
                                                                            "// in the parser. Because of the limitations of the class syntax, classes that",
                                                                            "// need more than one method are written as object literals containing methods.",
                                                                            "// Each node has a different signature according to its function, but the",
                                                                            "// common interface is given by type ASTNode",
                                                                            "//",
                                                                            "// Most nodes also contain a \"value\" field, with varied type, holding the `main value`",
                                                                            "// in the node.  This field is confusing and should be appropriately re-named in",
                                                                            "// each case. Some nodes contain other fields for their specific use: while has",
                                                                            "// both a value (the condition) and a body, for example.",
                                                                            "",
                                                                            "def lineLength is public = 80",
                                                                            "def uninitialized = Singleton.named \"uninitialized\"",
                                                                            "method listMap(l, b) ancestors(as) is confidential {",
                                                                            "    def newList = [ ]",
                                                                            "    l.do { nd -> newList.addLast(nd.map(b) ancestors(as)) }",
                                                                            "    newList",
                                                                            "}",
                                                                            "method maybeMap(n, b) ancestors(as) is confidential {",
                                                                            "    if (false != n) then {",
                                                                            "        n.map(b) ancestors(as)",
                                                                            "    } else {",
                                                                            "        n",
                                                                            "    }",
                                                                            "}",
                                                                            "method maybeListMap(n, b) ancestors(as) is confidential {",
                                                                            "    if (false != n) then {",
                                                                            "        listMap(n, b) ancestors(as)",
                                                                            "    } else {",
                                                                            "        n",
                                                                            "    }",
                                                                            "}",
                                                                            "",
                                                                            "def ancestorChain = object {",
                                                                            "    class empty {",
                                                                            "        method isEmpty { true }",
                                                                            "        method asString { \"ancestorChain ▫\" }",
                                                                            "        method extend(n) { cons(n) onto(self) }",
                                                                            "    }",
                                                                            "    method with(n) { empty.extend(n) }",
                                                                            "    class cons(p) onto(as) is confidential {",
                                                                            "        method forebears { as }",
                                                                            "        method isEmpty { false }",
                                                                            "        method parent { p }",
                                                                            "        method grandparent { forebears.parent }",
                                                                            "",
                                                                            "        method asString {",
                                                                            "            var a := self",
                                                                            "            var s := \"ancestorChain \"",
                                                                            "            while { a.isEmpty.not } do {",
                                                                            "                s := s ++ a.parent ++ \"➤\"",
                                                                            "                a := a.forebears",
                                                                            "            }",
                                                                            "            s ++ \"▫\"",
                                                                            "        }",
                                                                            "        method extend(n) { cons(n) onto(self) }",
                                                                            "    }",
                                                                            "}",
                                                                            "",
                                                                            "def emptySeq = emptySequence",
                                                                            "",
                                                                            "type AstNode = type {",
                                                                            "    kind -> String",
                                                                            "        // Used for pseudo-instanceof tests.",
                                                                            "    register -> String",
                                                                            "        // Used in the code generator on to name the resulting object",
                                                                            "    line -> Number",
                                                                            "        // The source line the node came from",
                                                                            "    line:=(ln:Number)",
                                                                            "    linePos -> Number",
                                                                            "    linePos:=(lp:Number)",
                                                                            "    scope -> SymbolTable",
                                                                            "        // The symbolTable for names defined in this node and its sub-nodes",
                                                                            "    pretty(n:Number) -> String",
                                                                            "        // Pretty-print-string of node at depth n",
                                                                            "    comments -> AstNode",
                                                                            "        // Comments associated with this node",
                                                                            "}",
                                                                            "",
                                                                            "type SymbolTable = Unknown",
                                                                            "",
                                                                            "class baseNode {",
                                                                            "    // the superclass of all AST nodes",
                                                                            "    var register is public := \"\"",
                                                                            "    var line is public := util.linenum",
                                                                            "    var linePos is public := util.linepos",
                                                                            "    var symbolTable := fakeSymbolTable",
                                                                            "    var comments is public := false",
                                                                            "",
                                                                            "    method setLine (l) col (c) {",
                                                                            "        line := l",
                                                                            "        linePos := c",
                                                                            "        self",
                                                                            "    }",
                                                                            "    method setPositionFrom (token) {",
                                                                            "        line := token.line",
                                                                            "        linePos := token.linePos",
                                                                            "        self",
                                                                            "    }",
                                                                            "    method kind { abstract }",
                                                                            "    method ==(other) { self.isMe(other) }       // for usesAsType",
                                                                            "    method isAppliedOccurenceOfIdentifier { false }",
                                                                            "    method isMatchingBlock { false }",
                                                                            "    method isFieldDec { false }",
                                                                            "    method isInherits { false }",
                                                                            "    method isLegalInTrait { false }",
                                                                            "    method isMember { false }",
                                                                            "    method isMethod { false }",
                                                                            "    method isExecutable { true }",
                                                                            "    method isCall { false }",
                                                                            "    method isComment { false }",
                                                                            "    method isClass { false }    // is a method that returns a fresh object",
                                                                            "    method inClass { false }    // object in a syntactic class definiton",
                                                                            "    method isTrait { false }    // is a method that returns a trait object",
                                                                            "    method inTrait { false }    // object in a syntactic trait definition",
                                                                            "    method isBind { false }",
                                                                            "    method isSelf { false }",
                                                                            "    method isSuper { false }",
                                                                            "    method isPrelude { false }",
                                                                            "    method isOuter { false }",
                                                                            "    method isBlock { false }",
                                                                            "    method isObject { false }",
                                                                            "    method isIdentifier { false }",
                                                                            "    method isDialect { false }",
                                                                            "    method isImport { false }",
                                                                            "    method isTypeDec { false }",
                                                                            "    method isExternal { false }",
                                                                            "    method canInherit { false }",
                                                                            "    method returnsObject { false }",
                                                                            "    method isImplicit { false }",
                                                                            "    method usesAsType(aNode) { false }",
                                                                            "    method hash { line.hash * linePos.hash }",
                                                                            "    method asString { \"{kind} {nameString}\" }",
                                                                            "    method nameString { \"?\" }",
                                                                            "    method isWritable { true }",
                                                                            "    method isReadable { true }",
                                                                            "    method isPublic { true }",
                                                                            "    method isConfidential { isPublic.not }",
                                                                            "    method decType {",
                                                                            "        if (false == self.dtype) then {",
                                                                            "            return unknownType",
                                                                            "        }",
                                                                            "        return self.dtype",
                                                                            "    }",
                                                                            "    method isSimple { true }  // needs no parens when used as receiver",
                                                                            "    method isDelimited { false }  // needs no parens when used as argument",
                                                                            "    method description { kind }",
                                                                            "    method accept(visitor) {",
                                                                            "        self.accept(visitor) from (ancestorChain.empty)",
                                                                            "    }",
                                                                            "    method scope { symbolTable }",
                                                                            "",
                                                                            "    method scope:=(st) {",
                                                                            "        // override this method in subobjects that open a new scope. In such",
                                                                            "        // subobjects, and only in such subobjects, there should be a 2-way",
                                                                            "        // conection between the node and the symbol table that defines its scope.",
                                                                            "        symbolTable := st",
                                                                            "    }",
                                                                            "",
                                                                            "    method shallowCopyFieldsFrom(other) {",
                                                                            "        register := other.register",
                                                                            "        line := other.line",
                                                                            "        linePos := other.linePos",
                                                                            "        scope := other.scope",
                                                                            "        self",
                                                                            "    }",
                                                                            "    method pretty(depth) {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..depth) do { i ->",
                                                                            "            spc := spc ++ \"  \"",
                                                                            "        }",
                                                                            "        if ((scope.node == self) && {util.target == \"symbols\"}) then {",
                                                                            "            \"{line}:{linePos} {description}\\n{spc}Symbols({scope.variety}): {scope}{scope.elementScopesAsString}\"",
                                                                            "        } elseif {scope.variety == \"fake\"} then {",
                                                                            "            \"{line}:{linePos} {description}\"",
                                                                            "        } else {",
                                                                            "            \"{line}:{linePos} {description} {scope.asDebugString}\"",
                                                                            "        }",
                                                                            "    }",
                                                                            "    method deepCopy {",
                                                                            "        self.map { each -> each } ancestors(ancestorChain.empty)",
                                                                            "    }",
                                                                            "    method enclosingObject {",
                                                                            "        def obj = scope.enclosingObjectScope.node",
                                                                            "        obj",
                                                                            "    }",
                                                                            "    method addComment(cmtNode) {",
                                                                            "        if (false == comments) then {",
                                                                            "            comments := cmtNode",
                                                                            "        } else {",
                                                                            "            comments.extendCommentUsing(cmtNode)",
                                                                            "        }",
                                                                            "    }",
                                                                            "    method addComments(cmtNodeList) {",
                                                                            "        cmtNodeList.do { each -> addComment(each) }",
                                                                            "    }",
                                                                            "    method statementName { kind }",
                                                                            "}",
                                                                            "",
                                                                            "def implicit is public = object {",
                                                                            "    inherits baseNode",
                                                                            "    line := 0",
                                                                            "    linePos := 0",
                                                                            "    def kind is public = \"implicit\"",
                                                                            "    def nameString is public = \"implicit\"",
                                                                            "    method isImplicit { true }",
                                                                            "    method toGrace(depth) { \"implicit\" }",
                                                                            "    method asString { \"the implicit receiver\" }",
                                                                            "    method == (other) { self.isMe(other) }",
                                                                            "    method map(blk) ancestors(as) { self }",
                                                                            "    method accept(visitor) from (as) {",
                                                                            "        visitor.visitImplicit(self) up (as)",
                                                                            "    }",
                                                                            "    method pretty(depth) { \"implicit\" }",
                                                                            "}",
                                                                            "",
                                                                            "def nullNode is public = object {",
                                                                            "    inherits baseNode",
                                                                            "    def kind is public = \"null\"",
                                                                            "    method toGrace(depth) {",
                                                                            "        \"// null\"",
                                                                            "    }",
                                                                            "    method asString { \"the nullNode\" }",
                                                                            "    method == (other) { self.isMe(other) }",
                                                                            "}",
                                                                            "",
                                                                            "def fakeSymbolTable = object {",
                                                                            "    var node is public := nullNode",
                                                                            "    method asString { \"the fakeSymbolTable\" }",
                                                                            "    method addNode (n) as (kind) {",
                                                                            "        ProgrammingError.raise \"fakeSymbolTable(on node {node}).addNode({n}) as \\\"{kind}\\\" requested\"",
                                                                            "    }",
                                                                            "    method thatDefines (name) ifNone (action) {",
                                                                            "        ProgrammingError.raise \"fakeSymbolTable.thatDefines({name}).\"",
                                                                            "    }",
                                                                            "    method enclosingObjectScope {",
                                                                            "        ProgrammingError.raise \"fakeSymbolTable.enclosingObjectScope on node {node}\"",
                                                                            "    }",
                                                                            "    method variety { \"fake\" }",
                                                                            "    method ==(other) { self.isMe(other) }",
                                                                            "}",
                                                                            "",
                                                                            "def ifNode is public = object {",
                                                                            "  class new(cond, thenblock', elseblock') {",
                                                                            "    inherits baseNode",
                                                                            "    def kind is public = \"if\"",
                                                                            "    var value is public := cond",
                                                                            "    var thenblock is public := thenblock'",
                                                                            "    var elseblock is public := elseblock'",
                                                                            "    var handledIdentifiers is public := false",
                                                                            "    method isSimple { false }  // needs parens when used as reciever",
                                                                            "    method accept(visitor : ASTVisitor) from(as) {",
                                                                            "        if (visitor.visitIf(self) up(as)) then {",
                                                                            "            def newChain = as.extend(self)",
                                                                            "            value.accept(visitor) from(newChain)",
                                                                            "            thenblock.accept(visitor) from(newChain)",
                                                                            "            elseblock.accept(visitor) from(newChain)",
                                                                            "        }",
                                                                            "    }",
                                                                            "    method map(blk) ancestors(as) {",
                                                                            "        var n := shallowCopy",
                                                                            "        def newChain = as.extend(n)",
                                                                            "        n.value := value.map(blk) ancestors(newChain)",
                                                                            "        n.thenblock := thenblock.map(blk) ancestors(newChain)",
                                                                            "        n.elseblock := elseblock.map(blk) ancestors(newChain)",
                                                                            "        blk.apply(n, as)",
                                                                            "    }",
                                                                            "    method pretty(depth) {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..depth) do { i ->",
                                                                            "            spc := spc ++ \"  \"",
                                                                            "        }",
                                                                            "        var s := super.pretty(depth) ++ \"\\n\"",
                                                                            "        s := s ++ spc ++ self.value.pretty(depth+1)",
                                                                            "        s := s ++ \"\\n\"",
                                                                            "        if (util.target == \"symbols\") then {",
                                                                            "            s := s ++ spc ++ \"Then: {thenblock.pretty(depth+2)}\\n\"",
                                                                            "            s := s ++ spc ++ \"Else: {elseblock.pretty(depth+2)}\"",
                                                                            "        } else {",
                                                                            "            s := s ++ spc ++ \"Then:\"",
                                                                            "            for (self.thenblock.body) do { ix ->",
                                                                            "                s := s ++ \"\\n  \"++ spc ++ ix.pretty(depth+2)",
                                                                            "            }",
                                                                            "            s := s ++ \"\\n\"",
                                                                            "            s := s ++ spc ++ \"Else:\"",
                                                                            "            for (self.elseblock.body) do { ix ->",
                                                                            "                s := s ++ \"\\n  \"++ spc ++ ix.pretty(depth+2)",
                                                                            "            }",
                                                                            "        }",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method toGrace(depth : Number) -> String {",
                                                                            "        var spc := \"\"",
                                                                            "        repeat (depth) times {",
                                                                            "            spc := spc ++ \"    \"",
                                                                            "        }",
                                                                            "        var s := \"if ({self.value.toGrace(0)}) then \\{\"",
                                                                            "        for (self.thenblock.body) do { ix ->",
                                                                            "            s := s ++ \"\\n\" ++ spc ++ \"    \" ++ ix.toGrace(depth + 1)",
                                                                            "        }",
                                                                            "        if (self.elseblock.isntEmpty) then {",
                                                                            "            s := s ++ \"\\n\" ++ spc ++ \"\\} else \\{\"",
                                                                            "            for (self.elseblock.body) do { ix ->",
                                                                            "                s := s ++ \"\\n\" ++ spc ++ \"    \" ++ ix.toGrace(depth + 1)",
                                                                            "            }",
                                                                            "        }",
                                                                            "        s := s ++ \"\\n\" ++ spc ++ \"\\}\"",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method shallowCopy {",
                                                                            "        ifNode.new(nullNode, nullNode, nullNode).shallowCopyFieldsFrom(self)",
                                                                            "    }",
                                                                            "    method shallowCopyFieldsFrom(other) {",
                                                                            "        super.shallowCopyFieldsFrom(other)",
                                                                            "        handledIdentifiers := other.handledIdentifiers",
                                                                            "        self",
                                                                            "    }",
                                                                            "  }",
                                                                            "}",
                                                                            "def blockNode is public = object {",
                                                                            "  class new(params', body') {",
                                                                            "    inherits baseNode",
                                                                            "    def kind is public = \"block\"",
                                                                            "    def value is public = \"block\"",
                                                                            "    var params is public := params'",
                                                                            "    var body is public := body'",
                                                                            "    def selfclosure is public = true",
                                                                            "    var matchingPattern is public := false",
                                                                            "    var extraRuntimeData is public := false",
                                                                            "    for (params') do {p->",
                                                                            "        p.accept(patternMarkVisitor) from(ancestorChain.with(self))",
                                                                            "    }",
                                                                            "    method isBlock { true }",
                                                                            "    method isDelimited { true }",
                                                                            "    method isEmpty { body.size == 0 }",
                                                                            "    method isntEmpty { body.size > 0 }",
                                                                            "    method scope:=(st) {",
                                                                            "        // sets up the 2-way conection between this node",
                                                                            "        // and the synmol table that defines the scope that I open.",
                                                                            "        symbolTable := st",
                                                                            "        st.node := self",
                                                                            "    }",
                                                                            "    method declarationKindWithAncestors(as) { k.parameter }",
                                                                            "    method isMatchingBlock { params.size == 1 }",
                                                                            "    method returnsObject {",
                                                                            "        (body.size > 0) && { body.last.returnsObject }",
                                                                            "    }",
                                                                            "    method returnedObjectScope {",
                                                                            "        // precondition: returnsObject",
                                                                            "        body.last.returnedObjectScope",
                                                                            "    }",
                                                                            "    method parametersDo(b) {",
                                                                            "        params.do(b)",
                                                                            "    }",
                                                                            "    method accept(visitor : ASTVisitor) from(as) {",
                                                                            "        if (visitor.visitBlock(self) up(as)) then {",
                                                                            "            def newChain = as.extend(self)",
                                                                            "            for (self.params) do { mx ->",
                                                                            "                mx.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "            for (self.body) do { mx ->",
                                                                            "                mx.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "            if (false != self.matchingPattern) then {",
                                                                            "                self.matchingPattern.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "        }",
                                                                            "    }",
                                                                            "    method map(blk) ancestors(as) {",
                                                                            "        var n := shallowCopy",
                                                                            "        def newChain = as.extend(n)",
                                                                            "        n.params := listMap(params, blk) ancestors(newChain)",
                                                                            "        n.body := listMap(body, blk) ancestors(newChain)",
                                                                            "        n.matchingPattern := maybeMap(matchingPattern, blk) ancestors(newChain)",
                                                                            "        blk.apply(n, as)",
                                                                            "    }",
                                                                            "    method pretty(depth) {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..depth) do { i ->",
                                                                            "            spc := spc ++ \"  \"",
                                                                            "        }",
                                                                            "        var s := super.pretty(depth) ++ \"\\n\"",
                                                                            "        s := s ++ spc ++ \"Parameters:\"",
                                                                            "        for (self.params) do { mx ->",
                                                                            "            s := s ++ \"\\n  \"++ spc ++ mx.pretty(depth+1)",
                                                                            "        }",
                                                                            "        s := s ++ \"\\n\"",
                                                                            "        s := s ++ spc ++ \"Body:\"",
                                                                            "        for (self.body) do { mx ->",
                                                                            "            s := s ++ \"\\n  \"++ spc ++ mx.pretty(depth+1)",
                                                                            "        }",
                                                                            "        if (false != self.matchingPattern) then {",
                                                                            "            s := s ++ \"\\n\"",
                                                                            "            s := s ++ spc ++ \"Pattern:\"",
                                                                            "            s := s ++ \"\\n  \"++ spc ++ self.matchingPattern.pretty(depth+1)",
                                                                            "        }",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method toGrace(depth : Number) -> String {",
                                                                            "        var spc := \"\"",
                                                                            "        repeat (depth) times {",
                                                                            "            spc := spc ++ \"    \"",
                                                                            "        }",
                                                                            "        var s := \"\\{\"",
                                                                            "        if (self.params.size > 0) then {",
                                                                            "            s := s ++ \" \"",
                                                                            "            for (self.params.indices) do { i ->",
                                                                            "                var p := self.params.at(i)",
                                                                            "                if (false != self.matchingPattern) then {",
                                                                            "                    s := s ++ \"(\" ++ p.toGrace(0) ++ \")\"",
                                                                            "                } else {",
                                                                            "                    s := s ++ p.toGrace(0)",
                                                                            "                }",
                                                                            "                if (i < self.params.size) then {",
                                                                            "                    s := s ++ \", \"",
                                                                            "                } else {",
                                                                            "                    s := s ++ \" →\"",
                                                                            "                }",
                                                                            "            }",
                                                                            "        }",
                                                                            "        for (self.body) do { mx ->",
                                                                            "            s := s ++ \"\\n\" ++ spc ++ mx.toGrace(depth + 1)",
                                                                            "        }",
                                                                            "        s := s ++ \"\\n\"",
                                                                            "        repeat (depth - 1) times { s := s ++ \"    \" }",
                                                                            "        s ++ \"\\}\"",
                                                                            "    }",
                                                                            "    method shallowCopy {",
                                                                            "        blockNode.new(params, body).shallowCopyFieldsFrom(self)",
                                                                            "    }",
                                                                            "    method shallowCopyFieldsFrom(other) {",
                                                                            "        super.shallowCopyFieldsFrom(other)",
                                                                            "        matchingPattern := other.matchingPattern",
                                                                            "        extraRuntimeData := other.extraRuntimeData",
                                                                            "        self",
                                                                            "    }",
                                                                            "  }",
                                                                            "}",
                                                                            "def tryCatchNode is public = object {",
                                                                            "  class new(block, cases', finally') {",
                                                                            "    inherits baseNode",
                                                                            "    def kind is public = \"trycatch\"",
                                                                            "    var value is public := block",
                                                                            "    var cases is public := cases'",
                                                                            "    var finally is public := finally'",
                                                                            "    method isSimple { false }  // needs parens when used as reciever",
                                                                            "",
                                                                            "    method accept(visitor : ASTVisitor) from(as) {",
                                                                            "        if (visitor.visitTryCatch(self) up(as)) then {",
                                                                            "            def newChain = as.extend(self)",
                                                                            "            self.value.accept(visitor) from(newChain)",
                                                                            "            for (self.cases) do { mx ->",
                                                                            "                mx.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "            if (false != self.finally) then {",
                                                                            "                self.finally.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "        }",
                                                                            "    }",
                                                                            "    method map(blk) ancestors(as) {",
                                                                            "        var n := shallowCopy",
                                                                            "        def newChain = as.extend(n)",
                                                                            "        n.value := value.map(blk) ancestors(newChain)",
                                                                            "        n.cases := listMap(cases, blk) ancestors(newChain)",
                                                                            "        n.finally := maybeMap(finally, blk) ancestors(newChain)",
                                                                            "        blk.apply(n, as)",
                                                                            "    }",
                                                                            "    method pretty(depth) {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..depth) do { i ->",
                                                                            "            spc := spc ++ \"  \"",
                                                                            "        }",
                                                                            "        var s := \"{super.pretty(depth)}\\n\"",
                                                                            "        s := s ++ spc ++ value.pretty(depth + 2)",
                                                                            "        for (self.cases) do { mx ->",
                                                                            "            s := s ++ \"\\n{spc}Case:\\n{spc}  {mx.pretty(depth+2)}\"",
                                                                            "        }",
                                                                            "        if (false != self.finally) then {",
                                                                            "            s := s ++ \"\\n{spc}Finally:\\n{spc}  {self.finally.pretty(depth+2)}\"",
                                                                            "        }",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method toGrace(depth : Number) -> String {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..(depth - 1)) do { i ->",
                                                                            "            spc := spc ++ \"    \"",
                                                                            "        }",
                                                                            "        var s := \"try \" ++ self.value.toGrace(depth + 1) ++ \" \"",
                                                                            "        for (self.cases) do { case ->",
                                                                            "            s := s ++ \"\\n\" ++ spc ++ \"    \" ++ \"catch \" ++ case.toGrace(depth + 1)",
                                                                            "        }",
                                                                            "        if (false != self.finally) then {",
                                                                            "            s := s ++ \"\\n\" ++ spc ++ \"    \" ++ \"finally \" ++ self.finally.toGrace(depth + 1)",
                                                                            "        }",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method shallowCopy {",
                                                                            "        tryCatchNode.new(nullNode, emptySeq, false).shallowCopyFieldsFrom(self)",
                                                                            "    }",
                                                                            "  }",
                                                                            "}",
                                                                            "def matchCaseNode is public = object {",
                                                                            "  class new(matchee', cases', elsecase') {",
                                                                            "    inherits baseNode",
                                                                            "    def kind is public = \"matchcase\"",
                                                                            "    var value is public := matchee'",
                                                                            "    var cases is public := cases'",
                                                                            "    var elsecase is public := elsecase'",
                                                                            "    method isSimple { false }  // needs parens when used as reciever",
                                                                            "    method matchee { value }",
                                                                            "    method accept(visitor : ASTVisitor) from(as) {",
                                                                            "        if (visitor.visitMatchCase(self) up(as)) then {",
                                                                            "            def newChain = as.extend(self)",
                                                                            "            self.value.accept(visitor) from(newChain)",
                                                                            "            for (self.cases) do { mx ->",
                                                                            "                mx.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "            if (false != self.elsecase) then {",
                                                                            "                self.elsecase.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "        }",
                                                                            "    }",
                                                                            "    method map(blk) ancestors(as) {",
                                                                            "        var n := shallowCopy",
                                                                            "        def newChain = as.extend(n)",
                                                                            "        n.value := value.map(blk) ancestors(newChain)",
                                                                            "        n.cases := listMap(cases, blk) ancestors(newChain)",
                                                                            "        n.elsecase := maybeMap(elsecase, blk) ancestors(newChain)",
                                                                            "        blk.apply(n, as)",
                                                                            "    }",
                                                                            "    method pretty(depth) {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..depth) do { i ->",
                                                                            "            spc := spc ++ \"  \"",
                                                                            "        }",
                                                                            "        var s := super.pretty(depth) ++ \"\\n\"",
                                                                            "        s := s ++ spc ++ matchee.pretty(depth + 2)",
                                                                            "        for (self.cases) do { mx ->",
                                                                            "            s := s ++ \"\\n{spc}Case:\\n{spc}  {mx.pretty(depth+2)}\"",
                                                                            "        }",
                                                                            "        if (false != self.elsecase) then {",
                                                                            "            s := s ++ \"\\n{spc}Else:\\n{spc}  {self.elsecase.pretty(depth+2)}\"",
                                                                            "        }",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method toGrace(depth : Number) -> String {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..(depth - 1)) do { i ->",
                                                                            "            spc := spc ++ \"    \"",
                                                                            "        }",
                                                                            "        var s := \"match(\" ++ self.value.toGrace(0) ++ \")\"",
                                                                            "        for (self.cases) do { case ->",
                                                                            "            s := s ++ \"\\n\" ++ spc ++ \"    \" ++ \"case \" ++ case.toGrace(depth + 2)",
                                                                            "        }",
                                                                            "        if (false != self.elsecase) then {",
                                                                            "            s := s ++ \"\\n\" ++ spc ++ \"    \" ++ \"else \" ++ self.elsecase.toGrace(depth + 2)",
                                                                            "        }",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method shallowCopy {",
                                                                            "        matchCaseNode.new(nullNode, emptySeq, false).shallowCopyFieldsFrom(self)",
                                                                            "    }",
                                                                            "  }",
                                                                            "}",
                                                                            "def methodTypeNode is public = object {",
                                                                            "  class new(signature', rtype') {",
                                                                            "    // Represents the signature of a method in a type literal",
                                                                            "    // signature' is an Iterable of requestPart objects, which contain",
                                                                            "    // the parts of the name and the parameter lists.",
                                                                            "",
                                                                            "    inherits baseNode",
                                                                            "    def kind is public = \"methodtype\"",
                                                                            "    var signature is public := signature'",
                                                                            "    var rtype is public := rtype'",
                                                                            "    var typeParams is public := false",
                                                                            "    var cachedIdentifier := uninitialized",
                                                                            "",
                                                                            "    method nameString {",
                                                                            "        signature.fold { acc, each -> acc ++ each.nameString }",
                                                                            "            startingWith \"\"",
                                                                            "    }",
                                                                            "    method value {",
                                                                            "        if (uninitialized == cachedIdentifier) then {",
                                                                            "            cachedIdentifier := identifierNode.new(nameString, false)",
                                                                            "            cachedIdentifier.line := signature.first.line",
                                                                            "            cachedIdentifier.linePos := signature.first.linePos",
                                                                            "            cachedIdentifier.isBindingOccurrence := true",
                                                                            "        }",
                                                                            "        cachedIdentifier",
                                                                            "    }",
                                                                            "    method isExecutable { false }",
                                                                            "    method parametersDo(b) {",
                                                                            "        signature.do { part ->",
                                                                            "            part.params.do { each -> b.apply(each) }",
                                                                            "        }",
                                                                            "    }",
                                                                            "    method scope:=(st) {",
                                                                            "        // sets up the 2-way conection between this node",
                                                                            "        // and the symbol table that defines the scope that I open.",
                                                                            "        symbolTable := st",
                                                                            "        st.node := self",
                                                                            "    }",
                                                                            "    method declarationKindWithAncestors(as) { k.typedec }",
                                                                            "    method accept(visitor : ASTVisitor) from(as) {",
                                                                            "        if (visitor.visitMethodType(self) up(as)) then {",
                                                                            "            def newChain = as.extend(self)",
                                                                            "            if (false != typeParams) then {",
                                                                            "                typeParams.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "            if (false != rtype) then {",
                                                                            "                rtype.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "            for (signature) do { part ->",
                                                                            "                part.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "        }",
                                                                            "    }",
                                                                            "    method map(blk) ancestors(as) {",
                                                                            "        var n := shallowCopy",
                                                                            "        def newChain = as.extend(n)",
                                                                            "        n.rtype := maybeMap(rtype, blk) ancestors(newChain)",
                                                                            "        n.signature := listMap(signature, blk) ancestors(newChain)",
                                                                            "        n.typeParams := maybeMap(typeParams, blk) ancestors(newChain)",
                                                                            "        blk.apply(n, as)",
                                                                            "    }",
                                                                            "    method pretty(depth) {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..depth) do { i ->",
                                                                            "            spc := spc ++ \"  \"",
                                                                            "        }",
                                                                            "        var s := super.pretty(depth) ++ \"\\n\"",
                                                                            "        s := \"{s}{spc}Name: {value}\\n\"",
                                                                            "        if (false != rtype) then {",
                                                                            "            s := \"{s}{spc}Returns:\\n  {spc}{rtype.pretty(depth + 2)}\"",
                                                                            "        }",
                                                                            "        if (false != typeParams) then {",
                                                                            "            s := \"{s}\\n{spc}TypeParams:\\n\"",
                                                                            "            s := s ++ typeParams.pretty(depth + 2)",
                                                                            "        }",
                                                                            "        s := \"{s}\\n{spc}Signature:\"",
                                                                            "        for (signature) do { part ->",
                                                                            "            s := \"{s}\\n  {spc}{part.pretty(depth + 2)}\"",
                                                                            "        }",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method toGrace(depth : Number) -> String {",
                                                                            "        var s := \"\"",
                                                                            "        signature.do { part -> s:= s ++ part.toGrace(depth + 1) }",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method shallowCopy {",
                                                                            "        methodTypeNode.new(signature, rtype).shallowCopyFieldsFrom(self)",
                                                                            "    }",
                                                                            "  }",
                                                                            "}",
                                                                            "def typeLiteralNode is public = object {",
                                                                            "  class new(methods', types') {",
                                                                            "    inherits baseNode",
                                                                            "    def kind is public = \"typeliteral\"",
                                                                            "    var methods is public := methods'",
                                                                            "    var types is public := types'",
                                                                            "    var nominal is public := false",
                                                                            "    var anonymous is public := true",
                                                                            "    var value is public := \"‹anon›\"",
                                                                            "",
                                                                            "    method name { value }",
                                                                            "    method name:=(n) {",
                                                                            "        value := n",
                                                                            "        anonymous := false",
                                                                            "    }",
                                                                            "    method asString {",
                                                                            "        \"typeliteral: methods = {methods}, types = {types}\"",
                                                                            "    }",
                                                                            "    method declarationKindWithAncestors(as) { k.typedec }",
                                                                            "    method isExecutable { false }",
                                                                            "",
                                                                            "    method accept(visitor : ASTVisitor) from(as) {",
                                                                            "        if (visitor.visitTypeLiteral(self) up(as)) then {",
                                                                            "            def newChain = as.extend(self)",
                                                                            "            for (self.methods) do { each ->",
                                                                            "                each.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "            for (self.types) do { each ->",
                                                                            "                each.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "        }",
                                                                            "    }",
                                                                            "    method map(blk) ancestors(as) {",
                                                                            "        var n := shallowCopy",
                                                                            "        def newChain = as.extend(n)",
                                                                            "        n.methods := listMap(methods, blk) ancestors (as)",
                                                                            "        n.types := listMap(types, blk) ancestors (as)",
                                                                            "        blk.apply(n, as)",
                                                                            "    }",
                                                                            "    method pretty(depth) {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..depth) do { i ->",
                                                                            "            spc := spc ++ \"  \"",
                                                                            "        }",
                                                                            "        var s := \"{super.pretty(depth)}\\n\"",
                                                                            "        s := s ++ spc ++ \"Types:\"",
                                                                            "        for (types) do { each ->",
                                                                            "            s := s ++ \"\\n  \"++ spc ++ each.pretty(depth+2)",
                                                                            "        }",
                                                                            "        s := s ++ \"\\n\" ++ spc ++ \"Methods:\"",
                                                                            "        for (methods) do { each ->",
                                                                            "            s := s ++ \"\\n  \"++ spc ++ each.pretty(depth+2)",
                                                                            "        }",
                                                                            "        s := s ++ \"\\n\"",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method toGrace(depth : Number) -> String {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..(depth - 1)) do { i ->",
                                                                            "            spc := spc ++ \"    \"",
                                                                            "        }",
                                                                            "        var s := \"type\"",
                                                                            "        s := s ++ \" = \\{\"",
                                                                            "        for (self.methods) do { each ->",
                                                                            "            s := s ++ \"\\n\" ++ spc ++ \"    \" ++ each.toGrace(depth + 1)",
                                                                            "        }",
                                                                            "        for (self.types) do { each ->",
                                                                            "            s := s ++ \"\\n\" ++ spc ++ \"    \" ++ each.toGrace(depth + 1)",
                                                                            "        }",
                                                                            "        s ++ \"\\}\"",
                                                                            "    }",
                                                                            "    method shallowCopy {",
                                                                            "        typeLiteralNode.new(emptySeq, emptySeq).shallowCopyFieldsFrom(self)",
                                                                            "    }",
                                                                            "    method shallowCopyFieldsFrom(other) {",
                                                                            "        super.shallowCopyFieldsFrom(other)",
                                                                            "        nominal := other.nominal",
                                                                            "        anonymous := other.anonymous",
                                                                            "        value := other.value",
                                                                            "        self",
                                                                            "    }",
                                                                            "  }",
                                                                            "}",
                                                                            "",
                                                                            "def typeDecNode is public = object {",
                                                                            "  class new(name', typeValue) {",
                                                                            "    inherits baseNode",
                                                                            "    def kind is public = \"typedec\"",
                                                                            "    var name is public := name'",
                                                                            "    var value is public := typeValue",
                                                                            "    def nameString is public = name.value",
                                                                            "    var annotations is public := [ ]",
                                                                            "    var typeParams is public := false",
                                                                            "",
                                                                            "    method isLegalInTrait { true }",
                                                                            "    method isTypeDec { true }",
                                                                            "    method scope:=(st) {",
                                                                            "        // sets up the 2-way conection between this node",
                                                                            "        // and the synmol table that defines the scope that I open.",
                                                                            "        symbolTable := st",
                                                                            "        st.node := self",
                                                                            "    }",
                                                                            "",
                                                                            "    method isExecutable { true }",
                                                                            "    method declarationKindWithAncestors(as) { k.typeparam }",
                                                                            "    method isConfidential {",
                                                                            "        if (annotations.size == 0) then { return false }",
                                                                            "        findAnnotation(self, \"confidential\")",
                                                                            "    }",
                                                                            "    method isPublic { isConfidential.not }",
                                                                            "    method isWritable { false }",
                                                                            "    method isReadable { isPublic }",
                                                                            "",
                                                                            "    method accept(visitor : ASTVisitor) from(as) {",
                                                                            "        if (visitor.visitTypeDec(self) up(as)) then {",
                                                                            "            def newChain = as.extend(self)",
                                                                            "            name.accept(visitor) from(newChain)",
                                                                            "            if (false != typeParams) then {",
                                                                            "                typeParams.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "            annotations.do { each -> each.accept(visitor) from(newChain) }",
                                                                            "            value.accept(visitor) from(newChain)",
                                                                            "        }",
                                                                            "    }",
                                                                            "    method map(blk) ancestors(as) {",
                                                                            "        var n := shallowCopy",
                                                                            "        def newChain = as.extend(n)",
                                                                            "        n.name := name.map(blk) ancestors(newChain)",
                                                                            "        n.typeParams := maybeMap(typeParams, blk) ancestors(newChain)",
                                                                            "        n.value := value.map(blk) ancestors(newChain)",
                                                                            "        n.annotations := listMap(annotations, blk) ancestors(newChain)",
                                                                            "        blk.apply(n, as)",
                                                                            "    }",
                                                                            "    method pretty(depth) {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..depth) do { i ->",
                                                                            "            spc := spc ++ \"  \"",
                                                                            "        }",
                                                                            "        var s := super.pretty(depth) ++ \"\\n\"",
                                                                            "        s := s ++ spc ++ self.name.pretty(depth + 1) ++ \"\\n\"",
                                                                            "        if (false != typeParams) then {",
                                                                            "            s := \"{s}{spc}Type parameters:\\n{typeParams.pretty(depth + 2)}\\n\"",
                                                                            "        }",
                                                                            "        s := s ++ spc ++ \"Value:\"",
                                                                            "        s := s ++ value.pretty(depth+2)",
                                                                            "        s := s ++ \"\\n\"",
                                                                            "        if (false != comments) then {",
                                                                            "            s := s ++ comments.pretty(depth+2)",
                                                                            "        }",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method toGrace(depth : Number) -> String {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..(depth - 1)) do { i ->",
                                                                            "            spc := spc ++ \"    \"",
                                                                            "        }",
                                                                            "        var s := \"\"",
                                                                            "        s := \"type {self.name}\"",
                                                                            "        if (false != typeParams) then {",
                                                                            "            typeParams.toGrace(0)",
                                                                            "        }",
                                                                            "        s ++ \" = \" ++ value.toGrace(depth + 2)",
                                                                            "    }",
                                                                            "    method shallowCopy {",
                                                                            "        typeDecNode.new(name, nullNode).shallowCopyFieldsFrom(self)",
                                                                            "    }",
                                                                            "  }",
                                                                            "}",
                                                                            "",
                                                                            "def methodNode = object {",
                                                                            "    method new(signature, body, dtype) scope(s) {",
                                                                            "        def result = new(signature, body, dtype)",
                                                                            "        result.scope := s",
                                                                            "        result",
                                                                            "    }",
                                                                            "",
                                                                            "    class new(signature', body', dtype') {",
                                                                            "        // Represents a method declaration",
                                                                            "        // The name of the method is constructed from signature',",
                                                                            "        // which is a sequence of signatureParts;",
                                                                            "        // body is a sequence of statements and declarations.",
                                                                            "        // dtype is the declared return type of the method, or false.",
                                                                            "",
                                                                            "        inherits baseNode",
                                                                            "        def kind is public = \"method\"",
                                                                            "        var signature is public := signature'",
                                                                            "        var body is public := body'",
                                                                            "        var dtype is public := dtype'",
                                                                            "        var typeParams is public := false",
                                                                            "        var selfclosure is public := false",
                                                                            "        var annotations is public := [ ]",
                                                                            "        var isFresh is public := false      // a method is 'fresh' if it answers a new object",
                                                                            "        var usesClassSyntax is public := false",
                                                                            "        var cachedIdentifier := uninitialized",
                                                                            "        var isBindingOccurence is readable := true",
                                                                            "            // the only exception is the oldMethodName in an alias clause",
                                                                            "",
                                                                            "        method appliedOccurence {",
                                                                            "            isBindingOccurence := false",
                                                                            "            if (uninitialized ≠ cachedIdentifier) then {",
                                                                            "                cachedIdentifier.isBindingOccurence := false",
                                                                            "            }",
                                                                            "            self",
                                                                            "        }",
                                                                            "        method numParams {",
                                                                            "            signature.fold { acc, p -> acc + p.numParams } startingWith 0",
                                                                            "        }",
                                                                            "        method endPos {",
                                                                            "            def lastPart = signature.last",
                                                                            "            lastPart.linePos + lastPart.name.size - 1",
                                                                            "        }",
                                                                            "",
                                                                            "        method nameString {",
                                                                            "            signature.fold { acc, each -> acc ++ each.nameString }",
                                                                            "                startingWith \"\"",
                                                                            "        }",
                                                                            "        method asIdentifier {",
                                                                            "            if (uninitialized == cachedIdentifier) then {",
                                                                            "                cachedIdentifier := identifierNode.new(nameString, false)",
                                                                            "                cachedIdentifier.line := signature.first.line",
                                                                            "                cachedIdentifier.linePos := signature.first.linePos",
                                                                            "                cachedIdentifier.isBindingOccurrence := isBindingOccurence",
                                                                            "            }",
                                                                            "            cachedIdentifier",
                                                                            "        }",
                                                                            "        method value { asIdentifier }",
                                                                            "        method canonicalName {",
                                                                            "            signature.fold { acc, each -> acc ++ each.canonicalName }",
                                                                            "                startingWith \"\"",
                                                                            "        }",
                                                                            "        method hasParams { signature.first.params.isEmpty.not }",
                                                                            "        method numParamLists {",
                                                                            "            // the number of my parameter lists.  If I have a single",
                                                                            "            // part to my name, there may be 0 or 1",
                                                                            "            def sigSz = signature.size",
                                                                            "            if (sigSz > 1) then { return sigSz }",
                                                                            "            if {signature.first.params.isEmpty} then { return 0 }",
                                                                            "            return 1",
                                                                            "        }",
                                                                            "        method hasTypeParams { false ≠ signature.first.typeParams }",
                                                                            "        method isMethod { true }",
                                                                            "        method isExecutable { false }",
                                                                            "        method isLegalInTrait { true }",
                                                                            "        method isClass { isFresh || usesClassSyntax }",
                                                                            "        method isTrait {",
                                                                            "            if (isFresh) then {",
                                                                            "                body.last.isTrait",
                                                                            "            } else {",
                                                                            "                false",
                                                                            "            }",
                                                                            "        }",
                                                                            "        method needsArgChecks {",
                                                                            "            signature.do { part ->",
                                                                            "                part.params.do { p ->",
                                                                            "                    if ((false != p.dtype) && {",
                                                                            "                            p.dtype.nameString != \"Unknown\" }) then {",
                                                                            "                        return true",
                                                                            "                    }",
                                                                            "                }",
                                                                            "            }",
                                                                            "            return false",
                                                                            "        }",
                                                                            "        method scope:=(st) {",
                                                                            "            // sets up the 2-way conection between this node",
                                                                            "            // and the synmol table that defines the scope that I open.",
                                                                            "            symbolTable := st",
                                                                            "            st.node := self",
                                                                            "        }",
                                                                            "        method declarationKindWithAncestors(as) { k.parameter }",
                                                                            "        method isConfidential {",
                                                                            "            if (annotations.size == 0) then { return false }",
                                                                            "            findAnnotation(self, \"confidential\")",
                                                                            "        }",
                                                                            "        method isPublic { isConfidential.not }",
                                                                            "        method isWritable { false }",
                                                                            "        method isReadable { isPublic }",
                                                                            "        method usesAsType(aNode) {",
                                                                            "            aNode == dtype",
                                                                            "        }",
                                                                            "        method returnsObject {",
                                                                            "            body.isEmpty.not && {body.last.returnsObject}",
                                                                            "        }",
                                                                            "        method returnedObjectScope {",
                                                                            "            // precondition: returnsObject",
                                                                            "            body.last.returnedObjectScope",
                                                                            "        }",
                                                                            "        method accept(visitor : ASTVisitor) from(as) {",
                                                                            "            if (visitor.visitMethod(self) up(as)) then {",
                                                                            "                def newChain = as.extend(self)",
                                                                            "                self.value.accept(visitor) from(newChain)",
                                                                            "                if (false != typeParams) then {",
                                                                            "                    typeParams.accept(visitor) from(newChain)",
                                                                            "                }",
                                                                            "                for (self.signature) do { part ->",
                                                                            "                    for (part.params) do { p ->",
                                                                            "                        p.accept(visitor) from(newChain)",
                                                                            "                    }",
                                                                            "                }",
                                                                            "                if (false != dtype) then {",
                                                                            "                    dtype.accept(visitor) from(newChain)",
                                                                            "                }",
                                                                            "                for (self.annotations) do { ann ->",
                                                                            "                    ann.accept(visitor) from(newChain)",
                                                                            "                }",
                                                                            "                for (self.body) do { mx ->",
                                                                            "                    mx.accept(visitor) from(newChain)",
                                                                            "                }",
                                                                            "            }",
                                                                            "        }",
                                                                            "        method map(blk) ancestors(as){",
                                                                            "            var n := shallowCopy",
                                                                            "            def newChain = as.extend(n)",
                                                                            "            n.body := listMap(body, blk) ancestors(newChain)",
                                                                            "            n.typeParams := maybeMap(typeParams, blk) ancestors(newChain)",
                                                                            "            n.signature := listMap(signature, blk) ancestors(newChain)",
                                                                            "            n.annotations := listMap(annotations, blk) ancestors(newChain)",
                                                                            "            n.dtype := maybeMap(dtype, blk) ancestors(newChain)",
                                                                            "            blk.apply(n, as)",
                                                                            "        }",
                                                                            "        method pretty(depth) {",
                                                                            "            var spc := \"\"",
                                                                            "            for (0..depth) do { i ->",
                                                                            "                spc := spc ++ \"  \"",
                                                                            "            }",
                                                                            "            var s := super.pretty(depth) ++ \"\\n\"",
                                                                            "            s := s ++ spc ++ \"Name: \" ++ value.pretty(depth+1) ++ \"\\n\"",
                                                                            "            if (false != self.dtype) then {",
                                                                            "                s := s ++ spc ++ \"Returns:\\n\" ++ spc ++ \"  \"",
                                                                            "                s := s ++ self.dtype.pretty(depth + 2) ++ \"\\n\"",
                                                                            "            }",
                                                                            "            if (isBindingOccurence.not) then { s := s ++ spc ++ \"Applied\\n\" }",
                                                                            "            if (isFresh) then { s := s ++ spc ++ \"Fresh\\n\" }",
                                                                            "            s := \"{s}{spc}Signature:\"",
                                                                            "            for (signature) do { part ->",
                                                                            "                s := \"{s}\\n  {spc}Part: {part.name}\"",
                                                                            "                s := \"{s}\\n    {spc}Parameters:\"",
                                                                            "                for (part.params) do { p ->",
                                                                            "                    s := \"{s}\\n      {spc}{p.pretty(depth + 4)}\"",
                                                                            "                }",
                                                                            "            }",
                                                                            "            s := s ++ \"\\n\"",
                                                                            "            if (false != typeParams) then {",
                                                                            "                s := \"{s}{spc}Generics:\"",
                                                                            "                typeParams.do {g->",
                                                                            "                    s := \"{s}\\n{spc}  {g.pretty(0)}\"",
                                                                            "                }",
                                                                            "                s := s ++ \"\\n\"",
                                                                            "            }",
                                                                            "            if (annotations.size > 0) then {",
                                                                            "                s := \"{s}{spc}Annotations:\"",
                                                                            "                for (annotations) do {an->",
                                                                            "                    s := \"{s}\\n{spc}  {an.pretty(depth + 2)}\"",
                                                                            "                }",
                                                                            "                s := s ++ \"\\n\"",
                                                                            "            }",
                                                                            "            s := s ++ spc ++ \"Body:\"",
                                                                            "            for (self.body) do { mx ->",
                                                                            "                s := s ++ \"\\n  \"++ spc ++ mx.pretty(depth+2)",
                                                                            "            }",
                                                                            "            if (false != comments) then {",
                                                                            "                s := s ++ comments.pretty(depth+2)",
                                                                            "            }",
                                                                            "            s",
                                                                            "        }",
                                                                            "        method toGrace(depth : Number) -> String {",
                                                                            "            var spc := \"\"",
                                                                            "            for (0..(depth - 1)) do { i ->",
                                                                            "                spc := spc ++ \"    \"",
                                                                            "            }",
                                                                            "            var s := \"method \"",
                                                                            "            var firstPart := true",
                                                                            "            for (self.signature) do { part ->",
                                                                            "                s := s ++ part.name",
                                                                            "                if (firstPart && {false != typeParams}) then {",
                                                                            "                    s := s ++ typeParams.toGrace(depth + 1)",
                                                                            "                }",
                                                                            "                firstPart := false",
                                                                            "                if (part.params.size > 0) then {",
                                                                            "                    s := s ++ \"(\"",
                                                                            "                    for (part.params.indices) do { pnr ->",
                                                                            "                        var p := part.params.at(pnr)",
                                                                            "                        s := s ++ p.toGrace(depth + 1)",
                                                                            "                        if (pnr < part.params.size) then {",
                                                                            "                            s := s ++ \", \"",
                                                                            "                        }",
                                                                            "                    }",
                                                                            "                    s := s ++ \")\"",
                                                                            "                }",
                                                                            "            }",
                                                                            "            if (false != self.dtype) then {",
                                                                            "                s := s ++ \" -> {self.dtype.toGrace(0)}\"",
                                                                            "            }",
                                                                            "            if (self.annotations.size > 0) then {",
                                                                            "                s := s ++ \" is \"",
                                                                            "                s := s ++ self.annotations.fold{ a,b ->",
                                                                            "                    if (a != \"\") then { a ++ \", \" } else { \"\" } ++ b.toGrace(0) }",
                                                                            "                        startingWith \"\"",
                                                                            "            }",
                                                                            "            s := s ++ \" \\{\"",
                                                                            "            if (false != comments) then {",
                                                                            "                s := s ++ comments.toGrace(depth + 1)",
                                                                            "            }",
                                                                            "            for (self.body) do { mx ->",
                                                                            "                s := s ++ \"\\n\" ++ spc ++ \"    \" ++ mx.toGrace(depth + 1)",
                                                                            "            }",
                                                                            "            s := s ++ \"\\n\" ++ spc ++ \"\\}\"",
                                                                            "            s",
                                                                            "        }",
                                                                            "        method shallowCopy {",
                                                                            "            methodNode.new(signature, body, dtype).shallowCopyFieldsFrom(self)",
                                                                            "        }",
                                                                            "        method shallowCopyFieldsFrom(other) {",
                                                                            "            super.shallowCopyFieldsFrom(other)",
                                                                            "            isFresh := other.isFresh",
                                                                            "            selfclosure := other.selfclosure",
                                                                            "            if (other.isBindingOccurence.not) then {",
                                                                            "                self.appliedOccurence",
                                                                            "            }",
                                                                            "            self",
                                                                            "        }",
                                                                            "    }",
                                                                            "}",
                                                                            "def callNode = object {",
                                                                            "    method new(receiver, parts) scope(s) {",
                                                                            "        def result = new(receiver, parts)",
                                                                            "        result.scope := s",
                                                                            "        result",
                                                                            "    }",
                                                                            "    class new(receiver', parts) {",
                                                                            "        // requested as callNode.new(receiver':AstNode, parts:List)",
                                                                            "        // Represents a method request with arguments.",
                                                                            "        // The argument list is in `with`, as a sequence of `requestPart`s.",
                                                                            "",
                                                                            "        inherits baseNode",
                                                                            "        def kind is public = \"call\"",
                                                                            "        var with is public := parts            // [ argument parts ]",
                                                                            "        var generics is public := false",
                                                                            "        var isPattern is public := false",
                                                                            "        var receiver is public := receiver'    // formerly `value`",
                                                                            "        var isSelfRequest is public := false",
                                                                            "",
                                                                            "        method onSelf {",
                                                                            "            // mark as a self-request.  Answers self for chaining.",
                                                                            "            isSelfRequest := true",
                                                                            "            self",
                                                                            "        }",
                                                                            "",
                                                                            "        method nameString {",
                                                                            "            // the name of the method being requested, in numeric form",
                                                                            "            with.fold { acc, each -> acc ++ each.nameString } startingWith \"\"",
                                                                            "        }",
                                                                            "",
                                                                            "        method canonicalName {",
                                                                            "            // the name of the method being requested, in underscore form",
                                                                            "            with.fold { acc, each -> acc ++ each.canonicalName }",
                                                                            "                startingWith \"\"",
                                                                            "        }",
                                                                            "",
                                                                            "        method isCall { true }",
                                                                            "        method returnsObject {",
                                                                            "            // we recognize two special calls as returning a fresh object",
                                                                            "            // self.copy, and prelude.clone(_)",
                                                                            "            if ((receiver.isImplicit || receiver.isPrelude) &&",
                                                                            "                  (nameString == \"clone(1)\")) then {return true}",
                                                                            "            if ((receiver.isImplicit || receiver.isSelf) &&",
                                                                            "                  (nameString == \"copy\")) then {return true}",
                                                                            "            return false",
                                                                            "        }",
                                                                            "        method returnedObjectScope {",
                                                                            "            // precondition: returnsObject",
                                                                            "            self.scope",
                                                                            "        }",
                                                                            "        method arguments {",
                                                                            "            def result = [ ]",
                                                                            "            for (self.with) do { part ->",
                                                                            "                for (part.args) do { arg -> result.push(arg) }",
                                                                            "            }",
                                                                            "            result",
                                                                            "        }",
                                                                            "",
                                                                            "        method argumentsDo(action) {",
                                                                            "            for (self.with) do { part ->",
                                                                            "                for (part.args) do { arg -> action.apply(arg) }",
                                                                            "            }",
                                                                            "        }",
                                                                            "",
                                                                            "        method accept(visitor : ASTVisitor) from(as) {",
                                                                            "            if (visitor.visitCall(self) up(as)) then {",
                                                                            "                def newChain = as.extend(self)",
                                                                            "                self.receiver.accept(visitor) from(newChain)",
                                                                            "                for (self.with) do { part ->",
                                                                            "                    for (part.args) do { arg ->",
                                                                            "                        arg.accept(visitor) from(newChain)",
                                                                            "                    }",
                                                                            "                }",
                                                                            "                if (false != generics) then {",
                                                                            "                    generics.do { each ->",
                                                                            "                        each.accept(visitor) from(newChain)",
                                                                            "                    }",
                                                                            "                }",
                                                                            "            }",
                                                                            "        }",
                                                                            "        method map(blk) ancestors(as) {",
                                                                            "            var n := shallowCopy",
                                                                            "            def newChain = as.extend(n)",
                                                                            "            n.receiver := receiver.map(blk) ancestors(newChain)",
                                                                            "            n.with := listMap(with, blk) ancestors(newChain)",
                                                                            "            n.generics := maybeListMap(generics, blk) ancestors(newChain)",
                                                                            "            blk.apply(n, as)",
                                                                            "        }",
                                                                            "        method pretty(depth) {",
                                                                            "            var spc := \"\"",
                                                                            "            for (0..depth) do { i ->",
                                                                            "                spc := spc ++ \"  \"",
                                                                            "            }",
                                                                            "            var s := super.pretty(depth)",
                                                                            "            s := s ++ if (isSelfRequest) then { \" on self\\n\" } else { \"\\n\" }",
                                                                            "            s := s ++ spc ++ \"Receiver: {receiver.pretty(depth + 1)}\\n\"",
                                                                            "            s := s ++ spc ++ \"Method Name: {nameString}\\n\"",
                                                                            "            if (false != generics) then {",
                                                                            "                s := s ++ spc ++ \"  Generics:\\n\"",
                                                                            "                for (generics) do {g->",
                                                                            "                    s := s ++ spc ++ \"    \" ++ g.pretty(depth + 2) ++ \"\\n\"",
                                                                            "                }",
                                                                            "            }",
                                                                            "            s := s ++ spc ++ \"Arguments:\"",
                                                                            "            for (self.with) do { part ->",
                                                                            "                s := s ++ \"\\n  \" ++ spc ++ \"Part: \" ++ part.name",
                                                                            "                for (part.args) do { arg ->",
                                                                            "                    s := s ++ \"\\n      \" ++ spc ++ arg.pretty(depth + 2)",
                                                                            "                }",
                                                                            "            }",
                                                                            "            s",
                                                                            "        }",
                                                                            "        method toGrace(depth : Number) -> String {",
                                                                            "            var s := \"\"",
                                                                            "            if (receiver.isImplicit.not) then {",
                                                                            "                if (receiver.isSimple) then {",
                                                                            "                    s := \"{receiver.toGrace (depth + 1)}.\"",
                                                                            "                } else {",
                                                                            "                    s := \"({receiver.toGrace (depth + 1)}).\"",
                                                                            "                }",
                                                                            "            }",
                                                                            "            with.do { part -> s := s ++ part.toGrace(depth + 1) }",
                                                                            "                separatedBy { s := s ++ \" \" }",
                                                                            "            s",
                                                                            "        }",
                                                                            "        method asIdentifier {",
                                                                            "            // make and return an identifiderNode for my request",
                                                                            "            if (fakeSymbolTable == scope) then {",
                                                                            "                ProgrammingError.raise \"asIdentifier requested on {pretty 0} when scope was fake\"",
                                                                            "            }",
                                                                            "            def resultNode = identifierNode.new (nameString, false) scope (scope)",
                                                                            "            resultNode.inRequest := true",
                                                                            "            resultNode.line := line",
                                                                            "            resultNode.linePos := linePos",
                                                                            "            return resultNode",
                                                                            "        }",
                                                                            "        method asString { \"call {receiver.pretty(0)}\" }",
                                                                            "        method shallowCopy {",
                                                                            "            callNode.new(receiver, with).shallowCopyFieldsFrom(self)",
                                                                            "        }",
                                                                            "        method shallowCopyFieldsFrom(other) {",
                                                                            "            super.shallowCopyFieldsFrom(other)",
                                                                            "            isPattern := other.isPattern",
                                                                            "            isSelfRequest := other.isSelfRequest",
                                                                            "            self",
                                                                            "        }",
                                                                            "        method statementName { \"request\" }",
                                                                            "    }",
                                                                            "}",
                                                                            "def moduleNode = object {",
                                                                            "    method body(b) named(n) scope(s) {",
                                                                            "        def result = body(b)",
                                                                            "        result.name := n",
                                                                            "        result.scope := s",
                                                                            "        result",
                                                                            "    }",
                                                                            "    method body(b) named(n) {",
                                                                            "        def result = body(b)",
                                                                            "        result.name := n",
                                                                            "        result",
                                                                            "    }",
                                                                            "    class body(b) {",
                                                                            "        inherits objectNode.new(b, false)",
                                                                            "        def kind is public = \"module\"",
                                                                            "        def sourceLines = util.lines",
                                                                            "        line := 0       // because the module is always implicit",
                                                                            "        linePos := 0",
                                                                            "        var imports is public := [ ]",
                                                                            "",
                                                                            "        method isModule { true }",
                                                                            "        method returnsObject { false }",
                                                                            "        method externalsDo(action) {",
                                                                            "            value.do { o ->",
                                                                            "                if (o.isExternal) then { action.apply(o) }",
                                                                            "            }",
                                                                            "        }",
                                                                            "        method accept(visitor : ASTVisitor) from(as) {",
                                                                            "            if (visitor.visitModule(self) up(as)) then {",
                                                                            "                def newChain = as.extend(self)",
                                                                            "                if (false != self.superclass) then {",
                                                                            "                    self.superclass.accept(visitor) from(newChain)",
                                                                            "                }",
                                                                            "                for (self.value) do { x ->",
                                                                            "                    x.accept(visitor) from(newChain)",
                                                                            "                }",
                                                                            "            }",
                                                                            "        }",
                                                                            "        method shallowCopy {",
                                                                            "            moduleNode.body(emptySeq).shallowCopyFieldsFrom(self)",
                                                                            "        }",
                                                                            "        method shallowCopyFieldsFrom(other) {",
                                                                            "            super.shallowCopyFieldsFrom(other)",
                                                                            "            imports := other.imports",
                                                                            "            self",
                                                                            "        }",
                                                                            "    }",
                                                                            "}",
                                                                            "def objectNode is public = object {",
                                                                            "    method body(b) named(n) scope(s) {",
                                                                            "        def result = new(b, false)",
                                                                            "        result.name := n",
                                                                            "        result.scope := s",
                                                                            "        result",
                                                                            "    }",
                                                                            "    method body(b) named(n) {",
                                                                            "        body(b) named(n) scope(fakeSymbolTable)",
                                                                            "    }",
                                                                            "    class new(b, superclass') {",
                                                                            "        inherits baseNode",
                                                                            "        def kind is public = \"object\"",
                                                                            "        var value is public := b",
                                                                            "        var superclass is public := superclass'",
                                                                            "        var usedTraits is public := [ ]",
                                                                            "        var name is public := \"object\"",
                                                                            "        var inClass is public := false",
                                                                            "        var inTrait is public := false",
                                                                            "        var myLocalNames := false",
                                                                            "        var annotations is public := [ ]",
                                                                            "",
                                                                            "        method description -> String {",
                                                                            "            if (isTrait) then {",
                                                                            "                \"{kind} (trait)\"",
                                                                            "            } elseif { inClass } then {",
                                                                            "                \"{kind} (class)\"",
                                                                            "            } else {",
                                                                            "                kind",
                                                                            "            }",
                                                                            "        }",
                                                                            "        method isTrait {",
                                                                            "            // answers true if this object qualifies to be a trait, whether",
                                                                            "            // or not it was declared with the trait syntax",
                                                                            "            if (inTrait) then { return true }",
                                                                            "            if (false != superclass) then { return false }",
                                                                            "            value.do { each ->",
                                                                            "                if (each.isLegalInTrait.not) then { return false }",
                                                                            "            }",
                                                                            "            return true",
                                                                            "        }",
                                                                            "",
                                                                            "        method localNames -> Set⟦String⟧ {",
                                                                            "            // answers the names of all of the methods defined directly in",
                                                                            "            // this object.  Inherited names are _not_ included.",
                                                                            "            if (false == myLocalNames) then {",
                                                                            "                myLocalNames := emptySet",
                                                                            "                value.do { node ->",
                                                                            "                    if (node.isFieldDec || node.isMethod) then {",
                                                                            "                        myLocalNames.add(node.nameString)",
                                                                            "                    }",
                                                                            "                }",
                                                                            "            }",
                                                                            "            myLocalNames",
                                                                            "        }",
                                                                            "",
                                                                            "        method parentsDo(action) {",
                                                                            "            // iterate over my superclass and my used traits",
                                                                            "",
                                                                            "            if (false != superclass) then { action.apply(superclass) }",
                                                                            "            usedTraits.do { t -> action.apply(t) }",
                                                                            "        }",
                                                                            "",
                                                                            "        method methodsDo(action) {",
                                                                            "            // iterate over my method declarations",
                                                                            "",
                                                                            "            value.do { o ->",
                                                                            "                if (o.isMethod) then { action.apply(o) }",
                                                                            "            }",
                                                                            "        }",
                                                                            "",
                                                                            "        method executableComponentsDo(action) {",
                                                                            "            // iterate over my executable code, including",
                                                                            "            // field declarations (since they may have initializers)",
                                                                            "            value.do { o ->",
                                                                            "                if (o.isExecutable) then { action.apply(o) }",
                                                                            "            }",
                                                                            "        }",
                                                                            "",
                                                                            "        method scope:=(st) {",
                                                                            "            // sets up the 2-way conection between this node",
                                                                            "            // and the symbol table that defines the scope that I open.",
                                                                            "            symbolTable := st",
                                                                            "            st.node := self",
                                                                            "        }",
                                                                            "        method body { value }",
                                                                            "        method returnsObject { true }",
                                                                            "        method returnedObjectScope { scope }",
                                                                            "        method canInherit { inTrait.not }   // an object can inherit if not in a trait",
                                                                            "        method canUse { true }",
                                                                            "        method isObject { true }",
                                                                            "        method accept(visitor : ASTVisitor) from(as) {",
                                                                            "            if (visitor.visitObject(self) up(as)) then {",
                                                                            "                def newChain = as.extend(self)",
                                                                            "                if (false != superclass) then {",
                                                                            "                    superclass.accept(visitor) from(newChain)",
                                                                            "                }",
                                                                            "                usedTraits.do { t -> t.accept(visitor) from(newChain) }",
                                                                            "                value.do { x -> x.accept(visitor) from(newChain) }",
                                                                            "            }",
                                                                            "        }",
                                                                            "        method nameString {",
                                                                            "            if (name == \"object\") then {",
                                                                            "                \"object_on_line_{line}\"",
                                                                            "            } else {",
                                                                            "                name",
                                                                            "            }",
                                                                            "        }",
                                                                            "        method map(blk) ancestors(as) {",
                                                                            "            var n := shallowCopy",
                                                                            "            def newChain = as.extend(n)",
                                                                            "            n.value := listMap(value, blk) ancestors(newChain)",
                                                                            "            n.superclass := maybeMap(superclass, blk) ancestors(newChain)",
                                                                            "            n.usedTraits := listMap(usedTraits, blk) ancestors(newChain)",
                                                                            "            blk.apply(n, as)",
                                                                            "        }",
                                                                            "        method pretty(depth') {",
                                                                            "            var depth := depth'",
                                                                            "            var spc := \"\"",
                                                                            "            for (0..depth) do { i ->",
                                                                            "                spc := spc ++ \"  \"",
                                                                            "            }",
                                                                            "            var s := super.pretty(depth)",
                                                                            "            s := \"{s}\\n{spc}Name: {self.name}\"",
                                                                            "            if (false != self.superclass) then {",
                                                                            "                s := s ++ \"\\n\" ++ spc ++ \"Superclass: \" ++",
                                                                            "                        self.superclass.pretty(depth + 1)",
                                                                            "            }",
                                                                            "            if (usedTraits.isEmpty.not) then {",
                                                                            "                s := s ++ \"\\n\" ++ spc ++ \"Traits:\"",
                                                                            "                usedTraits.do { t ->",
                                                                            "                    s := \"{s}\\n{spc}  {t.pretty(depth + 1)}\"",
                                                                            "                }",
                                                                            "            }",
                                                                            "            value.do { x ->",
                                                                            "                s := s ++ \"\\n\"++ spc ++ x.pretty(depth + 1)",
                                                                            "            }",
                                                                            "            s",
                                                                            "        }",
                                                                            "        method toGrace(depth : Number) -> String {",
                                                                            "            var spc := \"\"",
                                                                            "            for (0..(depth - 1)) do { i ->",
                                                                            "                spc := spc ++ \"    \"",
                                                                            "            }",
                                                                            "            var s := \"object \\{\"",
                                                                            "            if (inTrait) then { s := s ++ \"   // trait\" }",
                                                                            "            if (inClass) then { s := s ++ \"   // class\" }",
                                                                            "            if (false != superclass) then {",
                                                                            "                s := s ++ \"\\n\" ++ superclass.toGrace(depth + 1)",
                                                                            "            }",
                                                                            "            usedTraits.do { t -> s := s ++ \"\\n\" ++ t.toGrace(depth + 1) }",
                                                                            "            value.do { x ->",
                                                                            "                s := s ++ \"\\n\" ++ spc ++ \"    \" ++ x.toGrace(depth + 1)",
                                                                            "            }",
                                                                            "            s := s ++ \"\\n\" ++ spc ++ \"\\}\"",
                                                                            "            s",
                                                                            "        }",
                                                                            "        method shallowCopy {",
                                                                            "            objectNode.new(emptySeq, false).shallowCopyFieldsFrom(self)",
                                                                            "        }",
                                                                            "        method shallowCopyFieldsFrom(other) {",
                                                                            "            super.shallowCopyFieldsFrom(other)",
                                                                            "            name := other.name",
                                                                            "            value := other.value",
                                                                            "            superclass := other.superclass",
                                                                            "            usedTraits := other.usedTraits",
                                                                            "            inClass := other.inClass",
                                                                            "            inTrait := other.inTrait",
                                                                            "            annotations := other.annotations",
                                                                            "            self",
                                                                            "        }",
                                                                            "        method asString {",
                                                                            "            \"object {nameString}\"",
                                                                            "        }",
                                                                            "    }",
                                                                            "}",
                                                                            "def arrayNode is public = object {",
                                                                            "  class new(values) {",
                                                                            "    inherits baseNode",
                                                                            "    def kind is public = \"array\"",
                                                                            "    var value is public := values",
                                                                            "    method accept(visitor : ASTVisitor) from(as) {",
                                                                            "        if (visitor.visitArray(self) up(as)) then {",
                                                                            "            def newChain = as.extend(self)",
                                                                            "            for (self.value) do { ax ->",
                                                                            "                ax.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "        }",
                                                                            "    }",
                                                                            "    method map(blk) ancestors(as) {",
                                                                            "        var n := shallowCopy",
                                                                            "        def newChain = as.extend(n)",
                                                                            "        n.value := listMap(value, blk) ancestors(newChain)",
                                                                            "        blk.apply(n, as)",
                                                                            "    }",
                                                                            "    method pretty(depth) {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..depth) do { ai ->",
                                                                            "            spc := spc ++ \"  \"",
                                                                            "        }",
                                                                            "        var s := super.pretty(depth)",
                                                                            "        for (self.value) do { ax ->",
                                                                            "            s := s ++ \"\\n\"++ spc ++ ax.pretty(depth+1)",
                                                                            "        }",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method toGrace(depth : Number) -> String {",
                                                                            "        var s := \"[\"",
                                                                            "        for (self.value.indices) do { i ->",
                                                                            "            s := s ++ self.value.at(i).toGrace(0)",
                                                                            "            if (i < self.value.size) then {",
                                                                            "                s := s ++ \", \"",
                                                                            "            }",
                                                                            "        }",
                                                                            "        s := s ++ \"]\"",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method shallowCopy {",
                                                                            "        arrayNode.new(emptySeq).shallowCopyFieldsFrom(self)",
                                                                            "    }",
                                                                            "  }",
                                                                            "}",
                                                                            "def memberNode = object {",
                                                                            "    method new(request, receiver) scope(s) {",
                                                                            "        // Represents a dotted request ‹receiver›.‹request› with no arguments.",
                                                                            "        def result = new(request, receiver)",
                                                                            "        result.scope := s",
                                                                            "        result",
                                                                            "    }",
                                                                            "    class new(request, receiver') {",
                                                                            "        // Represents a dotted request ‹receiver›.‹request› with no arguments.",
                                                                            "        inherits baseNode",
                                                                            "        def kind is public = \"member\"",
                                                                            "        var value is public := request  // NB: value is a String, not an Identifier",
                                                                            "        var receiver is public := receiver'",
                                                                            "        var generics is public := false",
                                                                            "        var isSelfRequest is public := false",
                                                                            "        ",
                                                                            "        method onSelf {",
                                                                            "            isSelfRequest := true",
                                                                            "            self",
                                                                            "        }",
                                                                            "        method nameString { value }",
                                                                            "        method canonicalName { value }",
                                                                            "        method isMember { true }",
                                                                            "        method isCall { true }",
                                                                            "",
                                                                            "        method with { emptySeq }",
                                                                            "        method arguments { emptySeq }",
                                                                            "        method argumentsDo { }",
                                                                            "        method accept(visitor : ASTVisitor) from(as) {",
                                                                            "            if (visitor.visitMember(self) up(as)) then {",
                                                                            "                def newChain = as.extend(self)",
                                                                            "                if (false != generics) then {",
                                                                            "                    generics.do { each -> each.accept(visitor) from(newChain) }",
                                                                            "                }",
                                                                            "                receiver.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "        }",
                                                                            "        method map(blk) ancestors(as) {",
                                                                            "            var n := shallowCopy",
                                                                            "            def newChain = as.extend(n)",
                                                                            "            n.receiver := receiver.map(blk) ancestors(newChain)",
                                                                            "            n.generics := maybeListMap(generics, blk) ancestors(newChain)",
                                                                            "            blk.apply(n, as)",
                                                                            "        }",
                                                                            "        method pretty(depth) {",
                                                                            "            var spc := \"\"",
                                                                            "            for (0..depth) do { i ->",
                                                                            "                spc := spc ++ \"  \"",
                                                                            "            }",
                                                                            "            var s := super.pretty(depth)",
                                                                            "            s := s ++ if (isSelfRequest) then { \" on self \" } else { \" \" }",
                                                                            "            s := s ++ \"‹\" ++ self.value ++ \"›\\n\"",
                                                                            "            s := s ++ spc ++ receiver.pretty(depth)",
                                                                            "            if (false != generics) then {",
                                                                            "                s := s ++ \"\\n\" ++ spc ++ \"  Generics:\"",
                                                                            "                for (generics) do {g->",
                                                                            "                    s := s ++ \"\\n\" ++ spc ++ \"    \" ++ g.pretty(0)",
                                                                            "                }",
                                                                            "            }",
                                                                            "            s",
                                                                            "        }",
                                                                            "        method toGrace(depth : Number) -> String {",
                                                                            "            var s := \"\"",
                                                                            "            if (self.value.substringFrom(1)to(6) == \"prefix\") then {",
                                                                            "                s := self.value.substringFrom(7)to(value.size)",
                                                                            "                s := s ++ \" \" ++ self.receiver.toGrace(0)",
                                                                            "            } else {",
                                                                            "                s := self.receiver.toGrace(depth) ++ \".\" ++ self.value",
                                                                            "            }",
                                                                            "            if (false != generics) then {",
                                                                            "                s := s ++ \"<\"",
                                                                            "                for (1..(generics.size - 1)) do {ix ->",
                                                                            "                    s := s ++ generics.at(ix).toGrace(depth + 1)",
                                                                            "                }",
                                                                            "                s := s ++ generics.last.toGrace(depth + 1) ++ \">\"",
                                                                            "            }",
                                                                            "            s",
                                                                            "        }",
                                                                            "        method asString { \"{receiver}.{value}\" }",
                                                                            "        method asIdentifier {",
                                                                            "            // make and return an identifiderNode for my request",
                                                                            "            if (fakeSymbolTable == scope) then {",
                                                                            "                ProgrammingError.raise \"asIdentifier requested on {pretty 0} when scope was fake\"",
                                                                            "            }",
                                                                            "            def resultNode = identifierNode.new (value, false) scope (scope)",
                                                                            "            resultNode.inRequest := true",
                                                                            "            resultNode.line := line",
                                                                            "            resultNode.linePos := linePos",
                                                                            "            return resultNode",
                                                                            "        }",
                                                                            "        method shallowCopy {",
                                                                            "            memberNode.new(nameString, receiver).shallowCopyFieldsFrom(self)",
                                                                            "        }",
                                                                            "        method statementName { \"expression\" }",
                                                                            "        method shallowCopyFieldsFrom(other) {",
                                                                            "            super.shallowCopyFieldsFrom(other)",
                                                                            "            generics := other.generics",
                                                                            "            isSelfRequest := other.isSelfRequest",
                                                                            "            self",
                                                                            "        }",
                                                                            "    }",
                                                                            "}",
                                                                            "def genericNode is public = object {",
                                                                            "  class new(base, arguments) {",
                                                                            "    // represents an application of a parameterized type to some arguments.",
                                                                            "    inherits baseNode",
                                                                            "    def kind is public = \"generic\"",
                                                                            "    var value is public := base",
                                                                            "        // in a generic application, `value` is the applied type",
                                                                            "        // e.g. in List⟦Number⟧, value is Identifier‹List›",
                                                                            "    var args is public := arguments",
                                                                            "    method nameString { value.nameString }",
                                                                            "    method asString { toGrace 0 }",
                                                                            "    method accept(visitor : ASTVisitor) from(as) {",
                                                                            "        if (visitor.visitGeneric(self) up(as)) then {",
                                                                            "            def newChain = as.extend(self)",
                                                                            "            self.value.accept(visitor) from(newChain)",
                                                                            "            for (self.args) do { p ->",
                                                                            "                p.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "        }",
                                                                            "    }",
                                                                            "    method map(blk) ancestors(as) {",
                                                                            "        var n := shallowCopy",
                                                                            "        def newChain = as.extend(n)",
                                                                            "        n.value := value.map(blk) ancestors(newChain)",
                                                                            "        n.args := listMap(args, blk) ancestors(newChain)",
                                                                            "        blk.apply(n, as)",
                                                                            "    }",
                                                                            "    method pretty(depth) {",
                                                                            "        var s := \"{super.pretty(depth)}({value.pretty(depth)})<\"",
                                                                            "        args.do { each -> s := s ++ each.pretty(depth+2) }",
                                                                            "            separatedBy { s := s ++ \", \" }",
                                                                            "        s ++ \">\"",
                                                                            "    }",
                                                                            "    method toGrace(depth : Number) -> String {",
                                                                            "        var s := nameString ++ \"<\"",
                                                                            "        args.do { each -> s := s ++ each.toGrace(0) }",
                                                                            "            separatedBy { s := s ++ \", \" }",
                                                                            "        s ++ \">\"",
                                                                            "    }",
                                                                            "    method shallowCopy {",
                                                                            "        genericNode.new(value, args).shallowCopyFieldsFrom(self)",
                                                                            "    }",
                                                                            "  }",
                                                                            "}",
                                                                            "",
                                                                            "def typeParametersNode is public = object {",
                                                                            "  class new(params') {",
                                                                            "    inherits baseNode",
                                                                            "    def kind is public = \"typeparams\"",
                                                                            "    var params is public := params'",
                                                                            "    method asString { toGrace 0 }",
                                                                            "    method declarationKindWithAncestors(as) { k.typeparam }",
                                                                            "",
                                                                            "    method accept(visitor : ASTVisitor) from(as) {",
                                                                            "        if (visitor.visitTypeParameters(self) up(as)) then {",
                                                                            "            def newChain = as.extend(self)",
                                                                            "            params.do { p ->",
                                                                            "                p.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "        }",
                                                                            "    }",
                                                                            "    method do(blk) {",
                                                                            "        params.do(blk)",
                                                                            "    }",
                                                                            "    method size { params.size }",
                                                                            "    method map(blk) ancestors(as) {",
                                                                            "        var n := shallowCopy",
                                                                            "        def newChain = as.extend(n)",
                                                                            "        n.params := listMap(params, blk) ancestors(newChain)",
                                                                            "        blk.apply(n, as)",
                                                                            "    }",
                                                                            "    method pretty(depth) {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..depth) do { i ->",
                                                                            "            spc := spc ++ \"  \"",
                                                                            "        }",
                                                                            "        var s := spc ++ super.pretty(depth) ++ \"<\"",
                                                                            "        params.do { each -> s := s ++ each.pretty(depth+2) }",
                                                                            "            separatedBy { s := s ++ \", \" }",
                                                                            "        s ++ \">\"",
                                                                            "    }",
                                                                            "    method toGrace(depth:Number) -> String {",
                                                                            "        var s := \"<\"",
                                                                            "        params.do { each -> s := \"{s}{each.toGrace(depth)}\" }",
                                                                            "            separatedBy { s := s ++ \", \" }",
                                                                            "        s ++ \">\"",
                                                                            "    }",
                                                                            "    method shallowCopy {",
                                                                            "        typeParametersNode.new(emptySeq).shallowCopyFieldsFrom(self)",
                                                                            "    }",
                                                                            "  }",
                                                                            "}",
                                                                            "def identifierNode = object {",
                                                                            "",
                                                                            "    method new(name, dtype) scope(s) {",
                                                                            "        def result = new(name, dtype)",
                                                                            "        result.scope := s",
                                                                            "        result",
                                                                            "    }",
                                                                            "",
                                                                            "    class new(name, dtype') {",
                                                                            "        inherits baseNode",
                                                                            "        def kind is public = \"identifier\"",
                                                                            "        var value is public := name",
                                                                            "        var wildcard is public := false",
                                                                            "        var dtype is public := dtype'",
                                                                            "        var isBindingOccurrence is public := false",
                                                                            "        var isAssigned is public := false",
                                                                            "        var inRequest is public := false",
                                                                            "        var generics is public := false",
                                                                            "        var isDeclaredByParent is public := false",
                                                                            "",
                                                                            "        method nameString { value }",
                                                                            "        method canonicalName { value }",
                                                                            "        method quoted { value.quoted }",
                                                                            "        method isIdentifier { true }",
                                                                            "        ",
                                                                            "        method isSelf { \"self\" == value }",
                                                                            "        method isSuper { \"super\" == value }",
                                                                            "        method isPrelude { \"prelude\" == value }",
                                                                            "        method isOuter { \"outer\" == value }",
                                                                            "",
                                                                            "        method isAppliedOccurenceOfIdentifier {",
                                                                            "            if (wildcard) then {",
                                                                            "                false",
                                                                            "            } else {",
                                                                            "                isBindingOccurrence.not",
                                                                            "            }",
                                                                            "        }",
                                                                            "        method declarationKindWithAncestors(as) {",
                                                                            "            as.parent.declarationKindWithAncestors(as)",
                                                                            "        }",
                                                                            "        method inTypePositionWithAncestors(as) {",
                                                                            "            // am I used by my parent node as a type?",
                                                                            "            // This is a hack, used as a subsitute for having information in the .gct",
                                                                            "            // telling us which identifiers represent types",
                                                                            "            if (as.isEmpty) then { return false }",
                                                                            "            as.parent.usesAsType(self)",
                                                                            "        }",
                                                                            "        method usesAsType(aNode) {",
                                                                            "            aNode == dtype",
                                                                            "        }",
                                                                            "        method accept(visitor : ASTVisitor) from(as) {",
                                                                            "            if (visitor.visitIdentifier(self) up(as)) then {",
                                                                            "                def newChain = as.extend(self)",
                                                                            "                if (false != self.dtype) then {",
                                                                            "                    self.dtype.accept(visitor) from(newChain)",
                                                                            "                }",
                                                                            "            }",
                                                                            "        }",
                                                                            "        method map(blk) ancestors(as) {",
                                                                            "            var n := shallowCopy",
                                                                            "            def newChain = as.extend(n)",
                                                                            "            n.dtype := maybeMap(dtype, blk) ancestors(newChain)",
                                                                            "            blk.apply(n, as)",
                                                                            "        }",
                                                                            "        method pretty(depth) {",
                                                                            "            var spc := \"\"",
                                                                            "            for (0..depth) do { i ->",
                                                                            "                spc := spc ++ \"  \"",
                                                                            "            }",
                                                                            "            var s := super.pretty(depth)",
                                                                            "            if ( wildcard ) then {",
                                                                            "                s := s ++ \" Wildcard\"",
                                                                            "            } elseif { isBindingOccurrence } then {",
                                                                            "                s := s ++ \"Binding‹{value}›\"",
                                                                            "            } else {",
                                                                            "                s := s ++ \"‹{value}›\"",
                                                                            "            }",
                                                                            "            if (false != self.dtype) then {",
                                                                            "                s := s ++ \"\\n\" ++ spc ++ \"  Type: \"",
                                                                            "                s := s ++ self.dtype.pretty(depth + 2)",
                                                                            "            }",
                                                                            "            if (false != generics) then {",
                                                                            "                s := s ++ \"\\n\" ++ spc ++ \"Generics:\"",
                                                                            "                for (generics) do {g->",
                                                                            "                    s := s ++ \"\\n\" ++ spc ++ \"  \" ++ g.pretty(depth + 2)",
                                                                            "                }",
                                                                            "            }",
                                                                            "            s",
                                                                            "        }",
                                                                            "        method toGrace(depth : Number) -> String {",
                                                                            "            var s",
                                                                            "            if(self.wildcard) then {",
                                                                            "                s := \"_\"",
                                                                            "            } else {",
                                                                            "                s := self.value",
                                                                            "            }",
                                                                            "            if (false != self.dtype) then {",
                                                                            "                s := s ++ \" : \" ++ self.dtype.toGrace(depth + 1)",
                                                                            "            }",
                                                                            "            if (false != generics) then {",
                                                                            "                s := s ++ \"<\"",
                                                                            "                for (1..(generics.size - 1)) do {ix ->",
                                                                            "                    s := s ++ generics.at(ix).toGrace(depth + 1)",
                                                                            "                }",
                                                                            "                s := s ++ generics.last.toGrace(depth + 1) ++ \">\"",
                                                                            "            }",
                                                                            "            s",
                                                                            "        }",
                                                                            "",
                                                                            "        method asString {",
                                                                            "            if (isBindingOccurrence) then {",
                                                                            "                \"identifierBinding‹{value}›\"",
                                                                            "            } else {",
                                                                            "                \"identifier‹{value}›\"",
                                                                            "            }",
                                                                            "        }",
                                                                            "        method shallowCopy {",
                                                                            "            identifierNode.new(value, false).shallowCopyFieldsFrom(self)",
                                                                            "        }",
                                                                            "        method shallowCopyFieldsFrom(other) {",
                                                                            "            super.shallowCopyFieldsFrom(other)",
                                                                            "            wildcard := other.wildcard",
                                                                            "            isBindingOccurrence := other.isBindingOccurrence",
                                                                            "            isDeclaredByParent := other.isDeclaredByParent",
                                                                            "            isAssigned := other.isAssigned",
                                                                            "            inRequest := other.inRequest",
                                                                            "            self",
                                                                            "        }",
                                                                            "        method statementName { \"expression\" }",
                                                                            "    }",
                                                                            "}",
                                                                            "",
                                                                            "def typeType is public = identifierNode.new(\"Type\", false)",
                                                                            "def unknownType is public = identifierNode.new(\"Unknown\", typeType)",
                                                                            "",
                                                                            "def stringNode = object {",
                                                                            "    method new(v) scope(s) {",
                                                                            "        def result = new(v)",
                                                                            "        result.scope := s",
                                                                            "        result",
                                                                            "    }",
                                                                            "",
                                                                            "    class new(v) {",
                                                                            "        inherits baseNode",
                                                                            "        def kind is public = \"string\"",
                                                                            "        var value is public := v",
                                                                            "        method accept(visitor : ASTVisitor) from(as) {",
                                                                            "            visitor.visitString(self) up(as)",
                                                                            "        }",
                                                                            "        method map(blk) ancestors(as) {",
                                                                            "            var n := shallowCopy",
                                                                            "            def newChain = as.extend(n)",
                                                                            "            blk.apply(n, as)",
                                                                            "        }",
                                                                            "        method pretty(depth) {",
                                                                            "            \"{super.pretty(depth)}({self.value})\"",
                                                                            "        }",
                                                                            "        method toGrace(depth : Number) -> String {",
                                                                            "            def q = \"\\\"\"",
                                                                            "            q ++ value.quoted ++ q",
                                                                            "        }",
                                                                            "        method asString { \"string {toGrace 0}\" }",
                                                                            "        method shallowCopy {",
                                                                            "            stringNode.new(value).shallowCopyFieldsFrom(self)",
                                                                            "        }",
                                                                            "        method statementName { \"expression\" }",
                                                                            "        method isDelimited { true }",
                                                                            "    }",
                                                                            "}",
                                                                            "def numNode is public = object {",
                                                                            "    class new(val) {",
                                                                            "        inherits baseNode",
                                                                            "        def kind is public = \"num\"",
                                                                            "        var value is public := val",
                                                                            "        method accept(visitor : ASTVisitor) from(as) {",
                                                                            "            visitor.visitNum(self) up(as)",
                                                                            "        }",
                                                                            "        method map(blk) ancestors(as) {",
                                                                            "            var n := shallowCopy",
                                                                            "            def newChain = as.extend(n)",
                                                                            "            blk.apply(n, as)",
                                                                            "        }",
                                                                            "        method pretty(depth) {",
                                                                            "            \"{super.pretty(depth)}({self.value})\"",
                                                                            "        }",
                                                                            "        method toGrace(depth : Number) -> String {",
                                                                            "            self.value.asString",
                                                                            "        }",
                                                                            "        method asString { \"num {value}\" }",
                                                                            "        method shallowCopy {",
                                                                            "            numNode.new(value).shallowCopyFieldsFrom(self)",
                                                                            "        }",
                                                                            "        method statementName { \"expression\" }",
                                                                            "        method isDelimited { true }",
                                                                            "    }",
                                                                            "}",
                                                                            "def opNode is public = object {",
                                                                            "  class new(op, l, r) {",
                                                                            "    inherits baseNode",
                                                                            "    def kind is public = \"op\"",
                                                                            "    def value is public = op     // a String",
                                                                            "    var left is public := l",
                                                                            "    var right is public := r",
                                                                            "    method isSimple { false }    // needs parens when used as reciever",
                                                                            "    method nameString { value ++ \"(1)\" }",
                                                                            "    method accept(visitor : ASTVisitor) from(as) {",
                                                                            "        if (visitor.visitOp(self) up(as)) then {",
                                                                            "            def newChain = as.extend(self)",
                                                                            "            self.left.accept(visitor) from(newChain)",
                                                                            "            self.right.accept(visitor) from(newChain)",
                                                                            "        }",
                                                                            "    }",
                                                                            "    method map(blk) ancestors(as) {",
                                                                            "        var n := shallowCopy",
                                                                            "        def newChain = as.extend(n)",
                                                                            "        n.left := left.map(blk) ancestors(newChain)",
                                                                            "        n.right := right.map(blk) ancestors(newChain)",
                                                                            "        blk.apply(n, as)",
                                                                            "    }",
                                                                            "    method pretty(depth) {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..depth) do { i ->",
                                                                            "            spc := spc ++ \"  \"",
                                                                            "        }",
                                                                            "        var s := \"{super.pretty(depth)}‹\" ++ self.nameString ++ \"›\"",
                                                                            "        s := s ++ \"\\n\"",
                                                                            "        s := s ++ spc ++ self.left.pretty(depth + 1)",
                                                                            "        s := s ++ \"\\n\"",
                                                                            "        s := s ++ spc ++ self.right.pretty(depth + 1)",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method toGrace(depth : Number) -> String {",
                                                                            "        var s := \"\"",
                                                                            "        if ((self.left.kind == \"op\") && {self.left.value != self.value}) then {",
                                                                            "            s := \"(\" ++ self.left.toGrace(0) ++ \")\"",
                                                                            "        } else {",
                                                                            "            s := self.left.toGrace(0)",
                                                                            "        }",
                                                                            "        if (self.value == \"..\") then {",
                                                                            "            s := s ++ self.value",
                                                                            "        } else {",
                                                                            "            s := s ++ \" \" ++ self.value ++ \" \"",
                                                                            "        }",
                                                                            "        if ((self.right.kind == \"op\") && {self.right.value != self.value}) then {",
                                                                            "            s := s ++ \"(\" ++ self.right.toGrace(0) ++ \")\"",
                                                                            "        } else {",
                                                                            "            s := s ++ self.right.toGrace(0)",
                                                                            "        }",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method asIdentifier {",
                                                                            "        // make an identifiderNode with the same properties as me",
                                                                            "        def resultNode = identifierNode.new (nameString, false) scope (scope)",
                                                                            "        resultNode.inRequest := true",
                                                                            "        resultNode.line := line",
                                                                            "        resultNode.linePos := linePos",
                                                                            "        return resultNode",
                                                                            "    }",
                                                                            "    method shallowCopy {",
                                                                            "        opNode.new(value, nullNode, nullNode).shallowCopyFieldsFrom(self)",
                                                                            "    }",
                                                                            "  }",
                                                                            "}",
                                                                            "def bindNode is public = object {",
                                                                            "  class new(dest', val') {",
                                                                            "    // an assignment, or a request of a setter-method",
                                                                            "    inherits baseNode",
                                                                            "    def kind is public = \"bind\"",
                                                                            "    var dest is public := dest'",
                                                                            "    var value is public := val'",
                                                                            "",
                                                                            "    method isBind { true }",
                                                                            "    method asString { \"bind {value}\" }",
                                                                            "    method accept(visitor : ASTVisitor) from(as) {",
                                                                            "        if (visitor.visitBind(self) up(as)) then {",
                                                                            "            def newChain = as.extend(self)",
                                                                            "            self.dest.accept(visitor) from(newChain)",
                                                                            "            self.value.accept(visitor) from(newChain)",
                                                                            "        }",
                                                                            "    }",
                                                                            "    method map(blk) ancestors(as) {",
                                                                            "        var n := shallowCopy",
                                                                            "        def newChain = as.extend(n)",
                                                                            "        n.dest := dest.map(blk) ancestors(newChain)",
                                                                            "        n.value := value.map(blk) ancestors(newChain)",
                                                                            "        blk.apply(n, as)",
                                                                            "    }",
                                                                            "    method pretty(depth) {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..depth) do { i ->",
                                                                            "            spc := spc ++ \"  \"",
                                                                            "        }",
                                                                            "        var s := super.pretty(depth) ++ \"\\n\"",
                                                                            "        s := s ++ spc ++ self.dest.pretty(depth + 1)",
                                                                            "        s := s ++ \"\\n\"",
                                                                            "        s := s ++ spc ++ self.value.pretty(depth + 1)",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method toGrace(depth : Number) -> String {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..(depth - 1)) do { i ->",
                                                                            "            spc := spc ++ \"    \"",
                                                                            "        }",
                                                                            "        var s := self.dest.toGrace(depth + 1)",
                                                                            "        s := s ++ \" := \" ++ self.value.toGrace(depth + 1)",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method shallowCopy {",
                                                                            "        bindNode.new(dest, value).shallowCopyFieldsFrom(self)",
                                                                            "    }",
                                                                            "    method statementName { \"assignment or assigment request\" }",
                                                                            "  }",
                                                                            "}",
                                                                            "def defDecNode = object {",
                                                                            "    method new(name', val, dtype') scope(s) {",
                                                                            "        def result = new(name', val, dtype')",
                                                                            "        result.scope := s",
                                                                            "        result",
                                                                            "    }",
                                                                            "",
                                                                            "    class new(name', val, dtype') {",
                                                                            "        inherits baseNode",
                                                                            "        def kind is public = \"defdec\"",
                                                                            "        var name is public := name'",
                                                                            "        var value is public := val",
                                                                            "        var dtype is public := dtype'",
                                                                            "        def nameString is public = name.nameString",
                                                                            "        var annotations is public := [ ]",
                                                                            "        var startToken is public := false",
                                                                            "",
                                                                            "        method isPublic {",
                                                                            "            // defs are confidential by default",
                                                                            "            if (annotations.size == 0) then { return false }",
                                                                            "            if (findAnnotation(self, \"public\")) then { return true }",
                                                                            "            findAnnotation(self, \"readable\")",
                                                                            "        }",
                                                                            "        method isFieldDec { true }",
                                                                            "        method isWritable { false }",
                                                                            "        method isReadable { isPublic }",
                                                                            "",
                                                                            "        method returnsObject {",
                                                                            "            value.returnsObject",
                                                                            "        }",
                                                                            "        method returnedObjectScope {",
                                                                            "            // precondition: returnsObject",
                                                                            "            value.returnedObjectScope",
                                                                            "        }",
                                                                            "        method usesAsType(aNode) {",
                                                                            "            aNode == dtype",
                                                                            "        }",
                                                                            "        method declarationKindWithAncestors(as) { k.defdec }",
                                                                            "",
                                                                            "        method accept(visitor : ASTVisitor) from(as) {",
                                                                            "            if (visitor.visitDefDec(self) up(as)) then {",
                                                                            "                def newChain = as.extend(self)",
                                                                            "                self.name.accept(visitor) from(newChain)",
                                                                            "                if (false != self.dtype) then {",
                                                                            "                    self.dtype.accept(visitor) from(newChain)",
                                                                            "                }",
                                                                            "                for (self.annotations) do { ann ->",
                                                                            "                    ann.accept(visitor) from(newChain)",
                                                                            "                }",
                                                                            "                value.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "        }",
                                                                            "        method map(blk) ancestors(as) {",
                                                                            "            var n := shallowCopy",
                                                                            "            def newChain = as.extend(n)",
                                                                            "            n.name := name.map(blk) ancestors(newChain)",
                                                                            "            n.value := value.map(blk) ancestors(newChain)",
                                                                            "            n.dtype := maybeMap(dtype, blk) ancestors(newChain)",
                                                                            "            n.annotations := listMap(annotations, blk) ancestors(newChain)",
                                                                            "            blk.apply(n, as)",
                                                                            "        }",
                                                                            "        method pretty(depth) {",
                                                                            "            var spc := \"\"",
                                                                            "            for (0..depth) do { i ->",
                                                                            "                spc := spc ++ \"  \"",
                                                                            "            }",
                                                                            "            var s := super.pretty(depth) ++ \"\\n\"",
                                                                            "            s := s ++ spc ++ self.name.pretty(depth)",
                                                                            "            if (false != dtype) then {",
                                                                            "                s := s ++ \"\\n\" ++ spc ++ \"Type: \" ++ self.dtype.pretty(depth + 2)",
                                                                            "            }",
                                                                            "            if (false != value) then {",
                                                                            "                s := s ++ \"\\n\" ++ spc ++ \"Value: \" ++ value.pretty(depth + 2)",
                                                                            "            }",
                                                                            "            if (annotations.isEmpty.not) then {",
                                                                            "                s := s ++ \"\\n{spc}Annotations:\"",
                                                                            "                annotations.do { ann ->",
                                                                            "                    s := \"{s} {ann.pretty(depth + 2)}\"",
                                                                            "                }",
                                                                            "            }",
                                                                            "            if (false != comments) then {",
                                                                            "                s := s ++ comments.pretty(depth+2)",
                                                                            "            }",
                                                                            "            s",
                                                                            "        }",
                                                                            "        method toGrace(depth : Number) -> String {",
                                                                            "            var spc := \"\"",
                                                                            "            for (0..(depth - 1)) do { i ->",
                                                                            "                spc := spc ++ \"    \"",
                                                                            "            }",
                                                                            "            var s := \"def {self.name.toGrace(0)}\"",
                                                                            "            if ( (false != self.dtype) && {",
                                                                            "                    self.dtype.value != \"Unknown\" }) then {",
                                                                            "                s := s ++ \" : \" ++ self.dtype.toGrace(0)",
                                                                            "            }",
                                                                            "            if (self.annotations.size > 0) then {",
                                                                            "                s := s ++ \" is \"",
                                                                            "                s := s ++ self.annotations.fold{ a,b ->",
                                                                            "                    if (a != \"\") then { a ++ \", \" } else { \"\" } ++ b.toGrace(0) }",
                                                                            "                        startingWith \"\"",
                                                                            "            }",
                                                                            "            if (false != self.value) then {",
                                                                            "                s := s ++ \" = \" ++ self.value.toGrace(depth)",
                                                                            "            }",
                                                                            "            s",
                                                                            "        }",
                                                                            "        method shallowCopy {",
                                                                            "            defDecNode.new(name, value, dtype).shallowCopyFieldsFrom(self)",
                                                                            "        }",
                                                                            "        method shallowCopyFieldsFrom(other) {",
                                                                            "            super.shallowCopyFieldsFrom(other)",
                                                                            "            startToken := other.startToken",
                                                                            "            self",
                                                                            "        }",
                                                                            "        method statementName { \"definition\" }",
                                                                            "    }",
                                                                            "}",
                                                                            "def varDecNode is public = object {",
                                                                            "  class new(name', val', dtype') {",
                                                                            "    inherits baseNode",
                                                                            "    def kind is public = \"vardec\"",
                                                                            "    var name is public := name'",
                                                                            "    var value is public := val'",
                                                                            "    var dtype is public := dtype'",
                                                                            "    def nameString is public = name.value",
                                                                            "    var annotations is public := [ ]",
                                                                            "",
                                                                            "    method isPublic {",
                                                                            "        // vars are confidential by default",
                                                                            "        if (annotations.size == 0) then { return false }",
                                                                            "        if (findAnnotation(self, \"public\")) then { return true }",
                                                                            "        findAnnotation(self, \"readable\")",
                                                                            "    }",
                                                                            "    method isWritable {",
                                                                            "        if (annotations.size == 0) then { return false }",
                                                                            "        if (findAnnotation(self, \"public\")) then { return true }",
                                                                            "        if (findAnnotation(self, \"writable\")) then { return true }",
                                                                            "        false",
                                                                            "    }",
                                                                            "    method isReadable {",
                                                                            "        if (annotations.size == 0) then { return false }",
                                                                            "        if (findAnnotation(self, \"public\")) then { return true }",
                                                                            "        if (findAnnotation(self, \"readable\")) then { return true }",
                                                                            "        false",
                                                                            "    }",
                                                                            "    method isFieldDec { true }",
                                                                            "",
                                                                            "    method usesAsType(aNode) {",
                                                                            "        aNode == dtype",
                                                                            "    }",
                                                                            "",
                                                                            "    method declarationKindWithAncestors(as) { k.vardec }",
                                                                            "",
                                                                            "    method accept(visitor : ASTVisitor) from(as) {",
                                                                            "        if (visitor.visitVarDec(self) up(as)) then {",
                                                                            "            def newChain = as.extend(self)",
                                                                            "            self.name.accept(visitor) from(newChain)",
                                                                            "            if (false != self.dtype) then {",
                                                                            "                self.dtype.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "            for (self.annotations) do { ann ->",
                                                                            "                ann.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "            if (false != self.value) then {",
                                                                            "                self.value.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "        }",
                                                                            "    }",
                                                                            "    method map(blk) ancestors(as) {",
                                                                            "        var n := shallowCopy",
                                                                            "        def newChain = as.extend(n)",
                                                                            "        n.name := name.map(blk) ancestors(newChain)",
                                                                            "        n.value := maybeMap(value, blk) ancestors(newChain)",
                                                                            "        n.dtype := maybeMap(dtype, blk) ancestors(newChain)",
                                                                            "        n.annotations := listMap(annotations, blk) ancestors(newChain)",
                                                                            "        blk.apply(n, as)",
                                                                            "    }",
                                                                            "    method pretty(depth) {",
                                                                            "        var spc := \"\"",
                                                                            "        for ((0..depth)) do { i ->",
                                                                            "            spc := spc ++ \"  \"",
                                                                            "        }",
                                                                            "        var s := super.pretty(depth) ++ \"\\n\"",
                                                                            "        s := s ++ spc ++ self.name.pretty(depth + 1)",
                                                                            "        if (false != self.dtype) then {",
                                                                            "            s := s ++ \"\\n\" ++ spc ++ \"Type: \"",
                                                                            "            s := s ++ self.dtype.pretty(depth + 2)",
                                                                            "        }",
                                                                            "        if (false != self.value) then {",
                                                                            "            s := s ++ \"\\n\" ++ spc ++ \"Value: \"",
                                                                            "            s := s ++ self.value.pretty(depth + 2)",
                                                                            "        }",
                                                                            "        if (false != comments) then {",
                                                                            "            s := s ++ comments.pretty(depth+2)",
                                                                            "        }",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method toGrace(depth : Number) -> String {",
                                                                            "        var spc := \"\"",
                                                                            "        repeat (depth) times {",
                                                                            "            spc := spc ++ \"    \"",
                                                                            "        }",
                                                                            "        var s := \"var {self.name.toGrace(0)}\"",
                                                                            "        if ( (false != self.dtype) && {",
                                                                            "                self.dtype.value != \"Unknown\" }) then {",
                                                                            "            s := s ++ \" : \" ++ self.dtype.toGrace(0)",
                                                                            "        }",
                                                                            "        if (self.annotations.size > 0) then {",
                                                                            "            s := s ++ \" is \"",
                                                                            "            s := s ++ self.annotations.fold{ a,b ->",
                                                                            "                if (a != \"\") then { a ++ \", \" } else { \"\" } ++ b.toGrace(0) }",
                                                                            "                    startingWith \"\"",
                                                                            "        }",
                                                                            "        if (false != self.value) then {",
                                                                            "            s := s ++ \" := \" ++ self.value.toGrace(depth)",
                                                                            "        }",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method shallowCopy {",
                                                                            "        varDecNode.new(name, value, dtype).shallowCopyFieldsFrom(self)",
                                                                            "    }",
                                                                            "    method statementName { \"variable declaration\" }",
                                                                            "",
                                                                            "  }",
                                                                            "}",
                                                                            "def importNode is public = object {",
                                                                            "  class new(path', name', dtype') {",
                                                                            "    inherits baseNode",
                                                                            "    def kind is public = \"import\"",
                                                                            "    var value is public := name'",
                                                                            "    var path is public := path'",
                                                                            "    var annotations is public := [ ]",
                                                                            "    var dtype is public := dtype'",
                                                                            "    method isImport { true }",
                                                                            "    method isExternal { true }",
                                                                            "    method isExecutable { false }",
                                                                            "    method name { value }",
                                                                            "    method nameString { value.nameString }",
                                                                            "    method isPublic {",
                                                                            "        // imports, like defs, are confidential by default",
                                                                            "        if (annotations.size == 0) then { return false }",
                                                                            "        if (findAnnotation(self, \"public\")) then { return true }",
                                                                            "        findAnnotation(self, \"readable\")",
                                                                            "    }",
                                                                            "    method moduleName {",
                                                                            "        var bnm := \"\"",
                                                                            "        for (path) do {c->",
                                                                            "            if (c == \"/\") then {",
                                                                            "                bnm := \"\"",
                                                                            "            } else {",
                                                                            "                bnm := bnm ++ c",
                                                                            "            }",
                                                                            "        }",
                                                                            "        bnm",
                                                                            "    }",
                                                                            "    method isWritable { false }",
                                                                            "    method isReadable { isPublic }",
                                                                            "    method declarationKindWithAncestors(as) { k.defdec }",
                                                                            "    method usesAsType(aNode) {",
                                                                            "        aNode == dtype",
                                                                            "    }",
                                                                            "    method accept(visitor : ASTVisitor) from(as) {",
                                                                            "        if (visitor.visitImport(self) up(as)) then {",
                                                                            "            def newChain = as.extend(self)",
                                                                            "            for (self.annotations) do { ann ->",
                                                                            "                ann.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "            self.value.accept(visitor) from(newChain)",
                                                                            "            if (false != self.dtype) then {",
                                                                            "                self.dtype.accept(visitor) from(newChain)",
                                                                            "            }",
                                                                            "        }",
                                                                            "    }",
                                                                            "    method map(blk) ancestors(as) {",
                                                                            "        var n := shallowCopy",
                                                                            "        def newChain = as.extend(n)",
                                                                            "        n.value := value.map(blk) ancestors(newChain)",
                                                                            "        n.dtype := maybeMap(dtype, blk) ancestors(newChain)",
                                                                            "        n.annotations := listMap(annotations, blk) ancestors(newChain)",
                                                                            "        blk.apply(n, as)",
                                                                            "    }",
                                                                            "    method pretty(depth) {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..depth) do { i ->",
                                                                            "            spc := spc ++ \"  \"",
                                                                            "        }",
                                                                            "        var s := super.pretty(depth) ++ \"\\n\"",
                                                                            "        s := s ++ \"{spc}Path: {path}\\n\"",
                                                                            "        s := s ++ \"{spc}Identifier: {value}\\n\"",
                                                                            "        if (annotations.size > 0) then {",
                                                                            "            s := s ++ \"{spc}Anotations: {annotations}\\n\"",
                                                                            "        }",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method toGrace(depth : Number) -> String {",
                                                                            "        \"import \\\"{self.path}\\\" as {nameString}\"",
                                                                            "    }",
                                                                            "    method shallowCopy {",
                                                                            "        importNode.new(path, nullNode, false).shallowCopyFieldsFrom(self)",
                                                                            "    }",
                                                                            "  }",
                                                                            "}",
                                                                            "def dialectNode is public = object {",
                                                                            "  class new(path') {",
                                                                            "    inherits baseNode",
                                                                            "    def kind is public = \"dialect\"",
                                                                            "    var value is public := path'",
                                                                            "",
                                                                            "    method isDialect { true }",
                                                                            "    method isExternal { true }",
                                                                            "    method isExecutable { false }",
                                                                            "    method moduleName {",
                                                                            "        var bnm := \"\"",
                                                                            "        for (value) do {c->",
                                                                            "            if (c == \"/\") then {",
                                                                            "                bnm := \"\"",
                                                                            "            } else {",
                                                                            "                bnm := bnm ++ c",
                                                                            "            }",
                                                                            "        }",
                                                                            "        bnm",
                                                                            "    }",
                                                                            "    method path {",
                                                                            "        value",
                                                                            "    }",
                                                                            "    method accept(visitor : ASTVisitor) from(as) {",
                                                                            "        visitor.visitDialect(self) up(as)",
                                                                            "    }",
                                                                            "    method map(blk) ancestors(as) {",
                                                                            "        var n := shallowCopy",
                                                                            "        def newChain = as.extend(n)",
                                                                            "        blk.apply(n, as)",
                                                                            "    }",
                                                                            "    method pretty(depth) {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..depth) do { i ->",
                                                                            "            spc := spc ++ \"  \"",
                                                                            "        }",
                                                                            "        var s := super.pretty(depth) ++ \"\\n\"",
                                                                            "        s := s ++ \"{spc}Path: {self.value}\\n\"",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method toGrace(depth : Number) -> String {",
                                                                            "        \"dialect \\\"{self.value}\\\"\"",
                                                                            "    }",
                                                                            "    method shallowCopy {",
                                                                            "        dialectNode.new(value).shallowCopyFieldsFrom(self)",
                                                                            "    }",
                                                                            "  }",
                                                                            "}",
                                                                            "def returnNode is public = object {",
                                                                            "  class new(expr) {",
                                                                            "    inherits baseNode",
                                                                            "    def kind is public = \"return\"",
                                                                            "    var value is public := expr",
                                                                            "",
                                                                            "    method accept(visitor : ASTVisitor) from(as) {",
                                                                            "        if (visitor.visitReturn(self) up(as)) then {",
                                                                            "            def newChain = as.extend(self)",
                                                                            "            self.value.accept(visitor) from(newChain)",
                                                                            "        }",
                                                                            "    }",
                                                                            "    method map(blk) ancestors(as) {",
                                                                            "        var n := shallowCopy",
                                                                            "        def newChain = as.extend(n)",
                                                                            "        n.value := value.map(blk) ancestors(newChain)",
                                                                            "        blk.apply(n, as)",
                                                                            "    }",
                                                                            "    method pretty(depth) {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..depth) do { i ->",
                                                                            "            spc := spc ++ \"  \"",
                                                                            "        }",
                                                                            "        var s := super.pretty(depth) ++ \"\\n\"",
                                                                            "        s := s ++ spc ++ self.value.pretty(depth + 1)",
                                                                            "        s",
                                                                            "    }",
                                                                            "    method toGrace(depth : Number) -> String {",
                                                                            "        \"return \" ++ self.value.toGrace(depth)",
                                                                            "    }",
                                                                            "    method shallowCopy {",
                                                                            "        returnNode.new(nullNode).shallowCopyFieldsFrom(self)",
                                                                            "    }",
                                                                            "  }",
                                                                            "}",
                                                                            "def inheritsNode = object {",
                                                                            "    method new(expr) scope(s) {",
                                                                            "        def result = new(expr)",
                                                                            "        result.scope := s",
                                                                            "        result",
                                                                            "    }",
                                                                            "    class new(expr) {",
                                                                            "        inherits baseNode",
                                                                            "        def kind is public = \"inherits\"",
                                                                            "        var value is public := expr",
                                                                            "        var providedNames is public := emptySet",
                                                                            "        var aliases is public := [ ]",
                                                                            "        var exclusions is public := [ ]",
                                                                            "        var isUse is public := false  // this is a `use trait` clause, not an inherits",
                                                                            "",
                                                                            "        method isLegalInTrait { isUse }",
                                                                            "        method isInherits { true }",
                                                                            "        method inheritsFromMember { value.isMember }",
                                                                            "        method inheritsFromCall { value.isCall }",
                                                                            "        method isExecutable { false }",
                                                                            "        method accept(visitor : ASTVisitor) from(as) {",
                                                                            "            if (visitor.visitInherits(self) up(as)) then {",
                                                                            "                def newChain = as.extend(self)",
                                                                            "                value.accept(visitor) from(newChain)",
                                                                            "                aliases.do { a ->",
                                                                            "                    a.newName.accept(visitor) from(newChain)",
                                                                            "                    a.oldName.accept(visitor) from(newChain)",
                                                                            "                }",
                                                                            "                exclusions.do { e -> e.accept(visitor) from(newChain) }",
                                                                            "            }",
                                                                            "        }",
                                                                            "        method declarationKindWithAncestors(as) {",
                                                                            "            // identifiers declared in an inherits statement are aliases for",
                                                                            "            // methods.  We treat them as methods, because (unlike inherited names)",
                                                                            "            // they can't be overridden by local methods.",
                                                                            "            k.methdec",
                                                                            "        }",
                                                                            "        method map(blk) ancestors(as) {",
                                                                            "            var n := shallowCopy",
                                                                            "            def newChain = as.extend(n)",
                                                                            "            n.value := value.map(blk) ancestors(newChain)",
                                                                            "            blk.apply(n, as)",
                                                                            "        }",
                                                                            "        method pretty(depth) {",
                                                                            "            var spc := \"\"",
                                                                            "            for (0..depth) do { i ->",
                                                                            "                spc := spc ++ \"  \"",
                                                                            "            }",
                                                                            "            var s := super.pretty(depth)",
                                                                            "            if (isUse) then { s := \"{s} (use)\" }",
                                                                            "            s := s ++ \"\\n\" ++ spc ++ self.value.pretty(depth + 1)",
                                                                            "            aliases.do { a ->",
                                                                            "                s := \"{s}\\n{a.pretty(depth)}\"",
                                                                            "            }",
                                                                            "            if (exclusions.isEmpty.not) then { s := \"{s}\\n{spc}\" }",
                                                                            "            exclusions.do { e ->",
                                                                            "                s := \"{s} exclude {e} \"",
                                                                            "            }",
                                                                            "            if (providedNames.isEmpty.not) then {",
                                                                            "                s := s ++ \"\\n{spc}Provided names: {providedNames.asList.sort}\"",
                                                                            "            }",
                                                                            "            s",
                                                                            "        }",
                                                                            "        method toGrace(depth : Number) -> String {",
                                                                            "            var s := \"\"",
                                                                            "            repeat (depth) times {",
                                                                            "                s := s ++ \"    \"",
                                                                            "            }",
                                                                            "            s := s ++ if (isUse) then { \"use \" } else { \"inherit \" }",
                                                                            "            s := s ++ self.value.toGrace(0)",
                                                                            "            aliases.do { a ->",
                                                                            "                s := \"{s} {a} \"",
                                                                            "            }",
                                                                            "            exclusions.do { e ->",
                                                                            "                s := \"{s} exclude {e.nameString} \"",
                                                                            "            }",
                                                                            "            s",
                                                                            "        }",
                                                                            "        method asString {",
                                                                            "            if (isUse) then { \"use \" } else { \"inherit \" } ++ value.toGrace 0",
                                                                            "        }",
                                                                            "        method nameString { value.toGrace(0) }",
                                                                            "        method addAlias (newName) for (oldName) {",
                                                                            "            aliases.push(aliasNew(newName) old(oldName))",
                                                                            "        }",
                                                                            "        method addExclusion(ident) {",
                                                                            "            exclusions.push(ident)",
                                                                            "        }",
                                                                            "        method shallowCopy {",
                                                                            "            inheritsNode.new(nullNode).shallowCopyFieldsFrom(self)",
                                                                            "        }",
                                                                            "        method shallowCopyFieldsFrom(other) {",
                                                                            "            super.shallowCopyFieldsFrom(other)",
                                                                            "            providedNames := other.providedNames",
                                                                            "            aliases := other.aliases",
                                                                            "            exclusions := other.exclusions",
                                                                            "            isUse := other.isUse",
                                                                            "            self",
                                                                            "        }",
                                                                            "        method statementName {",
                                                                            "            if (isUse) then { \"use\" } else { \"inherit\" }",
                                                                            "        }",
                                                                            "    }",
                                                                            "}",
                                                                            "type AliasPair = {",
                                                                            "    newName",
                                                                            "    oldName",
                                                                            "}",
                                                                            "",
                                                                            "class aliasNew(n) old(o) {",
                                                                            "    method newName {n}",
                                                                            "    method oldName {o}",
                                                                            "    method asString { \"alias {n.nameString} = {o.nameString}\" }",
                                                                            "    method pretty(depth) {",
                                                                            "        var spc := \"\"",
                                                                            "        for (0..depth) do { i ->",
                                                                            "            spc := spc ++ \"  \"",
                                                                            "        }",
                                                                            "        \"{spc}  alias {n.pretty(depth)} = {o.pretty(depth)}\"",
                                                                            "    }",
                                                                            "    method hash { (n.hash * 1171) + o.hash }",
                                                                            "    method isExecutable { false }",
                                                                            "    method == (other) {",
                                                                            "        match (other)",
                                                                            "            case { that:AliasPair -> (n == that.newName) && (o == that.oldName) }",
                                                                            "            case { _ -> false }",
                                                                            "    }",
                                                                            "}",
                                                                            "def blankNode is public = object {",
                                                                            "    class new {",
                                                                            "        inherits baseNode",
                                                                            "        def kind is public = \"blank\"",
                                                                            "        def value is public = \"blank\"",
                                                                            "        method isExecutable { false }",
                                                                            "",
                                                                            "",
                                                                            "        method accept(visitor : ASTVisitor) from(as) {",
                                                                            "            visitor.visitBlank(self) up(as)",
                                                                            "        }",
                                                                            "        method map(blk) ancestors(as) {",
                                                                            "            var n := shallowCopy",
                                                                            "            def newChain = as.extend(n)",
                                                                            "            blk.apply(n, as)",
                                                                            "        }",
                                                                            "        method nameString { \"\" }",
                                                                            "        method asString { \"blank\" }",
                                                                            "        method toGrace(depth : Number) -> String { \"\" }",
                                                                            "        method shallowCopy {",
                                                                            "            blankNode.new.shallowCopyFieldsFrom(self)",
                                                                            "        }",
                                                                            "    }",
                                                                            "}",
                                                                            "def signaturePart = object {",
                                                                            "    method new {",
                                                                            "        partName \"\" params []",
                                                                            "    }",
                                                                            "    method partName(n) scope(s) {",
                                                                            "        def result = partName(n) params []",
                                                                            "        result.scope := s",
                                                                            "        result",
                                                                            "    }",
                                                                            "    method partName(n) params(ps) scope(s) {",
                                                                            "        def result = partName(n) params(ps)",
                                                                            "        result.scope := s",
                                                                            "        result",
                                                                            "    }",
                                                                            "    method partName(n) {",
                                                                            "        partName(n) params []",
                                                                            "    }",
                                                                            "    class partName(n) params(ps) {",
                                                                            "        inherits baseNode",
                                                                            "        def kind is public = \"signaturepart\"",
                                                                            "        var name is public := n",
                                                                            "        var params is public := ps",
                                                                            "        var typeParams is public := false",
                                                                            "        var lineLength is public := 0",
                                                                            "",
                                                                            "        method nameString {",
                                                                            "            if (params.isEmpty) then {return name}",
                                                                            "            name ++ \"(\" ++ params.size ++ \")\"",
                                                                            "        }",
                                                                            "        method numParams { params.size }",
                                                                            "        method canonicalName {",
                                                                            "            if (params.size == 0) then {return name}",
                                                                            "            var underScores := \"\"",
                                                                            "            params.do { _ -> underScores := underScores ++ \"_\" }",
                                                                            "                separatedBy { underScores := underScores ++ \",\" }",
                                                                            "            name ++ \"(\" ++ underScores ++ \")\"",
                                                                            "        }",
                                                                            "",
                                                                            "        method accept(visitor : ASTVisitor) from(as) {",
                                                                            "            if (visitor.visitSignaturePart(self) up(as)) then {",
                                                                            "                def newChain = as.extend(self)",
                                                                            "                params.do { p -> p.accept(visitor) from(newChain) }",
                                                                            "                if (false != typeParams) then {",
                                                                            "                    typeParams.accept(visitor) from(newChain)",
                                                                            "                }",
                                                                            "            }",
                                                                            "        }",
                                                                            "        method declarationKindWithAncestors(as) { k.parameter }",
                                                                            "        method map(blk) ancestors(as) {",
                                                                            "            var nd := shallowCopy",
                                                                            "            def newChain = as.extend(nd)",
                                                                            "            nd.params := listMap(params, blk) ancestors(newChain)",
                                                                            "            nd.typeParams := maybeMap(typeParams, blk) ancestors(newChain)",
                                                                            "            blk.apply(nd, as)",
                                                                            "        }",
                                                                            "        method pretty(depth) {",
                                                                            "            var spc := \"\"",
                                                                            "            for (0..depth) do { i ->",
                                                                            "                spc := spc ++ \"  \"",
                                                                            "            }",
                                                                            "            var s := \"{super.pretty(depth)}: {name}\"",
                                                                            "            if (params.isEmpty.not) then { s := \"{s}\\n{spc}Parameters:\" }",
                                                                            "            for (params) do { p ->",
                                                                            "                s := \"{s}\\n  {spc}{p.pretty(depth + 2)}\"",
                                                                            "            }",
                                                                            "            s",
                                                                            "        }",
                                                                            "        method toGrace(depth) {",
                                                                            "            var s := name",
                                                                            "            if (params.isEmpty.not) then {",
                                                                            "                s := s ++ \"(\"",
                                                                            "                params.do { each -> s := each.toGrace(depth + 1) }",
                                                                            "                    separatedBy { s := s ++ \", \" }",
                                                                            "                s := s ++ \")\"",
                                                                            "            }",
                                                                            "            s",
                                                                            "        }",
                                                                            "        method shallowCopy {",
                                                                            "            signaturePart.partName(name) params(params)",
                                                                            "                .shallowCopyFieldsFrom(self)",
                                                                            "        }",
                                                                            "        method shallowCopyFieldsFrom(other) {",
                                                                            "            super.shallowCopyFieldsFrom(other)",
                                                                            "            typeParams := other.typeParams",
                                                                            "            lineLength := other.lineLength",
                                                                            "            self",
                                                                            "        }",
                                                                            "        method asString {",
                                                                            "            \"part: {nameString}\"",
                                                                            "        }",
                                                                            "    }",
                                                                            "}",
                                                                            "",
                                                                            "def requestPart = object {",
                                                                            "    method new {",
                                                                            "        request \"\" withArgs( [] )",
                                                                            "    }",
                                                                            "    method request(name) withArgs(argList) scope (s) {",
                                                                            "        def result = request(name) withArgs(argList)",
                                                                            "        result.scope := s",
                                                                            "        result",
                                                                            "    }",
                                                                            "    class request(rPart) withArgs(xs) {",
                                                                            "        inherits baseNode",
                                                                            "        def kind is public = \"callwithpart\"",
                                                                            "        var name is public := rPart",
                                                                            "        var args is public := xs",
                                                                            "        var typeArgs := emptySeq",
                                                                            "        var lineLength is public := 0",
                                                                            "",
                                                                            "        method nameString {",
                                                                            "            if (args.size == 0) then {return name}",
                                                                            "            name ++ \"(\" ++ args.size ++ \")\"",
                                                                            "        }",
                                                                            "",
                                                                            "        method canonicalName {",
                                                                            "            if (args.size == 0) then {return name}",
                                                                            "            var underScores := \"\"",
                                                                            "            args.do { _ -> underScores := underScores ++ \"_\" }",
                                                                            "                separatedBy { underScores := underScores ++ \",\" }",
                                                                            "            name ++ \"(\" ++ underScores ++ \")\"",
                                                                            "        }",
                                                                            "",
                                                                            "        method map(blk) ancestors(as) {",
                                                                            "            var n := shallowCopy",
                                                                            "            def newChain = as.extend(n)",
                                                                            "            n.args := listMap(args, blk) ancestors(newChain)",
                                                                            "            blk.apply(n, as)",
                                                                            "        }",
                                                                            "        method pretty(depth) {",
                                                                            "            var spc := \"\"",
                                                                            "            repeat (depth+1) times {",
                                                                            "                spc := spc ++ \"  \"",
                                                                            "            }",
                                                                            "            var s := \"{super.pretty(depth)}: {name}\"",
                                                                            "            s := \"{s}\\n    {spc}Args:\"",
                                                                            "            for (args) do { a ->",
                                                                            "                s := \"{s}\\n    {spc}{a.pretty(depth + 4)}\"",
                                                                            "            }",
                                                                            "            s",
                                                                            "        }",
                                                                            "        method toGrace(depth) {",
                                                                            "            var s := name",
                                                                            "            if (typeArgs.size > 0) then {",
                                                                            "                s := s ++ \"⟦\"",
                                                                            "                typeArgs.do { tArg ->",
                                                                            "                    s := s ++ tArg.toGrace(depth + 1)",
                                                                            "                } separatedBy { s := s ++ \", \" }",
                                                                            "                s := s ++ \"⟧\"",
                                                                            "            }",
                                                                            "            if (args.size > 0) then {",
                                                                            "                def needsParens = (args.size > 1) || (args.first.isDelimited.not)",
                                                                            "                s := s ++ if (needsParens) then { \"(\" } else { \" \" }",
                                                                            "                args.do { arg ->",
                                                                            "                    s := s ++ arg.toGrace(depth)",
                                                                            "                } separatedBy {",
                                                                            "                    s := s ++ \", \"",
                                                                            "                }",
                                                                            "                if (needsParens) then { s := s ++ \")\" }",
                                                                            "            }",
                                                                            "            s",
                                                                            "        }",
                                                                            "",
                                                                            "        method shallowCopy {",
                                                                            "            requestPart.request(name) withArgs(args).shallowCopyFieldsFrom(self)",
                                                                            "        }",
                                                                            "        method shallowCopyFieldsFrom(other) {",
                                                                            "            super.shallowCopyFieldsFrom(other)",
                                                                            "            lineLength := other.lineLength",
                                                                            "            self",
                                                                            "        }",
                                                                            "        method statementName { \"request\" }",
                                                                            "    }",
                                                                            "}",
                                                                            "",
                                                                            "def commentNode = object {",
                                                                            "    class new(val') {",
                                                                            "        inherits baseNode",
                                                                            "        def kind is public = \"comment\"",
                                                                            "        var value is public := val'",
                                                                            "        var isPartialLine:Boolean is public := false",
                                                                            "        var isPreceededByBlankLine is public := false",
                                                                            "        var endLine is public := util.linenum",
                                                                            "        method isComment { true }",
                                                                            "        method isLegalInTrait { true }",
                                                                            "        method isExecutable { false }",
                                                                            "        method asString { \"comment ({line}–{endLine}): {value}\" }",
                                                                            "        method extendCommentUsing(cmtNode) {",
                                                                            "            value := value ++ \" \" ++ cmtNode.value",
                                                                            "            endLine := cmtNode.endLine",
                                                                            "        }",
                                                                            "        method map(blk) ancestors(as) {",
                                                                            "            var n := shallowCopy",
                                                                            "            def newChain = as.extend(n)",
                                                                            "            blk.apply(n, as)",
                                                                            "        }",
                                                                            "        method accept(visitor : ASTVisitor) from(as) {",
                                                                            "            visitor.visitComment(self) up(as)",
                                                                            "        }",
                                                                            "        method pretty(depth) {",
                                                                            "            var s := \"\\n\"",
                                                                            "            repeat (depth-1) times {",
                                                                            "                s := s ++ \"  \"",
                                                                            "            }",
                                                                            "            def pb = if (isPreceededByBlankLine) then { \" > blank\" } else { \"\" }",
                                                                            "            \"{s}Comment{pb}({line}–{endLine}): ‹{value}›\"",
                                                                            "        }",
                                                                            "        method toGrace(depth) {",
                                                                            "            // Partial line comments don't start with a newline, whereas",
                                                                            "            // full-line comments do.  No newline at end in either case.",
                                                                            "            if (isPartialLine) then {",
                                                                            "                \"// (partial) {value}\"",
                                                                            "            } else {",
                                                                            "                var spc := \"\"",
                                                                            "                repeat (depth) times { spc := spc ++ \"    \" }",
                                                                            "                wrap(value) to (lineLength) prefix (spc ++ \"// \")",
                                                                            "            }",
                                                                            "        }",
                                                                            "        method shallowCopy {",
                                                                            "            commentNode.new(nullNode).shallowCopyFieldsFrom(self)",
                                                                            "        }",
                                                                            "        method shallowCopyFieldsFrom(other) {",
                                                                            "            super.shallowCopyFieldsFrom(other)",
                                                                            "            value := other.value",
                                                                            "            isPartialLine := other.isPartialLine",
                                                                            "            endLine := other.endLine",
                                                                            "            self",
                                                                            "        }",
                                                                            "    }",
                                                                            "}",
                                                                            "",
                                                                            "method wrap(str) to (l:Number) prefix (margin) {",
                                                                            "    def ind = margin.size",
                                                                            "    def len = max(ind + 4, l)",
                                                                            "    if ((ind + str.size) <= len) then {",
                                                                            "        return \"\\n\" ++ margin ++ str",
                                                                            "    }",
                                                                            "    var currBreak",
                                                                            "    var trimmedLine",
                                                                            "",
                                                                            "    try {",
                                                                            "        currBreak := str.lastIndexOf \" \" startingAt (len - ind)",
                                                                            "            ifAbsent {len - ind}",
                                                                            "        trimmedLine := str.substringFrom (1) to (currBreak).trim",
                                                                            "    } catch { ex:NoSuchMethod ->  // C string libraries lack methods",
                                                                            "        currBreak := min(len - ind, str.size)",
                                                                            "        (1..currBreak).do { ix ->",
                                                                            "            if (str.at(ix) == \" \") then { currBreak := ix }",
                                                                            "        }",
                                                                            "        var end := currBreak",
                                                                            "        while {(end >= 1) && {str.at(end) == \" \"}} do {",
                                                                            "            end := end - 1",
                                                                            "        }",
                                                                            "        var start := 1",
                                                                            "        while {(start <= str.size) && {str.at(start) == \" \"}} do {",
                                                                            "            start := start + 1",
                                                                            "        }",
                                                                            "        trimmedLine := str.substringFrom (start) to (end)",
                                                                            "    }",
                                                                            "    \"\\n\" ++ margin ++ trimmedLine ++",
                                                                            "        wrap(str.substringFrom (currBreak+1) to (str.size))",
                                                                            "            to (l) prefix (margin)",
                                                                            "}",
                                                                            "",
                                                                            "",
                                                                            "type ASTVisitor = {",
                                                                            "    visitIf(o) up(as) -> Boolean",
                                                                            "    visitBlock(o) up(as) -> Boolean",
                                                                            "    visitMatchCase(o) up(as) -> Boolean",
                                                                            "    visitTryCatch(o) up(as) -> Boolean",
                                                                            "    visitMethodType(o) up(as) -> Boolean",
                                                                            "    visitSignaturePart(o) up(as) -> Boolean",
                                                                            "    visitTypeLiteral(o) up(as) -> Boolean",
                                                                            "    visitTypeParameters(o) up(as) -> Boolean",
                                                                            "    visitTypeDec(o) up(as) -> Boolean",
                                                                            "    visitMethod(o) up(as) -> Boolean",
                                                                            "    visitCall(o) up(as) -> Boolean",
                                                                            "    visitObject(o) up(as) -> Boolean",
                                                                            "    visitModule(o) up(as) -> Boolean",
                                                                            "    visitArray(o) up(as) -> Boolean",
                                                                            "    visitMember(o) up(as) -> Boolean",
                                                                            "    visitGeneric(o) up(as) -> Boolean",
                                                                            "    visitIdentifier(o) up(as) -> Boolean",
                                                                            "    visitString(o) up(as) -> Boolean",
                                                                            "    visitNum(o) up(as) -> Boolean",
                                                                            "    visitOp(o) up(as) -> Boolean",
                                                                            "    visitBind(o) up(as) -> Boolean",
                                                                            "    visitDefDec(o) up(as) -> Boolean",
                                                                            "    visitVarDec(o) up(as) -> Boolean",
                                                                            "    visitImport(o) up(as) -> Boolean",
                                                                            "    visitReturn(o) up(as) -> Boolean",
                                                                            "    visitInherits(o) up(as) -> Boolean",
                                                                            "    visitDialect(o) up(as) -> Boolean",
                                                                            "    visitBlank(o) up(as) -> Boolean",
                                                                            "    visitComment(o) up(as) -> Boolean",
                                                                            "    visitImplicit(o) up(as) -> Boolean",
                                                                            "}",
                                                                            "",
                                                                            "class baseVisitor -> ASTVisitor {",
                                                                            "    method visitIf(o) up(as) { visitIf(o) }",
                                                                            "    method visitBlock(o) up(as) { visitBlock(o) }",
                                                                            "    method visitMatchCase(o) up(as) { visitMatchCase(o) }",
                                                                            "    method visitTryCatch(o) up(as) { visitTryCatch(o) }",
                                                                            "    method visitMethodType(o) up(as) { visitMethodType(o) }",
                                                                            "    method visitSignaturePart(o) up(as) { visitSignaturePart(o) }",
                                                                            "    method visitTypeDec(o) up(as) { visitTypeDec(o) }",
                                                                            "    method visitTypeLiteral(o) up(as) { visitTypeLiteral(o) }",
                                                                            "    method visitTypeParameters(o) up(as) { visitTypeParameters(o) }",
                                                                            "    method visitMethod(o) up(as) { visitMethod(o) }",
                                                                            "    method visitCall(o) up(as) { visitCall(o) }",
                                                                            "    method visitObject(o) up(as) { visitObject(o) }",
                                                                            "    method visitModule(o) up(as) { visitObject(o) }",
                                                                            "    method visitArray(o) up(as) { visitArray(o) }",
                                                                            "    method visitMember(o) up(as) { visitMember(o) }",
                                                                            "    method visitGeneric(o) up(as) { visitGeneric(o) }",
                                                                            "    method visitIdentifier(o) up(as) { visitIdentifier(o) }",
                                                                            "    method visitString(o) up(as) { visitString(o) }",
                                                                            "    method visitNum(o) up(as) { visitNum(o) }",
                                                                            "    method visitOp(o) up(as) { visitOp(o) }",
                                                                            "    method visitBind(o) up(as) { visitBind(o) }",
                                                                            "    method visitDefDec(o) up(as) { visitDefDec(o) }",
                                                                            "    method visitVarDec(o) up(as) { visitVarDec(o) }",
                                                                            "    method visitImport(o) up(as) { visitImport(o) }",
                                                                            "    method visitReturn(o) up(as) { visitReturn(o) }",
                                                                            "    method visitInherits(o) up(as) { visitInherits(o) }",
                                                                            "    method visitDialect(o) up(as) { visitDialect(o) }",
                                                                            "    method visitBlank(o) up(as) { visitBlank(o) }",
                                                                            "    method visitComment(o) up(as) { visitComment(o) }",
                                                                            "    method visitImplicit(o) up(as) { visitImplicit(o) }",
                                                                            "",
                                                                            "    method visitIf(o) -> Boolean { true }",
                                                                            "    method visitBlock(o) -> Boolean { true }",
                                                                            "    method visitMatchCase(o) -> Boolean { true }",
                                                                            "    method visitTryCatch(o) -> Boolean { true }",
                                                                            "    method visitMethodType(o) -> Boolean { true }",
                                                                            "    method visitSignaturePart(o) -> Boolean { true }",
                                                                            "    method visitTypeDec(o) -> Boolean { true }",
                                                                            "    method visitTypeLiteral(o) -> Boolean { true }",
                                                                            "    method visitTypeParameters(o) -> Boolean { true }",
                                                                            "    method visitMethod(o) -> Boolean { true }",
                                                                            "    method visitCall(o) -> Boolean { true }",
                                                                            "    method visitObject(o) -> Boolean { true }",
                                                                            "    method visitModule(o) -> Boolean { true }",
                                                                            "    method visitArray(o) -> Boolean { true }",
                                                                            "    method visitMember(o) -> Boolean { true }",
                                                                            "    method visitGeneric(o) -> Boolean { true }",
                                                                            "    method visitIdentifier(o) -> Boolean { true }",
                                                                            "    method visitString(o) -> Boolean { true }",
                                                                            "    method visitNum(o) -> Boolean { true }",
                                                                            "    method visitOp(o) -> Boolean { true }",
                                                                            "    method visitBind(o) -> Boolean { true }",
                                                                            "    method visitDefDec(o) -> Boolean { true }",
                                                                            "    method visitVarDec(o) -> Boolean { true }",
                                                                            "    method visitImport(o) -> Boolean { true }",
                                                                            "    method visitReturn(o) -> Boolean { true }",
                                                                            "    method visitInherits(o) -> Boolean { true }",
                                                                            "    method visitDialect(o) -> Boolean { true }",
                                                                            "    method visitBlank(o) -> Boolean { true }",
                                                                            "    method visitComment(o) -> Boolean { true }",
                                                                            "    method visitImplicit(o) -> Boolean { true }",
                                                                            "",
                                                                            "    method asString { \"an AST visitor\" }",
                                                                            "}",
                                                                            "",
                                                                            "class pluggableVisitor(visitation:Block2) -> ASTVisitor {",
                                                                            "    // Manufactures a default visitor, given a 2-parameter block.",
                                                                            "    // Typically, some of the methods will be overridden.",
                                                                            "    // The block will be applied with the AST node as the first argument",
                                                                            "    // and the ancestor chain as the second, and should answer true if",
                                                                            "    // the visitation is to continue and false if it is to go no deeper.",
                                                                            "",
                                                                            "    method visitIf(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitBlock(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitMatchCase(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitTryCatch(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitMethodType(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitSignaturePart(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitTypeDec(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitTypeLiteral(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitMethod(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitCall(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitObject(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitModule(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitArray(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitMember(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitGeneric(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitIdentifier(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitString(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitNum(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitOp(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitBind(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitDefDec(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitVarDec(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitImport(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitReturn(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitInherits(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitDialect(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitBlank(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitComment(o) up(as) { visitation.apply (o, as) }",
                                                                            "    method visitImplicit(o) up(as) { visitation.apply (o, as) }",
                                                                            "",
                                                                            "    method asString { \"a pluggable AST visitor\" }",
                                                                            "}",
                                                                            "",
                                                                            "",
                                                                            "def patternMarkVisitor = object {",
                                                                            "    inherits baseVisitor",
                                                                            "    method visitCall(c) up(as) {",
                                                                            "        c.isPattern := true",
                                                                            "        true",
                                                                            "    }",
                                                                            "}",
                                                                            "",
                                                                            "method findAnnotation(node, annName) {",
                                                                            "    for (node.annotations) do {ann->",
                                                                            "        if ((ann.kind == \"identifier\") && {",
                                                                            "            ann.value == annName }) then {",
                                                                            "            return object {",
                                                                            "                inherits true",
                                                                            "                def value is public = ann",
                                                                            "            }",
                                                                            "        }",
                                                                            "    }",
                                                                            "    false",
                                                                            "}" ];
                                                                        }
                                                                        if (typeof global !== "undefined")
                                                                          global.gracecode_ast = gracecode_ast;
                                                                        if (typeof window !== "undefined")
                                                                          window.gracecode_ast = gracecode_ast;
